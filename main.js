/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/codegen/code.js
var require_code = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/codegen/code.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
    var _CodeOrName = class {
    };
    exports._CodeOrName = _CodeOrName;
    exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
    var Name = class extends _CodeOrName {
      constructor(s) {
        super();
        if (!exports.IDENTIFIER.test(s))
          throw new Error("CodeGen: name must be a valid identifier");
        this.str = s;
      }
      toString() {
        return this.str;
      }
      emptyStr() {
        return false;
      }
      get names() {
        return { [this.str]: 1 };
      }
    };
    exports.Name = Name;
    var _Code = class extends _CodeOrName {
      constructor(code) {
        super();
        this._items = typeof code === "string" ? [code] : code;
      }
      toString() {
        return this.str;
      }
      emptyStr() {
        if (this._items.length > 1)
          return false;
        const item = this._items[0];
        return item === "" || item === '""';
      }
      get str() {
        var _a;
        return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s, c) => `${s}${c}`, "");
      }
      get names() {
        var _a;
        return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c) => {
          if (c instanceof Name)
            names[c.str] = (names[c.str] || 0) + 1;
          return names;
        }, {});
      }
    };
    exports._Code = _Code;
    exports.nil = new _Code("");
    function _2(strs, ...args) {
      const code = [strs[0]];
      let i = 0;
      while (i < args.length) {
        addCodeArg(code, args[i]);
        code.push(strs[++i]);
      }
      return new _Code(code);
    }
    exports._ = _2;
    var plus = new _Code("+");
    function str(strs, ...args) {
      const expr = [safeStringify(strs[0])];
      let i = 0;
      while (i < args.length) {
        expr.push(plus);
        addCodeArg(expr, args[i]);
        expr.push(plus, safeStringify(strs[++i]));
      }
      optimize(expr);
      return new _Code(expr);
    }
    exports.str = str;
    function addCodeArg(code, arg) {
      if (arg instanceof _Code)
        code.push(...arg._items);
      else if (arg instanceof Name)
        code.push(arg);
      else
        code.push(interpolate(arg));
    }
    exports.addCodeArg = addCodeArg;
    function optimize(expr) {
      let i = 1;
      while (i < expr.length - 1) {
        if (expr[i] === plus) {
          const res = mergeExprItems(expr[i - 1], expr[i + 1]);
          if (res !== void 0) {
            expr.splice(i - 1, 3, res);
            continue;
          }
          expr[i++] = "+";
        }
        i++;
      }
    }
    function mergeExprItems(a, b) {
      if (b === '""')
        return a;
      if (a === '""')
        return b;
      if (typeof a == "string") {
        if (b instanceof Name || a[a.length - 1] !== '"')
          return;
        if (typeof b != "string")
          return `${a.slice(0, -1)}${b}"`;
        if (b[0] === '"')
          return a.slice(0, -1) + b.slice(1);
        return;
      }
      if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
        return `"${a}${b.slice(1)}`;
      return;
    }
    function strConcat(c1, c2) {
      return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;
    }
    exports.strConcat = strConcat;
    function interpolate(x2) {
      return typeof x2 == "number" || typeof x2 == "boolean" || x2 === null ? x2 : safeStringify(Array.isArray(x2) ? x2.join(",") : x2);
    }
    function stringify(x2) {
      return new _Code(safeStringify(x2));
    }
    exports.stringify = stringify;
    function safeStringify(x2) {
      return JSON.stringify(x2).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
    }
    exports.safeStringify = safeStringify;
    function getProperty(key) {
      return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _2`[${key}]`;
    }
    exports.getProperty = getProperty;
    function getEsmExportName(key) {
      if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
        return new _Code(`${key}`);
      }
      throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
    }
    exports.getEsmExportName = getEsmExportName;
    function regexpCode(rx) {
      return new _Code(rx.toString());
    }
    exports.regexpCode = regexpCode;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/codegen/scope.js
var require_scope = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/codegen/scope.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
    var code_1 = require_code();
    var ValueError = class extends Error {
      constructor(name) {
        super(`CodeGen: "code" for ${name} not defined`);
        this.value = name.value;
      }
    };
    var UsedValueState;
    (function(UsedValueState2) {
      UsedValueState2[UsedValueState2["Started"] = 0] = "Started";
      UsedValueState2[UsedValueState2["Completed"] = 1] = "Completed";
    })(UsedValueState || (exports.UsedValueState = UsedValueState = {}));
    exports.varKinds = {
      const: new code_1.Name("const"),
      let: new code_1.Name("let"),
      var: new code_1.Name("var")
    };
    var Scope = class {
      constructor({ prefixes, parent } = {}) {
        this._names = {};
        this._prefixes = prefixes;
        this._parent = parent;
      }
      toName(nameOrPrefix) {
        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
      }
      name(prefix) {
        return new code_1.Name(this._newName(prefix));
      }
      _newName(prefix) {
        const ng = this._names[prefix] || this._nameGroup(prefix);
        return `${prefix}${ng.index++}`;
      }
      _nameGroup(prefix) {
        var _a, _b;
        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {
          throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
        }
        return this._names[prefix] = { prefix, index: 0 };
      }
    };
    exports.Scope = Scope;
    var ValueScopeName = class extends code_1.Name {
      constructor(prefix, nameStr) {
        super(nameStr);
        this.prefix = prefix;
      }
      setValue(value, { property, itemIndex }) {
        this.value = value;
        this.scopePath = (0, code_1._)`.${new code_1.Name(property)}[${itemIndex}]`;
      }
    };
    exports.ValueScopeName = ValueScopeName;
    var line = (0, code_1._)`\n`;
    var ValueScope = class extends Scope {
      constructor(opts) {
        super(opts);
        this._values = {};
        this._scope = opts.scope;
        this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
      }
      get() {
        return this._scope;
      }
      name(prefix) {
        return new ValueScopeName(prefix, this._newName(prefix));
      }
      value(nameOrPrefix, value) {
        var _a;
        if (value.ref === void 0)
          throw new Error("CodeGen: ref must be passed in value");
        const name = this.toName(nameOrPrefix);
        const { prefix } = name;
        const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
        let vs = this._values[prefix];
        if (vs) {
          const _name = vs.get(valueKey);
          if (_name)
            return _name;
        } else {
          vs = this._values[prefix] = /* @__PURE__ */ new Map();
        }
        vs.set(valueKey, name);
        const s = this._scope[prefix] || (this._scope[prefix] = []);
        const itemIndex = s.length;
        s[itemIndex] = value.ref;
        name.setValue(value, { property: prefix, itemIndex });
        return name;
      }
      getValue(prefix, keyOrRef) {
        const vs = this._values[prefix];
        if (!vs)
          return;
        return vs.get(keyOrRef);
      }
      scopeRefs(scopeName, values = this._values) {
        return this._reduceValues(values, (name) => {
          if (name.scopePath === void 0)
            throw new Error(`CodeGen: name "${name}" has no value`);
          return (0, code_1._)`${scopeName}${name.scopePath}`;
        });
      }
      scopeCode(values = this._values, usedValues, getCode) {
        return this._reduceValues(values, (name) => {
          if (name.value === void 0)
            throw new Error(`CodeGen: name "${name}" has no value`);
          return name.value.code;
        }, usedValues, getCode);
      }
      _reduceValues(values, valueCode, usedValues = {}, getCode) {
        let code = code_1.nil;
        for (const prefix in values) {
          const vs = values[prefix];
          if (!vs)
            continue;
          const nameSet = usedValues[prefix] = usedValues[prefix] || /* @__PURE__ */ new Map();
          vs.forEach((name) => {
            if (nameSet.has(name))
              return;
            nameSet.set(name, UsedValueState.Started);
            let c = valueCode(name);
            if (c) {
              const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
              code = (0, code_1._)`${code}${def} ${name} = ${c};${this.opts._n}`;
            } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {
              code = (0, code_1._)`${code}${c}${this.opts._n}`;
            } else {
              throw new ValueError(name);
            }
            nameSet.set(name, UsedValueState.Completed);
          });
        }
        return code;
      }
    };
    exports.ValueScope = ValueScope;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/codegen/index.js
var require_codegen = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/codegen/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
    var code_1 = require_code();
    var scope_1 = require_scope();
    var code_2 = require_code();
    Object.defineProperty(exports, "_", { enumerable: true, get: function() {
      return code_2._;
    } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function() {
      return code_2.str;
    } });
    Object.defineProperty(exports, "strConcat", { enumerable: true, get: function() {
      return code_2.strConcat;
    } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
      return code_2.nil;
    } });
    Object.defineProperty(exports, "getProperty", { enumerable: true, get: function() {
      return code_2.getProperty;
    } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
      return code_2.stringify;
    } });
    Object.defineProperty(exports, "regexpCode", { enumerable: true, get: function() {
      return code_2.regexpCode;
    } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
      return code_2.Name;
    } });
    var scope_2 = require_scope();
    Object.defineProperty(exports, "Scope", { enumerable: true, get: function() {
      return scope_2.Scope;
    } });
    Object.defineProperty(exports, "ValueScope", { enumerable: true, get: function() {
      return scope_2.ValueScope;
    } });
    Object.defineProperty(exports, "ValueScopeName", { enumerable: true, get: function() {
      return scope_2.ValueScopeName;
    } });
    Object.defineProperty(exports, "varKinds", { enumerable: true, get: function() {
      return scope_2.varKinds;
    } });
    exports.operators = {
      GT: new code_1._Code(">"),
      GTE: new code_1._Code(">="),
      LT: new code_1._Code("<"),
      LTE: new code_1._Code("<="),
      EQ: new code_1._Code("==="),
      NEQ: new code_1._Code("!=="),
      NOT: new code_1._Code("!"),
      OR: new code_1._Code("||"),
      AND: new code_1._Code("&&"),
      ADD: new code_1._Code("+")
    };
    var Node = class {
      optimizeNodes() {
        return this;
      }
      optimizeNames(_names, _constants) {
        return this;
      }
    };
    var Def = class extends Node {
      constructor(varKind, name, rhs) {
        super();
        this.varKind = varKind;
        this.name = name;
        this.rhs = rhs;
      }
      render({ es5, _n }) {
        const varKind = es5 ? scope_1.varKinds.var : this.varKind;
        const rhs = this.rhs === void 0 ? "" : ` = ${this.rhs}`;
        return `${varKind} ${this.name}${rhs};` + _n;
      }
      optimizeNames(names, constants) {
        if (!names[this.name.str])
          return;
        if (this.rhs)
          this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
      }
      get names() {
        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
      }
    };
    var Assign = class extends Node {
      constructor(lhs, rhs, sideEffects) {
        super();
        this.lhs = lhs;
        this.rhs = rhs;
        this.sideEffects = sideEffects;
      }
      render({ _n }) {
        return `${this.lhs} = ${this.rhs};` + _n;
      }
      optimizeNames(names, constants) {
        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
          return;
        this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
      }
      get names() {
        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
        return addExprNames(names, this.rhs);
      }
    };
    var AssignOp = class extends Assign {
      constructor(lhs, op, rhs, sideEffects) {
        super(lhs, rhs, sideEffects);
        this.op = op;
      }
      render({ _n }) {
        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
      }
    };
    var Label = class extends Node {
      constructor(label) {
        super();
        this.label = label;
        this.names = {};
      }
      render({ _n }) {
        return `${this.label}:` + _n;
      }
    };
    var Break = class extends Node {
      constructor(label) {
        super();
        this.label = label;
        this.names = {};
      }
      render({ _n }) {
        const label = this.label ? ` ${this.label}` : "";
        return `break${label};` + _n;
      }
    };
    var Throw = class extends Node {
      constructor(error) {
        super();
        this.error = error;
      }
      render({ _n }) {
        return `throw ${this.error};` + _n;
      }
      get names() {
        return this.error.names;
      }
    };
    var AnyCode = class extends Node {
      constructor(code) {
        super();
        this.code = code;
      }
      render({ _n }) {
        return `${this.code};` + _n;
      }
      optimizeNodes() {
        return `${this.code}` ? this : void 0;
      }
      optimizeNames(names, constants) {
        this.code = optimizeExpr(this.code, names, constants);
        return this;
      }
      get names() {
        return this.code instanceof code_1._CodeOrName ? this.code.names : {};
      }
    };
    var ParentNode = class extends Node {
      constructor(nodes = []) {
        super();
        this.nodes = nodes;
      }
      render(opts) {
        return this.nodes.reduce((code, n) => code + n.render(opts), "");
      }
      optimizeNodes() {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
          const n = nodes[i].optimizeNodes();
          if (Array.isArray(n))
            nodes.splice(i, 1, ...n);
          else if (n)
            nodes[i] = n;
          else
            nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : void 0;
      }
      optimizeNames(names, constants) {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
          const n = nodes[i];
          if (n.optimizeNames(names, constants))
            continue;
          subtractNames(names, n.names);
          nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : void 0;
      }
      get names() {
        return this.nodes.reduce((names, n) => addNames(names, n.names), {});
      }
    };
    var BlockNode = class extends ParentNode {
      render(opts) {
        return "{" + opts._n + super.render(opts) + "}" + opts._n;
      }
    };
    var Root = class extends ParentNode {
    };
    var Else = class extends BlockNode {
    };
    Else.kind = "else";
    var If = class extends BlockNode {
      constructor(condition, nodes) {
        super(nodes);
        this.condition = condition;
      }
      render(opts) {
        let code = `if(${this.condition})` + super.render(opts);
        if (this.else)
          code += "else " + this.else.render(opts);
        return code;
      }
      optimizeNodes() {
        super.optimizeNodes();
        const cond = this.condition;
        if (cond === true)
          return this.nodes;
        let e = this.else;
        if (e) {
          const ns = e.optimizeNodes();
          e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
        }
        if (e) {
          if (cond === false)
            return e instanceof If ? e : e.nodes;
          if (this.nodes.length)
            return this;
          return new If(not(cond), e instanceof If ? [e] : e.nodes);
        }
        if (cond === false || !this.nodes.length)
          return void 0;
        return this;
      }
      optimizeNames(names, constants) {
        var _a;
        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        if (!(super.optimizeNames(names, constants) || this.else))
          return;
        this.condition = optimizeExpr(this.condition, names, constants);
        return this;
      }
      get names() {
        const names = super.names;
        addExprNames(names, this.condition);
        if (this.else)
          addNames(names, this.else.names);
        return names;
      }
    };
    If.kind = "if";
    var For = class extends BlockNode {
    };
    For.kind = "for";
    var ForLoop = class extends For {
      constructor(iteration) {
        super();
        this.iteration = iteration;
      }
      render(opts) {
        return `for(${this.iteration})` + super.render(opts);
      }
      optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants))
          return;
        this.iteration = optimizeExpr(this.iteration, names, constants);
        return this;
      }
      get names() {
        return addNames(super.names, this.iteration.names);
      }
    };
    var ForRange = class extends For {
      constructor(varKind, name, from, to) {
        super();
        this.varKind = varKind;
        this.name = name;
        this.from = from;
        this.to = to;
      }
      render(opts) {
        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
        const { name, from, to } = this;
        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
      }
      get names() {
        const names = addExprNames(super.names, this.from);
        return addExprNames(names, this.to);
      }
    };
    var ForIter = class extends For {
      constructor(loop, varKind, name, iterable) {
        super();
        this.loop = loop;
        this.varKind = varKind;
        this.name = name;
        this.iterable = iterable;
      }
      render(opts) {
        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
      }
      optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants))
          return;
        this.iterable = optimizeExpr(this.iterable, names, constants);
        return this;
      }
      get names() {
        return addNames(super.names, this.iterable.names);
      }
    };
    var Func = class extends BlockNode {
      constructor(name, args, async) {
        super();
        this.name = name;
        this.args = args;
        this.async = async;
      }
      render(opts) {
        const _async = this.async ? "async " : "";
        return `${_async}function ${this.name}(${this.args})` + super.render(opts);
      }
    };
    Func.kind = "func";
    var Return = class extends ParentNode {
      render(opts) {
        return "return " + super.render(opts);
      }
    };
    Return.kind = "return";
    var Try = class extends BlockNode {
      render(opts) {
        let code = "try" + super.render(opts);
        if (this.catch)
          code += this.catch.render(opts);
        if (this.finally)
          code += this.finally.render(opts);
        return code;
      }
      optimizeNodes() {
        var _a, _b;
        super.optimizeNodes();
        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
        return this;
      }
      optimizeNames(names, constants) {
        var _a, _b;
        super.optimizeNames(names, constants);
        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
        return this;
      }
      get names() {
        const names = super.names;
        if (this.catch)
          addNames(names, this.catch.names);
        if (this.finally)
          addNames(names, this.finally.names);
        return names;
      }
    };
    var Catch = class extends BlockNode {
      constructor(error) {
        super();
        this.error = error;
      }
      render(opts) {
        return `catch(${this.error})` + super.render(opts);
      }
    };
    Catch.kind = "catch";
    var Finally = class extends BlockNode {
      render(opts) {
        return "finally" + super.render(opts);
      }
    };
    Finally.kind = "finally";
    var CodeGen = class {
      constructor(extScope, opts = {}) {
        this._values = {};
        this._blockStarts = [];
        this._constants = {};
        this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
        this._extScope = extScope;
        this._scope = new scope_1.Scope({ parent: extScope });
        this._nodes = [new Root()];
      }
      toString() {
        return this._root.render(this.opts);
      }
      // returns unique name in the internal scope
      name(prefix) {
        return this._scope.name(prefix);
      }
      // reserves unique name in the external scope
      scopeName(prefix) {
        return this._extScope.name(prefix);
      }
      // reserves unique name in the external scope and assigns value to it
      scopeValue(prefixOrName, value) {
        const name = this._extScope.value(prefixOrName, value);
        const vs = this._values[name.prefix] || (this._values[name.prefix] = /* @__PURE__ */ new Set());
        vs.add(name);
        return name;
      }
      getScopeValue(prefix, keyOrRef) {
        return this._extScope.getValue(prefix, keyOrRef);
      }
      // return code that assigns values in the external scope to the names that are used internally
      // (same names that were returned by gen.scopeName or gen.scopeValue)
      scopeRefs(scopeName) {
        return this._extScope.scopeRefs(scopeName, this._values);
      }
      scopeCode() {
        return this._extScope.scopeCode(this._values);
      }
      _def(varKind, nameOrPrefix, rhs, constant) {
        const name = this._scope.toName(nameOrPrefix);
        if (rhs !== void 0 && constant)
          this._constants[name.str] = rhs;
        this._leafNode(new Def(varKind, name, rhs));
        return name;
      }
      // `const` declaration (`var` in es5 mode)
      const(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
      }
      // `let` declaration with optional assignment (`var` in es5 mode)
      let(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
      }
      // `var` declaration with optional assignment
      var(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
      }
      // assignment code
      assign(lhs, rhs, sideEffects) {
        return this._leafNode(new Assign(lhs, rhs, sideEffects));
      }
      // `+=` code
      add(lhs, rhs) {
        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
      }
      // appends passed SafeExpr to code or executes Block
      code(c) {
        if (typeof c == "function")
          c();
        else if (c !== code_1.nil)
          this._leafNode(new AnyCode(c));
        return this;
      }
      // returns code for object literal for the passed argument list of key-value pairs
      object(...keyValues) {
        const code = ["{"];
        for (const [key, value] of keyValues) {
          if (code.length > 1)
            code.push(",");
          code.push(key);
          if (key !== value || this.opts.es5) {
            code.push(":");
            (0, code_1.addCodeArg)(code, value);
          }
        }
        code.push("}");
        return new code_1._Code(code);
      }
      // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
      if(condition, thenBody, elseBody) {
        this._blockNode(new If(condition));
        if (thenBody && elseBody) {
          this.code(thenBody).else().code(elseBody).endIf();
        } else if (thenBody) {
          this.code(thenBody).endIf();
        } else if (elseBody) {
          throw new Error('CodeGen: "else" body without "then" body');
        }
        return this;
      }
      // `else if` clause - invalid without `if` or after `else` clauses
      elseIf(condition) {
        return this._elseNode(new If(condition));
      }
      // `else` clause - only valid after `if` or `else if` clauses
      else() {
        return this._elseNode(new Else());
      }
      // end `if` statement (needed if gen.if was used only with condition)
      endIf() {
        return this._endBlockNode(If, Else);
      }
      _for(node, forBody) {
        this._blockNode(node);
        if (forBody)
          this.code(forBody).endFor();
        return this;
      }
      // a generic `for` clause (or statement if `forBody` is passed)
      for(iteration, forBody) {
        return this._for(new ForLoop(iteration), forBody);
      }
      // `for` statement for a range of values
      forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
      }
      // `for-of` statement (in es5 mode replace with a normal for loop)
      forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
        const name = this._scope.toName(nameOrPrefix);
        if (this.opts.es5) {
          const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
          return this.forRange("_i", 0, (0, code_1._)`${arr}.length`, (i) => {
            this.var(name, (0, code_1._)`${arr}[${i}]`);
            forBody(name);
          });
        }
        return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
      }
      // `for-in` statement.
      // With option `ownProperties` replaced with a `for-of` loop for object keys
      forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
        if (this.opts.ownProperties) {
          return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);
        }
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
      }
      // end `for` loop
      endFor() {
        return this._endBlockNode(For);
      }
      // `label` statement
      label(label) {
        return this._leafNode(new Label(label));
      }
      // `break` statement
      break(label) {
        return this._leafNode(new Break(label));
      }
      // `return` statement
      return(value) {
        const node = new Return();
        this._blockNode(node);
        this.code(value);
        if (node.nodes.length !== 1)
          throw new Error('CodeGen: "return" should have one node');
        return this._endBlockNode(Return);
      }
      // `try` statement
      try(tryBody, catchCode, finallyCode) {
        if (!catchCode && !finallyCode)
          throw new Error('CodeGen: "try" without "catch" and "finally"');
        const node = new Try();
        this._blockNode(node);
        this.code(tryBody);
        if (catchCode) {
          const error = this.name("e");
          this._currNode = node.catch = new Catch(error);
          catchCode(error);
        }
        if (finallyCode) {
          this._currNode = node.finally = new Finally();
          this.code(finallyCode);
        }
        return this._endBlockNode(Catch, Finally);
      }
      // `throw` statement
      throw(error) {
        return this._leafNode(new Throw(error));
      }
      // start self-balancing block
      block(body, nodeCount) {
        this._blockStarts.push(this._nodes.length);
        if (body)
          this.code(body).endBlock(nodeCount);
        return this;
      }
      // end the current self-balancing block
      endBlock(nodeCount) {
        const len = this._blockStarts.pop();
        if (len === void 0)
          throw new Error("CodeGen: not in self-balancing block");
        const toClose = this._nodes.length - len;
        if (toClose < 0 || nodeCount !== void 0 && toClose !== nodeCount) {
          throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
        }
        this._nodes.length = len;
        return this;
      }
      // `function` heading (or definition if funcBody is passed)
      func(name, args = code_1.nil, async, funcBody) {
        this._blockNode(new Func(name, args, async));
        if (funcBody)
          this.code(funcBody).endFunc();
        return this;
      }
      // end function definition
      endFunc() {
        return this._endBlockNode(Func);
      }
      optimize(n = 1) {
        while (n-- > 0) {
          this._root.optimizeNodes();
          this._root.optimizeNames(this._root.names, this._constants);
        }
      }
      _leafNode(node) {
        this._currNode.nodes.push(node);
        return this;
      }
      _blockNode(node) {
        this._currNode.nodes.push(node);
        this._nodes.push(node);
      }
      _endBlockNode(N1, N2) {
        const n = this._currNode;
        if (n instanceof N1 || N2 && n instanceof N2) {
          this._nodes.pop();
          return this;
        }
        throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
      }
      _elseNode(node) {
        const n = this._currNode;
        if (!(n instanceof If)) {
          throw new Error('CodeGen: "else" without "if"');
        }
        this._currNode = n.else = node;
        return this;
      }
      get _root() {
        return this._nodes[0];
      }
      get _currNode() {
        const ns = this._nodes;
        return ns[ns.length - 1];
      }
      set _currNode(node) {
        const ns = this._nodes;
        ns[ns.length - 1] = node;
      }
    };
    exports.CodeGen = CodeGen;
    function addNames(names, from) {
      for (const n in from)
        names[n] = (names[n] || 0) + (from[n] || 0);
      return names;
    }
    function addExprNames(names, from) {
      return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
    }
    function optimizeExpr(expr, names, constants) {
      if (expr instanceof code_1.Name)
        return replaceName(expr);
      if (!canOptimize(expr))
        return expr;
      return new code_1._Code(expr._items.reduce((items, c) => {
        if (c instanceof code_1.Name)
          c = replaceName(c);
        if (c instanceof code_1._Code)
          items.push(...c._items);
        else
          items.push(c);
        return items;
      }, []));
      function replaceName(n) {
        const c = constants[n.str];
        if (c === void 0 || names[n.str] !== 1)
          return n;
        delete names[n.str];
        return c;
      }
      function canOptimize(e) {
        return e instanceof code_1._Code && e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== void 0);
      }
    }
    function subtractNames(names, from) {
      for (const n in from)
        names[n] = (names[n] || 0) - (from[n] || 0);
    }
    function not(x2) {
      return typeof x2 == "boolean" || typeof x2 == "number" || x2 === null ? !x2 : (0, code_1._)`!${par(x2)}`;
    }
    exports.not = not;
    var andCode = mappend(exports.operators.AND);
    function and(...args) {
      return args.reduce(andCode);
    }
    exports.and = and;
    var orCode = mappend(exports.operators.OR);
    function or(...args) {
      return args.reduce(orCode);
    }
    exports.or = or;
    function mappend(op) {
      return (x2, y2) => x2 === code_1.nil ? y2 : y2 === code_1.nil ? x2 : (0, code_1._)`${par(x2)} ${op} ${par(y2)}`;
    }
    function par(x2) {
      return x2 instanceof code_1.Name ? x2 : (0, code_1._)`(${x2})`;
    }
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/util.js
var require_util = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
    var codegen_1 = require_codegen();
    var code_1 = require_code();
    function toHash(arr) {
      const hash = {};
      for (const item of arr)
        hash[item] = true;
      return hash;
    }
    exports.toHash = toHash;
    function alwaysValidSchema(it, schema) {
      if (typeof schema == "boolean")
        return schema;
      if (Object.keys(schema).length === 0)
        return true;
      checkUnknownRules(it, schema);
      return !schemaHasRules(schema, it.self.RULES.all);
    }
    exports.alwaysValidSchema = alwaysValidSchema;
    function checkUnknownRules(it, schema = it.schema) {
      const { opts, self: self2 } = it;
      if (!opts.strictSchema)
        return;
      if (typeof schema === "boolean")
        return;
      const rules = self2.RULES.keywords;
      for (const key in schema) {
        if (!rules[key])
          checkStrictMode(it, `unknown keyword: "${key}"`);
      }
    }
    exports.checkUnknownRules = checkUnknownRules;
    function schemaHasRules(schema, rules) {
      if (typeof schema == "boolean")
        return !schema;
      for (const key in schema)
        if (rules[key])
          return true;
      return false;
    }
    exports.schemaHasRules = schemaHasRules;
    function schemaHasRulesButRef(schema, RULES) {
      if (typeof schema == "boolean")
        return !schema;
      for (const key in schema)
        if (key !== "$ref" && RULES.all[key])
          return true;
      return false;
    }
    exports.schemaHasRulesButRef = schemaHasRulesButRef;
    function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
      if (!$data) {
        if (typeof schema == "number" || typeof schema == "boolean")
          return schema;
        if (typeof schema == "string")
          return (0, codegen_1._)`${schema}`;
      }
      return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
    }
    exports.schemaRefOrVal = schemaRefOrVal;
    function unescapeFragment(str) {
      return unescapeJsonPointer(decodeURIComponent(str));
    }
    exports.unescapeFragment = unescapeFragment;
    function escapeFragment(str) {
      return encodeURIComponent(escapeJsonPointer(str));
    }
    exports.escapeFragment = escapeFragment;
    function escapeJsonPointer(str) {
      if (typeof str == "number")
        return `${str}`;
      return str.replace(/~/g, "~0").replace(/\//g, "~1");
    }
    exports.escapeJsonPointer = escapeJsonPointer;
    function unescapeJsonPointer(str) {
      return str.replace(/~1/g, "/").replace(/~0/g, "~");
    }
    exports.unescapeJsonPointer = unescapeJsonPointer;
    function eachItem(xs, f) {
      if (Array.isArray(xs)) {
        for (const x2 of xs)
          f(x2);
      } else {
        f(xs);
      }
    }
    exports.eachItem = eachItem;
    function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName }) {
      return (gen, from, to, toName) => {
        const res = to === void 0 ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);
        return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
      };
    }
    exports.mergeEvaluated = {
      props: makeMergeEvaluated({
        mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => {
          gen.if((0, codegen_1._)`${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from})`));
        }),
        mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => {
          if (from === true) {
            gen.assign(to, true);
          } else {
            gen.assign(to, (0, codegen_1._)`${to} || {}`);
            setEvaluated(gen, to, from);
          }
        }),
        mergeValues: (from, to) => from === true ? true : { ...from, ...to },
        resultToName: evaluatedPropsToName
      }),
      items: makeMergeEvaluated({
        mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._)`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
        mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._)`${to} > ${from} ? ${to} : ${from}`)),
        mergeValues: (from, to) => from === true ? true : Math.max(from, to),
        resultToName: (gen, items) => gen.var("items", items)
      })
    };
    function evaluatedPropsToName(gen, ps) {
      if (ps === true)
        return gen.var("props", true);
      const props = gen.var("props", (0, codegen_1._)`{}`);
      if (ps !== void 0)
        setEvaluated(gen, props, ps);
      return props;
    }
    exports.evaluatedPropsToName = evaluatedPropsToName;
    function setEvaluated(gen, props, ps) {
      Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`, true));
    }
    exports.setEvaluated = setEvaluated;
    var snippets = {};
    function useFunc(gen, f) {
      return gen.scopeValue("func", {
        ref: f,
        code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code))
      });
    }
    exports.useFunc = useFunc;
    var Type;
    (function(Type2) {
      Type2[Type2["Num"] = 0] = "Num";
      Type2[Type2["Str"] = 1] = "Str";
    })(Type || (exports.Type = Type = {}));
    function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
      if (dataProp instanceof codegen_1.Name) {
        const isNumber = dataPropType === Type.Num;
        return jsPropertySyntax ? isNumber ? (0, codegen_1._)`"[" + ${dataProp} + "]"` : (0, codegen_1._)`"['" + ${dataProp} + "']"` : isNumber ? (0, codegen_1._)`"/" + ${dataProp}` : (0, codegen_1._)`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`;
      }
      return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
    }
    exports.getErrorPath = getErrorPath;
    function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
      if (!mode)
        return;
      msg = `strict mode: ${msg}`;
      if (mode === true)
        throw new Error(msg);
      it.self.logger.warn(msg);
    }
    exports.checkStrictMode = checkStrictMode;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/names.js
var require_names = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/names.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var names = {
      // validation function arguments
      data: new codegen_1.Name("data"),
      // data passed to validation function
      // args passed from referencing schema
      valCxt: new codegen_1.Name("valCxt"),
      // validation/data context - should not be used directly, it is destructured to the names below
      instancePath: new codegen_1.Name("instancePath"),
      parentData: new codegen_1.Name("parentData"),
      parentDataProperty: new codegen_1.Name("parentDataProperty"),
      rootData: new codegen_1.Name("rootData"),
      // root data - same as the data passed to the first/top validation function
      dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
      // used to support recursiveRef and dynamicRef
      // function scoped variables
      vErrors: new codegen_1.Name("vErrors"),
      // null or array of validation errors
      errors: new codegen_1.Name("errors"),
      // counter of validation errors
      this: new codegen_1.Name("this"),
      // "globals"
      self: new codegen_1.Name("self"),
      scope: new codegen_1.Name("scope"),
      // JTD serialize/parse name for JSON string and position
      json: new codegen_1.Name("json"),
      jsonPos: new codegen_1.Name("jsonPos"),
      jsonLen: new codegen_1.Name("jsonLen"),
      jsonPart: new codegen_1.Name("jsonPart")
    };
    exports.default = names;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/errors.js
var require_errors = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var names_1 = require_names();
    exports.keywordError = {
      message: ({ keyword }) => (0, codegen_1.str)`must pass "${keyword}" keyword validation`
    };
    exports.keyword$DataError = {
      message: ({ keyword, schemaType }) => schemaType ? (0, codegen_1.str)`"${keyword}" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`"${keyword}" keyword is invalid ($data)`
    };
    function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
      const { it } = cxt;
      const { gen, compositeRule, allErrors } = it;
      const errObj = errorObjectCode(cxt, error, errorPaths);
      if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {
        addError(gen, errObj);
      } else {
        returnErrors(it, (0, codegen_1._)`[${errObj}]`);
      }
    }
    exports.reportError = reportError;
    function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
      const { it } = cxt;
      const { gen, compositeRule, allErrors } = it;
      const errObj = errorObjectCode(cxt, error, errorPaths);
      addError(gen, errObj);
      if (!(compositeRule || allErrors)) {
        returnErrors(it, names_1.default.vErrors);
      }
    }
    exports.reportExtraError = reportExtraError;
    function resetErrorsCount(gen, errsCount) {
      gen.assign(names_1.default.errors, errsCount);
      gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
    }
    exports.resetErrorsCount = resetErrorsCount;
    function extendErrors({ gen, keyword, schemaValue, data, errsCount, it }) {
      if (errsCount === void 0)
        throw new Error("ajv implementation error");
      const err = gen.name("err");
      gen.forRange("i", errsCount, names_1.default.errors, (i) => {
        gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i}]`);
        gen.if((0, codegen_1._)`${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
        gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);
        if (it.opts.verbose) {
          gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);
          gen.assign((0, codegen_1._)`${err}.data`, data);
        }
      });
    }
    exports.extendErrors = extendErrors;
    function addError(gen, errObj) {
      const err = gen.const("err", errObj);
      gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);
      gen.code((0, codegen_1._)`${names_1.default.errors}++`);
    }
    function returnErrors(it, errs) {
      const { gen, validateName, schemaEnv } = it;
      if (schemaEnv.$async) {
        gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);
      } else {
        gen.assign((0, codegen_1._)`${validateName}.errors`, errs);
        gen.return(false);
      }
    }
    var E2 = {
      keyword: new codegen_1.Name("keyword"),
      schemaPath: new codegen_1.Name("schemaPath"),
      // also used in JTD errors
      params: new codegen_1.Name("params"),
      propertyName: new codegen_1.Name("propertyName"),
      message: new codegen_1.Name("message"),
      schema: new codegen_1.Name("schema"),
      parentSchema: new codegen_1.Name("parentSchema")
    };
    function errorObjectCode(cxt, error, errorPaths) {
      const { createErrors } = cxt.it;
      if (createErrors === false)
        return (0, codegen_1._)`{}`;
      return errorObject(cxt, error, errorPaths);
    }
    function errorObject(cxt, error, errorPaths = {}) {
      const { gen, it } = cxt;
      const keyValues = [
        errorInstancePath(it, errorPaths),
        errorSchemaPath(cxt, errorPaths)
      ];
      extraErrorProps(cxt, error, keyValues);
      return gen.object(...keyValues);
    }
    function errorInstancePath({ errorPath }, { instancePath }) {
      const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;
      return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
    }
    function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
      let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;
      if (schemaPath) {
        schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
      }
      return [E2.schemaPath, schPath];
    }
    function extraErrorProps(cxt, { params, message }, keyValues) {
      const { keyword, data, schemaValue, it } = cxt;
      const { opts, propertyName, topSchemaRef, schemaPath } = it;
      keyValues.push([E2.keyword, keyword], [E2.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._)`{}`]);
      if (opts.messages) {
        keyValues.push([E2.message, typeof message == "function" ? message(cxt) : message]);
      }
      if (opts.verbose) {
        keyValues.push([E2.schema, schemaValue], [E2.parentSchema, (0, codegen_1._)`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
      }
      if (propertyName)
        keyValues.push([E2.propertyName, propertyName]);
    }
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/boolSchema.js
var require_boolSchema = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/boolSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;
    var errors_1 = require_errors();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var boolError = {
      message: "boolean schema is false"
    };
    function topBoolOrEmptySchema(it) {
      const { gen, schema, validateName } = it;
      if (schema === false) {
        falseSchemaError(it, false);
      } else if (typeof schema == "object" && schema.$async === true) {
        gen.return(names_1.default.data);
      } else {
        gen.assign((0, codegen_1._)`${validateName}.errors`, null);
        gen.return(true);
      }
    }
    exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
    function boolOrEmptySchema(it, valid) {
      const { gen, schema } = it;
      if (schema === false) {
        gen.var(valid, false);
        falseSchemaError(it);
      } else {
        gen.var(valid, true);
      }
    }
    exports.boolOrEmptySchema = boolOrEmptySchema;
    function falseSchemaError(it, overrideAllErrors) {
      const { gen, data } = it;
      const cxt = {
        gen,
        keyword: "false schema",
        data,
        schema: false,
        schemaCode: false,
        schemaValue: false,
        params: {},
        it
      };
      (0, errors_1.reportError)(cxt, boolError, void 0, overrideAllErrors);
    }
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/rules.js
var require_rules = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/rules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRules = exports.isJSONType = void 0;
    var _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
    var jsonTypes = new Set(_jsonTypes);
    function isJSONType(x2) {
      return typeof x2 == "string" && jsonTypes.has(x2);
    }
    exports.isJSONType = isJSONType;
    function getRules() {
      const groups = {
        number: { type: "number", rules: [] },
        string: { type: "string", rules: [] },
        array: { type: "array", rules: [] },
        object: { type: "object", rules: [] }
      };
      return {
        types: { ...groups, integer: true, boolean: true, null: true },
        rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
        post: { rules: [] },
        all: {},
        keywords: {}
      };
    }
    exports.getRules = getRules;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/applicability.js
var require_applicability = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/applicability.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;
    function schemaHasRulesForType({ schema, self: self2 }, type) {
      const group = self2.RULES.types[type];
      return group && group !== true && shouldUseGroup(schema, group);
    }
    exports.schemaHasRulesForType = schemaHasRulesForType;
    function shouldUseGroup(schema, group) {
      return group.rules.some((rule) => shouldUseRule(schema, rule));
    }
    exports.shouldUseGroup = shouldUseGroup;
    function shouldUseRule(schema, rule) {
      var _a;
      return schema[rule.keyword] !== void 0 || ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== void 0));
    }
    exports.shouldUseRule = shouldUseRule;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/dataType.js
var require_dataType = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/dataType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
    var rules_1 = require_rules();
    var applicability_1 = require_applicability();
    var errors_1 = require_errors();
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var DataType;
    (function(DataType2) {
      DataType2[DataType2["Correct"] = 0] = "Correct";
      DataType2[DataType2["Wrong"] = 1] = "Wrong";
    })(DataType || (exports.DataType = DataType = {}));
    function getSchemaTypes(schema) {
      const types = getJSONTypes(schema.type);
      const hasNull = types.includes("null");
      if (hasNull) {
        if (schema.nullable === false)
          throw new Error("type: null contradicts nullable: false");
      } else {
        if (!types.length && schema.nullable !== void 0) {
          throw new Error('"nullable" cannot be used without "type"');
        }
        if (schema.nullable === true)
          types.push("null");
      }
      return types;
    }
    exports.getSchemaTypes = getSchemaTypes;
    function getJSONTypes(ts) {
      const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
      if (types.every(rules_1.isJSONType))
        return types;
      throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
    }
    exports.getJSONTypes = getJSONTypes;
    function coerceAndCheckDataType(it, types) {
      const { gen, data, opts } = it;
      const coerceTo = coerceToTypes(types, opts.coerceTypes);
      const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
      if (checkTypes) {
        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
        gen.if(wrongType, () => {
          if (coerceTo.length)
            coerceData(it, types, coerceTo);
          else
            reportTypeError(it);
        });
      }
      return checkTypes;
    }
    exports.coerceAndCheckDataType = coerceAndCheckDataType;
    var COERCIBLE = /* @__PURE__ */ new Set(["string", "number", "integer", "boolean", "null"]);
    function coerceToTypes(types, coerceTypes) {
      return coerceTypes ? types.filter((t) => COERCIBLE.has(t) || coerceTypes === "array" && t === "array") : [];
    }
    function coerceData(it, types, coerceTo) {
      const { gen, data, opts } = it;
      const dataType = gen.let("dataType", (0, codegen_1._)`typeof ${data}`);
      const coerced = gen.let("coerced", (0, codegen_1._)`undefined`);
      if (opts.coerceTypes === "array") {
        gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
      }
      gen.if((0, codegen_1._)`${coerced} !== undefined`);
      for (const t of coerceTo) {
        if (COERCIBLE.has(t) || t === "array" && opts.coerceTypes === "array") {
          coerceSpecificType(t);
        }
      }
      gen.else();
      reportTypeError(it);
      gen.endIf();
      gen.if((0, codegen_1._)`${coerced} !== undefined`, () => {
        gen.assign(data, coerced);
        assignParentData(it, coerced);
      });
      function coerceSpecificType(t) {
        switch (t) {
          case "string":
            gen.elseIf((0, codegen_1._)`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced, (0, codegen_1._)`"" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`""`);
            return;
          case "number":
            gen.elseIf((0, codegen_1._)`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);
            return;
          case "integer":
            gen.elseIf((0, codegen_1._)`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);
            return;
          case "boolean":
            gen.elseIf((0, codegen_1._)`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === "true" || ${data} === 1`).assign(coerced, true);
            return;
          case "null":
            gen.elseIf((0, codegen_1._)`${data} === "" || ${data} === 0 || ${data} === false`);
            gen.assign(coerced, null);
            return;
          case "array":
            gen.elseIf((0, codegen_1._)`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);
        }
      }
    }
    function assignParentData({ gen, parentData, parentDataProperty }, expr) {
      gen.if((0, codegen_1._)`${parentData} !== undefined`, () => gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));
    }
    function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
      const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
      let cond;
      switch (dataType) {
        case "null":
          return (0, codegen_1._)`${data} ${EQ} null`;
        case "array":
          cond = (0, codegen_1._)`Array.isArray(${data})`;
          break;
        case "object":
          cond = (0, codegen_1._)`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
          break;
        case "integer":
          cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);
          break;
        case "number":
          cond = numCond();
          break;
        default:
          return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;
      }
      return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
      function numCond(_cond = codegen_1.nil) {
        return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);
      }
    }
    exports.checkDataType = checkDataType;
    function checkDataTypes(dataTypes, data, strictNums, correct) {
      if (dataTypes.length === 1) {
        return checkDataType(dataTypes[0], data, strictNums, correct);
      }
      let cond;
      const types = (0, util_1.toHash)(dataTypes);
      if (types.array && types.object) {
        const notObj = (0, codegen_1._)`typeof ${data} != "object"`;
        cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;
        delete types.null;
        delete types.array;
        delete types.object;
      } else {
        cond = codegen_1.nil;
      }
      if (types.number)
        delete types.integer;
      for (const t in types)
        cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
      return cond;
    }
    exports.checkDataTypes = checkDataTypes;
    var typeError = {
      message: ({ schema }) => `must be ${schema}`,
      params: ({ schema, schemaValue }) => typeof schema == "string" ? (0, codegen_1._)`{type: ${schema}}` : (0, codegen_1._)`{type: ${schemaValue}}`
    };
    function reportTypeError(it) {
      const cxt = getTypeErrorContext(it);
      (0, errors_1.reportError)(cxt, typeError);
    }
    exports.reportTypeError = reportTypeError;
    function getTypeErrorContext(it) {
      const { gen, data, schema } = it;
      const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
      return {
        gen,
        keyword: "type",
        data,
        schema: schema.type,
        schemaCode,
        schemaValue: schemaCode,
        parentSchema: schema,
        params: {},
        it
      };
    }
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/defaults.js
var require_defaults = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/defaults.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assignDefaults = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    function assignDefaults(it, ty) {
      const { properties, items } = it.schema;
      if (ty === "object" && properties) {
        for (const key in properties) {
          assignDefault(it, key, properties[key].default);
        }
      } else if (ty === "array" && Array.isArray(items)) {
        items.forEach((sch, i) => assignDefault(it, i, sch.default));
      }
    }
    exports.assignDefaults = assignDefaults;
    function assignDefault(it, prop, defaultValue) {
      const { gen, compositeRule, data, opts } = it;
      if (defaultValue === void 0)
        return;
      const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;
      if (compositeRule) {
        (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
        return;
      }
      let condition = (0, codegen_1._)`${childData} === undefined`;
      if (opts.useDefaults === "empty") {
        condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === ""`;
      }
      gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
    }
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/code.js
var require_code2 = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/code.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var names_1 = require_names();
    var util_2 = require_util();
    function checkReportMissingProp(cxt, prop) {
      const { gen, data, it } = cxt;
      gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
        cxt.setParams({ missingProperty: (0, codegen_1._)`${prop}` }, true);
        cxt.error();
      });
    }
    exports.checkReportMissingProp = checkReportMissingProp;
    function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
      return (0, codegen_1.or)(...properties.map((prop) => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)`${missing} = ${prop}`)));
    }
    exports.checkMissingProp = checkMissingProp;
    function reportMissingProp(cxt, missing) {
      cxt.setParams({ missingProperty: missing }, true);
      cxt.error();
    }
    exports.reportMissingProp = reportMissingProp;
    function hasPropFunc(gen) {
      return gen.scopeValue("func", {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ref: Object.prototype.hasOwnProperty,
        code: (0, codegen_1._)`Object.prototype.hasOwnProperty`
      });
    }
    exports.hasPropFunc = hasPropFunc;
    function isOwnProperty(gen, data, property) {
      return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property})`;
    }
    exports.isOwnProperty = isOwnProperty;
    function propertyInData(gen, data, property, ownProperties) {
      const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
      return ownProperties ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property)}` : cond;
    }
    exports.propertyInData = propertyInData;
    function noPropertyInData(gen, data, property, ownProperties) {
      const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} === undefined`;
      return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
    }
    exports.noPropertyInData = noPropertyInData;
    function allSchemaProperties(schemaMap) {
      return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
    }
    exports.allSchemaProperties = allSchemaProperties;
    function schemaProperties(it, schemaMap) {
      return allSchemaProperties(schemaMap).filter((p) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
    }
    exports.schemaProperties = schemaProperties;
    function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
      const dataAndSchema = passSchema ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
      const valCxt = [
        [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)],
        [names_1.default.parentData, it.parentData],
        [names_1.default.parentDataProperty, it.parentDataProperty],
        [names_1.default.rootData, names_1.default.rootData]
      ];
      if (it.opts.dynamicRef)
        valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
      const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;
      return context !== codegen_1.nil ? (0, codegen_1._)`${func}.call(${context}, ${args})` : (0, codegen_1._)`${func}(${args})`;
    }
    exports.callValidateCode = callValidateCode;
    var newRegExp = (0, codegen_1._)`new RegExp`;
    function usePattern({ gen, it: { opts } }, pattern) {
      const u = opts.unicodeRegExp ? "u" : "";
      const { regExp } = opts.code;
      const rx = regExp(pattern, u);
      return gen.scopeValue("pattern", {
        key: rx.toString(),
        ref: rx,
        code: (0, codegen_1._)`${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`
      });
    }
    exports.usePattern = usePattern;
    function validateArray(cxt) {
      const { gen, data, keyword, it } = cxt;
      const valid = gen.name("valid");
      if (it.allErrors) {
        const validArr = gen.let("valid", true);
        validateItems(() => gen.assign(validArr, false));
        return validArr;
      }
      gen.var(valid, true);
      validateItems(() => gen.break());
      return valid;
      function validateItems(notValid) {
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        gen.forRange("i", 0, len, (i) => {
          cxt.subschema({
            keyword,
            dataProp: i,
            dataPropType: util_1.Type.Num
          }, valid);
          gen.if((0, codegen_1.not)(valid), notValid);
        });
      }
    }
    exports.validateArray = validateArray;
    function validateUnion(cxt) {
      const { gen, schema, keyword, it } = cxt;
      if (!Array.isArray(schema))
        throw new Error("ajv implementation error");
      const alwaysValid = schema.some((sch) => (0, util_1.alwaysValidSchema)(it, sch));
      if (alwaysValid && !it.opts.unevaluated)
        return;
      const valid = gen.let("valid", false);
      const schValid = gen.name("_valid");
      gen.block(() => schema.forEach((_sch, i) => {
        const schCxt = cxt.subschema({
          keyword,
          schemaProp: i,
          compositeRule: true
        }, schValid);
        gen.assign(valid, (0, codegen_1._)`${valid} || ${schValid}`);
        const merged = cxt.mergeValidEvaluated(schCxt, schValid);
        if (!merged)
          gen.if((0, codegen_1.not)(valid));
      }));
      cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
    }
    exports.validateUnion = validateUnion;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/keyword.js
var require_keyword = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/keyword.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = void 0;
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var code_1 = require_code2();
    var errors_1 = require_errors();
    function macroKeywordCode(cxt, def) {
      const { gen, keyword, schema, parentSchema, it } = cxt;
      const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
      const schemaRef = useKeyword(gen, keyword, macroSchema);
      if (it.opts.validateSchema !== false)
        it.self.validateSchema(macroSchema, true);
      const valid = gen.name("valid");
      cxt.subschema({
        schema: macroSchema,
        schemaPath: codegen_1.nil,
        errSchemaPath: `${it.errSchemaPath}/${keyword}`,
        topSchemaRef: schemaRef,
        compositeRule: true
      }, valid);
      cxt.pass(valid, () => cxt.error(true));
    }
    exports.macroKeywordCode = macroKeywordCode;
    function funcKeywordCode(cxt, def) {
      var _a;
      const { gen, keyword, schema, parentSchema, $data, it } = cxt;
      checkAsyncKeyword(it, def);
      const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
      const validateRef = useKeyword(gen, keyword, validate);
      const valid = gen.let("valid");
      cxt.block$data(valid, validateKeyword);
      cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
      function validateKeyword() {
        if (def.errors === false) {
          assignValid();
          if (def.modifying)
            modifyData(cxt);
          reportErrs(() => cxt.error());
        } else {
          const ruleErrs = def.async ? validateAsync() : validateSync();
          if (def.modifying)
            modifyData(cxt);
          reportErrs(() => addErrs(cxt, ruleErrs));
        }
      }
      function validateAsync() {
        const ruleErrs = gen.let("ruleErrs", null);
        gen.try(() => assignValid((0, codegen_1._)`await `), (e) => gen.assign(valid, false).if((0, codegen_1._)`${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._)`${e}.errors`), () => gen.throw(e)));
        return ruleErrs;
      }
      function validateSync() {
        const validateErrs = (0, codegen_1._)`${validateRef}.errors`;
        gen.assign(validateErrs, null);
        assignValid(codegen_1.nil);
        return validateErrs;
      }
      function assignValid(_await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil) {
        const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
        const passSchema = !("compile" in def && !$data || def.schema === false);
        gen.assign(valid, (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
      }
      function reportErrs(errors) {
        var _a2;
        gen.if((0, codegen_1.not)((_a2 = def.valid) !== null && _a2 !== void 0 ? _a2 : valid), errors);
      }
    }
    exports.funcKeywordCode = funcKeywordCode;
    function modifyData(cxt) {
      const { gen, data, it } = cxt;
      gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`));
    }
    function addErrs(cxt, errs) {
      const { gen } = cxt;
      gen.if((0, codegen_1._)`Array.isArray(${errs})`, () => {
        gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
        (0, errors_1.extendErrors)(cxt);
      }, () => cxt.error());
    }
    function checkAsyncKeyword({ schemaEnv }, def) {
      if (def.async && !schemaEnv.$async)
        throw new Error("async keyword in sync schema");
    }
    function useKeyword(gen, keyword, result) {
      if (result === void 0)
        throw new Error(`keyword "${keyword}" failed to compile`);
      return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });
    }
    function validSchemaType(schema, schemaType, allowUndefined = false) {
      return !schemaType.length || schemaType.some((st) => st === "array" ? Array.isArray(schema) : st === "object" ? schema && typeof schema == "object" && !Array.isArray(schema) : typeof schema == st || allowUndefined && typeof schema == "undefined");
    }
    exports.validSchemaType = validSchemaType;
    function validateKeywordUsage({ schema, opts, self: self2, errSchemaPath }, def, keyword) {
      if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
        throw new Error("ajv implementation error");
      }
      const deps = def.dependencies;
      if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
        throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
      }
      if (def.validateSchema) {
        const valid = def.validateSchema(schema[keyword]);
        if (!valid) {
          const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` + self2.errorsText(def.validateSchema.errors);
          if (opts.validateSchema === "log")
            self2.logger.error(msg);
          else
            throw new Error(msg);
        }
      }
    }
    exports.validateKeywordUsage = validateKeywordUsage;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/subschema.js
var require_subschema = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/subschema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
      if (keyword !== void 0 && schema !== void 0) {
        throw new Error('both "keyword" and "schema" passed, only one allowed');
      }
      if (keyword !== void 0) {
        const sch = it.schema[keyword];
        return schemaProp === void 0 ? {
          schema: sch,
          schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
          errSchemaPath: `${it.errSchemaPath}/${keyword}`
        } : {
          schema: sch[schemaProp],
          schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
          errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`
        };
      }
      if (schema !== void 0) {
        if (schemaPath === void 0 || errSchemaPath === void 0 || topSchemaRef === void 0) {
          throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
        }
        return {
          schema,
          schemaPath,
          topSchemaRef,
          errSchemaPath
        };
      }
      throw new Error('either "keyword" or "schema" must be passed');
    }
    exports.getSubschema = getSubschema;
    function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
      if (data !== void 0 && dataProp !== void 0) {
        throw new Error('both "data" and "dataProp" passed, only one allowed');
      }
      const { gen } = it;
      if (dataProp !== void 0) {
        const { errorPath, dataPathArr, opts } = it;
        const nextData = gen.let("data", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
        dataContextProps(nextData);
        subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
        subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;
        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
      }
      if (data !== void 0) {
        const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true);
        dataContextProps(nextData);
        if (propertyName !== void 0)
          subschema.propertyName = propertyName;
      }
      if (dataTypes)
        subschema.dataTypes = dataTypes;
      function dataContextProps(_nextData) {
        subschema.data = _nextData;
        subschema.dataLevel = it.dataLevel + 1;
        subschema.dataTypes = [];
        it.definedProperties = /* @__PURE__ */ new Set();
        subschema.parentData = it.data;
        subschema.dataNames = [...it.dataNames, _nextData];
      }
    }
    exports.extendSubschemaData = extendSubschemaData;
    function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
      if (compositeRule !== void 0)
        subschema.compositeRule = compositeRule;
      if (createErrors !== void 0)
        subschema.createErrors = createErrors;
      if (allErrors !== void 0)
        subschema.allErrors = allErrors;
      subschema.jtdDiscriminator = jtdDiscriminator;
      subschema.jtdMetadata = jtdMetadata;
    }
    exports.extendSubschemaMode = extendSubschemaMode;
  }
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module2) {
    "use strict";
    module2.exports = function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf)
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString)
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (!equal(a[key], b[key]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/json-schema-traverse/index.js
var require_json_schema_traverse = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/json-schema-traverse/index.js"(exports, module2) {
    "use strict";
    var traverse = module2.exports = function(schema, opts, cb) {
      if (typeof opts == "function") {
        cb = opts;
        opts = {};
      }
      cb = opts.cb || cb;
      var pre = typeof cb == "function" ? cb : cb.pre || function() {
      };
      var post = cb.post || function() {
      };
      _traverse(opts, pre, post, schema, "", schema);
    };
    traverse.keywords = {
      additionalItems: true,
      items: true,
      contains: true,
      additionalProperties: true,
      propertyNames: true,
      not: true,
      if: true,
      then: true,
      else: true
    };
    traverse.arrayKeywords = {
      items: true,
      allOf: true,
      anyOf: true,
      oneOf: true
    };
    traverse.propsKeywords = {
      $defs: true,
      definitions: true,
      properties: true,
      patternProperties: true,
      dependencies: true
    };
    traverse.skipKeywords = {
      default: true,
      enum: true,
      const: true,
      required: true,
      maximum: true,
      minimum: true,
      exclusiveMaximum: true,
      exclusiveMinimum: true,
      multipleOf: true,
      maxLength: true,
      minLength: true,
      pattern: true,
      format: true,
      maxItems: true,
      minItems: true,
      uniqueItems: true,
      maxProperties: true,
      minProperties: true
    };
    function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
      if (schema && typeof schema == "object" && !Array.isArray(schema)) {
        pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        for (var key in schema) {
          var sch = schema[key];
          if (Array.isArray(sch)) {
            if (key in traverse.arrayKeywords) {
              for (var i = 0; i < sch.length; i++)
                _traverse(opts, pre, post, sch[i], jsonPtr + "/" + key + "/" + i, rootSchema, jsonPtr, key, schema, i);
            }
          } else if (key in traverse.propsKeywords) {
            if (sch && typeof sch == "object") {
              for (var prop in sch)
                _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
            }
          } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
            _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema);
          }
        }
        post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      }
    }
    function escapeJsonPtr(str) {
      return str.replace(/~/g, "~0").replace(/\//g, "~1");
    }
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/resolve.js
var require_resolve = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/resolve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;
    var util_1 = require_util();
    var equal = require_fast_deep_equal();
    var traverse = require_json_schema_traverse();
    var SIMPLE_INLINED = /* @__PURE__ */ new Set([
      "type",
      "format",
      "pattern",
      "maxLength",
      "minLength",
      "maxProperties",
      "minProperties",
      "maxItems",
      "minItems",
      "maximum",
      "minimum",
      "uniqueItems",
      "multipleOf",
      "required",
      "enum",
      "const"
    ]);
    function inlineRef(schema, limit = true) {
      if (typeof schema == "boolean")
        return true;
      if (limit === true)
        return !hasRef(schema);
      if (!limit)
        return false;
      return countKeys(schema) <= limit;
    }
    exports.inlineRef = inlineRef;
    var REF_KEYWORDS = /* @__PURE__ */ new Set([
      "$ref",
      "$recursiveRef",
      "$recursiveAnchor",
      "$dynamicRef",
      "$dynamicAnchor"
    ]);
    function hasRef(schema) {
      for (const key in schema) {
        if (REF_KEYWORDS.has(key))
          return true;
        const sch = schema[key];
        if (Array.isArray(sch) && sch.some(hasRef))
          return true;
        if (typeof sch == "object" && hasRef(sch))
          return true;
      }
      return false;
    }
    function countKeys(schema) {
      let count = 0;
      for (const key in schema) {
        if (key === "$ref")
          return Infinity;
        count++;
        if (SIMPLE_INLINED.has(key))
          continue;
        if (typeof schema[key] == "object") {
          (0, util_1.eachItem)(schema[key], (sch) => count += countKeys(sch));
        }
        if (count === Infinity)
          return Infinity;
      }
      return count;
    }
    function getFullPath(resolver, id = "", normalize) {
      if (normalize !== false)
        id = normalizeId(id);
      const p = resolver.parse(id);
      return _getFullPath(resolver, p);
    }
    exports.getFullPath = getFullPath;
    function _getFullPath(resolver, p) {
      const serialized = resolver.serialize(p);
      return serialized.split("#")[0] + "#";
    }
    exports._getFullPath = _getFullPath;
    var TRAILING_SLASH_HASH = /#\/?$/;
    function normalizeId(id) {
      return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
    }
    exports.normalizeId = normalizeId;
    function resolveUrl(resolver, baseId, id) {
      id = normalizeId(id);
      return resolver.resolve(baseId, id);
    }
    exports.resolveUrl = resolveUrl;
    var ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
    function getSchemaRefs(schema, baseId) {
      if (typeof schema == "boolean")
        return {};
      const { schemaId, uriResolver } = this.opts;
      const schId = normalizeId(schema[schemaId] || baseId);
      const baseIds = { "": schId };
      const pathPrefix = getFullPath(uriResolver, schId, false);
      const localRefs = {};
      const schemaRefs = /* @__PURE__ */ new Set();
      traverse(schema, { allKeys: true }, (sch, jsonPtr, _2, parentJsonPtr) => {
        if (parentJsonPtr === void 0)
          return;
        const fullPath = pathPrefix + jsonPtr;
        let innerBaseId = baseIds[parentJsonPtr];
        if (typeof sch[schemaId] == "string")
          innerBaseId = addRef.call(this, sch[schemaId]);
        addAnchor.call(this, sch.$anchor);
        addAnchor.call(this, sch.$dynamicAnchor);
        baseIds[jsonPtr] = innerBaseId;
        function addRef(ref) {
          const _resolve = this.opts.uriResolver.resolve;
          ref = normalizeId(innerBaseId ? _resolve(innerBaseId, ref) : ref);
          if (schemaRefs.has(ref))
            throw ambiguos(ref);
          schemaRefs.add(ref);
          let schOrRef = this.refs[ref];
          if (typeof schOrRef == "string")
            schOrRef = this.refs[schOrRef];
          if (typeof schOrRef == "object") {
            checkAmbiguosRef(sch, schOrRef.schema, ref);
          } else if (ref !== normalizeId(fullPath)) {
            if (ref[0] === "#") {
              checkAmbiguosRef(sch, localRefs[ref], ref);
              localRefs[ref] = sch;
            } else {
              this.refs[ref] = fullPath;
            }
          }
          return ref;
        }
        function addAnchor(anchor) {
          if (typeof anchor == "string") {
            if (!ANCHOR.test(anchor))
              throw new Error(`invalid anchor "${anchor}"`);
            addRef.call(this, `#${anchor}`);
          }
        }
      });
      return localRefs;
      function checkAmbiguosRef(sch1, sch2, ref) {
        if (sch2 !== void 0 && !equal(sch1, sch2))
          throw ambiguos(ref);
      }
      function ambiguos(ref) {
        return new Error(`reference "${ref}" resolves to more than one schema`);
      }
    }
    exports.getSchemaRefs = getSchemaRefs;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/index.js
var require_validate = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/validate/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;
    var boolSchema_1 = require_boolSchema();
    var dataType_1 = require_dataType();
    var applicability_1 = require_applicability();
    var dataType_2 = require_dataType();
    var defaults_1 = require_defaults();
    var keyword_1 = require_keyword();
    var subschema_1 = require_subschema();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var resolve_1 = require_resolve();
    var util_1 = require_util();
    var errors_1 = require_errors();
    function validateFunctionCode(it) {
      if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
          topSchemaObjCode(it);
          return;
        }
      }
      validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
    }
    exports.validateFunctionCode = validateFunctionCode;
    function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {
      if (opts.code.es5) {
        gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
          gen.code((0, codegen_1._)`"use strict"; ${funcSourceUrl(schema, opts)}`);
          destructureValCxtES5(gen, opts);
          gen.code(body);
        });
      } else {
        gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
      }
    }
    function destructureValCxt(opts) {
      return (0, codegen_1._)`{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
    }
    function destructureValCxtES5(gen, opts) {
      gen.if(names_1.default.valCxt, () => {
        gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);
        gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);
        gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
        gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);
        if (opts.dynamicRef)
          gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
      }, () => {
        gen.var(names_1.default.instancePath, (0, codegen_1._)`""`);
        gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);
        gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);
        gen.var(names_1.default.rootData, names_1.default.data);
        if (opts.dynamicRef)
          gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);
      });
    }
    function topSchemaObjCode(it) {
      const { schema, opts, gen } = it;
      validateFunction(it, () => {
        if (opts.$comment && schema.$comment)
          commentKeyword(it);
        checkNoDefault(it);
        gen.let(names_1.default.vErrors, null);
        gen.let(names_1.default.errors, 0);
        if (opts.unevaluated)
          resetEvaluated(it);
        typeAndKeywords(it);
        returnResults(it);
      });
      return;
    }
    function resetEvaluated(it) {
      const { gen, validateName } = it;
      it.evaluated = gen.const("evaluated", (0, codegen_1._)`${validateName}.evaluated`);
      gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));
      gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));
    }
    function funcSourceUrl(schema, opts) {
      const schId = typeof schema == "object" && schema[opts.schemaId];
      return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;
    }
    function subschemaCode(it, valid) {
      if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
          subSchemaObjCode(it, valid);
          return;
        }
      }
      (0, boolSchema_1.boolOrEmptySchema)(it, valid);
    }
    function schemaCxtHasRules({ schema, self: self2 }) {
      if (typeof schema == "boolean")
        return !schema;
      for (const key in schema)
        if (self2.RULES.all[key])
          return true;
      return false;
    }
    function isSchemaObj(it) {
      return typeof it.schema != "boolean";
    }
    function subSchemaObjCode(it, valid) {
      const { schema, gen, opts } = it;
      if (opts.$comment && schema.$comment)
        commentKeyword(it);
      updateContext(it);
      checkAsyncSchema(it);
      const errsCount = gen.const("_errs", names_1.default.errors);
      typeAndKeywords(it, errsCount);
      gen.var(valid, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
    }
    function checkKeywords(it) {
      (0, util_1.checkUnknownRules)(it);
      checkRefsAndKeywords(it);
    }
    function typeAndKeywords(it, errsCount) {
      if (it.opts.jtd)
        return schemaKeywords(it, [], false, errsCount);
      const types = (0, dataType_1.getSchemaTypes)(it.schema);
      const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
      schemaKeywords(it, types, !checkedTypes, errsCount);
    }
    function checkRefsAndKeywords(it) {
      const { schema, errSchemaPath, opts, self: self2 } = it;
      if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self2.RULES)) {
        self2.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
      }
    }
    function checkNoDefault(it) {
      const { schema, opts } = it;
      if (schema.default !== void 0 && opts.useDefaults && opts.strictSchema) {
        (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
      }
    }
    function updateContext(it) {
      const schId = it.schema[it.opts.schemaId];
      if (schId)
        it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
    }
    function checkAsyncSchema(it) {
      if (it.schema.$async && !it.schemaEnv.$async)
        throw new Error("async schema in sync schema");
    }
    function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
      const msg = schema.$comment;
      if (opts.$comment === true) {
        gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);
      } else if (typeof opts.$comment == "function") {
        const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;
        const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
        gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
      }
    }
    function returnResults(it) {
      const { gen, schemaEnv, validateName, ValidationError, opts } = it;
      if (schemaEnv.$async) {
        gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));
      } else {
        gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);
        if (opts.unevaluated)
          assignEvaluated(it);
        gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);
      }
    }
    function assignEvaluated({ gen, evaluated, props, items }) {
      if (props instanceof codegen_1.Name)
        gen.assign((0, codegen_1._)`${evaluated}.props`, props);
      if (items instanceof codegen_1.Name)
        gen.assign((0, codegen_1._)`${evaluated}.items`, items);
    }
    function schemaKeywords(it, types, typeErrors, errsCount) {
      const { gen, schema, data, allErrors, opts, self: self2 } = it;
      const { RULES } = self2;
      if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
        gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition));
        return;
      }
      if (!opts.jtd)
        checkStrictTypes(it, types);
      gen.block(() => {
        for (const group of RULES.rules)
          groupKeywords(group);
        groupKeywords(RULES.post);
      });
      function groupKeywords(group) {
        if (!(0, applicability_1.shouldUseGroup)(schema, group))
          return;
        if (group.type) {
          gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
          iterateKeywords(it, group);
          if (types.length === 1 && types[0] === group.type && typeErrors) {
            gen.else();
            (0, dataType_2.reportTypeError)(it);
          }
          gen.endIf();
        } else {
          iterateKeywords(it, group);
        }
        if (!allErrors)
          gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);
      }
    }
    function iterateKeywords(it, group) {
      const { gen, schema, opts: { useDefaults } } = it;
      if (useDefaults)
        (0, defaults_1.assignDefaults)(it, group.type);
      gen.block(() => {
        for (const rule of group.rules) {
          if ((0, applicability_1.shouldUseRule)(schema, rule)) {
            keywordCode(it, rule.keyword, rule.definition, group.type);
          }
        }
      });
    }
    function checkStrictTypes(it, types) {
      if (it.schemaEnv.meta || !it.opts.strictTypes)
        return;
      checkContextTypes(it, types);
      if (!it.opts.allowUnionTypes)
        checkMultipleTypes(it, types);
      checkKeywordTypes(it, it.dataTypes);
    }
    function checkContextTypes(it, types) {
      if (!types.length)
        return;
      if (!it.dataTypes.length) {
        it.dataTypes = types;
        return;
      }
      types.forEach((t) => {
        if (!includesType(it.dataTypes, t)) {
          strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
        }
      });
      narrowSchemaTypes(it, types);
    }
    function checkMultipleTypes(it, ts) {
      if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
        strictTypesError(it, "use allowUnionTypes to allow union type keyword");
      }
    }
    function checkKeywordTypes(it, ts) {
      const rules = it.self.RULES.all;
      for (const keyword in rules) {
        const rule = rules[keyword];
        if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
          const { type } = rule.definition;
          if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
            strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
          }
        }
      }
    }
    function hasApplicableType(schTs, kwdT) {
      return schTs.includes(kwdT) || kwdT === "number" && schTs.includes("integer");
    }
    function includesType(ts, t) {
      return ts.includes(t) || t === "integer" && ts.includes("number");
    }
    function narrowSchemaTypes(it, withTypes) {
      const ts = [];
      for (const t of it.dataTypes) {
        if (includesType(withTypes, t))
          ts.push(t);
        else if (withTypes.includes("integer") && t === "number")
          ts.push("integer");
      }
      it.dataTypes = ts;
    }
    function strictTypesError(it, msg) {
      const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
      msg += ` at "${schemaPath}" (strictTypes)`;
      (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
    }
    var KeywordCxt = class {
      constructor(it, def, keyword) {
        (0, keyword_1.validateKeywordUsage)(it, def, keyword);
        this.gen = it.gen;
        this.allErrors = it.allErrors;
        this.keyword = keyword;
        this.data = it.data;
        this.schema = it.schema[keyword];
        this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
        this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
        this.schemaType = def.schemaType;
        this.parentSchema = it.schema;
        this.params = {};
        this.it = it;
        this.def = def;
        if (this.$data) {
          this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
        } else {
          this.schemaCode = this.schemaValue;
          if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
            throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
          }
        }
        if ("code" in def ? def.trackErrors : def.errors !== false) {
          this.errsCount = it.gen.const("_errs", names_1.default.errors);
        }
      }
      result(condition, successAction, failAction) {
        this.failResult((0, codegen_1.not)(condition), successAction, failAction);
      }
      failResult(condition, successAction, failAction) {
        this.gen.if(condition);
        if (failAction)
          failAction();
        else
          this.error();
        if (successAction) {
          this.gen.else();
          successAction();
          if (this.allErrors)
            this.gen.endIf();
        } else {
          if (this.allErrors)
            this.gen.endIf();
          else
            this.gen.else();
        }
      }
      pass(condition, failAction) {
        this.failResult((0, codegen_1.not)(condition), void 0, failAction);
      }
      fail(condition) {
        if (condition === void 0) {
          this.error();
          if (!this.allErrors)
            this.gen.if(false);
          return;
        }
        this.gen.if(condition);
        this.error();
        if (this.allErrors)
          this.gen.endIf();
        else
          this.gen.else();
      }
      fail$data(condition) {
        if (!this.$data)
          return this.fail(condition);
        const { schemaCode } = this;
        this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
      }
      error(append, errorParams, errorPaths) {
        if (errorParams) {
          this.setParams(errorParams);
          this._error(append, errorPaths);
          this.setParams({});
          return;
        }
        this._error(append, errorPaths);
      }
      _error(append, errorPaths) {
        ;
        (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
      }
      $dataError() {
        (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
      }
      reset() {
        if (this.errsCount === void 0)
          throw new Error('add "trackErrors" to keyword definition');
        (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
      }
      ok(cond) {
        if (!this.allErrors)
          this.gen.if(cond);
      }
      setParams(obj, assign) {
        if (assign)
          Object.assign(this.params, obj);
        else
          this.params = obj;
      }
      block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
        this.gen.block(() => {
          this.check$data(valid, $dataValid);
          codeBlock();
        });
      }
      check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
        if (!this.$data)
          return;
        const { gen, schemaCode, schemaType, def } = this;
        gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));
        if (valid !== codegen_1.nil)
          gen.assign(valid, true);
        if (schemaType.length || def.validateSchema) {
          gen.elseIf(this.invalid$data());
          this.$dataError();
          if (valid !== codegen_1.nil)
            gen.assign(valid, false);
        }
        gen.else();
      }
      invalid$data() {
        const { gen, schemaCode, schemaType, def, it } = this;
        return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
        function wrong$DataType() {
          if (schemaType.length) {
            if (!(schemaCode instanceof codegen_1.Name))
              throw new Error("ajv implementation error");
            const st = Array.isArray(schemaType) ? schemaType : [schemaType];
            return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
          }
          return codegen_1.nil;
        }
        function invalid$DataSchema() {
          if (def.validateSchema) {
            const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema });
            return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;
          }
          return codegen_1.nil;
        }
      }
      subschema(appl, valid) {
        const subschema = (0, subschema_1.getSubschema)(this.it, appl);
        (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
        (0, subschema_1.extendSubschemaMode)(subschema, appl);
        const nextContext = { ...this.it, ...subschema, items: void 0, props: void 0 };
        subschemaCode(nextContext, valid);
        return nextContext;
      }
      mergeEvaluated(schemaCxt, toName) {
        const { it, gen } = this;
        if (!it.opts.unevaluated)
          return;
        if (it.props !== true && schemaCxt.props !== void 0) {
          it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
        }
        if (it.items !== true && schemaCxt.items !== void 0) {
          it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
        }
      }
      mergeValidEvaluated(schemaCxt, valid) {
        const { it, gen } = this;
        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
          gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
          return true;
        }
      }
    };
    exports.KeywordCxt = KeywordCxt;
    function keywordCode(it, keyword, def, ruleType) {
      const cxt = new KeywordCxt(it, def, keyword);
      if ("code" in def) {
        def.code(cxt, ruleType);
      } else if (cxt.$data && def.validate) {
        (0, keyword_1.funcKeywordCode)(cxt, def);
      } else if ("macro" in def) {
        (0, keyword_1.macroKeywordCode)(cxt, def);
      } else if (def.compile || def.validate) {
        (0, keyword_1.funcKeywordCode)(cxt, def);
      }
    }
    var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
    var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
    function getData($data, { dataLevel, dataNames, dataPathArr }) {
      let jsonPointer;
      let data;
      if ($data === "")
        return names_1.default.rootData;
      if ($data[0] === "/") {
        if (!JSON_POINTER.test($data))
          throw new Error(`Invalid JSON-pointer: ${$data}`);
        jsonPointer = $data;
        data = names_1.default.rootData;
      } else {
        const matches = RELATIVE_JSON_POINTER.exec($data);
        if (!matches)
          throw new Error(`Invalid JSON-pointer: ${$data}`);
        const up = +matches[1];
        jsonPointer = matches[2];
        if (jsonPointer === "#") {
          if (up >= dataLevel)
            throw new Error(errorMsg("property/index", up));
          return dataPathArr[dataLevel - up];
        }
        if (up > dataLevel)
          throw new Error(errorMsg("data", up));
        data = dataNames[dataLevel - up];
        if (!jsonPointer)
          return data;
      }
      let expr = data;
      const segments = jsonPointer.split("/");
      for (const segment of segments) {
        if (segment) {
          data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
          expr = (0, codegen_1._)`${expr} && ${data}`;
        }
      }
      return expr;
      function errorMsg(pointerType, up) {
        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
      }
    }
    exports.getData = getData;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/runtime/validation_error.js
var require_validation_error = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/runtime/validation_error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ValidationError = class extends Error {
      constructor(errors) {
        super("validation failed");
        this.errors = errors;
        this.ajv = this.validation = true;
      }
    };
    exports.default = ValidationError;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/ref_error.js
var require_ref_error = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/ref_error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var resolve_1 = require_resolve();
    var MissingRefError = class extends Error {
      constructor(resolver, baseId, ref, msg) {
        super(msg || `can't resolve reference ${ref} from id ${baseId}`);
        this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
        this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
      }
    };
    exports.default = MissingRefError;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/index.js
var require_compile = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/compile/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;
    var codegen_1 = require_codegen();
    var validation_error_1 = require_validation_error();
    var names_1 = require_names();
    var resolve_1 = require_resolve();
    var util_1 = require_util();
    var validate_1 = require_validate();
    var SchemaEnv = class {
      constructor(env4) {
        var _a;
        this.refs = {};
        this.dynamicAnchors = {};
        let schema;
        if (typeof env4.schema == "object")
          schema = env4.schema;
        this.schema = env4.schema;
        this.schemaId = env4.schemaId;
        this.root = env4.root || this;
        this.baseId = (_a = env4.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env4.schemaId || "$id"]);
        this.schemaPath = env4.schemaPath;
        this.localRefs = env4.localRefs;
        this.meta = env4.meta;
        this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
        this.refs = {};
      }
    };
    exports.SchemaEnv = SchemaEnv;
    function compileSchema(sch) {
      const _sch = getCompilingSchema.call(this, sch);
      if (_sch)
        return _sch;
      const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId);
      const { es5, lines } = this.opts.code;
      const { ownProperties } = this.opts;
      const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
      let _ValidationError;
      if (sch.$async) {
        _ValidationError = gen.scopeValue("Error", {
          ref: validation_error_1.default,
          code: (0, codegen_1._)`require("ajv/dist/runtime/validation_error").default`
        });
      }
      const validateName = gen.scopeName("validate");
      sch.validateName = validateName;
      const schemaCxt = {
        gen,
        allErrors: this.opts.allErrors,
        data: names_1.default.data,
        parentData: names_1.default.parentData,
        parentDataProperty: names_1.default.parentDataProperty,
        dataNames: [names_1.default.data],
        dataPathArr: [codegen_1.nil],
        // TODO can its length be used as dataLevel if nil is removed?
        dataLevel: 0,
        dataTypes: [],
        definedProperties: /* @__PURE__ */ new Set(),
        topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true ? { ref: sch.schema, code: (0, codegen_1.stringify)(sch.schema) } : { ref: sch.schema }),
        validateName,
        ValidationError: _ValidationError,
        schema: sch.schema,
        schemaEnv: sch,
        rootId,
        baseId: sch.baseId || rootId,
        schemaPath: codegen_1.nil,
        errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
        errorPath: (0, codegen_1._)`""`,
        opts: this.opts,
        self: this
      };
      let sourceCode;
      try {
        this._compilations.add(sch);
        (0, validate_1.validateFunctionCode)(schemaCxt);
        gen.optimize(this.opts.code.optimize);
        const validateCode = gen.toString();
        sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
        if (this.opts.code.process)
          sourceCode = this.opts.code.process(sourceCode, sch);
        const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
        const validate = makeValidate(this, this.scope.get());
        this.scope.value(validateName, { ref: validate });
        validate.errors = null;
        validate.schema = sch.schema;
        validate.schemaEnv = sch;
        if (sch.$async)
          validate.$async = true;
        if (this.opts.code.source === true) {
          validate.source = { validateName, validateCode, scopeValues: gen._values };
        }
        if (this.opts.unevaluated) {
          const { props, items } = schemaCxt;
          validate.evaluated = {
            props: props instanceof codegen_1.Name ? void 0 : props,
            items: items instanceof codegen_1.Name ? void 0 : items,
            dynamicProps: props instanceof codegen_1.Name,
            dynamicItems: items instanceof codegen_1.Name
          };
          if (validate.source)
            validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);
        }
        sch.validate = validate;
        return sch;
      } catch (e) {
        delete sch.validate;
        delete sch.validateName;
        if (sourceCode)
          this.logger.error("Error compiling schema, function code:", sourceCode);
        throw e;
      } finally {
        this._compilations.delete(sch);
      }
    }
    exports.compileSchema = compileSchema;
    function resolveRef(root, baseId, ref) {
      var _a;
      ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
      const schOrFunc = root.refs[ref];
      if (schOrFunc)
        return schOrFunc;
      let _sch = resolve.call(this, root, ref);
      if (_sch === void 0) {
        const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref];
        const { schemaId } = this.opts;
        if (schema)
          _sch = new SchemaEnv({ schema, schemaId, root, baseId });
      }
      if (_sch === void 0)
        return;
      return root.refs[ref] = inlineOrCompile.call(this, _sch);
    }
    exports.resolveRef = resolveRef;
    function inlineOrCompile(sch) {
      if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
        return sch.schema;
      return sch.validate ? sch : compileSchema.call(this, sch);
    }
    function getCompilingSchema(schEnv) {
      for (const sch of this._compilations) {
        if (sameSchemaEnv(sch, schEnv))
          return sch;
      }
    }
    exports.getCompilingSchema = getCompilingSchema;
    function sameSchemaEnv(s1, s2) {
      return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
    }
    function resolve(root, ref) {
      let sch;
      while (typeof (sch = this.refs[ref]) == "string")
        ref = sch;
      return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
    }
    function resolveSchema(root, ref) {
      const p = this.opts.uriResolver.parse(ref);
      const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
      let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, void 0);
      if (Object.keys(root.schema).length > 0 && refPath === baseId) {
        return getJsonPointer.call(this, p, root);
      }
      const id = (0, resolve_1.normalizeId)(refPath);
      const schOrRef = this.refs[id] || this.schemas[id];
      if (typeof schOrRef == "string") {
        const sch = resolveSchema.call(this, root, schOrRef);
        if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
          return;
        return getJsonPointer.call(this, p, sch);
      }
      if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
        return;
      if (!schOrRef.validate)
        compileSchema.call(this, schOrRef);
      if (id === (0, resolve_1.normalizeId)(ref)) {
        const { schema } = schOrRef;
        const { schemaId } = this.opts;
        const schId = schema[schemaId];
        if (schId)
          baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
        return new SchemaEnv({ schema, schemaId, root, baseId });
      }
      return getJsonPointer.call(this, p, schOrRef);
    }
    exports.resolveSchema = resolveSchema;
    var PREVENT_SCOPE_CHANGE = /* @__PURE__ */ new Set([
      "properties",
      "patternProperties",
      "enum",
      "dependencies",
      "definitions"
    ]);
    function getJsonPointer(parsedRef, { baseId, schema, root }) {
      var _a;
      if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
        return;
      for (const part of parsedRef.fragment.slice(1).split("/")) {
        if (typeof schema === "boolean")
          return;
        const partSchema = schema[(0, util_1.unescapeFragment)(part)];
        if (partSchema === void 0)
          return;
        schema = partSchema;
        const schId = typeof schema === "object" && schema[this.opts.schemaId];
        if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
          baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
        }
      }
      let env4;
      if (typeof schema != "boolean" && schema.$ref && !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)) {
        const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
        env4 = resolveSchema.call(this, root, $ref);
      }
      const { schemaId } = this.opts;
      env4 = env4 || new SchemaEnv({ schema, schemaId, root, baseId });
      if (env4.schema !== env4.root.schema)
        return env4;
      return void 0;
    }
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/refs/data.json
var require_data = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/refs/data.json"(exports, module2) {
    module2.exports = {
      $id: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
      description: "Meta-schema for $data reference (JSON AnySchema extension proposal)",
      type: "object",
      required: ["$data"],
      properties: {
        $data: {
          type: "string",
          anyOf: [{ format: "relative-json-pointer" }, { format: "json-pointer" }]
        }
      },
      additionalProperties: false
    };
  }
});

// node_modules/fast-uri/lib/scopedChars.js
var require_scopedChars = __commonJS({
  "node_modules/fast-uri/lib/scopedChars.js"(exports, module2) {
    "use strict";
    var HEX = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      a: 10,
      A: 10,
      b: 11,
      B: 11,
      c: 12,
      C: 12,
      d: 13,
      D: 13,
      e: 14,
      E: 14,
      f: 15,
      F: 15
    };
    module2.exports = {
      HEX
    };
  }
});

// node_modules/fast-uri/lib/utils.js
var require_utils = __commonJS({
  "node_modules/fast-uri/lib/utils.js"(exports, module2) {
    "use strict";
    var { HEX } = require_scopedChars();
    var IPV4_REG = /^(?:(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)$/u;
    function normalizeIPv4(host) {
      if (findToken(host, ".") < 3) {
        return { host, isIPV4: false };
      }
      const matches = host.match(IPV4_REG) || [];
      const [address] = matches;
      if (address) {
        return { host: stripLeadingZeros(address, "."), isIPV4: true };
      } else {
        return { host, isIPV4: false };
      }
    }
    function stringArrayToHexStripped(input, keepZero = false) {
      let acc = "";
      let strip = true;
      for (const c of input) {
        if (HEX[c] === void 0)
          return void 0;
        if (c !== "0" && strip === true)
          strip = false;
        if (!strip)
          acc += c;
      }
      if (keepZero && acc.length === 0)
        acc = "0";
      return acc;
    }
    function getIPV6(input) {
      let tokenCount = 0;
      const output = { error: false, address: "", zone: "" };
      const address = [];
      const buffer = [];
      let isZone = false;
      let endipv6Encountered = false;
      let endIpv6 = false;
      function consume() {
        if (buffer.length) {
          if (isZone === false) {
            const hex = stringArrayToHexStripped(buffer);
            if (hex !== void 0) {
              address.push(hex);
            } else {
              output.error = true;
              return false;
            }
          }
          buffer.length = 0;
        }
        return true;
      }
      for (let i = 0; i < input.length; i++) {
        const cursor = input[i];
        if (cursor === "[" || cursor === "]") {
          continue;
        }
        if (cursor === ":") {
          if (endipv6Encountered === true) {
            endIpv6 = true;
          }
          if (!consume()) {
            break;
          }
          tokenCount++;
          address.push(":");
          if (tokenCount > 7) {
            output.error = true;
            break;
          }
          if (i - 1 >= 0 && input[i - 1] === ":") {
            endipv6Encountered = true;
          }
          continue;
        } else if (cursor === "%") {
          if (!consume()) {
            break;
          }
          isZone = true;
        } else {
          buffer.push(cursor);
          continue;
        }
      }
      if (buffer.length) {
        if (isZone) {
          output.zone = buffer.join("");
        } else if (endIpv6) {
          address.push(buffer.join(""));
        } else {
          address.push(stringArrayToHexStripped(buffer));
        }
      }
      output.address = address.join("");
      return output;
    }
    function normalizeIPv6(host) {
      if (findToken(host, ":") < 2) {
        return { host, isIPV6: false };
      }
      const ipv6 = getIPV6(host);
      if (!ipv6.error) {
        let newHost = ipv6.address;
        let escapedHost = ipv6.address;
        if (ipv6.zone) {
          newHost += "%" + ipv6.zone;
          escapedHost += "%25" + ipv6.zone;
        }
        return { host: newHost, escapedHost, isIPV6: true };
      } else {
        return { host, isIPV6: false };
      }
    }
    function stripLeadingZeros(str, token) {
      let out = "";
      let skip = true;
      const l = str.length;
      for (let i = 0; i < l; i++) {
        const c = str[i];
        if (c === "0" && skip) {
          if (i + 1 <= l && str[i + 1] === token || i + 1 === l) {
            out += c;
            skip = false;
          }
        } else {
          if (c === token) {
            skip = true;
          } else {
            skip = false;
          }
          out += c;
        }
      }
      return out;
    }
    function findToken(str, token) {
      let ind = 0;
      for (let i = 0; i < str.length; i++) {
        if (str[i] === token)
          ind++;
      }
      return ind;
    }
    var RDS1 = /^\.\.?\//u;
    var RDS2 = /^\/\.(?:\/|$)/u;
    var RDS3 = /^\/\.\.(?:\/|$)/u;
    var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/u;
    function removeDotSegments(input) {
      const output = [];
      while (input.length) {
        if (input.match(RDS1)) {
          input = input.replace(RDS1, "");
        } else if (input.match(RDS2)) {
          input = input.replace(RDS2, "/");
        } else if (input.match(RDS3)) {
          input = input.replace(RDS3, "/");
          output.pop();
        } else if (input === "." || input === "..") {
          input = "";
        } else {
          const im = input.match(RDS5);
          if (im) {
            const s = im[0];
            input = input.slice(s.length);
            output.push(s);
          } else {
            throw new Error("Unexpected dot segment condition");
          }
        }
      }
      return output.join("");
    }
    function normalizeComponentEncoding(components, esc) {
      const func = esc !== true ? escape : unescape;
      if (components.scheme !== void 0) {
        components.scheme = func(components.scheme);
      }
      if (components.userinfo !== void 0) {
        components.userinfo = func(components.userinfo);
      }
      if (components.host !== void 0) {
        components.host = func(components.host);
      }
      if (components.path !== void 0) {
        components.path = func(components.path);
      }
      if (components.query !== void 0) {
        components.query = func(components.query);
      }
      if (components.fragment !== void 0) {
        components.fragment = func(components.fragment);
      }
      return components;
    }
    function recomposeAuthority(components) {
      const uriTokens = [];
      if (components.userinfo !== void 0) {
        uriTokens.push(components.userinfo);
        uriTokens.push("@");
      }
      if (components.host !== void 0) {
        let host = unescape(components.host);
        const ipV4res = normalizeIPv4(host);
        if (ipV4res.isIPV4) {
          host = ipV4res.host;
        } else {
          const ipV6res = normalizeIPv6(ipV4res.host);
          if (ipV6res.isIPV6 === true) {
            host = `[${ipV6res.escapedHost}]`;
          } else {
            host = components.host;
          }
        }
        uriTokens.push(host);
      }
      if (typeof components.port === "number" || typeof components.port === "string") {
        uriTokens.push(":");
        uriTokens.push(String(components.port));
      }
      return uriTokens.length ? uriTokens.join("") : void 0;
    }
    module2.exports = {
      recomposeAuthority,
      normalizeComponentEncoding,
      removeDotSegments,
      normalizeIPv4,
      normalizeIPv6,
      stringArrayToHexStripped
    };
  }
});

// node_modules/fast-uri/lib/schemes.js
var require_schemes = __commonJS({
  "node_modules/fast-uri/lib/schemes.js"(exports, module2) {
    "use strict";
    var UUID_REG = /^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}$/iu;
    var URN_REG = /([\da-z][\d\-a-z]{0,31}):((?:[\w!$'()*+,\-.:;=@]|%[\da-f]{2})+)/iu;
    function isSecure(wsComponents) {
      return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
    }
    function httpParse(components) {
      if (!components.host) {
        components.error = components.error || "HTTP URIs must have a host.";
      }
      return components;
    }
    function httpSerialize(components) {
      const secure = String(components.scheme).toLowerCase() === "https";
      if (components.port === (secure ? 443 : 80) || components.port === "") {
        components.port = void 0;
      }
      if (!components.path) {
        components.path = "/";
      }
      return components;
    }
    function wsParse(wsComponents) {
      wsComponents.secure = isSecure(wsComponents);
      wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
      wsComponents.path = void 0;
      wsComponents.query = void 0;
      return wsComponents;
    }
    function wsSerialize(wsComponents) {
      if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
        wsComponents.port = void 0;
      }
      if (typeof wsComponents.secure === "boolean") {
        wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
        wsComponents.secure = void 0;
      }
      if (wsComponents.resourceName) {
        const [path, query] = wsComponents.resourceName.split("?");
        wsComponents.path = path && path !== "/" ? path : void 0;
        wsComponents.query = query;
        wsComponents.resourceName = void 0;
      }
      wsComponents.fragment = void 0;
      return wsComponents;
    }
    function urnParse(urnComponents, options) {
      if (!urnComponents.path) {
        urnComponents.error = "URN can not be parsed";
        return urnComponents;
      }
      const matches = urnComponents.path.match(URN_REG);
      if (matches) {
        const scheme = options.scheme || urnComponents.scheme || "urn";
        urnComponents.nid = matches[1].toLowerCase();
        urnComponents.nss = matches[2];
        const urnScheme = `${scheme}:${options.nid || urnComponents.nid}`;
        const schemeHandler = SCHEMES[urnScheme];
        urnComponents.path = void 0;
        if (schemeHandler) {
          urnComponents = schemeHandler.parse(urnComponents, options);
        }
      } else {
        urnComponents.error = urnComponents.error || "URN can not be parsed.";
      }
      return urnComponents;
    }
    function urnSerialize(urnComponents, options) {
      const scheme = options.scheme || urnComponents.scheme || "urn";
      const nid = urnComponents.nid.toLowerCase();
      const urnScheme = `${scheme}:${options.nid || nid}`;
      const schemeHandler = SCHEMES[urnScheme];
      if (schemeHandler) {
        urnComponents = schemeHandler.serialize(urnComponents, options);
      }
      const uriComponents = urnComponents;
      const nss = urnComponents.nss;
      uriComponents.path = `${nid || options.nid}:${nss}`;
      options.skipEscape = true;
      return uriComponents;
    }
    function urnuuidParse(urnComponents, options) {
      const uuidComponents = urnComponents;
      uuidComponents.uuid = uuidComponents.nss;
      uuidComponents.nss = void 0;
      if (!options.tolerant && (!uuidComponents.uuid || !UUID_REG.test(uuidComponents.uuid))) {
        uuidComponents.error = uuidComponents.error || "UUID is not valid.";
      }
      return uuidComponents;
    }
    function urnuuidSerialize(uuidComponents) {
      const urnComponents = uuidComponents;
      urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
      return urnComponents;
    }
    var http = {
      scheme: "http",
      domainHost: true,
      parse: httpParse,
      serialize: httpSerialize
    };
    var https = {
      scheme: "https",
      domainHost: http.domainHost,
      parse: httpParse,
      serialize: httpSerialize
    };
    var ws = {
      scheme: "ws",
      domainHost: true,
      parse: wsParse,
      serialize: wsSerialize
    };
    var wss = {
      scheme: "wss",
      domainHost: ws.domainHost,
      parse: ws.parse,
      serialize: ws.serialize
    };
    var urn = {
      scheme: "urn",
      parse: urnParse,
      serialize: urnSerialize,
      skipNormalize: true
    };
    var urnuuid = {
      scheme: "urn:uuid",
      parse: urnuuidParse,
      serialize: urnuuidSerialize,
      skipNormalize: true
    };
    var SCHEMES = {
      http,
      https,
      ws,
      wss,
      urn,
      "urn:uuid": urnuuid
    };
    module2.exports = SCHEMES;
  }
});

// node_modules/fast-uri/index.js
var require_fast_uri = __commonJS({
  "node_modules/fast-uri/index.js"(exports, module2) {
    "use strict";
    var { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = require_utils();
    var SCHEMES = require_schemes();
    function normalize(uri, options) {
      if (typeof uri === "string") {
        uri = serialize(parse(uri, options), options);
      } else if (typeof uri === "object") {
        uri = parse(serialize(uri, options), options);
      }
      return uri;
    }
    function resolve(baseURI, relativeURI, options) {
      const schemelessOptions = Object.assign({ scheme: "null" }, options);
      const resolved = resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true);
      return serialize(resolved, { ...schemelessOptions, skipEscape: true });
    }
    function resolveComponents(base, relative, options, skipNormalization) {
      const target = {};
      if (!skipNormalization) {
        base = parse(serialize(base, options), options);
        relative = parse(serialize(relative, options), options);
      }
      options = options || {};
      if (!options.tolerant && relative.scheme) {
        target.scheme = relative.scheme;
        target.userinfo = relative.userinfo;
        target.host = relative.host;
        target.port = relative.port;
        target.path = removeDotSegments(relative.path || "");
        target.query = relative.query;
      } else {
        if (relative.userinfo !== void 0 || relative.host !== void 0 || relative.port !== void 0) {
          target.userinfo = relative.userinfo;
          target.host = relative.host;
          target.port = relative.port;
          target.path = removeDotSegments(relative.path || "");
          target.query = relative.query;
        } else {
          if (!relative.path) {
            target.path = base.path;
            if (relative.query !== void 0) {
              target.query = relative.query;
            } else {
              target.query = base.query;
            }
          } else {
            if (relative.path.charAt(0) === "/") {
              target.path = removeDotSegments(relative.path);
            } else {
              if ((base.userinfo !== void 0 || base.host !== void 0 || base.port !== void 0) && !base.path) {
                target.path = "/" + relative.path;
              } else if (!base.path) {
                target.path = relative.path;
              } else {
                target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
              }
              target.path = removeDotSegments(target.path);
            }
            target.query = relative.query;
          }
          target.userinfo = base.userinfo;
          target.host = base.host;
          target.port = base.port;
        }
        target.scheme = base.scheme;
      }
      target.fragment = relative.fragment;
      return target;
    }
    function equal(uriA, uriB, options) {
      if (typeof uriA === "string") {
        uriA = unescape(uriA);
        uriA = serialize(normalizeComponentEncoding(parse(uriA, options), true), { ...options, skipEscape: true });
      } else if (typeof uriA === "object") {
        uriA = serialize(normalizeComponentEncoding(uriA, true), { ...options, skipEscape: true });
      }
      if (typeof uriB === "string") {
        uriB = unescape(uriB);
        uriB = serialize(normalizeComponentEncoding(parse(uriB, options), true), { ...options, skipEscape: true });
      } else if (typeof uriB === "object") {
        uriB = serialize(normalizeComponentEncoding(uriB, true), { ...options, skipEscape: true });
      }
      return uriA.toLowerCase() === uriB.toLowerCase();
    }
    function serialize(cmpts, opts) {
      const components = {
        host: cmpts.host,
        scheme: cmpts.scheme,
        userinfo: cmpts.userinfo,
        port: cmpts.port,
        path: cmpts.path,
        query: cmpts.query,
        nid: cmpts.nid,
        nss: cmpts.nss,
        uuid: cmpts.uuid,
        fragment: cmpts.fragment,
        reference: cmpts.reference,
        resourceName: cmpts.resourceName,
        secure: cmpts.secure,
        error: ""
      };
      const options = Object.assign({}, opts);
      const uriTokens = [];
      const schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
      if (schemeHandler && schemeHandler.serialize)
        schemeHandler.serialize(components, options);
      if (components.path !== void 0) {
        if (!options.skipEscape) {
          components.path = escape(components.path);
          if (components.scheme !== void 0) {
            components.path = components.path.split("%3A").join(":");
          }
        } else {
          components.path = unescape(components.path);
        }
      }
      if (options.reference !== "suffix" && components.scheme) {
        uriTokens.push(components.scheme, ":");
      }
      const authority = recomposeAuthority(components);
      if (authority !== void 0) {
        if (options.reference !== "suffix") {
          uriTokens.push("//");
        }
        uriTokens.push(authority);
        if (components.path && components.path.charAt(0) !== "/") {
          uriTokens.push("/");
        }
      }
      if (components.path !== void 0) {
        let s = components.path;
        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
          s = removeDotSegments(s);
        }
        if (authority === void 0) {
          s = s.replace(/^\/\//u, "/%2F");
        }
        uriTokens.push(s);
      }
      if (components.query !== void 0) {
        uriTokens.push("?", components.query);
      }
      if (components.fragment !== void 0) {
        uriTokens.push("#", components.fragment);
      }
      return uriTokens.join("");
    }
    var hexLookUp = Array.from({ length: 127 }, (_v, k) => /[^!"$&'()*+,\-.;=_`a-z{}~]/u.test(String.fromCharCode(k)));
    function nonSimpleDomain(value) {
      let code = 0;
      for (let i = 0, len = value.length; i < len; ++i) {
        code = value.charCodeAt(i);
        if (code > 126 || hexLookUp[code]) {
          return true;
        }
      }
      return false;
    }
    var URI_PARSE = /^(?:([^#/:?]+):)?(?:\/\/((?:([^#/?@]*)@)?(\[[^#/?\]]+\]|[^#/:?]*)(?::(\d*))?))?([^#?]*)(?:\?([^#]*))?(?:#((?:.|[\n\r])*))?/u;
    function parse(uri, opts) {
      const options = Object.assign({}, opts);
      const parsed = {
        scheme: void 0,
        userinfo: void 0,
        host: "",
        port: void 0,
        path: "",
        query: void 0,
        fragment: void 0
      };
      const gotEncoding = uri.indexOf("%") !== -1;
      let isIP = false;
      if (options.reference === "suffix")
        uri = (options.scheme ? options.scheme + ":" : "") + "//" + uri;
      const matches = uri.match(URI_PARSE);
      if (matches) {
        parsed.scheme = matches[1];
        parsed.userinfo = matches[3];
        parsed.host = matches[4];
        parsed.port = parseInt(matches[5], 10);
        parsed.path = matches[6] || "";
        parsed.query = matches[7];
        parsed.fragment = matches[8];
        if (isNaN(parsed.port)) {
          parsed.port = matches[5];
        }
        if (parsed.host) {
          const ipv4result = normalizeIPv4(parsed.host);
          if (ipv4result.isIPV4 === false) {
            const ipv6result = normalizeIPv6(ipv4result.host);
            parsed.host = ipv6result.host.toLowerCase();
            isIP = ipv6result.isIPV6;
          } else {
            parsed.host = ipv4result.host;
            isIP = true;
          }
        }
        if (parsed.scheme === void 0 && parsed.userinfo === void 0 && parsed.host === void 0 && parsed.port === void 0 && parsed.query === void 0 && !parsed.path) {
          parsed.reference = "same-document";
        } else if (parsed.scheme === void 0) {
          parsed.reference = "relative";
        } else if (parsed.fragment === void 0) {
          parsed.reference = "absolute";
        } else {
          parsed.reference = "uri";
        }
        if (options.reference && options.reference !== "suffix" && options.reference !== parsed.reference) {
          parsed.error = parsed.error || "URI is not a " + options.reference + " reference.";
        }
        const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || "").toLowerCase()];
        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
          if (parsed.host && (options.domainHost || schemeHandler && schemeHandler.domainHost) && isIP === false && nonSimpleDomain(parsed.host)) {
            try {
              parsed.host = URL.domainToASCII(parsed.host.toLowerCase());
            } catch (e) {
              parsed.error = parsed.error || "Host's domain name can not be converted to ASCII: " + e;
            }
          }
        }
        if (!schemeHandler || schemeHandler && !schemeHandler.skipNormalize) {
          if (gotEncoding && parsed.scheme !== void 0) {
            parsed.scheme = unescape(parsed.scheme);
          }
          if (gotEncoding && parsed.host !== void 0) {
            parsed.host = unescape(parsed.host);
          }
          if (parsed.path) {
            parsed.path = escape(unescape(parsed.path));
          }
          if (parsed.fragment) {
            parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment));
          }
        }
        if (schemeHandler && schemeHandler.parse) {
          schemeHandler.parse(parsed, options);
        }
      } else {
        parsed.error = parsed.error || "URI can not be parsed.";
      }
      return parsed;
    }
    var fastUri = {
      SCHEMES,
      normalize,
      resolve,
      resolveComponents,
      equal,
      serialize,
      parse
    };
    module2.exports = fastUri;
    module2.exports.default = fastUri;
    module2.exports.fastUri = fastUri;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/runtime/uri.js
var require_uri = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/runtime/uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var uri = require_fast_uri();
    uri.code = 'require("ajv/dist/runtime/uri").default';
    exports.default = uri;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/core.js
var require_core = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/core.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    var validate_1 = require_validate();
    Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function() {
      return validate_1.KeywordCxt;
    } });
    var codegen_1 = require_codegen();
    Object.defineProperty(exports, "_", { enumerable: true, get: function() {
      return codegen_1._;
    } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function() {
      return codegen_1.str;
    } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
      return codegen_1.stringify;
    } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
      return codegen_1.nil;
    } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
      return codegen_1.Name;
    } });
    Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
      return codegen_1.CodeGen;
    } });
    var validation_error_1 = require_validation_error();
    var ref_error_1 = require_ref_error();
    var rules_1 = require_rules();
    var compile_1 = require_compile();
    var codegen_2 = require_codegen();
    var resolve_1 = require_resolve();
    var dataType_1 = require_dataType();
    var util_1 = require_util();
    var $dataRefSchema = require_data();
    var uri_1 = require_uri();
    var defaultRegExp = (str, flags) => new RegExp(str, flags);
    defaultRegExp.code = "new RegExp";
    var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
    var EXT_SCOPE_NAMES = /* @__PURE__ */ new Set([
      "validate",
      "serialize",
      "parse",
      "wrapper",
      "root",
      "schema",
      "keyword",
      "pattern",
      "formats",
      "validate$data",
      "func",
      "obj",
      "Error"
    ]);
    var removedOptions = {
      errorDataPath: "",
      format: "`validateFormats: false` can be used instead.",
      nullable: '"nullable" keyword is supported by default.',
      jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
      extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
      missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
      processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
      sourceCode: "Use option `code: {source: true}`",
      strictDefaults: "It is default now, see option `strict`.",
      strictKeywords: "It is default now, see option `strict`.",
      uniqueItems: '"uniqueItems" keyword is always validated.',
      unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
      cache: "Map is used as cache, schema object as key.",
      serialize: "Map is used as cache, schema object as key.",
      ajvErrors: "It is default now."
    };
    var deprecatedOptions = {
      ignoreKeywordsWithRef: "",
      jsPropertySyntax: "",
      unicode: '"minLength"/"maxLength" account for unicode characters by default.'
    };
    var MAX_EXPRESSION = 200;
    function requiredOptions(o) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
      const s = o.strict;
      const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
      const optimize = _optz === true || _optz === void 0 ? 1 : _optz || 0;
      const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
      const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
      return {
        strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
        strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
        strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
        strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
        strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
        code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
        loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
        loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
        meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
        messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
        inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
        schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
        addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
        validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
        validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
        unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
        int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
        uriResolver
      };
    }
    var Ajv = class {
      constructor(opts = {}) {
        this.schemas = {};
        this.refs = {};
        this.formats = {};
        this._compilations = /* @__PURE__ */ new Set();
        this._loading = {};
        this._cache = /* @__PURE__ */ new Map();
        opts = this.opts = { ...opts, ...requiredOptions(opts) };
        const { es5, lines } = this.opts.code;
        this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
        this.logger = getLogger(opts.logger);
        const formatOpt = opts.validateFormats;
        opts.validateFormats = false;
        this.RULES = (0, rules_1.getRules)();
        checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
        checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
        this._metaOpts = getMetaSchemaOptions.call(this);
        if (opts.formats)
          addInitialFormats.call(this);
        this._addVocabularies();
        this._addDefaultMetaSchema();
        if (opts.keywords)
          addInitialKeywords.call(this, opts.keywords);
        if (typeof opts.meta == "object")
          this.addMetaSchema(opts.meta);
        addInitialSchemas.call(this);
        opts.validateFormats = formatOpt;
      }
      _addVocabularies() {
        this.addKeyword("$async");
      }
      _addDefaultMetaSchema() {
        const { $data, meta, schemaId } = this.opts;
        let _dataRefSchema = $dataRefSchema;
        if (schemaId === "id") {
          _dataRefSchema = { ...$dataRefSchema };
          _dataRefSchema.id = _dataRefSchema.$id;
          delete _dataRefSchema.$id;
        }
        if (meta && $data)
          this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
      }
      defaultMeta() {
        const { meta, schemaId } = this.opts;
        return this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : void 0;
      }
      validate(schemaKeyRef, data) {
        let v;
        if (typeof schemaKeyRef == "string") {
          v = this.getSchema(schemaKeyRef);
          if (!v)
            throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
        } else {
          v = this.compile(schemaKeyRef);
        }
        const valid = v(data);
        if (!("$async" in v))
          this.errors = v.errors;
        return valid;
      }
      compile(schema, _meta) {
        const sch = this._addSchema(schema, _meta);
        return sch.validate || this._compileSchemaEnv(sch);
      }
      compileAsync(schema, meta) {
        if (typeof this.opts.loadSchema != "function") {
          throw new Error("options.loadSchema should be a function");
        }
        const { loadSchema } = this.opts;
        return runCompileAsync.call(this, schema, meta);
        async function runCompileAsync(_schema, _meta) {
          await loadMetaSchema.call(this, _schema.$schema);
          const sch = this._addSchema(_schema, _meta);
          return sch.validate || _compileAsync.call(this, sch);
        }
        async function loadMetaSchema($ref) {
          if ($ref && !this.getSchema($ref)) {
            await runCompileAsync.call(this, { $ref }, true);
          }
        }
        async function _compileAsync(sch) {
          try {
            return this._compileSchemaEnv(sch);
          } catch (e) {
            if (!(e instanceof ref_error_1.default))
              throw e;
            checkLoaded.call(this, e);
            await loadMissingSchema.call(this, e.missingSchema);
            return _compileAsync.call(this, sch);
          }
        }
        function checkLoaded({ missingSchema: ref, missingRef }) {
          if (this.refs[ref]) {
            throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
          }
        }
        async function loadMissingSchema(ref) {
          const _schema = await _loadSchema.call(this, ref);
          if (!this.refs[ref])
            await loadMetaSchema.call(this, _schema.$schema);
          if (!this.refs[ref])
            this.addSchema(_schema, ref, meta);
        }
        async function _loadSchema(ref) {
          const p = this._loading[ref];
          if (p)
            return p;
          try {
            return await (this._loading[ref] = loadSchema(ref));
          } finally {
            delete this._loading[ref];
          }
        }
      }
      // Adds schema to the instance
      addSchema(schema, key, _meta, _validateSchema = this.opts.validateSchema) {
        if (Array.isArray(schema)) {
          for (const sch of schema)
            this.addSchema(sch, void 0, _meta, _validateSchema);
          return this;
        }
        let id;
        if (typeof schema === "object") {
          const { schemaId } = this.opts;
          id = schema[schemaId];
          if (id !== void 0 && typeof id != "string") {
            throw new Error(`schema ${schemaId} must be string`);
          }
        }
        key = (0, resolve_1.normalizeId)(key || id);
        this._checkUnique(key);
        this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
        return this;
      }
      // Add schema that will be used to validate other schemas
      // options in META_IGNORE_OPTIONS are alway set to false
      addMetaSchema(schema, key, _validateSchema = this.opts.validateSchema) {
        this.addSchema(schema, key, true, _validateSchema);
        return this;
      }
      //  Validate schema against its meta-schema
      validateSchema(schema, throwOrLogError) {
        if (typeof schema == "boolean")
          return true;
        let $schema;
        $schema = schema.$schema;
        if ($schema !== void 0 && typeof $schema != "string") {
          throw new Error("$schema must be a string");
        }
        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
        if (!$schema) {
          this.logger.warn("meta-schema not available");
          this.errors = null;
          return true;
        }
        const valid = this.validate($schema, schema);
        if (!valid && throwOrLogError) {
          const message = "schema is invalid: " + this.errorsText();
          if (this.opts.validateSchema === "log")
            this.logger.error(message);
          else
            throw new Error(message);
        }
        return valid;
      }
      // Get compiled schema by `key` or `ref`.
      // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
      getSchema(keyRef) {
        let sch;
        while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
          keyRef = sch;
        if (sch === void 0) {
          const { schemaId } = this.opts;
          const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
          sch = compile_1.resolveSchema.call(this, root, keyRef);
          if (!sch)
            return;
          this.refs[keyRef] = sch;
        }
        return sch.validate || this._compileSchemaEnv(sch);
      }
      // Remove cached schema(s).
      // If no parameter is passed all schemas but meta-schemas are removed.
      // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
      // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
      removeSchema(schemaKeyRef) {
        if (schemaKeyRef instanceof RegExp) {
          this._removeAllSchemas(this.schemas, schemaKeyRef);
          this._removeAllSchemas(this.refs, schemaKeyRef);
          return this;
        }
        switch (typeof schemaKeyRef) {
          case "undefined":
            this._removeAllSchemas(this.schemas);
            this._removeAllSchemas(this.refs);
            this._cache.clear();
            return this;
          case "string": {
            const sch = getSchEnv.call(this, schemaKeyRef);
            if (typeof sch == "object")
              this._cache.delete(sch.schema);
            delete this.schemas[schemaKeyRef];
            delete this.refs[schemaKeyRef];
            return this;
          }
          case "object": {
            const cacheKey = schemaKeyRef;
            this._cache.delete(cacheKey);
            let id = schemaKeyRef[this.opts.schemaId];
            if (id) {
              id = (0, resolve_1.normalizeId)(id);
              delete this.schemas[id];
              delete this.refs[id];
            }
            return this;
          }
          default:
            throw new Error("ajv.removeSchema: invalid parameter");
        }
      }
      // add "vocabulary" - a collection of keywords
      addVocabulary(definitions) {
        for (const def of definitions)
          this.addKeyword(def);
        return this;
      }
      addKeyword(kwdOrDef, def) {
        let keyword;
        if (typeof kwdOrDef == "string") {
          keyword = kwdOrDef;
          if (typeof def == "object") {
            this.logger.warn("these parameters are deprecated, see docs for addKeyword");
            def.keyword = keyword;
          }
        } else if (typeof kwdOrDef == "object" && def === void 0) {
          def = kwdOrDef;
          keyword = def.keyword;
          if (Array.isArray(keyword) && !keyword.length) {
            throw new Error("addKeywords: keyword must be string or non-empty array");
          }
        } else {
          throw new Error("invalid addKeywords parameters");
        }
        checkKeyword.call(this, keyword, def);
        if (!def) {
          (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
          return this;
        }
        keywordMetaschema.call(this, def);
        const definition = {
          ...def,
          type: (0, dataType_1.getJSONTypes)(def.type),
          schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)
        };
        (0, util_1.eachItem)(keyword, definition.type.length === 0 ? (k) => addRule.call(this, k, definition) : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
        return this;
      }
      getKeyword(keyword) {
        const rule = this.RULES.all[keyword];
        return typeof rule == "object" ? rule.definition : !!rule;
      }
      // Remove keyword
      removeKeyword(keyword) {
        const { RULES } = this;
        delete RULES.keywords[keyword];
        delete RULES.all[keyword];
        for (const group of RULES.rules) {
          const i = group.rules.findIndex((rule) => rule.keyword === keyword);
          if (i >= 0)
            group.rules.splice(i, 1);
        }
        return this;
      }
      // Add format
      addFormat(name, format) {
        if (typeof format == "string")
          format = new RegExp(format);
        this.formats[name] = format;
        return this;
      }
      errorsText(errors = this.errors, { separator = ", ", dataVar = "data" } = {}) {
        if (!errors || errors.length === 0)
          return "No errors";
        return errors.map((e) => `${dataVar}${e.instancePath} ${e.message}`).reduce((text, msg) => text + separator + msg);
      }
      $dataMetaSchema(metaSchema, keywordsJsonPointers) {
        const rules = this.RULES.all;
        metaSchema = JSON.parse(JSON.stringify(metaSchema));
        for (const jsonPointer of keywordsJsonPointers) {
          const segments = jsonPointer.split("/").slice(1);
          let keywords = metaSchema;
          for (const seg of segments)
            keywords = keywords[seg];
          for (const key in rules) {
            const rule = rules[key];
            if (typeof rule != "object")
              continue;
            const { $data } = rule.definition;
            const schema = keywords[key];
            if ($data && schema)
              keywords[key] = schemaOrData(schema);
          }
        }
        return metaSchema;
      }
      _removeAllSchemas(schemas, regex) {
        for (const keyRef in schemas) {
          const sch = schemas[keyRef];
          if (!regex || regex.test(keyRef)) {
            if (typeof sch == "string") {
              delete schemas[keyRef];
            } else if (sch && !sch.meta) {
              this._cache.delete(sch.schema);
              delete schemas[keyRef];
            }
          }
        }
      }
      _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
        let id;
        const { schemaId } = this.opts;
        if (typeof schema == "object") {
          id = schema[schemaId];
        } else {
          if (this.opts.jtd)
            throw new Error("schema must be object");
          else if (typeof schema != "boolean")
            throw new Error("schema must be object or boolean");
        }
        let sch = this._cache.get(schema);
        if (sch !== void 0)
          return sch;
        baseId = (0, resolve_1.normalizeId)(id || baseId);
        const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
        sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });
        this._cache.set(sch.schema, sch);
        if (addSchema && !baseId.startsWith("#")) {
          if (baseId)
            this._checkUnique(baseId);
          this.refs[baseId] = sch;
        }
        if (validateSchema)
          this.validateSchema(schema, true);
        return sch;
      }
      _checkUnique(id) {
        if (this.schemas[id] || this.refs[id]) {
          throw new Error(`schema with key or id "${id}" already exists`);
        }
      }
      _compileSchemaEnv(sch) {
        if (sch.meta)
          this._compileMetaSchema(sch);
        else
          compile_1.compileSchema.call(this, sch);
        if (!sch.validate)
          throw new Error("ajv implementation error");
        return sch.validate;
      }
      _compileMetaSchema(sch) {
        const currentOpts = this.opts;
        this.opts = this._metaOpts;
        try {
          compile_1.compileSchema.call(this, sch);
        } finally {
          this.opts = currentOpts;
        }
      }
    };
    Ajv.ValidationError = validation_error_1.default;
    Ajv.MissingRefError = ref_error_1.default;
    exports.default = Ajv;
    function checkOptions(checkOpts, options, msg, log = "error") {
      for (const key in checkOpts) {
        const opt = key;
        if (opt in options)
          this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
      }
    }
    function getSchEnv(keyRef) {
      keyRef = (0, resolve_1.normalizeId)(keyRef);
      return this.schemas[keyRef] || this.refs[keyRef];
    }
    function addInitialSchemas() {
      const optsSchemas = this.opts.schemas;
      if (!optsSchemas)
        return;
      if (Array.isArray(optsSchemas))
        this.addSchema(optsSchemas);
      else
        for (const key in optsSchemas)
          this.addSchema(optsSchemas[key], key);
    }
    function addInitialFormats() {
      for (const name in this.opts.formats) {
        const format = this.opts.formats[name];
        if (format)
          this.addFormat(name, format);
      }
    }
    function addInitialKeywords(defs) {
      if (Array.isArray(defs)) {
        this.addVocabulary(defs);
        return;
      }
      this.logger.warn("keywords option as map is deprecated, pass array");
      for (const keyword in defs) {
        const def = defs[keyword];
        if (!def.keyword)
          def.keyword = keyword;
        this.addKeyword(def);
      }
    }
    function getMetaSchemaOptions() {
      const metaOpts = { ...this.opts };
      for (const opt of META_IGNORE_OPTIONS)
        delete metaOpts[opt];
      return metaOpts;
    }
    var noLogs = { log() {
    }, warn() {
    }, error() {
    } };
    function getLogger(logger) {
      if (logger === false)
        return noLogs;
      if (logger === void 0)
        return console;
      if (logger.log && logger.warn && logger.error)
        return logger;
      throw new Error("logger must implement log, warn and error methods");
    }
    var KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
    function checkKeyword(keyword, def) {
      const { RULES } = this;
      (0, util_1.eachItem)(keyword, (kwd) => {
        if (RULES.keywords[kwd])
          throw new Error(`Keyword ${kwd} is already defined`);
        if (!KEYWORD_NAME.test(kwd))
          throw new Error(`Keyword ${kwd} has invalid name`);
      });
      if (!def)
        return;
      if (def.$data && !("code" in def || "validate" in def)) {
        throw new Error('$data keyword must have "code" or "validate" function');
      }
    }
    function addRule(keyword, definition, dataType) {
      var _a;
      const post = definition === null || definition === void 0 ? void 0 : definition.post;
      if (dataType && post)
        throw new Error('keyword with "post" flag cannot have "type"');
      const { RULES } = this;
      let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
      if (!ruleGroup) {
        ruleGroup = { type: dataType, rules: [] };
        RULES.rules.push(ruleGroup);
      }
      RULES.keywords[keyword] = true;
      if (!definition)
        return;
      const rule = {
        keyword,
        definition: {
          ...definition,
          type: (0, dataType_1.getJSONTypes)(definition.type),
          schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)
        }
      };
      if (definition.before)
        addBeforeRule.call(this, ruleGroup, rule, definition.before);
      else
        ruleGroup.rules.push(rule);
      RULES.all[keyword] = rule;
      (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
    }
    function addBeforeRule(ruleGroup, rule, before) {
      const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
      if (i >= 0) {
        ruleGroup.rules.splice(i, 0, rule);
      } else {
        ruleGroup.rules.push(rule);
        this.logger.warn(`rule ${before} is not defined`);
      }
    }
    function keywordMetaschema(def) {
      let { metaSchema } = def;
      if (metaSchema === void 0)
        return;
      if (def.$data && this.opts.$data)
        metaSchema = schemaOrData(metaSchema);
      def.validateSchema = this.compile(metaSchema, true);
    }
    var $dataRef = {
      $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
    };
    function schemaOrData(schema) {
      return { anyOf: [schema, $dataRef] };
    }
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/core/id.js
var require_id = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/core/id.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var def = {
      keyword: "id",
      code() {
        throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/core/ref.js
var require_ref = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/core/ref.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.callRef = exports.getValidate = void 0;
    var ref_error_1 = require_ref_error();
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var compile_1 = require_compile();
    var util_1 = require_util();
    var def = {
      keyword: "$ref",
      schemaType: "string",
      code(cxt) {
        const { gen, schema: $ref, it } = cxt;
        const { baseId, schemaEnv: env4, validateName, opts, self: self2 } = it;
        const { root } = env4;
        if (($ref === "#" || $ref === "#/") && baseId === root.baseId)
          return callRootRef();
        const schOrEnv = compile_1.resolveRef.call(self2, root, baseId, $ref);
        if (schOrEnv === void 0)
          throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
        if (schOrEnv instanceof compile_1.SchemaEnv)
          return callValidate(schOrEnv);
        return inlineRefSchema(schOrEnv);
        function callRootRef() {
          if (env4 === root)
            return callRef(cxt, validateName, env4, env4.$async);
          const rootName = gen.scopeValue("root", { ref: root });
          return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root, root.$async);
        }
        function callValidate(sch) {
          const v = getValidate(cxt, sch);
          callRef(cxt, v, sch, sch.$async);
        }
        function inlineRefSchema(sch) {
          const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1.stringify)(sch) } : { ref: sch });
          const valid = gen.name("valid");
          const schCxt = cxt.subschema({
            schema: sch,
            dataTypes: [],
            schemaPath: codegen_1.nil,
            topSchemaRef: schName,
            errSchemaPath: $ref
          }, valid);
          cxt.mergeEvaluated(schCxt);
          cxt.ok(valid);
        }
      }
    };
    function getValidate(cxt, sch) {
      const { gen } = cxt;
      return sch.validate ? gen.scopeValue("validate", { ref: sch.validate }) : (0, codegen_1._)`${gen.scopeValue("wrapper", { ref: sch })}.validate`;
    }
    exports.getValidate = getValidate;
    function callRef(cxt, v, sch, $async) {
      const { gen, it } = cxt;
      const { allErrors, schemaEnv: env4, opts } = it;
      const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
      if ($async)
        callAsyncRef();
      else
        callSyncRef();
      function callAsyncRef() {
        if (!env4.$async)
          throw new Error("async schema referenced by sync schema");
        const valid = gen.let("valid");
        gen.try(() => {
          gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);
          addEvaluatedFrom(v);
          if (!allErrors)
            gen.assign(valid, true);
        }, (e) => {
          gen.if((0, codegen_1._)`!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
          addErrorsFrom(e);
          if (!allErrors)
            gen.assign(valid, false);
        });
        cxt.ok(valid);
      }
      function callSyncRef() {
        cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
      }
      function addErrorsFrom(source) {
        const errs = (0, codegen_1._)`${source}.errors`;
        gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`);
        gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
      }
      function addEvaluatedFrom(source) {
        var _a;
        if (!it.opts.unevaluated)
          return;
        const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
        if (it.props !== true) {
          if (schEvaluated && !schEvaluated.dynamicProps) {
            if (schEvaluated.props !== void 0) {
              it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
            }
          } else {
            const props = gen.var("props", (0, codegen_1._)`${source}.evaluated.props`);
            it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
          }
        }
        if (it.items !== true) {
          if (schEvaluated && !schEvaluated.dynamicItems) {
            if (schEvaluated.items !== void 0) {
              it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
            }
          } else {
            const items = gen.var("items", (0, codegen_1._)`${source}.evaluated.items`);
            it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
          }
        }
      }
    }
    exports.callRef = callRef;
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/core/index.js
var require_core2 = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/core/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var id_1 = require_id();
    var ref_1 = require_ref();
    var core = [
      "$schema",
      "$id",
      "$defs",
      "$vocabulary",
      { keyword: "$comment" },
      "definitions",
      id_1.default,
      ref_1.default
    ];
    exports.default = core;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/limitNumber.js
var require_limitNumber = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/limitNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var ops = codegen_1.operators;
    var KWDs = {
      maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
      minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
      exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
      exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE }
    };
    var error = {
      message: ({ keyword, schemaCode }) => (0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,
      params: ({ keyword, schemaCode }) => (0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
    };
    var def = {
      keyword: Object.keys(KWDs),
      type: "number",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/multipleOf.js
var require_multipleOf = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/multipleOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message: ({ schemaCode }) => (0, codegen_1.str)`must be multiple of ${schemaCode}`,
      params: ({ schemaCode }) => (0, codegen_1._)`{multipleOf: ${schemaCode}}`
    };
    var def = {
      keyword: "multipleOf",
      type: "number",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, schemaCode, it } = cxt;
        const prec = it.opts.multipleOfPrecision;
        const res = gen.let("res");
        const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;
        cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/runtime/ucs2length.js
var require_ucs2length = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/runtime/ucs2length.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function ucs2length(str) {
      const len = str.length;
      let length = 0;
      let pos = 0;
      let value;
      while (pos < len) {
        length++;
        value = str.charCodeAt(pos++);
        if (value >= 55296 && value <= 56319 && pos < len) {
          value = str.charCodeAt(pos);
          if ((value & 64512) === 56320)
            pos++;
        }
      }
      return length;
    }
    exports.default = ucs2length;
    ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/limitLength.js
var require_limitLength = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/limitLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var ucs2length_1 = require_ucs2length();
    var error = {
      message({ keyword, schemaCode }) {
        const comp = keyword === "maxLength" ? "more" : "fewer";
        return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;
      },
      params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
    };
    var def = {
      keyword: ["maxLength", "minLength"],
      type: "string",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode, it } = cxt;
        const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
        const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
        cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/pattern.js
var require_pattern = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/pattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var error = {
      message: ({ schemaCode }) => (0, codegen_1.str)`must match pattern "${schemaCode}"`,
      params: ({ schemaCode }) => (0, codegen_1._)`{pattern: ${schemaCode}}`
    };
    var def = {
      keyword: "pattern",
      type: "string",
      schemaType: "string",
      $data: true,
      error,
      code(cxt) {
        const { data, $data, schema, schemaCode, it } = cxt;
        const u = it.opts.unicodeRegExp ? "u" : "";
        const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);
        cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/limitProperties.js
var require_limitProperties = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/limitProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message({ keyword, schemaCode }) {
        const comp = keyword === "maxProperties" ? "more" : "fewer";
        return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} properties`;
      },
      params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
    };
    var def = {
      keyword: ["maxProperties", "minProperties"],
      type: "object",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data((0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`);
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/required.js
var require_required = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/required.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: ({ params: { missingProperty } }) => (0, codegen_1.str)`must have required property '${missingProperty}'`,
      params: ({ params: { missingProperty } }) => (0, codegen_1._)`{missingProperty: ${missingProperty}}`
    };
    var def = {
      keyword: "required",
      type: "object",
      schemaType: "array",
      $data: true,
      error,
      code(cxt) {
        const { gen, schema, schemaCode, data, $data, it } = cxt;
        const { opts } = it;
        if (!$data && schema.length === 0)
          return;
        const useLoop = schema.length >= opts.loopRequired;
        if (it.allErrors)
          allErrorsMode();
        else
          exitOnErrorMode();
        if (opts.strictRequired) {
          const props = cxt.parentSchema.properties;
          const { definedProperties } = cxt.it;
          for (const requiredKey of schema) {
            if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === void 0 && !definedProperties.has(requiredKey)) {
              const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
              const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
              (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
            }
          }
        }
        function allErrorsMode() {
          if (useLoop || $data) {
            cxt.block$data(codegen_1.nil, loopAllRequired);
          } else {
            for (const prop of schema) {
              (0, code_1.checkReportMissingProp)(cxt, prop);
            }
          }
        }
        function exitOnErrorMode() {
          const missing = gen.let("missing");
          if (useLoop || $data) {
            const valid = gen.let("valid", true);
            cxt.block$data(valid, () => loopUntilMissing(missing, valid));
            cxt.ok(valid);
          } else {
            gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));
            (0, code_1.reportMissingProp)(cxt, missing);
            gen.else();
          }
        }
        function loopAllRequired() {
          gen.forOf("prop", schemaCode, (prop) => {
            cxt.setParams({ missingProperty: prop });
            gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
          });
        }
        function loopUntilMissing(missing, valid) {
          cxt.setParams({ missingProperty: missing });
          gen.forOf(missing, schemaCode, () => {
            gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
            gen.if((0, codegen_1.not)(valid), () => {
              cxt.error();
              gen.break();
            });
          }, codegen_1.nil);
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/limitItems.js
var require_limitItems = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/limitItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message({ keyword, schemaCode }) {
        const comp = keyword === "maxItems" ? "more" : "fewer";
        return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;
      },
      params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
    };
    var def = {
      keyword: ["maxItems", "minItems"],
      type: "array",
      schemaType: "number",
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/runtime/equal.js
var require_equal = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/runtime/equal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var equal = require_fast_deep_equal();
    equal.code = 'require("ajv/dist/runtime/equal").default';
    exports.default = equal;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js
var require_uniqueItems = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var dataType_1 = require_dataType();
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var equal_1 = require_equal();
    var error = {
      message: ({ params: { i, j } }) => (0, codegen_1.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
      params: ({ params: { i, j } }) => (0, codegen_1._)`{i: ${i}, j: ${j}}`
    };
    var def = {
      keyword: "uniqueItems",
      type: "array",
      schemaType: "boolean",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
        if (!$data && !schema)
          return;
        const valid = gen.let("valid");
        const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
        cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);
        cxt.ok(valid);
        function validateUniqueItems() {
          const i = gen.let("i", (0, codegen_1._)`${data}.length`);
          const j = gen.let("j");
          cxt.setParams({ i, j });
          gen.assign(valid, true);
          gen.if((0, codegen_1._)`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
        }
        function canOptimize() {
          return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
        }
        function loopN(i, j) {
          const item = gen.name("item");
          const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
          const indices = gen.const("indices", (0, codegen_1._)`{}`);
          gen.for((0, codegen_1._)`;${i}--;`, () => {
            gen.let(item, (0, codegen_1._)`${data}[${i}]`);
            gen.if(wrongType, (0, codegen_1._)`continue`);
            if (itemTypes.length > 1)
              gen.if((0, codegen_1._)`typeof ${item} == "string"`, (0, codegen_1._)`${item} += "_"`);
            gen.if((0, codegen_1._)`typeof ${indices}[${item}] == "number"`, () => {
              gen.assign(j, (0, codegen_1._)`${indices}[${item}]`);
              cxt.error();
              gen.assign(valid, false).break();
            }).code((0, codegen_1._)`${indices}[${item}] = ${i}`);
          });
        }
        function loopN2(i, j) {
          const eql = (0, util_1.useFunc)(gen, equal_1.default);
          const outer = gen.name("outer");
          gen.label(outer).for((0, codegen_1._)`;${i}--;`, () => gen.for((0, codegen_1._)`${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._)`${eql}(${data}[${i}], ${data}[${j}])`, () => {
            cxt.error();
            gen.assign(valid, false).break(outer);
          })));
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/const.js
var require_const = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/const.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var equal_1 = require_equal();
    var error = {
      message: "must be equal to constant",
      params: ({ schemaCode }) => (0, codegen_1._)`{allowedValue: ${schemaCode}}`
    };
    var def = {
      keyword: "const",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, $data, schemaCode, schema } = cxt;
        if ($data || schema && typeof schema == "object") {
          cxt.fail$data((0, codegen_1._)`!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
        } else {
          cxt.fail((0, codegen_1._)`${schema} !== ${data}`);
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/enum.js
var require_enum = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/enum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var equal_1 = require_equal();
    var error = {
      message: "must be equal to one of the allowed values",
      params: ({ schemaCode }) => (0, codegen_1._)`{allowedValues: ${schemaCode}}`
    };
    var def = {
      keyword: "enum",
      schemaType: "array",
      $data: true,
      error,
      code(cxt) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        if (!$data && schema.length === 0)
          throw new Error("enum must have non-empty array");
        const useLoop = schema.length >= it.opts.loopEnum;
        let eql;
        const getEql = () => eql !== null && eql !== void 0 ? eql : eql = (0, util_1.useFunc)(gen, equal_1.default);
        let valid;
        if (useLoop || $data) {
          valid = gen.let("valid");
          cxt.block$data(valid, loopEnum);
        } else {
          if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
          const vSchema = gen.const("vSchema", schemaCode);
          valid = (0, codegen_1.or)(...schema.map((_x, i) => equalCode(vSchema, i)));
        }
        cxt.pass(valid);
        function loopEnum() {
          gen.assign(valid, false);
          gen.forOf("v", schemaCode, (v) => gen.if((0, codegen_1._)`${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));
        }
        function equalCode(vSchema, i) {
          const sch = schema[i];
          return typeof sch === "object" && sch !== null ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i}])` : (0, codegen_1._)`${data} === ${sch}`;
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/index.js
var require_validation = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/validation/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var limitNumber_1 = require_limitNumber();
    var multipleOf_1 = require_multipleOf();
    var limitLength_1 = require_limitLength();
    var pattern_1 = require_pattern();
    var limitProperties_1 = require_limitProperties();
    var required_1 = require_required();
    var limitItems_1 = require_limitItems();
    var uniqueItems_1 = require_uniqueItems();
    var const_1 = require_const();
    var enum_1 = require_enum();
    var validation = [
      // number
      limitNumber_1.default,
      multipleOf_1.default,
      // string
      limitLength_1.default,
      pattern_1.default,
      // object
      limitProperties_1.default,
      required_1.default,
      // array
      limitItems_1.default,
      uniqueItems_1.default,
      // any
      { keyword: "type", schemaType: ["string", "array"] },
      { keyword: "nullable", schemaType: "boolean" },
      const_1.default,
      enum_1.default
    ];
    exports.default = validation;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js
var require_additionalItems = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateAdditionalItems = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
      params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
    };
    var def = {
      keyword: "additionalItems",
      type: "array",
      schemaType: ["boolean", "object"],
      before: "uniqueItems",
      error,
      code(cxt) {
        const { parentSchema, it } = cxt;
        const { items } = parentSchema;
        if (!Array.isArray(items)) {
          (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
          return;
        }
        validateAdditionalItems(cxt, items);
      }
    };
    function validateAdditionalItems(cxt, items) {
      const { gen, schema, data, keyword, it } = cxt;
      it.items = true;
      const len = gen.const("len", (0, codegen_1._)`${data}.length`);
      if (schema === false) {
        cxt.setParams({ len: items.length });
        cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);
      } else if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
        const valid = gen.var("valid", (0, codegen_1._)`${len} <= ${items.length}`);
        gen.if((0, codegen_1.not)(valid), () => validateItems(valid));
        cxt.ok(valid);
      }
      function validateItems(valid) {
        gen.forRange("i", items.length, len, (i) => {
          cxt.subschema({ keyword, dataProp: i, dataPropType: util_1.Type.Num }, valid);
          if (!it.allErrors)
            gen.if((0, codegen_1.not)(valid), () => gen.break());
        });
      }
    }
    exports.validateAdditionalItems = validateAdditionalItems;
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/items.js
var require_items = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/items.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTuple = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var code_1 = require_code2();
    var def = {
      keyword: "items",
      type: "array",
      schemaType: ["object", "array", "boolean"],
      before: "uniqueItems",
      code(cxt) {
        const { schema, it } = cxt;
        if (Array.isArray(schema))
          return validateTuple(cxt, "additionalItems", schema);
        it.items = true;
        if ((0, util_1.alwaysValidSchema)(it, schema))
          return;
        cxt.ok((0, code_1.validateArray)(cxt));
      }
    };
    function validateTuple(cxt, extraItems, schArr = cxt.schema) {
      const { gen, parentSchema, data, keyword, it } = cxt;
      checkStrictTuple(parentSchema);
      if (it.opts.unevaluated && schArr.length && it.items !== true) {
        it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
      }
      const valid = gen.name("valid");
      const len = gen.const("len", (0, codegen_1._)`${data}.length`);
      schArr.forEach((sch, i) => {
        if ((0, util_1.alwaysValidSchema)(it, sch))
          return;
        gen.if((0, codegen_1._)`${len} > ${i}`, () => cxt.subschema({
          keyword,
          schemaProp: i,
          dataProp: i
        }, valid));
        cxt.ok(valid);
      });
      function checkStrictTuple(sch) {
        const { opts, errSchemaPath } = it;
        const l = schArr.length;
        const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
        if (opts.strictTuples && !fullTuple) {
          const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
          (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
        }
      }
    }
    exports.validateTuple = validateTuple;
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js
var require_prefixItems = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var items_1 = require_items();
    var def = {
      keyword: "prefixItems",
      type: "array",
      schemaType: ["array"],
      before: "uniqueItems",
      code: (cxt) => (0, items_1.validateTuple)(cxt, "items")
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/items2020.js
var require_items2020 = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/items2020.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var code_1 = require_code2();
    var additionalItems_1 = require_additionalItems();
    var error = {
      message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
      params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
    };
    var def = {
      keyword: "items",
      type: "array",
      schemaType: ["object", "boolean"],
      before: "uniqueItems",
      error,
      code(cxt) {
        const { schema, parentSchema, it } = cxt;
        const { prefixItems } = parentSchema;
        it.items = true;
        if ((0, util_1.alwaysValidSchema)(it, schema))
          return;
        if (prefixItems)
          (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
        else
          cxt.ok((0, code_1.validateArray)(cxt));
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/contains.js
var require_contains = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/contains.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: ({ params: { min, max } }) => max === void 0 ? (0, codegen_1.str)`must contain at least ${min} valid item(s)` : (0, codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,
      params: ({ params: { min, max } }) => max === void 0 ? (0, codegen_1._)`{minContains: ${min}}` : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`
    };
    var def = {
      keyword: "contains",
      type: "array",
      schemaType: ["object", "boolean"],
      before: "uniqueItems",
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        let min;
        let max;
        const { minContains, maxContains } = parentSchema;
        if (it.opts.next) {
          min = minContains === void 0 ? 1 : minContains;
          max = maxContains;
        } else {
          min = 1;
        }
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        cxt.setParams({ min, max });
        if (max === void 0 && min === 0) {
          (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
          return;
        }
        if (max !== void 0 && min > max) {
          (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
          cxt.fail();
          return;
        }
        if ((0, util_1.alwaysValidSchema)(it, schema)) {
          let cond = (0, codegen_1._)`${len} >= ${min}`;
          if (max !== void 0)
            cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;
          cxt.pass(cond);
          return;
        }
        it.items = true;
        const valid = gen.name("valid");
        if (max === void 0 && min === 1) {
          validateItems(valid, () => gen.if(valid, () => gen.break()));
        } else if (min === 0) {
          gen.let(valid, true);
          if (max !== void 0)
            gen.if((0, codegen_1._)`${data}.length > 0`, validateItemsWithCount);
        } else {
          gen.let(valid, false);
          validateItemsWithCount();
        }
        cxt.result(valid, () => cxt.reset());
        function validateItemsWithCount() {
          const schValid = gen.name("_valid");
          const count = gen.let("count", 0);
          validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
        }
        function validateItems(_valid, block) {
          gen.forRange("i", 0, len, (i) => {
            cxt.subschema({
              keyword: "contains",
              dataProp: i,
              dataPropType: util_1.Type.Num,
              compositeRule: true
            }, _valid);
            block();
          });
        }
        function checkLimits(count) {
          gen.code((0, codegen_1._)`${count}++`);
          if (max === void 0) {
            gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true).break());
          } else {
            gen.if((0, codegen_1._)`${count} > ${max}`, () => gen.assign(valid, false).break());
            if (min === 1)
              gen.assign(valid, true);
            else
              gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true));
          }
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/dependencies.js
var require_dependencies = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/dependencies.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var code_1 = require_code2();
    exports.error = {
      message: ({ params: { property, depsCount, deps } }) => {
        const property_ies = depsCount === 1 ? "property" : "properties";
        return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;
      },
      params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._)`{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`
      // TODO change to reference
    };
    var def = {
      keyword: "dependencies",
      type: "object",
      schemaType: "object",
      error: exports.error,
      code(cxt) {
        const [propDeps, schDeps] = splitDependencies(cxt);
        validatePropertyDeps(cxt, propDeps);
        validateSchemaDeps(cxt, schDeps);
      }
    };
    function splitDependencies({ schema }) {
      const propertyDeps = {};
      const schemaDeps = {};
      for (const key in schema) {
        if (key === "__proto__")
          continue;
        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
        deps[key] = schema[key];
      }
      return [propertyDeps, schemaDeps];
    }
    function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
      const { gen, data, it } = cxt;
      if (Object.keys(propertyDeps).length === 0)
        return;
      const missing = gen.let("missing");
      for (const prop in propertyDeps) {
        const deps = propertyDeps[prop];
        if (deps.length === 0)
          continue;
        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
        cxt.setParams({
          property: prop,
          depsCount: deps.length,
          deps: deps.join(", ")
        });
        if (it.allErrors) {
          gen.if(hasProperty, () => {
            for (const depProp of deps) {
              (0, code_1.checkReportMissingProp)(cxt, depProp);
            }
          });
        } else {
          gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
          (0, code_1.reportMissingProp)(cxt, missing);
          gen.else();
        }
      }
    }
    exports.validatePropertyDeps = validatePropertyDeps;
    function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
      const { gen, data, keyword, it } = cxt;
      const valid = gen.name("valid");
      for (const prop in schemaDeps) {
        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
          continue;
        gen.if(
          (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties),
          () => {
            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
            cxt.mergeValidEvaluated(schCxt, valid);
          },
          () => gen.var(valid, true)
          // TODO var
        );
        cxt.ok(valid);
      }
    }
    exports.validateSchemaDeps = validateSchemaDeps;
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js
var require_propertyNames = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: "property name must be valid",
      params: ({ params }) => (0, codegen_1._)`{propertyName: ${params.propertyName}}`
    };
    var def = {
      keyword: "propertyNames",
      type: "object",
      schemaType: ["object", "boolean"],
      error,
      code(cxt) {
        const { gen, schema, data, it } = cxt;
        if ((0, util_1.alwaysValidSchema)(it, schema))
          return;
        const valid = gen.name("valid");
        gen.forIn("key", data, (key) => {
          cxt.setParams({ propertyName: key });
          cxt.subschema({
            keyword: "propertyNames",
            data: key,
            dataTypes: ["string"],
            propertyName: key,
            compositeRule: true
          }, valid);
          gen.if((0, codegen_1.not)(valid), () => {
            cxt.error(true);
            if (!it.allErrors)
              gen.break();
          });
        });
        cxt.ok(valid);
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js
var require_additionalProperties = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var util_1 = require_util();
    var error = {
      message: "must NOT have additional properties",
      params: ({ params }) => (0, codegen_1._)`{additionalProperty: ${params.additionalProperty}}`
    };
    var def = {
      keyword: "additionalProperties",
      type: ["object"],
      schemaType: ["boolean", "object"],
      allowUndefined: true,
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, schema, parentSchema, data, errsCount, it } = cxt;
        if (!errsCount)
          throw new Error("ajv implementation error");
        const { allErrors, opts } = it;
        it.props = true;
        if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema))
          return;
        const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
        const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
        checkAdditionalProperties();
        cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
        function checkAdditionalProperties() {
          gen.forIn("key", data, (key) => {
            if (!props.length && !patProps.length)
              additionalPropertyCode(key);
            else
              gen.if(isAdditional(key), () => additionalPropertyCode(key));
          });
        }
        function isAdditional(key) {
          let definedProp;
          if (props.length > 8) {
            const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
            definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
          } else if (props.length) {
            definedProp = (0, codegen_1.or)(...props.map((p) => (0, codegen_1._)`${key} === ${p}`));
          } else {
            definedProp = codegen_1.nil;
          }
          if (patProps.length) {
            definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p) => (0, codegen_1._)`${(0, code_1.usePattern)(cxt, p)}.test(${key})`));
          }
          return (0, codegen_1.not)(definedProp);
        }
        function deleteAdditional(key) {
          gen.code((0, codegen_1._)`delete ${data}[${key}]`);
        }
        function additionalPropertyCode(key) {
          if (opts.removeAdditional === "all" || opts.removeAdditional && schema === false) {
            deleteAdditional(key);
            return;
          }
          if (schema === false) {
            cxt.setParams({ additionalProperty: key });
            cxt.error();
            if (!allErrors)
              gen.break();
            return;
          }
          if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
            const valid = gen.name("valid");
            if (opts.removeAdditional === "failing") {
              applyAdditionalSchema(key, valid, false);
              gen.if((0, codegen_1.not)(valid), () => {
                cxt.reset();
                deleteAdditional(key);
              });
            } else {
              applyAdditionalSchema(key, valid);
              if (!allErrors)
                gen.if((0, codegen_1.not)(valid), () => gen.break());
            }
          }
        }
        function applyAdditionalSchema(key, valid, errors) {
          const subschema = {
            keyword: "additionalProperties",
            dataProp: key,
            dataPropType: util_1.Type.Str
          };
          if (errors === false) {
            Object.assign(subschema, {
              compositeRule: true,
              createErrors: false,
              allErrors: false
            });
          }
          cxt.subschema(subschema, valid);
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/properties.js
var require_properties = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/properties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var validate_1 = require_validate();
    var code_1 = require_code2();
    var util_1 = require_util();
    var additionalProperties_1 = require_additionalProperties();
    var def = {
      keyword: "properties",
      type: "object",
      schemaType: "object",
      code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === void 0) {
          additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
        }
        const allProps = (0, code_1.allSchemaProperties)(schema);
        for (const prop of allProps) {
          it.definedProperties.add(prop);
        }
        if (it.opts.unevaluated && allProps.length && it.props !== true) {
          it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
        }
        const properties = allProps.filter((p) => !(0, util_1.alwaysValidSchema)(it, schema[p]));
        if (properties.length === 0)
          return;
        const valid = gen.name("valid");
        for (const prop of properties) {
          if (hasDefault(prop)) {
            applyPropertySchema(prop);
          } else {
            gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
            applyPropertySchema(prop);
            if (!it.allErrors)
              gen.else().var(valid, true);
            gen.endIf();
          }
          cxt.it.definedProperties.add(prop);
          cxt.ok(valid);
        }
        function hasDefault(prop) {
          return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== void 0;
        }
        function applyPropertySchema(prop) {
          cxt.subschema({
            keyword: "properties",
            schemaProp: prop,
            dataProp: prop
          }, valid);
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js
var require_patternProperties = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var util_2 = require_util();
    var def = {
      keyword: "patternProperties",
      type: "object",
      schemaType: "object",
      code(cxt) {
        const { gen, schema, data, parentSchema, it } = cxt;
        const { opts } = it;
        const patterns = (0, code_1.allSchemaProperties)(schema);
        const alwaysValidPatterns = patterns.filter((p) => (0, util_1.alwaysValidSchema)(it, schema[p]));
        if (patterns.length === 0 || alwaysValidPatterns.length === patterns.length && (!it.opts.unevaluated || it.props === true)) {
          return;
        }
        const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
        const valid = gen.name("valid");
        if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
          it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
        }
        const { props } = it;
        validatePatternProperties();
        function validatePatternProperties() {
          for (const pat of patterns) {
            if (checkProperties)
              checkMatchingProperties(pat);
            if (it.allErrors) {
              validateProperties(pat);
            } else {
              gen.var(valid, true);
              validateProperties(pat);
              gen.if(valid);
            }
          }
        }
        function checkMatchingProperties(pat) {
          for (const prop in checkProperties) {
            if (new RegExp(pat).test(prop)) {
              (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
            }
          }
        }
        function validateProperties(pat) {
          gen.forIn("key", data, (key) => {
            gen.if((0, codegen_1._)`${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, () => {
              const alwaysValid = alwaysValidPatterns.includes(pat);
              if (!alwaysValid) {
                cxt.subschema({
                  keyword: "patternProperties",
                  schemaProp: pat,
                  dataProp: key,
                  dataPropType: util_2.Type.Str
                }, valid);
              }
              if (it.opts.unevaluated && props !== true) {
                gen.assign((0, codegen_1._)`${props}[${key}]`, true);
              } else if (!alwaysValid && !it.allErrors) {
                gen.if((0, codegen_1.not)(valid), () => gen.break());
              }
            });
          });
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/not.js
var require_not = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/not.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var def = {
      keyword: "not",
      schemaType: ["object", "boolean"],
      trackErrors: true,
      code(cxt) {
        const { gen, schema, it } = cxt;
        if ((0, util_1.alwaysValidSchema)(it, schema)) {
          cxt.fail();
          return;
        }
        const valid = gen.name("valid");
        cxt.subschema({
          keyword: "not",
          compositeRule: true,
          createErrors: false,
          allErrors: false
        }, valid);
        cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
      },
      error: { message: "must NOT be valid" }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/anyOf.js
var require_anyOf = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/anyOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var code_1 = require_code2();
    var def = {
      keyword: "anyOf",
      schemaType: "array",
      trackErrors: true,
      code: code_1.validateUnion,
      error: { message: "must match a schema in anyOf" }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/oneOf.js
var require_oneOf = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/oneOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: "must match exactly one schema in oneOf",
      params: ({ params }) => (0, codegen_1._)`{passingSchemas: ${params.passing}}`
    };
    var def = {
      keyword: "oneOf",
      schemaType: "array",
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, schema, parentSchema, it } = cxt;
        if (!Array.isArray(schema))
          throw new Error("ajv implementation error");
        if (it.opts.discriminator && parentSchema.discriminator)
          return;
        const schArr = schema;
        const valid = gen.let("valid", false);
        const passing = gen.let("passing", null);
        const schValid = gen.name("_valid");
        cxt.setParams({ passing });
        gen.block(validateOneOf);
        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
        function validateOneOf() {
          schArr.forEach((sch, i) => {
            let schCxt;
            if ((0, util_1.alwaysValidSchema)(it, sch)) {
              gen.var(schValid, true);
            } else {
              schCxt = cxt.subschema({
                keyword: "oneOf",
                schemaProp: i,
                compositeRule: true
              }, schValid);
            }
            if (i > 0) {
              gen.if((0, codegen_1._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1._)`[${passing}, ${i}]`).else();
            }
            gen.if(schValid, () => {
              gen.assign(valid, true);
              gen.assign(passing, i);
              if (schCxt)
                cxt.mergeEvaluated(schCxt, codegen_1.Name);
            });
          });
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/allOf.js
var require_allOf = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/allOf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var def = {
      keyword: "allOf",
      schemaType: "array",
      code(cxt) {
        const { gen, schema, it } = cxt;
        if (!Array.isArray(schema))
          throw new Error("ajv implementation error");
        const valid = gen.name("valid");
        schema.forEach((sch, i) => {
          if ((0, util_1.alwaysValidSchema)(it, sch))
            return;
          const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid);
          cxt.ok(valid);
          cxt.mergeEvaluated(schCxt);
        });
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/if.js
var require_if = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/if.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util();
    var error = {
      message: ({ params }) => (0, codegen_1.str)`must match "${params.ifClause}" schema`,
      params: ({ params }) => (0, codegen_1._)`{failingKeyword: ${params.ifClause}}`
    };
    var def = {
      keyword: "if",
      schemaType: ["object", "boolean"],
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, parentSchema, it } = cxt;
        if (parentSchema.then === void 0 && parentSchema.else === void 0) {
          (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
        }
        const hasThen = hasSchema(it, "then");
        const hasElse = hasSchema(it, "else");
        if (!hasThen && !hasElse)
          return;
        const valid = gen.let("valid", true);
        const schValid = gen.name("_valid");
        validateIf();
        cxt.reset();
        if (hasThen && hasElse) {
          const ifClause = gen.let("ifClause");
          cxt.setParams({ ifClause });
          gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
        } else if (hasThen) {
          gen.if(schValid, validateClause("then"));
        } else {
          gen.if((0, codegen_1.not)(schValid), validateClause("else"));
        }
        cxt.pass(valid, () => cxt.error(true));
        function validateIf() {
          const schCxt = cxt.subschema({
            keyword: "if",
            compositeRule: true,
            createErrors: false,
            allErrors: false
          }, schValid);
          cxt.mergeEvaluated(schCxt);
        }
        function validateClause(keyword, ifClause) {
          return () => {
            const schCxt = cxt.subschema({ keyword }, schValid);
            gen.assign(valid, schValid);
            cxt.mergeValidEvaluated(schCxt, valid);
            if (ifClause)
              gen.assign(ifClause, (0, codegen_1._)`${keyword}`);
            else
              cxt.setParams({ ifClause: keyword });
          };
        }
      }
    };
    function hasSchema(it, keyword) {
      const schema = it.schema[keyword];
      return schema !== void 0 && !(0, util_1.alwaysValidSchema)(it, schema);
    }
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/thenElse.js
var require_thenElse = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/thenElse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var def = {
      keyword: ["then", "else"],
      schemaType: ["object", "boolean"],
      code({ keyword, parentSchema, it }) {
        if (parentSchema.if === void 0)
          (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/index.js
var require_applicator = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/applicator/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var additionalItems_1 = require_additionalItems();
    var prefixItems_1 = require_prefixItems();
    var items_1 = require_items();
    var items2020_1 = require_items2020();
    var contains_1 = require_contains();
    var dependencies_1 = require_dependencies();
    var propertyNames_1 = require_propertyNames();
    var additionalProperties_1 = require_additionalProperties();
    var properties_1 = require_properties();
    var patternProperties_1 = require_patternProperties();
    var not_1 = require_not();
    var anyOf_1 = require_anyOf();
    var oneOf_1 = require_oneOf();
    var allOf_1 = require_allOf();
    var if_1 = require_if();
    var thenElse_1 = require_thenElse();
    function getApplicator(draft2020 = false) {
      const applicator = [
        // any
        not_1.default,
        anyOf_1.default,
        oneOf_1.default,
        allOf_1.default,
        if_1.default,
        thenElse_1.default,
        // object
        propertyNames_1.default,
        additionalProperties_1.default,
        dependencies_1.default,
        properties_1.default,
        patternProperties_1.default
      ];
      if (draft2020)
        applicator.push(prefixItems_1.default, items2020_1.default);
      else
        applicator.push(additionalItems_1.default, items_1.default);
      applicator.push(contains_1.default);
      return applicator;
    }
    exports.default = getApplicator;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/format/format.js
var require_format = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/format/format.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message: ({ schemaCode }) => (0, codegen_1.str)`must match format "${schemaCode}"`,
      params: ({ schemaCode }) => (0, codegen_1._)`{format: ${schemaCode}}`
    };
    var def = {
      keyword: "format",
      type: ["number", "string"],
      schemaType: "string",
      $data: true,
      error,
      code(cxt, ruleType) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        const { opts, errSchemaPath, schemaEnv, self: self2 } = it;
        if (!opts.validateFormats)
          return;
        if ($data)
          validate$DataFormat();
        else
          validateFormat();
        function validate$DataFormat() {
          const fmts = gen.scopeValue("formats", {
            ref: self2.formats,
            code: opts.code.formats
          });
          const fDef = gen.const("fDef", (0, codegen_1._)`${fmts}[${schemaCode}]`);
          const fType = gen.let("fType");
          const format = gen.let("format");
          gen.if((0, codegen_1._)`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._)`${fDef}.type || "string"`).assign(format, (0, codegen_1._)`${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._)`"string"`).assign(format, fDef));
          cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
          function unknownFmt() {
            if (opts.strictSchema === false)
              return codegen_1.nil;
            return (0, codegen_1._)`${schemaCode} && !${format}`;
          }
          function invalidFmt() {
            const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1._)`${format}(${data})`;
            const validData = (0, codegen_1._)`(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
            return (0, codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
          }
        }
        function validateFormat() {
          const formatDef = self2.formats[schema];
          if (!formatDef) {
            unknownFormat();
            return;
          }
          if (formatDef === true)
            return;
          const [fmtType, format, fmtRef] = getFormat(formatDef);
          if (fmtType === ruleType)
            cxt.pass(validCondition());
          function unknownFormat() {
            if (opts.strictSchema === false) {
              self2.logger.warn(unknownMsg());
              return;
            }
            throw new Error(unknownMsg());
            function unknownMsg() {
              return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
            }
          }
          function getFormat(fmtDef) {
            const code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema)}` : void 0;
            const fmt = gen.scopeValue("formats", { key: schema, ref: fmtDef, code });
            if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
              return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1._)`${fmt}.validate`];
            }
            return ["string", fmtDef, fmt];
          }
          function validCondition() {
            if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
              if (!schemaEnv.$async)
                throw new Error("async format in sync schema");
              return (0, codegen_1._)`await ${fmtRef}(${data})`;
            }
            return typeof format == "function" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;
          }
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/format/index.js
var require_format2 = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/format/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var format_1 = require_format();
    var format = [format_1.default];
    exports.default = format;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/metadata.js
var require_metadata = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/metadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.contentVocabulary = exports.metadataVocabulary = void 0;
    exports.metadataVocabulary = [
      "title",
      "description",
      "default",
      "deprecated",
      "readOnly",
      "writeOnly",
      "examples"
    ];
    exports.contentVocabulary = [
      "contentMediaType",
      "contentEncoding",
      "contentSchema"
    ];
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/draft7.js
var require_draft7 = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/draft7.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = require_core2();
    var validation_1 = require_validation();
    var applicator_1 = require_applicator();
    var format_1 = require_format2();
    var metadata_1 = require_metadata();
    var draft7Vocabularies = [
      core_1.default,
      validation_1.default,
      (0, applicator_1.default)(),
      format_1.default,
      metadata_1.metadataVocabulary,
      metadata_1.contentVocabulary
    ];
    exports.default = draft7Vocabularies;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/discriminator/types.js
var require_types = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/discriminator/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DiscrError = void 0;
    var DiscrError;
    (function(DiscrError2) {
      DiscrError2["Tag"] = "tag";
      DiscrError2["Mapping"] = "mapping";
    })(DiscrError || (exports.DiscrError = DiscrError = {}));
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/discriminator/index.js
var require_discriminator = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/vocabularies/discriminator/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var codegen_1 = require_codegen();
    var types_1 = require_types();
    var compile_1 = require_compile();
    var ref_error_1 = require_ref_error();
    var util_1 = require_util();
    var error = {
      message: ({ params: { discrError, tagName } }) => discrError === types_1.DiscrError.Tag ? `tag "${tagName}" must be string` : `value of tag "${tagName}" must be in oneOf`,
      params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`
    };
    var def = {
      keyword: "discriminator",
      type: "object",
      schemaType: "object",
      error,
      code(cxt) {
        const { gen, data, schema, parentSchema, it } = cxt;
        const { oneOf } = parentSchema;
        if (!it.opts.discriminator) {
          throw new Error("discriminator: requires discriminator option");
        }
        const tagName = schema.propertyName;
        if (typeof tagName != "string")
          throw new Error("discriminator: requires propertyName");
        if (schema.mapping)
          throw new Error("discriminator: mapping is not supported");
        if (!oneOf)
          throw new Error("discriminator: requires oneOf keyword");
        const valid = gen.let("valid", false);
        const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);
        gen.if((0, codegen_1._)`typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName }));
        cxt.ok(valid);
        function validateMapping() {
          const mapping = getMapping();
          gen.if(false);
          for (const tagValue in mapping) {
            gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
            gen.assign(valid, applyTagSchema(mapping[tagValue]));
          }
          gen.else();
          cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName });
          gen.endIf();
        }
        function applyTagSchema(schemaProp) {
          const _valid = gen.name("valid");
          const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
          cxt.mergeEvaluated(schCxt, codegen_1.Name);
          return _valid;
        }
        function getMapping() {
          var _a;
          const oneOfMapping = {};
          const topRequired = hasRequired(parentSchema);
          let tagRequired = true;
          for (let i = 0; i < oneOf.length; i++) {
            let sch = oneOf[i];
            if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
              const ref = sch.$ref;
              sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, ref);
              if (sch instanceof compile_1.SchemaEnv)
                sch = sch.schema;
              if (sch === void 0)
                throw new ref_error_1.default(it.opts.uriResolver, it.baseId, ref);
            }
            const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
            if (typeof propSch != "object") {
              throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
            }
            tagRequired = tagRequired && (topRequired || hasRequired(sch));
            addMappings(propSch, i);
          }
          if (!tagRequired)
            throw new Error(`discriminator: "${tagName}" must be required`);
          return oneOfMapping;
          function hasRequired({ required }) {
            return Array.isArray(required) && required.includes(tagName);
          }
          function addMappings(sch, i) {
            if (sch.const) {
              addMapping(sch.const, i);
            } else if (sch.enum) {
              for (const tagValue of sch.enum) {
                addMapping(tagValue, i);
              }
            } else {
              throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
            }
          }
          function addMapping(tagValue, i) {
            if (typeof tagValue != "string" || tagValue in oneOfMapping) {
              throw new Error(`discriminator: "${tagName}" values must be unique strings`);
            }
            oneOfMapping[tagValue] = i;
          }
        }
      }
    };
    exports.default = def;
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/refs/json-schema-draft-07.json
var require_json_schema_draft_07 = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/refs/json-schema-draft-07.json"(exports, module2) {
    module2.exports = {
      $schema: "http://json-schema.org/draft-07/schema#",
      $id: "http://json-schema.org/draft-07/schema#",
      title: "Core schema meta-schema",
      definitions: {
        schemaArray: {
          type: "array",
          minItems: 1,
          items: { $ref: "#" }
        },
        nonNegativeInteger: {
          type: "integer",
          minimum: 0
        },
        nonNegativeIntegerDefault0: {
          allOf: [{ $ref: "#/definitions/nonNegativeInteger" }, { default: 0 }]
        },
        simpleTypes: {
          enum: ["array", "boolean", "integer", "null", "number", "object", "string"]
        },
        stringArray: {
          type: "array",
          items: { type: "string" },
          uniqueItems: true,
          default: []
        }
      },
      type: ["object", "boolean"],
      properties: {
        $id: {
          type: "string",
          format: "uri-reference"
        },
        $schema: {
          type: "string",
          format: "uri"
        },
        $ref: {
          type: "string",
          format: "uri-reference"
        },
        $comment: {
          type: "string"
        },
        title: {
          type: "string"
        },
        description: {
          type: "string"
        },
        default: true,
        readOnly: {
          type: "boolean",
          default: false
        },
        examples: {
          type: "array",
          items: true
        },
        multipleOf: {
          type: "number",
          exclusiveMinimum: 0
        },
        maximum: {
          type: "number"
        },
        exclusiveMaximum: {
          type: "number"
        },
        minimum: {
          type: "number"
        },
        exclusiveMinimum: {
          type: "number"
        },
        maxLength: { $ref: "#/definitions/nonNegativeInteger" },
        minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
        pattern: {
          type: "string",
          format: "regex"
        },
        additionalItems: { $ref: "#" },
        items: {
          anyOf: [{ $ref: "#" }, { $ref: "#/definitions/schemaArray" }],
          default: true
        },
        maxItems: { $ref: "#/definitions/nonNegativeInteger" },
        minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
        uniqueItems: {
          type: "boolean",
          default: false
        },
        contains: { $ref: "#" },
        maxProperties: { $ref: "#/definitions/nonNegativeInteger" },
        minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
        required: { $ref: "#/definitions/stringArray" },
        additionalProperties: { $ref: "#" },
        definitions: {
          type: "object",
          additionalProperties: { $ref: "#" },
          default: {}
        },
        properties: {
          type: "object",
          additionalProperties: { $ref: "#" },
          default: {}
        },
        patternProperties: {
          type: "object",
          additionalProperties: { $ref: "#" },
          propertyNames: { format: "regex" },
          default: {}
        },
        dependencies: {
          type: "object",
          additionalProperties: {
            anyOf: [{ $ref: "#" }, { $ref: "#/definitions/stringArray" }]
          }
        },
        propertyNames: { $ref: "#" },
        const: true,
        enum: {
          type: "array",
          items: true,
          minItems: 1,
          uniqueItems: true
        },
        type: {
          anyOf: [
            { $ref: "#/definitions/simpleTypes" },
            {
              type: "array",
              items: { $ref: "#/definitions/simpleTypes" },
              minItems: 1,
              uniqueItems: true
            }
          ]
        },
        format: { type: "string" },
        contentMediaType: { type: "string" },
        contentEncoding: { type: "string" },
        if: { $ref: "#" },
        then: { $ref: "#" },
        else: { $ref: "#" },
        allOf: { $ref: "#/definitions/schemaArray" },
        anyOf: { $ref: "#/definitions/schemaArray" },
        oneOf: { $ref: "#/definitions/schemaArray" },
        not: { $ref: "#" }
      },
      default: true
    };
  }
});

// node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/ajv.js
var require_ajv = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/node_modules/ajv/dist/ajv.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = exports.Ajv = void 0;
    var core_1 = require_core();
    var draft7_1 = require_draft7();
    var discriminator_1 = require_discriminator();
    var draft7MetaSchema = require_json_schema_draft_07();
    var META_SUPPORT_DATA = ["/properties"];
    var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
    var Ajv = class extends core_1.default {
      _addVocabularies() {
        super._addVocabularies();
        draft7_1.default.forEach((v) => this.addVocabulary(v));
        if (this.opts.discriminator)
          this.addKeyword(discriminator_1.default);
      }
      _addDefaultMetaSchema() {
        super._addDefaultMetaSchema();
        if (!this.opts.meta)
          return;
        const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;
        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
        this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
      }
      defaultMeta() {
        return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0);
      }
    };
    exports.Ajv = Ajv;
    module2.exports = exports = Ajv;
    module2.exports.Ajv = Ajv;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Ajv;
    var validate_1 = require_validate();
    Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function() {
      return validate_1.KeywordCxt;
    } });
    var codegen_1 = require_codegen();
    Object.defineProperty(exports, "_", { enumerable: true, get: function() {
      return codegen_1._;
    } });
    Object.defineProperty(exports, "str", { enumerable: true, get: function() {
      return codegen_1.str;
    } });
    Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
      return codegen_1.stringify;
    } });
    Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
      return codegen_1.nil;
    } });
    Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
      return codegen_1.Name;
    } });
    Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
      return codegen_1.CodeGen;
    } });
    var validation_error_1 = require_validation_error();
    Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function() {
      return validation_error_1.default;
    } });
    var ref_error_1 = require_ref_error();
    Object.defineProperty(exports, "MissingRefError", { enumerable: true, get: function() {
      return ref_error_1.default;
    } });
  }
});

// node_modules/@chroma-core/ai-embeddings-common/dist/index.js
var require_dist = __commonJS({
  "node_modules/@chroma-core/ai-embeddings-common/dist/index.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp3({}, "__esModule", { value: true }), mod);
    var index_exports = {};
    __export2(index_exports, {
      getAvailableSchemas: () => getAvailableSchemas,
      getSchemaInfo: () => getSchemaInfo,
      getSchemaVersion: () => getSchemaVersion,
      isBrowser: () => isBrowser,
      loadSchema: () => loadSchema,
      snakeCase: () => snakeCase,
      validateConfigSchema: () => validateConfigSchema2
    });
    module2.exports = __toCommonJS2(index_exports);
    var amazon_bedrock_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Amazon Bedrock Embedding Function Schema",
      description: "Schema for the Amazon Bedrock embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        session_args: {
          type: "object",
          description: "The arguments to pass to the boto3 session"
        },
        model_name: {
          type: "string",
          description: "The name of the model to use for embeddings"
        },
        kwargs: {
          type: "object",
          description: "Additional arguments to pass to the Amazon Bedrock client"
        }
      },
      required: [
        "session_args",
        "model_name",
        "kwargs"
      ],
      additionalProperties: false
    };
    var base_schema_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Embedding Function Base Schema",
      description: "Base schema for all embedding functions in Chroma",
      type: "object",
      properties: {
        version: {
          type: "string",
          description: "Schema version for the embedding function"
        },
        name: {
          type: "string",
          description: "Name of the embedding function"
        },
        config: {
          type: "object",
          description: "Configuration parameters for the embedding function"
        }
      },
      required: [
        "version",
        "name",
        "config"
      ],
      additionalProperties: false
    };
    var chroma_langchain_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Langchain Embedding Function Schema",
      description: "Schema for the langchain embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        embedding_function: {
          type: "string",
          description: "Parameter embedding_function for the langchain embedding function"
        }
      },
      required: [
        "embedding_function"
      ],
      additionalProperties: false
    };
    var cohere_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Cohere Embedding Function Schema",
      description: "Schema for the Cohere embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "The name of the model to use for text embeddings"
        },
        api_key_env_var: {
          type: "string",
          description: "Environment variable name that contains your API key for the Cohere API"
        }
      },
      required: [
        "api_key_env_var",
        "model_name"
      ],
      additionalProperties: false
    };
    var default_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Default Embedding Function Schema",
      description: "Schema for the default embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {},
      required: [],
      additionalProperties: false
    };
    var google_generative_ai_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Google Generative AI Embedding Function Schema",
      description: "Schema for the Google Generative AI embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "The name of the model to use for text embeddings"
        },
        task_type: {
          type: "string",
          description: "The task type for the embeddings (e.g., RETRIEVAL_DOCUMENT)"
        },
        api_key_env_var: {
          type: "string",
          description: "Environment variable name that contains your API key for the Google Generative AI API"
        }
      },
      required: [
        "api_key_env_var",
        "model_name",
        "task_type"
      ],
      additionalProperties: false
    };
    var google_palm_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Google PaLM Embedding Function Schema",
      description: "Schema for the Google PaLM embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "The name of the model to use for text embeddings"
        },
        api_key_env_var: {
          type: "string",
          description: "Environment variable name that contains your API key for the Google PaLM API"
        }
      },
      required: [
        "api_key_env_var",
        "model_name"
      ],
      additionalProperties: false
    };
    var google_vertex_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Google Vertex Embedding Function Schema",
      description: "Schema for the Google Vertex embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "The name of the model to use for text embeddings"
        },
        project_id: {
          type: "string",
          description: "The Google Cloud project ID"
        },
        region: {
          type: "string",
          description: "The Google Cloud region"
        },
        api_key_env_var: {
          type: "string",
          description: "Environment variable name that contains your API key for the Google Vertex API"
        }
      },
      required: [
        "api_key_env_var",
        "model_name",
        "project_id",
        "region"
      ],
      additionalProperties: false
    };
    var huggingface_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "HuggingFace Embedding Function Schema",
      description: "Schema for the HuggingFace embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "The name of the model to use for text embeddings"
        },
        api_key_env_var: {
          type: "string",
          description: "Environment variable name that contains your API key for the HuggingFace API"
        }
      },
      required: [
        "api_key_env_var",
        "model_name"
      ],
      additionalProperties: false
    };
    var huggingface_server_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "HuggingFace Embedding Server Schema",
      description: "Schema for the HuggingFace embedding server configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        url: {
          type: "string",
          description: "The URL of the HuggingFace Embedding Server"
        },
        api_key_env_var: {
          type: "string",
          description: "The environment variable name that contains your API key for the HuggingFace API"
        }
      },
      required: [
        "url"
      ],
      additionalProperties: false
    };
    var instructor_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Instructor Embedding Function Schema",
      description: "Schema for the instructor embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "Parameter model_name for the instructor embedding function"
        },
        device: {
          type: "string",
          description: "Parameter device for the instructor embedding function"
        },
        instruction: {
          type: "string",
          description: "Parameter instruction for the instructor embedding function"
        }
      },
      required: [
        "model_name",
        "device"
      ],
      additionalProperties: false
    };
    var jina_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Jina Embedding Function Schema",
      description: "Schema for the jina embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "Parameter model_name for the jina embedding function"
        },
        api_key_env_var: {
          type: "string",
          description: "Parameter api_key_env_var for the jina embedding function"
        },
        task: {
          type: "string",
          description: "Parameter task for the jina embedding function"
        },
        late_chunking: {
          type: "boolean",
          description: "Parameter late_chunking for the jina embedding function"
        },
        truncate: {
          type: "boolean",
          description: "Parameter truncate for the jina embedding function"
        },
        dimensions: {
          type: "integer",
          description: "Parameter dimensions for the jina embedding function"
        },
        embedding_type: {
          type: "string",
          description: "Parameter embedding_type for the jina embedding function"
        },
        normalized: {
          type: "boolean",
          description: "Parameter normalized for the jina embedding function"
        }
      },
      required: [
        "api_key_env_var",
        "model_name"
      ],
      additionalProperties: false
    };
    var ollama_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Ollama Embedding Function Schema",
      description: "Schema for the Ollama embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        url: {
          type: "string",
          description: "The URL of the Ollama server"
        },
        model_name: {
          type: "string",
          description: "The name of the model to use for embeddings"
        },
        timeout: {
          type: "integer",
          description: "Timeout in seconds for the API request"
        }
      },
      required: [
        "url",
        "model_name"
      ],
      additionalProperties: false
    };
    var onnx_mini_lm_l6_v2_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Onnx_mini_lm_l6_v2 Embedding Function Schema",
      description: "Schema for the onnx_mini_lm_l6_v2 embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        preferred_providers: {
          type: "array",
          items: {
            type: "string"
          },
          description: "Parameter preferred_providers for the onnx_mini_lm_l6_v2 embedding function"
        }
      },
      required: [],
      additionalProperties: false
    };
    var open_clip_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Open_clip Embedding Function Schema",
      description: "Schema for the open_clip embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "Parameter model_name for the open_clip embedding function"
        },
        checkpoint: {
          type: "string",
          description: "Parameter checkpoint for the open_clip embedding function"
        },
        device: {
          type: "string",
          description: "Parameter device for the open_clip embedding function"
        }
      },
      required: [
        "model_name",
        "checkpoint",
        "device"
      ],
      additionalProperties: false
    };
    var openai_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "OpenAI Embedding Function Schema",
      description: "Schema for the OpenAI embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "The name of the model to use for text embeddings"
        },
        organization_id: {
          type: [
            "string",
            "null"
          ],
          description: "The OpenAI organization ID if applicable"
        },
        api_base: {
          type: [
            "string",
            "null"
          ],
          description: "The base path for the API"
        },
        api_type: {
          type: [
            "string",
            "null"
          ],
          description: "The type of the API deployment"
        },
        api_version: {
          type: [
            "string",
            "null"
          ],
          description: "The api version for the API"
        },
        deployment_id: {
          type: [
            "string",
            "null"
          ],
          description: "Deployment ID for Azure OpenAI"
        },
        default_headers: {
          type: [
            "object",
            "null"
          ],
          description: "A mapping of default headers to be sent with each API request"
        },
        dimensions: {
          type: [
            "integer",
            "null"
          ],
          description: "The number of dimensions for the embeddings"
        },
        api_key_env_var: {
          type: "string",
          description: "Environment variable name that contains your API key for the OpenAI API"
        }
      },
      required: [
        "api_key_env_var",
        "model_name"
      ],
      additionalProperties: false
    };
    var roboflow_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Roboflow Embedding Function Schema",
      description: "Schema for the roboflow embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        api_url: {
          type: "string",
          description: "Parameter api_url for the roboflow embedding function"
        },
        api_key_env_var: {
          type: "string",
          description: "Parameter api_key_env_var for the roboflow embedding function"
        }
      },
      required: [
        "api_key_env_var",
        "api_url"
      ],
      additionalProperties: false
    };
    var sentence_transformer_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "SentenceTransformer Embedding Function Schema",
      description: "Schema for the SentenceTransformer embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "Identifier of the SentenceTransformer model"
        },
        device: {
          type: "string",
          description: "Device used for computation"
        },
        normalize_embeddings: {
          type: "boolean",
          description: "Whether to normalize returned vectors"
        },
        kwargs: {
          type: "object",
          description: "Additional arguments to pass to the SentenceTransformer model",
          additionalProperties: {
            type: [
              "string",
              "integer",
              "number",
              "boolean",
              "array",
              "object"
            ]
          }
        }
      },
      required: [
        "model_name",
        "device",
        "normalize_embeddings"
      ],
      additionalProperties: false
    };
    var text2vec_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Text2vec Embedding Function Schema",
      description: "Schema for the text2vec embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "Parameter model_name for the text2vec embedding function"
        }
      },
      required: [
        "model_name"
      ],
      additionalProperties: false
    };
    var transformers_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Transformers Embedding Function Schema",
      description: "Schema for the Transformers embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model: {
          type: "string",
          description: "Identifier of the SentenceTransformer model"
        },
        revision: {
          type: "string",
          description: "Specific model version to use (can be a branch, tag name, or commit id)"
        },
        quantized: {
          type: "boolean",
          description: "Whether to load the 8-bit quantized version of the model"
        }
      },
      required: [
        "model",
        "revision",
        "quantized"
      ],
      additionalProperties: false
    };
    var voyageai_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Voyageai Embedding Function Schema",
      description: "Schema for the voyageai embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "Parameter model_name for the voyageai embedding function"
        },
        api_key_env_var: {
          type: "string",
          description: "Parameter api_key_env_var for the voyageai embedding function"
        }
      },
      required: [
        "api_key_env_var",
        "model_name"
      ],
      additionalProperties: false
    };
    var cloudflare_workers_ai_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Cloudflare Workers AI Embedding Function Schema",
      description: "Schema for the Cloudflare Workers AI embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "The name of the model to use for text embeddings"
        },
        account_id: {
          type: "string",
          description: "The account ID for the Cloudflare Workers AI API"
        },
        api_key_env_var: {
          type: "string",
          description: "The environment variable name that contains your API key for the Cloudflare Workers AI API"
        },
        gateway_id: {
          type: "string",
          description: "The ID of the Cloudflare AI Gateway to use for a more customized solution"
        }
      },
      required: [
        "api_key_env_var",
        "model_name",
        "account_id"
      ],
      additionalProperties: false
    };
    var together_ai_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Together AI Embedding Function Schema",
      description: "Schema for the Together AI embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model_name: {
          type: "string",
          description: "The name of the model to use for text embeddings"
        },
        api_key_env_var: {
          type: "string",
          description: "The environment variable name that contains your API key for the Together AI API"
        }
      },
      required: [
        "api_key_env_var",
        "model_name"
      ],
      additionalProperties: false
    };
    var mistral_default = {
      $schema: "http://json-schema.org/draft-07/schema#",
      title: "Mistral Embedding Function Schema",
      description: "Schema for the Mistral embedding function configuration",
      version: "1.0.0",
      type: "object",
      properties: {
        model: {
          type: "string",
          description: "Parameter model for the Mistral embedding function"
        },
        api_key_env_var: {
          type: "string",
          description: "Parameter api_key_env_var for the Mistral embedding function"
        }
      },
      required: [
        "api_key_env_var",
        "model"
      ],
      additionalProperties: false
    };
    var import_ajv = __toESM2(require_ajv());
    var ajv = new import_ajv.default({
      strict: false,
      // Allow unknown keywords
      allErrors: true
    });
    var schemaMap = {
      "amazon-bedrock": amazon_bedrock_default,
      "base-schema": base_schema_default,
      "chroma-langchain": chroma_langchain_default,
      cohere: cohere_default,
      default: default_default,
      "google-generative-ai": google_generative_ai_default,
      "google-palm": google_palm_default,
      "google-vertex": google_vertex_default,
      huggingface: huggingface_default,
      "huggingface-server": huggingface_server_default,
      instructor: instructor_default,
      jina: jina_default,
      ollama: ollama_default,
      "onnx-mini-lm-l6-v2": onnx_mini_lm_l6_v2_default,
      "open-clip": open_clip_default,
      openai: openai_default,
      roboflow: roboflow_default,
      "sentence-transformer": sentence_transformer_default,
      text2vec: text2vec_default,
      transformers: transformers_default,
      voyageai: voyageai_default,
      "cloudflare-worker-ai": cloudflare_workers_ai_default,
      "together-ai": together_ai_default,
      mistral: mistral_default
    };
    function loadSchema(schemaName) {
      if (!schemaMap[schemaName]) {
        throw new Error(`Schema '${schemaName}' not found`);
      }
      return schemaMap[schemaName];
    }
    function validateConfigSchema2(config, schemaName) {
      const schema = loadSchema(schemaName);
      const validate = ajv.compile(schema);
      const valid = validate(config);
      if (!valid) {
        const errors = validate.errors || [];
        const errorPaths = errors.map((e) => `${e.instancePath || "/"}: ${e.message}`).join(", ");
        throw new Error(
          `Config validation failed for schema '${schemaName}': ${errorPaths}`
        );
      }
    }
    function getSchemaVersion(schemaName) {
      const schema = loadSchema(schemaName);
      return schema.version || "1.0.0";
    }
    function getAvailableSchemas() {
      return Object.keys(schemaMap).filter(
        (name) => name !== "base_schema"
      );
    }
    function getSchemaInfo() {
      const schemaInfo = {};
      for (const schemaName of getAvailableSchemas()) {
        try {
          const schema = schemaMap[schemaName];
          schemaInfo[schemaName] = {
            version: schema.version || "1.0.0",
            title: schema.title || "",
            description: schema.description || ""
          };
        } catch (error) {
          console.error(`Failed to load schema '${schemaName}':`, error);
        }
      }
      return schemaInfo;
    }
    var camelToSnake = (str) => {
      return str.replace(/([A-Z])/g, "_$1").toLowerCase();
    };
    var snakeCase = (input) => {
      if (Array.isArray(input)) {
        return input.map(snakeCase);
      }
      if (input !== null && typeof input === "object") {
        return Object.fromEntries(
          Object.entries(input).map(([key, value]) => [
            camelToSnake(key),
            snakeCase(value)
          ])
        );
      }
      return input;
    };
    var isBrowser = () => {
      return typeof window !== "undefined" && typeof window.document !== "undefined";
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/backend-impl.js
var backends, backendsSortedByPriority, registerBackend, tryResolveAndInitializeBackend, resolveBackendAndExecutionProviders;
var init_backend_impl = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/backend-impl.js"() {
    backends = /* @__PURE__ */ new Map();
    backendsSortedByPriority = [];
    registerBackend = (name, backend, priority) => {
      if (backend && typeof backend.init === "function" && typeof backend.createInferenceSessionHandler === "function") {
        const currentBackend = backends.get(name);
        if (currentBackend === void 0) {
          backends.set(name, { backend, priority });
        } else if (currentBackend.priority > priority) {
          return;
        } else if (currentBackend.priority === priority) {
          if (currentBackend.backend !== backend) {
            throw new Error(`cannot register backend "${name}" using priority ${priority}`);
          }
        }
        if (priority >= 0) {
          const i = backendsSortedByPriority.indexOf(name);
          if (i !== -1) {
            backendsSortedByPriority.splice(i, 1);
          }
          for (let i2 = 0; i2 < backendsSortedByPriority.length; i2++) {
            if (backends.get(backendsSortedByPriority[i2]).priority <= priority) {
              backendsSortedByPriority.splice(i2, 0, name);
              return;
            }
          }
          backendsSortedByPriority.push(name);
        }
        return;
      }
      throw new TypeError("not a valid backend");
    };
    tryResolveAndInitializeBackend = async (backendName) => {
      const backendInfo = backends.get(backendName);
      if (!backendInfo) {
        return "backend not found.";
      }
      if (backendInfo.initialized) {
        return backendInfo.backend;
      } else if (backendInfo.aborted) {
        return backendInfo.error;
      } else {
        const isInitializing = !!backendInfo.initPromise;
        try {
          if (!isInitializing) {
            backendInfo.initPromise = backendInfo.backend.init(backendName);
          }
          await backendInfo.initPromise;
          backendInfo.initialized = true;
          return backendInfo.backend;
        } catch (e) {
          if (!isInitializing) {
            backendInfo.error = `${e}`;
            backendInfo.aborted = true;
          }
          return backendInfo.error;
        } finally {
          delete backendInfo.initPromise;
        }
      }
    };
    resolveBackendAndExecutionProviders = async (options) => {
      const eps = options.executionProviders || [];
      const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
      const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
      let backend;
      const errors = [];
      const availableBackendNames = /* @__PURE__ */ new Set();
      for (const backendName of backendNames) {
        const resolveResult = await tryResolveAndInitializeBackend(backendName);
        if (typeof resolveResult === "string") {
          errors.push({ name: backendName, err: resolveResult });
        } else {
          if (!backend) {
            backend = resolveResult;
          }
          if (backend === resolveResult) {
            availableBackendNames.add(backendName);
          }
        }
      }
      if (!backend) {
        throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(", ")}`);
      }
      for (const { name, err } of errors) {
        if (backendHints.includes(name)) {
          console.warn(`removing requested execution provider "${name}" from session options because it is not available: ${err}`);
        }
      }
      const filteredEps = eps.filter((i) => availableBackendNames.has(typeof i === "string" ? i : i.name));
      return [
        backend,
        new Proxy(options, {
          get: (target, prop) => {
            if (prop === "executionProviders") {
              return filteredEps;
            }
            return Reflect.get(target, prop);
          }
        })
      ];
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/backend.js
var init_backend = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/backend.js"() {
    init_backend_impl();
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/version.js
var version;
var init_version = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/version.js"() {
    version = "1.21.0";
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/env-impl.js
var logLevelValue, env;
var init_env_impl = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/env-impl.js"() {
    init_version();
    logLevelValue = "warning";
    env = {
      wasm: {},
      webgl: {},
      webgpu: {},
      versions: { common: version },
      set logLevel(value) {
        if (value === void 0) {
          return;
        }
        if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {
          throw new Error(`Unsupported logging level: ${value}`);
        }
        logLevelValue = value;
      },
      get logLevel() {
        return logLevelValue;
      }
    };
    Object.defineProperty(env, "logLevel", { enumerable: true });
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/env.js
var env2;
var init_env = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/env.js"() {
    init_env_impl();
    env2 = env;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js
var tensorToDataURL, tensorToImageData;
var init_tensor_conversion_impl = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"() {
    tensorToDataURL = (tensor, options) => {
      const canvas = typeof document !== "undefined" ? document.createElement("canvas") : new OffscreenCanvas(1, 1);
      canvas.width = tensor.dims[3];
      canvas.height = tensor.dims[2];
      const pixels2DContext = canvas.getContext("2d");
      if (pixels2DContext != null) {
        let width;
        let height;
        if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
          width = tensor.dims[2];
          height = tensor.dims[3];
        } else {
          width = tensor.dims[3];
          height = tensor.dims[2];
        }
        const inputformat = options?.format !== void 0 ? options.format : "RGB";
        const norm = options?.norm;
        let normMean;
        let normBias;
        if (norm === void 0 || norm.mean === void 0) {
          normMean = [255, 255, 255, 255];
        } else {
          if (typeof norm.mean === "number") {
            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
          } else {
            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];
            if (norm.mean[3] !== void 0) {
              normMean[3] = norm.mean[3];
            }
          }
        }
        if (norm === void 0 || norm.bias === void 0) {
          normBias = [0, 0, 0, 0];
        } else {
          if (typeof norm.bias === "number") {
            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
          } else {
            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
            if (norm.bias[3] !== void 0) {
              normBias[3] = norm.bias[3];
            }
          }
        }
        const stride = height * width;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGBA") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
          aTensorPointer = stride * 3;
        } else if (inputformat === "RGB") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
        } else if (inputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        }
        for (let i = 0; i < height; i++) {
          for (let j = 0; j < width; j++) {
            const R2 = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
            const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
            const B2 = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
            const A2 = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
            pixels2DContext.fillStyle = "rgba(" + R2 + "," + G + "," + B2 + "," + A2 + ")";
            pixels2DContext.fillRect(j, i, 1, 1);
          }
        }
        if ("toDataURL" in canvas) {
          return canvas.toDataURL();
        } else {
          throw new Error("toDataURL is not supported");
        }
      } else {
        throw new Error("Can not access image data");
      }
    };
    tensorToImageData = (tensor, options) => {
      const pixels2DContext = typeof document !== "undefined" ? document.createElement("canvas").getContext("2d") : new OffscreenCanvas(1, 1).getContext("2d");
      let image;
      if (pixels2DContext != null) {
        let width;
        let height;
        let channels;
        if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
          width = tensor.dims[2];
          height = tensor.dims[1];
          channels = tensor.dims[3];
        } else {
          width = tensor.dims[3];
          height = tensor.dims[2];
          channels = tensor.dims[1];
        }
        const inputformat = options !== void 0 ? options.format !== void 0 ? options.format : "RGB" : "RGB";
        const norm = options?.norm;
        let normMean;
        let normBias;
        if (norm === void 0 || norm.mean === void 0) {
          normMean = [255, 255, 255, 255];
        } else {
          if (typeof norm.mean === "number") {
            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
          } else {
            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];
            if (norm.mean[3] !== void 0) {
              normMean[3] = norm.mean[3];
            }
          }
        }
        if (norm === void 0 || norm.bias === void 0) {
          normBias = [0, 0, 0, 0];
        } else {
          if (typeof norm.bias === "number") {
            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
          } else {
            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
            if (norm.bias[3] !== void 0) {
              normBias[3] = norm.bias[3];
            }
          }
        }
        const stride = height * width;
        if (options !== void 0) {
          if (options.format !== void 0 && channels === 4 && options.format !== "RGBA" || channels === 3 && options.format !== "RGB" && options.format !== "BGR") {
            throw new Error("Tensor format doesn't match input tensor dims");
          }
        }
        const step = 4;
        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGBA") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
          aTensorPointer = stride * 3;
        } else if (inputformat === "RGB") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
        } else if (inputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        }
        image = pixels2DContext.createImageData(width, height);
        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {
          image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
          image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
          image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
          image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
        }
      } else {
        throw new Error("Can not access image data");
      }
      return image;
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js
var bufferToTensor, tensorFromImage, tensorFromTexture, tensorFromGpuBuffer, tensorFromMLTensor, tensorFromPinnedBuffer;
var init_tensor_factory_impl = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"() {
    init_tensor_impl();
    bufferToTensor = (buffer, options) => {
      if (buffer === void 0) {
        throw new Error("Image buffer must be defined");
      }
      if (options.height === void 0 || options.width === void 0) {
        throw new Error("Image height and width must be defined");
      }
      if (options.tensorLayout === "NHWC") {
        throw new Error("NHWC Tensor layout is not supported yet");
      }
      const { height, width } = options;
      const norm = options.norm ?? { mean: 255, bias: 0 };
      let normMean;
      let normBias;
      if (typeof norm.mean === "number") {
        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
      } else {
        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];
      }
      if (typeof norm.bias === "number") {
        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
      } else {
        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];
      }
      const inputformat = options.format !== void 0 ? options.format : "RGBA";
      const outputformat = options.tensorFormat !== void 0 ? options.tensorFormat !== void 0 ? options.tensorFormat : "RGB" : "RGB";
      const stride = height * width;
      const float32Data = outputformat === "RGBA" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);
      let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
      let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
      if (inputformat === "RGB") {
        step = 3;
        rImagePointer = 0;
        gImagePointer = 1;
        bImagePointer = 2;
        aImagePointer = -1;
      }
      if (outputformat === "RGBA") {
        aTensorPointer = stride * 3;
      } else if (outputformat === "RBG") {
        rTensorPointer = 0;
        bTensorPointer = stride;
        gTensorPointer = stride * 2;
      } else if (outputformat === "BGR") {
        bTensorPointer = 0;
        gTensorPointer = stride;
        rTensorPointer = stride * 2;
      }
      for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {
        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];
        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];
        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];
        if (aTensorPointer !== -1 && aImagePointer !== -1) {
          float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];
        }
      }
      const outputTensor = outputformat === "RGBA" ? new Tensor("float32", float32Data, [1, 4, height, width]) : new Tensor("float32", float32Data, [1, 3, height, width]);
      return outputTensor;
    };
    tensorFromImage = async (image, options) => {
      const isHTMLImageEle = typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement;
      const isImageDataEle = typeof ImageData !== "undefined" && image instanceof ImageData;
      const isImageBitmap = typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap;
      const isString = typeof image === "string";
      let data;
      let bufferToTensorOptions = options ?? {};
      const createCanvas = () => {
        if (typeof document !== "undefined") {
          return document.createElement("canvas");
        } else if (typeof OffscreenCanvas !== "undefined") {
          return new OffscreenCanvas(1, 1);
        } else {
          throw new Error("Canvas is not supported");
        }
      };
      const createCanvasContext = (canvas) => {
        if (typeof HTMLCanvasElement !== "undefined" && canvas instanceof HTMLCanvasElement) {
          return canvas.getContext("2d");
        } else if (canvas instanceof OffscreenCanvas) {
          return canvas.getContext("2d");
        } else {
          return null;
        }
      };
      if (isHTMLImageEle) {
        const canvas = createCanvas();
        canvas.width = image.width;
        canvas.height = image.height;
        const pixels2DContext = createCanvasContext(canvas);
        if (pixels2DContext != null) {
          let height = image.height;
          let width = image.width;
          if (options !== void 0 && options.resizedHeight !== void 0 && options.resizedWidth !== void 0) {
            height = options.resizedHeight;
            width = options.resizedWidth;
          }
          if (options !== void 0) {
            bufferToTensorOptions = options;
            if (options.tensorFormat !== void 0) {
              throw new Error("Image input config format must be RGBA for HTMLImageElement");
            } else {
              bufferToTensorOptions.tensorFormat = "RGBA";
            }
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
          } else {
            bufferToTensorOptions.tensorFormat = "RGBA";
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
          }
          pixels2DContext.drawImage(image, 0, 0);
          data = pixels2DContext.getImageData(0, 0, width, height).data;
        } else {
          throw new Error("Can not access image data");
        }
      } else if (isImageDataEle) {
        let height;
        let width;
        if (options !== void 0 && options.resizedWidth !== void 0 && options.resizedHeight !== void 0) {
          height = options.resizedHeight;
          width = options.resizedWidth;
        } else {
          height = image.height;
          width = image.width;
        }
        if (options !== void 0) {
          bufferToTensorOptions = options;
        }
        bufferToTensorOptions.format = "RGBA";
        bufferToTensorOptions.height = height;
        bufferToTensorOptions.width = width;
        if (options !== void 0) {
          const tempCanvas = createCanvas();
          tempCanvas.width = width;
          tempCanvas.height = height;
          const pixels2DContext = createCanvasContext(tempCanvas);
          if (pixels2DContext != null) {
            pixels2DContext.putImageData(image, 0, 0);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
          } else {
            throw new Error("Can not access image data");
          }
        } else {
          data = image.data;
        }
      } else if (isImageBitmap) {
        if (options === void 0) {
          throw new Error("Please provide image config with format for Imagebitmap");
        }
        const canvas = createCanvas();
        canvas.width = image.width;
        canvas.height = image.height;
        const pixels2DContext = createCanvasContext(canvas);
        if (pixels2DContext != null) {
          const height = image.height;
          const width = image.width;
          pixels2DContext.drawImage(image, 0, 0, width, height);
          data = pixels2DContext.getImageData(0, 0, width, height).data;
          bufferToTensorOptions.height = height;
          bufferToTensorOptions.width = width;
          return bufferToTensor(data, bufferToTensorOptions);
        } else {
          throw new Error("Can not access image data");
        }
      } else if (isString) {
        return new Promise((resolve, reject) => {
          const canvas = createCanvas();
          const context = createCanvasContext(canvas);
          if (!image || !context) {
            return reject();
          }
          const newImage = new Image();
          newImage.crossOrigin = "Anonymous";
          newImage.src = image;
          newImage.onload = () => {
            canvas.width = newImage.width;
            canvas.height = newImage.height;
            context.drawImage(newImage, 0, 0, canvas.width, canvas.height);
            const img = context.getImageData(0, 0, canvas.width, canvas.height);
            bufferToTensorOptions.height = canvas.height;
            bufferToTensorOptions.width = canvas.width;
            resolve(bufferToTensor(img.data, bufferToTensorOptions));
          };
        });
      } else {
        throw new Error("Input data provided is not supported - aborted tensor creation");
      }
      if (data !== void 0) {
        return bufferToTensor(data, bufferToTensorOptions);
      } else {
        throw new Error("Input data provided is not supported - aborted tensor creation");
      }
    };
    tensorFromTexture = (texture, options) => {
      const { width, height, download, dispose } = options;
      const dims = [1, height, width, 4];
      return new Tensor({ location: "texture", type: "float32", texture, dims, download, dispose });
    };
    tensorFromGpuBuffer = (gpuBuffer, options) => {
      const { dataType, dims, download, dispose } = options;
      return new Tensor({ location: "gpu-buffer", type: dataType ?? "float32", gpuBuffer, dims, download, dispose });
    };
    tensorFromMLTensor = (mlTensor, options) => {
      const { dataType, dims, download, dispose } = options;
      return new Tensor({ location: "ml-tensor", type: dataType ?? "float32", mlTensor, dims, download, dispose });
    };
    tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: "cpu-pinned", type, data: buffer, dims: dims ?? [buffer.length] });
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js
var NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, isTypedArrayChecked, checkTypedArray;
var init_tensor_impl_type_mapping = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"() {
    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
      ["float32", Float32Array],
      ["uint8", Uint8Array],
      ["int8", Int8Array],
      ["uint16", Uint16Array],
      ["int16", Int16Array],
      ["int32", Int32Array],
      ["bool", Uint8Array],
      ["float64", Float64Array],
      ["uint32", Uint32Array],
      ["int4", Uint8Array],
      ["uint4", Uint8Array]
    ]);
    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
      [Float32Array, "float32"],
      [Uint8Array, "uint8"],
      [Int8Array, "int8"],
      [Uint16Array, "uint16"],
      [Int16Array, "int16"],
      [Int32Array, "int32"],
      [Float64Array, "float64"],
      [Uint32Array, "uint32"]
    ]);
    isTypedArrayChecked = false;
    checkTypedArray = () => {
      if (!isTypedArrayChecked) {
        isTypedArrayChecked = true;
        const isBigInt64ArrayAvailable = typeof BigInt64Array !== "undefined" && BigInt64Array.from;
        const isBigUint64ArrayAvailable = typeof BigUint64Array !== "undefined" && BigUint64Array.from;
        const Float16Array2 = globalThis.Float16Array;
        const isFloat16ArrayAvailable = typeof Float16Array2 !== "undefined" && Float16Array2.from;
        if (isBigInt64ArrayAvailable) {
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array);
          NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64");
        }
        if (isBigUint64ArrayAvailable) {
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array);
          NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64");
        }
        if (isFloat16ArrayAvailable) {
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("float16", Float16Array2);
          NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(Float16Array2, "float16");
        } else {
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("float16", Uint16Array);
        }
      }
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js
var calculateSize, tensorReshape;
var init_tensor_utils_impl = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js"() {
    init_tensor_impl();
    calculateSize = (dims) => {
      let size = 1;
      for (let i = 0; i < dims.length; i++) {
        const dim = dims[i];
        if (typeof dim !== "number" || !Number.isSafeInteger(dim)) {
          throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
        }
        if (dim < 0) {
          throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
        }
        size *= dim;
      }
      return size;
    };
    tensorReshape = (tensor, dims) => {
      switch (tensor.location) {
        case "cpu":
          return new Tensor(tensor.type, tensor.data, dims);
        case "cpu-pinned":
          return new Tensor({
            location: "cpu-pinned",
            data: tensor.data,
            type: tensor.type,
            dims
          });
        case "texture":
          return new Tensor({
            location: "texture",
            texture: tensor.texture,
            type: tensor.type,
            dims
          });
        case "gpu-buffer":
          return new Tensor({
            location: "gpu-buffer",
            gpuBuffer: tensor.gpuBuffer,
            type: tensor.type,
            dims
          });
        case "ml-tensor":
          return new Tensor({
            location: "ml-tensor",
            mlTensor: tensor.mlTensor,
            type: tensor.type,
            dims
          });
        default:
          throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);
      }
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-impl.js
var Tensor;
var init_tensor_impl = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-impl.js"() {
    init_tensor_conversion_impl();
    init_tensor_factory_impl();
    init_tensor_impl_type_mapping();
    init_tensor_utils_impl();
    Tensor = class {
      /**
       * implementation.
       */
      constructor(arg0, arg1, arg2) {
        checkTypedArray();
        let type;
        let dims;
        if (typeof arg0 === "object" && "location" in arg0) {
          this.dataLocation = arg0.location;
          type = arg0.type;
          dims = arg0.dims;
          switch (arg0.location) {
            case "cpu-pinned": {
              const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);
              if (!expectedTypedArrayConstructor) {
                throw new TypeError(`unsupported type "${type}" to create tensor from pinned buffer`);
              }
              if (!(arg0.data instanceof expectedTypedArrayConstructor)) {
                throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);
              }
              this.cpuData = arg0.data;
              break;
            }
            case "texture": {
              if (type !== "float32") {
                throw new TypeError(`unsupported type "${type}" to create tensor from texture`);
              }
              this.gpuTextureData = arg0.texture;
              this.downloader = arg0.download;
              this.disposer = arg0.dispose;
              break;
            }
            case "gpu-buffer": {
              if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "uint8" && type !== "bool" && type !== "uint4" && type !== "int4") {
                throw new TypeError(`unsupported type "${type}" to create tensor from gpu buffer`);
              }
              this.gpuBufferData = arg0.gpuBuffer;
              this.downloader = arg0.download;
              this.disposer = arg0.dispose;
              break;
            }
            case "ml-tensor": {
              if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "uint64" && type !== "int8" && type !== "uint8" && type !== "bool" && type !== "uint4" && type !== "int4") {
                throw new TypeError(`unsupported type "${type}" to create tensor from MLTensor`);
              }
              this.mlTensorData = arg0.mlTensor;
              this.downloader = arg0.download;
              this.disposer = arg0.dispose;
              break;
            }
            default:
              throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
          }
        } else {
          let data;
          let maybeDims;
          if (typeof arg0 === "string") {
            type = arg0;
            maybeDims = arg2;
            if (arg0 === "string") {
              if (!Array.isArray(arg1)) {
                throw new TypeError("A string tensor's data must be a string array.");
              }
              data = arg1;
            } else {
              const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
              if (typedArrayConstructor === void 0) {
                throw new TypeError(`Unsupported tensor type: ${arg0}.`);
              }
              if (Array.isArray(arg1)) {
                if (arg0 === "float16" && typedArrayConstructor === Uint16Array || arg0 === "uint4" || arg0 === "int4") {
                  throw new TypeError(`Creating a ${arg0} tensor from number array is not supported. Please use ${typedArrayConstructor.name} as data.`);
                } else if (arg0 === "uint64" || arg0 === "int64") {
                  data = typedArrayConstructor.from(arg1, BigInt);
                } else {
                  data = typedArrayConstructor.from(arg1);
                }
              } else if (arg1 instanceof typedArrayConstructor) {
                data = arg1;
              } else if (arg1 instanceof Uint8ClampedArray) {
                if (arg0 === "uint8") {
                  data = Uint8Array.from(arg1);
                } else {
                  throw new TypeError(`A Uint8ClampedArray tensor's data must be type of uint8`);
                }
              } else if (arg0 === "float16" && arg1 instanceof Uint16Array && typedArrayConstructor !== Uint16Array) {
                data = new globalThis.Float16Array(arg1.buffer, arg1.byteOffset, arg1.length);
              } else {
                throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
              }
            }
          } else {
            maybeDims = arg1;
            if (Array.isArray(arg0)) {
              if (arg0.length === 0) {
                throw new TypeError("Tensor type cannot be inferred from an empty array.");
              }
              const firstElementType = typeof arg0[0];
              if (firstElementType === "string") {
                type = "string";
                data = arg0;
              } else if (firstElementType === "boolean") {
                type = "bool";
                data = Uint8Array.from(arg0);
              } else {
                throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
              }
            } else if (arg0 instanceof Uint8ClampedArray) {
              type = "uint8";
              data = Uint8Array.from(arg0);
            } else {
              const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
              if (mappedType === void 0) {
                throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
              }
              type = mappedType;
              data = arg0;
            }
          }
          if (maybeDims === void 0) {
            maybeDims = [data.length];
          } else if (!Array.isArray(maybeDims)) {
            throw new TypeError("A tensor's dims must be a number array");
          }
          dims = maybeDims;
          this.cpuData = data;
          this.dataLocation = "cpu";
        }
        const size = calculateSize(dims);
        if (this.cpuData && size !== this.cpuData.length) {
          if ((type === "uint4" || type === "int4") && Math.ceil(size / 2) === this.cpuData.length) {
          } else {
            throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);
          }
        }
        this.type = type;
        this.dims = dims;
        this.size = size;
      }
      // #endregion
      // #region factory
      static async fromImage(image, options) {
        return tensorFromImage(image, options);
      }
      static fromTexture(texture, options) {
        return tensorFromTexture(texture, options);
      }
      static fromGpuBuffer(gpuBuffer, options) {
        return tensorFromGpuBuffer(gpuBuffer, options);
      }
      static fromMLTensor(mlTensor, options) {
        return tensorFromMLTensor(mlTensor, options);
      }
      static fromPinnedBuffer(type, buffer, dims) {
        return tensorFromPinnedBuffer(type, buffer, dims);
      }
      // #endregion
      // #region conversions
      toDataURL(options) {
        return tensorToDataURL(this, options);
      }
      toImageData(options) {
        return tensorToImageData(this, options);
      }
      // #endregion
      // #region properties
      get data() {
        this.ensureValid();
        if (!this.cpuData) {
          throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
        }
        return this.cpuData;
      }
      get location() {
        return this.dataLocation;
      }
      get texture() {
        this.ensureValid();
        if (!this.gpuTextureData) {
          throw new Error("The data is not stored as a WebGL texture.");
        }
        return this.gpuTextureData;
      }
      get gpuBuffer() {
        this.ensureValid();
        if (!this.gpuBufferData) {
          throw new Error("The data is not stored as a WebGPU buffer.");
        }
        return this.gpuBufferData;
      }
      get mlTensor() {
        this.ensureValid();
        if (!this.mlTensorData) {
          throw new Error("The data is not stored as a WebNN MLTensor.");
        }
        return this.mlTensorData;
      }
      // #endregion
      // #region methods
      async getData(releaseData) {
        this.ensureValid();
        switch (this.dataLocation) {
          case "cpu":
          case "cpu-pinned":
            return this.data;
          case "texture":
          case "gpu-buffer":
          case "ml-tensor": {
            if (!this.downloader) {
              throw new Error("The current tensor is not created with a specified data downloader.");
            }
            if (this.isDownloading) {
              throw new Error("The current tensor is being downloaded.");
            }
            try {
              this.isDownloading = true;
              const data = await this.downloader();
              this.downloader = void 0;
              this.dataLocation = "cpu";
              this.cpuData = data;
              if (releaseData && this.disposer) {
                this.disposer();
                this.disposer = void 0;
              }
              return data;
            } finally {
              this.isDownloading = false;
            }
          }
          default:
            throw new Error(`cannot get data from location: ${this.dataLocation}`);
        }
      }
      dispose() {
        if (this.isDownloading) {
          throw new Error("The current tensor is being downloaded.");
        }
        if (this.disposer) {
          this.disposer();
          this.disposer = void 0;
        }
        this.cpuData = void 0;
        this.gpuTextureData = void 0;
        this.gpuBufferData = void 0;
        this.mlTensorData = void 0;
        this.downloader = void 0;
        this.isDownloading = void 0;
        this.dataLocation = "none";
      }
      // #endregion
      // #region tensor utilities
      ensureValid() {
        if (this.dataLocation === "none") {
          throw new Error("The tensor is disposed.");
        }
      }
      reshape(dims) {
        this.ensureValid();
        if (this.downloader || this.disposer) {
          throw new Error("Cannot reshape a tensor that owns GPU resource.");
        }
        return tensorReshape(this, dims);
      }
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor.js
var Tensor2;
var init_tensor = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor.js"() {
    init_tensor_impl();
    Tensor2 = Tensor;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/trace.js
var TRACE, TRACE_FUNC, TRACE_FUNC_BEGIN, TRACE_FUNC_END;
var init_trace = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/trace.js"() {
    init_env_impl();
    TRACE = (deviceType, label) => {
      if (typeof env.trace === "undefined" ? !env.wasm.trace : !env.trace) {
        return;
      }
      console.timeStamp(`${deviceType}::ORT::${label}`);
    };
    TRACE_FUNC = (msg, extraMsg) => {
      const stack = new Error().stack?.split(/\r\n|\r|\n/g) || [];
      let hasTraceFunc = false;
      for (let i = 0; i < stack.length; i++) {
        if (hasTraceFunc && !stack[i].includes("TRACE_FUNC")) {
          let label = `FUNC_${msg}::${stack[i].trim().split(" ")[1]}`;
          if (extraMsg) {
            label += `::${extraMsg}`;
          }
          TRACE("CPU", label);
          return;
        }
        if (stack[i].includes("TRACE_FUNC")) {
          hasTraceFunc = true;
        }
      }
    };
    TRACE_FUNC_BEGIN = (extraMsg) => {
      if (typeof env.trace === "undefined" ? !env.wasm.trace : !env.trace) {
        return;
      }
      TRACE_FUNC("BEGIN", extraMsg);
    };
    TRACE_FUNC_END = (extraMsg) => {
      if (typeof env.trace === "undefined" ? !env.wasm.trace : !env.trace) {
        return;
      }
      TRACE_FUNC("END", extraMsg);
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/inference-session-impl.js
var InferenceSession;
var init_inference_session_impl = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/inference-session-impl.js"() {
    init_backend_impl();
    init_tensor();
    init_trace();
    InferenceSession = class {
      constructor(handler) {
        this.handler = handler;
      }
      async run(feeds, arg1, arg2) {
        TRACE_FUNC_BEGIN();
        const fetches = {};
        let options = {};
        if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
          throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
        }
        let isFetchesEmpty = true;
        if (typeof arg1 === "object") {
          if (arg1 === null) {
            throw new TypeError("Unexpected argument[1]: cannot be null.");
          }
          if (arg1 instanceof Tensor2) {
            throw new TypeError("'fetches' cannot be a Tensor");
          }
          if (Array.isArray(arg1)) {
            if (arg1.length === 0) {
              throw new TypeError("'fetches' cannot be an empty array.");
            }
            isFetchesEmpty = false;
            for (const name of arg1) {
              if (typeof name !== "string") {
                throw new TypeError("'fetches' must be a string array or an object.");
              }
              if (this.outputNames.indexOf(name) === -1) {
                throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
              }
              fetches[name] = null;
            }
            if (typeof arg2 === "object" && arg2 !== null) {
              options = arg2;
            } else if (typeof arg2 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else {
            let isFetches = false;
            const arg1Keys = Object.getOwnPropertyNames(arg1);
            for (const name of this.outputNames) {
              if (arg1Keys.indexOf(name) !== -1) {
                const v = arg1[name];
                if (v === null || v instanceof Tensor2) {
                  isFetches = true;
                  isFetchesEmpty = false;
                  fetches[name] = v;
                }
              }
            }
            if (isFetches) {
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              options = arg1;
            }
          }
        } else if (typeof arg1 !== "undefined") {
          throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
        }
        for (const name of this.inputNames) {
          if (typeof feeds[name] === "undefined") {
            throw new Error(`input '${name}' is missing in 'feeds'.`);
          }
        }
        if (isFetchesEmpty) {
          for (const name of this.outputNames) {
            fetches[name] = null;
          }
        }
        const results = await this.handler.run(feeds, fetches, options);
        const returnValue = {};
        for (const key in results) {
          if (Object.hasOwnProperty.call(results, key)) {
            const result = results[key];
            if (result instanceof Tensor2) {
              returnValue[key] = result;
            } else {
              returnValue[key] = new Tensor2(result.type, result.data, result.dims);
            }
          }
        }
        TRACE_FUNC_END();
        return returnValue;
      }
      async release() {
        return this.handler.dispose();
      }
      static async create(arg0, arg1, arg2, arg3) {
        TRACE_FUNC_BEGIN();
        let filePathOrUint8Array;
        let options = {};
        if (typeof arg0 === "string") {
          filePathOrUint8Array = arg0;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
        } else if (arg0 instanceof Uint8Array) {
          filePathOrUint8Array = arg0;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
        } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && arg0 instanceof SharedArrayBuffer) {
          const buffer = arg0;
          let byteOffset = 0;
          let byteLength = arg0.byteLength;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 === "number") {
            byteOffset = arg1;
            if (!Number.isSafeInteger(byteOffset)) {
              throw new RangeError("'byteOffset' must be an integer.");
            }
            if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
              throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);
            }
            byteLength = arg0.byteLength - byteOffset;
            if (typeof arg2 === "number") {
              byteLength = arg2;
              if (!Number.isSafeInteger(byteLength)) {
                throw new RangeError("'byteLength' must be an integer.");
              }
              if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);
              }
              if (typeof arg3 === "object" && arg3 !== null) {
                options = arg3;
              } else if (typeof arg3 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else if (typeof arg2 !== "undefined") {
              throw new TypeError("'byteLength' must be a number.");
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
          filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
        } else {
          throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
        }
        const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);
        const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, optionsWithValidatedEPs);
        TRACE_FUNC_END();
        return new InferenceSession(handler);
      }
      startProfiling() {
        this.handler.startProfiling();
      }
      endProfiling() {
        this.handler.endProfiling();
      }
      get inputNames() {
        return this.handler.inputNames;
      }
      get outputNames() {
        return this.handler.outputNames;
      }
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/inference-session.js
var InferenceSession2;
var init_inference_session = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/inference-session.js"() {
    init_inference_session_impl();
    InferenceSession2 = InferenceSession;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-conversion.js
var init_tensor_conversion = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-conversion.js"() {
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-factory.js
var init_tensor_factory = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/tensor-factory.js"() {
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/onnx-model.js
var init_onnx_model = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/onnx-model.js"() {
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/onnx-value.js
var init_onnx_value = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/onnx-value.js"() {
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  InferenceSession: () => InferenceSession2,
  TRACE: () => TRACE,
  TRACE_FUNC_BEGIN: () => TRACE_FUNC_BEGIN,
  TRACE_FUNC_END: () => TRACE_FUNC_END,
  Tensor: () => Tensor2,
  env: () => env2,
  registerBackend: () => registerBackend
});
var init_esm = __esm({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/esm/index.js"() {
    init_backend();
    init_env();
    init_inference_session();
    init_tensor();
    init_tensor_conversion();
    init_tensor_factory();
    init_trace();
    init_onnx_model();
    init_onnx_value();
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/backend-impl.js
var require_backend_impl = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/backend-impl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveBackendAndExecutionProviders = exports.registerBackend = void 0;
    var backends2 = /* @__PURE__ */ new Map();
    var backendsSortedByPriority2 = [];
    var registerBackend2 = (name, backend, priority) => {
      if (backend && typeof backend.init === "function" && typeof backend.createInferenceSessionHandler === "function") {
        const currentBackend = backends2.get(name);
        if (currentBackend === void 0) {
          backends2.set(name, { backend, priority });
        } else if (currentBackend.priority > priority) {
          return;
        } else if (currentBackend.priority === priority) {
          if (currentBackend.backend !== backend) {
            throw new Error(`cannot register backend "${name}" using priority ${priority}`);
          }
        }
        if (priority >= 0) {
          const i = backendsSortedByPriority2.indexOf(name);
          if (i !== -1) {
            backendsSortedByPriority2.splice(i, 1);
          }
          for (let i2 = 0; i2 < backendsSortedByPriority2.length; i2++) {
            if (backends2.get(backendsSortedByPriority2[i2]).priority <= priority) {
              backendsSortedByPriority2.splice(i2, 0, name);
              return;
            }
          }
          backendsSortedByPriority2.push(name);
        }
        return;
      }
      throw new TypeError("not a valid backend");
    };
    exports.registerBackend = registerBackend2;
    var tryResolveAndInitializeBackend2 = async (backendName) => {
      const backendInfo = backends2.get(backendName);
      if (!backendInfo) {
        return "backend not found.";
      }
      if (backendInfo.initialized) {
        return backendInfo.backend;
      } else if (backendInfo.aborted) {
        return backendInfo.error;
      } else {
        const isInitializing = !!backendInfo.initPromise;
        try {
          if (!isInitializing) {
            backendInfo.initPromise = backendInfo.backend.init(backendName);
          }
          await backendInfo.initPromise;
          backendInfo.initialized = true;
          return backendInfo.backend;
        } catch (e) {
          if (!isInitializing) {
            backendInfo.error = `${e}`;
            backendInfo.aborted = true;
          }
          return backendInfo.error;
        } finally {
          delete backendInfo.initPromise;
        }
      }
    };
    var resolveBackendAndExecutionProviders2 = async (options) => {
      const eps = options.executionProviders || [];
      const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
      const backendNames = backendHints.length === 0 ? backendsSortedByPriority2 : backendHints;
      let backend;
      const errors = [];
      const availableBackendNames = /* @__PURE__ */ new Set();
      for (const backendName of backendNames) {
        const resolveResult = await tryResolveAndInitializeBackend2(backendName);
        if (typeof resolveResult === "string") {
          errors.push({ name: backendName, err: resolveResult });
        } else {
          if (!backend) {
            backend = resolveResult;
          }
          if (backend === resolveResult) {
            availableBackendNames.add(backendName);
          }
        }
      }
      if (!backend) {
        throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(", ")}`);
      }
      for (const { name, err } of errors) {
        if (backendHints.includes(name)) {
          console.warn(`removing requested execution provider "${name}" from session options because it is not available: ${err}`);
        }
      }
      const filteredEps = eps.filter((i) => availableBackendNames.has(typeof i === "string" ? i : i.name));
      return [
        backend,
        new Proxy(options, {
          get: (target, prop) => {
            if (prop === "executionProviders") {
              return filteredEps;
            }
            return Reflect.get(target, prop);
          }
        })
      ];
    };
    exports.resolveBackendAndExecutionProviders = resolveBackendAndExecutionProviders2;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/backend.js
var require_backend = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/backend.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.registerBackend = void 0;
    var backend_impl_js_1 = require_backend_impl();
    Object.defineProperty(exports, "registerBackend", { enumerable: true, get: function() {
      return backend_impl_js_1.registerBackend;
    } });
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/version.js
var require_version = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "1.21.0";
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/env-impl.js
var require_env_impl = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/env-impl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.env = void 0;
    var version_js_1 = require_version();
    var logLevelValue2 = "warning";
    exports.env = {
      wasm: {},
      webgl: {},
      webgpu: {},
      versions: { common: version_js_1.version },
      set logLevel(value) {
        if (value === void 0) {
          return;
        }
        if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {
          throw new Error(`Unsupported logging level: ${value}`);
        }
        logLevelValue2 = value;
      },
      get logLevel() {
        return logLevelValue2;
      }
    };
    Object.defineProperty(exports.env, "logLevel", { enumerable: true });
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/env.js
var require_env = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.env = void 0;
    var env_impl_js_1 = require_env_impl();
    exports.env = env_impl_js_1.env;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-conversion-impl.js
var require_tensor_conversion_impl = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-conversion-impl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tensorToImageData = exports.tensorToDataURL = void 0;
    var tensorToDataURL2 = (tensor, options) => {
      const canvas = typeof document !== "undefined" ? document.createElement("canvas") : new OffscreenCanvas(1, 1);
      canvas.width = tensor.dims[3];
      canvas.height = tensor.dims[2];
      const pixels2DContext = canvas.getContext("2d");
      if (pixels2DContext != null) {
        let width;
        let height;
        if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
          width = tensor.dims[2];
          height = tensor.dims[3];
        } else {
          width = tensor.dims[3];
          height = tensor.dims[2];
        }
        const inputformat = options?.format !== void 0 ? options.format : "RGB";
        const norm = options?.norm;
        let normMean;
        let normBias;
        if (norm === void 0 || norm.mean === void 0) {
          normMean = [255, 255, 255, 255];
        } else {
          if (typeof norm.mean === "number") {
            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
          } else {
            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];
            if (norm.mean[3] !== void 0) {
              normMean[3] = norm.mean[3];
            }
          }
        }
        if (norm === void 0 || norm.bias === void 0) {
          normBias = [0, 0, 0, 0];
        } else {
          if (typeof norm.bias === "number") {
            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
          } else {
            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
            if (norm.bias[3] !== void 0) {
              normBias[3] = norm.bias[3];
            }
          }
        }
        const stride = height * width;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGBA") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
          aTensorPointer = stride * 3;
        } else if (inputformat === "RGB") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
        } else if (inputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        }
        for (let i = 0; i < height; i++) {
          for (let j = 0; j < width; j++) {
            const R2 = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
            const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
            const B2 = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
            const A2 = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
            pixels2DContext.fillStyle = "rgba(" + R2 + "," + G + "," + B2 + "," + A2 + ")";
            pixels2DContext.fillRect(j, i, 1, 1);
          }
        }
        if ("toDataURL" in canvas) {
          return canvas.toDataURL();
        } else {
          throw new Error("toDataURL is not supported");
        }
      } else {
        throw new Error("Can not access image data");
      }
    };
    exports.tensorToDataURL = tensorToDataURL2;
    var tensorToImageData2 = (tensor, options) => {
      const pixels2DContext = typeof document !== "undefined" ? document.createElement("canvas").getContext("2d") : new OffscreenCanvas(1, 1).getContext("2d");
      let image;
      if (pixels2DContext != null) {
        let width;
        let height;
        let channels;
        if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
          width = tensor.dims[2];
          height = tensor.dims[1];
          channels = tensor.dims[3];
        } else {
          width = tensor.dims[3];
          height = tensor.dims[2];
          channels = tensor.dims[1];
        }
        const inputformat = options !== void 0 ? options.format !== void 0 ? options.format : "RGB" : "RGB";
        const norm = options?.norm;
        let normMean;
        let normBias;
        if (norm === void 0 || norm.mean === void 0) {
          normMean = [255, 255, 255, 255];
        } else {
          if (typeof norm.mean === "number") {
            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
          } else {
            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];
            if (norm.mean[3] !== void 0) {
              normMean[3] = norm.mean[3];
            }
          }
        }
        if (norm === void 0 || norm.bias === void 0) {
          normBias = [0, 0, 0, 0];
        } else {
          if (typeof norm.bias === "number") {
            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
          } else {
            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
            if (norm.bias[3] !== void 0) {
              normBias[3] = norm.bias[3];
            }
          }
        }
        const stride = height * width;
        if (options !== void 0) {
          if (options.format !== void 0 && channels === 4 && options.format !== "RGBA" || channels === 3 && options.format !== "RGB" && options.format !== "BGR") {
            throw new Error("Tensor format doesn't match input tensor dims");
          }
        }
        const step = 4;
        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGBA") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
          aTensorPointer = stride * 3;
        } else if (inputformat === "RGB") {
          rTensorPointer = 0;
          gTensorPointer = stride;
          bTensorPointer = stride * 2;
        } else if (inputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        }
        image = pixels2DContext.createImageData(width, height);
        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {
          image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
          image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
          image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
          image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
        }
      } else {
        throw new Error("Can not access image data");
      }
      return image;
    };
    exports.tensorToImageData = tensorToImageData2;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-factory-impl.js
var require_tensor_factory_impl = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-factory-impl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tensorFromPinnedBuffer = exports.tensorFromMLTensor = exports.tensorFromGpuBuffer = exports.tensorFromTexture = exports.tensorFromImage = exports.bufferToTensor = void 0;
    var tensor_impl_js_1 = require_tensor_impl();
    var bufferToTensor2 = (buffer, options) => {
      if (buffer === void 0) {
        throw new Error("Image buffer must be defined");
      }
      if (options.height === void 0 || options.width === void 0) {
        throw new Error("Image height and width must be defined");
      }
      if (options.tensorLayout === "NHWC") {
        throw new Error("NHWC Tensor layout is not supported yet");
      }
      const { height, width } = options;
      const norm = options.norm ?? { mean: 255, bias: 0 };
      let normMean;
      let normBias;
      if (typeof norm.mean === "number") {
        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
      } else {
        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];
      }
      if (typeof norm.bias === "number") {
        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
      } else {
        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];
      }
      const inputformat = options.format !== void 0 ? options.format : "RGBA";
      const outputformat = options.tensorFormat !== void 0 ? options.tensorFormat !== void 0 ? options.tensorFormat : "RGB" : "RGB";
      const stride = height * width;
      const float32Data = outputformat === "RGBA" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);
      let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
      let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
      if (inputformat === "RGB") {
        step = 3;
        rImagePointer = 0;
        gImagePointer = 1;
        bImagePointer = 2;
        aImagePointer = -1;
      }
      if (outputformat === "RGBA") {
        aTensorPointer = stride * 3;
      } else if (outputformat === "RBG") {
        rTensorPointer = 0;
        bTensorPointer = stride;
        gTensorPointer = stride * 2;
      } else if (outputformat === "BGR") {
        bTensorPointer = 0;
        gTensorPointer = stride;
        rTensorPointer = stride * 2;
      }
      for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {
        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];
        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];
        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];
        if (aTensorPointer !== -1 && aImagePointer !== -1) {
          float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];
        }
      }
      const outputTensor = outputformat === "RGBA" ? new tensor_impl_js_1.Tensor("float32", float32Data, [1, 4, height, width]) : new tensor_impl_js_1.Tensor("float32", float32Data, [1, 3, height, width]);
      return outputTensor;
    };
    exports.bufferToTensor = bufferToTensor2;
    var tensorFromImage2 = async (image, options) => {
      const isHTMLImageEle = typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement;
      const isImageDataEle = typeof ImageData !== "undefined" && image instanceof ImageData;
      const isImageBitmap = typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap;
      const isString = typeof image === "string";
      let data;
      let bufferToTensorOptions = options ?? {};
      const createCanvas = () => {
        if (typeof document !== "undefined") {
          return document.createElement("canvas");
        } else if (typeof OffscreenCanvas !== "undefined") {
          return new OffscreenCanvas(1, 1);
        } else {
          throw new Error("Canvas is not supported");
        }
      };
      const createCanvasContext = (canvas) => {
        if (typeof HTMLCanvasElement !== "undefined" && canvas instanceof HTMLCanvasElement) {
          return canvas.getContext("2d");
        } else if (canvas instanceof OffscreenCanvas) {
          return canvas.getContext("2d");
        } else {
          return null;
        }
      };
      if (isHTMLImageEle) {
        const canvas = createCanvas();
        canvas.width = image.width;
        canvas.height = image.height;
        const pixels2DContext = createCanvasContext(canvas);
        if (pixels2DContext != null) {
          let height = image.height;
          let width = image.width;
          if (options !== void 0 && options.resizedHeight !== void 0 && options.resizedWidth !== void 0) {
            height = options.resizedHeight;
            width = options.resizedWidth;
          }
          if (options !== void 0) {
            bufferToTensorOptions = options;
            if (options.tensorFormat !== void 0) {
              throw new Error("Image input config format must be RGBA for HTMLImageElement");
            } else {
              bufferToTensorOptions.tensorFormat = "RGBA";
            }
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
          } else {
            bufferToTensorOptions.tensorFormat = "RGBA";
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
          }
          pixels2DContext.drawImage(image, 0, 0);
          data = pixels2DContext.getImageData(0, 0, width, height).data;
        } else {
          throw new Error("Can not access image data");
        }
      } else if (isImageDataEle) {
        let height;
        let width;
        if (options !== void 0 && options.resizedWidth !== void 0 && options.resizedHeight !== void 0) {
          height = options.resizedHeight;
          width = options.resizedWidth;
        } else {
          height = image.height;
          width = image.width;
        }
        if (options !== void 0) {
          bufferToTensorOptions = options;
        }
        bufferToTensorOptions.format = "RGBA";
        bufferToTensorOptions.height = height;
        bufferToTensorOptions.width = width;
        if (options !== void 0) {
          const tempCanvas = createCanvas();
          tempCanvas.width = width;
          tempCanvas.height = height;
          const pixels2DContext = createCanvasContext(tempCanvas);
          if (pixels2DContext != null) {
            pixels2DContext.putImageData(image, 0, 0);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
          } else {
            throw new Error("Can not access image data");
          }
        } else {
          data = image.data;
        }
      } else if (isImageBitmap) {
        if (options === void 0) {
          throw new Error("Please provide image config with format for Imagebitmap");
        }
        const canvas = createCanvas();
        canvas.width = image.width;
        canvas.height = image.height;
        const pixels2DContext = createCanvasContext(canvas);
        if (pixels2DContext != null) {
          const height = image.height;
          const width = image.width;
          pixels2DContext.drawImage(image, 0, 0, width, height);
          data = pixels2DContext.getImageData(0, 0, width, height).data;
          bufferToTensorOptions.height = height;
          bufferToTensorOptions.width = width;
          return (0, exports.bufferToTensor)(data, bufferToTensorOptions);
        } else {
          throw new Error("Can not access image data");
        }
      } else if (isString) {
        return new Promise((resolve, reject) => {
          const canvas = createCanvas();
          const context = createCanvasContext(canvas);
          if (!image || !context) {
            return reject();
          }
          const newImage = new Image();
          newImage.crossOrigin = "Anonymous";
          newImage.src = image;
          newImage.onload = () => {
            canvas.width = newImage.width;
            canvas.height = newImage.height;
            context.drawImage(newImage, 0, 0, canvas.width, canvas.height);
            const img = context.getImageData(0, 0, canvas.width, canvas.height);
            bufferToTensorOptions.height = canvas.height;
            bufferToTensorOptions.width = canvas.width;
            resolve((0, exports.bufferToTensor)(img.data, bufferToTensorOptions));
          };
        });
      } else {
        throw new Error("Input data provided is not supported - aborted tensor creation");
      }
      if (data !== void 0) {
        return (0, exports.bufferToTensor)(data, bufferToTensorOptions);
      } else {
        throw new Error("Input data provided is not supported - aborted tensor creation");
      }
    };
    exports.tensorFromImage = tensorFromImage2;
    var tensorFromTexture2 = (texture, options) => {
      const { width, height, download, dispose } = options;
      const dims = [1, height, width, 4];
      return new tensor_impl_js_1.Tensor({ location: "texture", type: "float32", texture, dims, download, dispose });
    };
    exports.tensorFromTexture = tensorFromTexture2;
    var tensorFromGpuBuffer2 = (gpuBuffer, options) => {
      const { dataType, dims, download, dispose } = options;
      return new tensor_impl_js_1.Tensor({ location: "gpu-buffer", type: dataType ?? "float32", gpuBuffer, dims, download, dispose });
    };
    exports.tensorFromGpuBuffer = tensorFromGpuBuffer2;
    var tensorFromMLTensor2 = (mlTensor, options) => {
      const { dataType, dims, download, dispose } = options;
      return new tensor_impl_js_1.Tensor({ location: "ml-tensor", type: dataType ?? "float32", mlTensor, dims, download, dispose });
    };
    exports.tensorFromMLTensor = tensorFromMLTensor2;
    var tensorFromPinnedBuffer2 = (type, buffer, dims) => new tensor_impl_js_1.Tensor({ location: "cpu-pinned", type, data: buffer, dims: dims ?? [buffer.length] });
    exports.tensorFromPinnedBuffer = tensorFromPinnedBuffer2;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-impl-type-mapping.js
var require_tensor_impl_type_mapping = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-impl-type-mapping.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkTypedArray = exports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = exports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = void 0;
    exports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
      ["float32", Float32Array],
      ["uint8", Uint8Array],
      ["int8", Int8Array],
      ["uint16", Uint16Array],
      ["int16", Int16Array],
      ["int32", Int32Array],
      ["bool", Uint8Array],
      ["float64", Float64Array],
      ["uint32", Uint32Array],
      ["int4", Uint8Array],
      ["uint4", Uint8Array]
    ]);
    exports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
      [Float32Array, "float32"],
      [Uint8Array, "uint8"],
      [Int8Array, "int8"],
      [Uint16Array, "uint16"],
      [Int16Array, "int16"],
      [Int32Array, "int32"],
      [Float64Array, "float64"],
      [Uint32Array, "uint32"]
    ]);
    var isTypedArrayChecked2 = false;
    var checkTypedArray2 = () => {
      if (!isTypedArrayChecked2) {
        isTypedArrayChecked2 = true;
        const isBigInt64ArrayAvailable = typeof BigInt64Array !== "undefined" && BigInt64Array.from;
        const isBigUint64ArrayAvailable = typeof BigUint64Array !== "undefined" && BigUint64Array.from;
        const Float16Array2 = globalThis.Float16Array;
        const isFloat16ArrayAvailable = typeof Float16Array2 !== "undefined" && Float16Array2.from;
        if (isBigInt64ArrayAvailable) {
          exports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array);
          exports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64");
        }
        if (isBigUint64ArrayAvailable) {
          exports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array);
          exports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64");
        }
        if (isFloat16ArrayAvailable) {
          exports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("float16", Float16Array2);
          exports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(Float16Array2, "float16");
        } else {
          exports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("float16", Uint16Array);
        }
      }
    };
    exports.checkTypedArray = checkTypedArray2;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-utils-impl.js
var require_tensor_utils_impl = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-utils-impl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tensorReshape = exports.calculateSize = void 0;
    var tensor_impl_js_1 = require_tensor_impl();
    var calculateSize2 = (dims) => {
      let size = 1;
      for (let i = 0; i < dims.length; i++) {
        const dim = dims[i];
        if (typeof dim !== "number" || !Number.isSafeInteger(dim)) {
          throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
        }
        if (dim < 0) {
          throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
        }
        size *= dim;
      }
      return size;
    };
    exports.calculateSize = calculateSize2;
    var tensorReshape2 = (tensor, dims) => {
      switch (tensor.location) {
        case "cpu":
          return new tensor_impl_js_1.Tensor(tensor.type, tensor.data, dims);
        case "cpu-pinned":
          return new tensor_impl_js_1.Tensor({
            location: "cpu-pinned",
            data: tensor.data,
            type: tensor.type,
            dims
          });
        case "texture":
          return new tensor_impl_js_1.Tensor({
            location: "texture",
            texture: tensor.texture,
            type: tensor.type,
            dims
          });
        case "gpu-buffer":
          return new tensor_impl_js_1.Tensor({
            location: "gpu-buffer",
            gpuBuffer: tensor.gpuBuffer,
            type: tensor.type,
            dims
          });
        case "ml-tensor":
          return new tensor_impl_js_1.Tensor({
            location: "ml-tensor",
            mlTensor: tensor.mlTensor,
            type: tensor.type,
            dims
          });
        default:
          throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);
      }
    };
    exports.tensorReshape = tensorReshape2;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-impl.js
var require_tensor_impl = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-impl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tensor = void 0;
    var tensor_conversion_impl_js_1 = require_tensor_conversion_impl();
    var tensor_factory_impl_js_1 = require_tensor_factory_impl();
    var tensor_impl_type_mapping_js_1 = require_tensor_impl_type_mapping();
    var tensor_utils_impl_js_1 = require_tensor_utils_impl();
    var Tensor3 = class {
      /**
       * implementation.
       */
      constructor(arg0, arg1, arg2) {
        (0, tensor_impl_type_mapping_js_1.checkTypedArray)();
        let type;
        let dims;
        if (typeof arg0 === "object" && "location" in arg0) {
          this.dataLocation = arg0.location;
          type = arg0.type;
          dims = arg0.dims;
          switch (arg0.location) {
            case "cpu-pinned": {
              const expectedTypedArrayConstructor = tensor_impl_type_mapping_js_1.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);
              if (!expectedTypedArrayConstructor) {
                throw new TypeError(`unsupported type "${type}" to create tensor from pinned buffer`);
              }
              if (!(arg0.data instanceof expectedTypedArrayConstructor)) {
                throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);
              }
              this.cpuData = arg0.data;
              break;
            }
            case "texture": {
              if (type !== "float32") {
                throw new TypeError(`unsupported type "${type}" to create tensor from texture`);
              }
              this.gpuTextureData = arg0.texture;
              this.downloader = arg0.download;
              this.disposer = arg0.dispose;
              break;
            }
            case "gpu-buffer": {
              if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "uint8" && type !== "bool" && type !== "uint4" && type !== "int4") {
                throw new TypeError(`unsupported type "${type}" to create tensor from gpu buffer`);
              }
              this.gpuBufferData = arg0.gpuBuffer;
              this.downloader = arg0.download;
              this.disposer = arg0.dispose;
              break;
            }
            case "ml-tensor": {
              if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "uint64" && type !== "int8" && type !== "uint8" && type !== "bool" && type !== "uint4" && type !== "int4") {
                throw new TypeError(`unsupported type "${type}" to create tensor from MLTensor`);
              }
              this.mlTensorData = arg0.mlTensor;
              this.downloader = arg0.download;
              this.disposer = arg0.dispose;
              break;
            }
            default:
              throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
          }
        } else {
          let data;
          let maybeDims;
          if (typeof arg0 === "string") {
            type = arg0;
            maybeDims = arg2;
            if (arg0 === "string") {
              if (!Array.isArray(arg1)) {
                throw new TypeError("A string tensor's data must be a string array.");
              }
              data = arg1;
            } else {
              const typedArrayConstructor = tensor_impl_type_mapping_js_1.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
              if (typedArrayConstructor === void 0) {
                throw new TypeError(`Unsupported tensor type: ${arg0}.`);
              }
              if (Array.isArray(arg1)) {
                if (arg0 === "float16" && typedArrayConstructor === Uint16Array || arg0 === "uint4" || arg0 === "int4") {
                  throw new TypeError(`Creating a ${arg0} tensor from number array is not supported. Please use ${typedArrayConstructor.name} as data.`);
                } else if (arg0 === "uint64" || arg0 === "int64") {
                  data = typedArrayConstructor.from(arg1, BigInt);
                } else {
                  data = typedArrayConstructor.from(arg1);
                }
              } else if (arg1 instanceof typedArrayConstructor) {
                data = arg1;
              } else if (arg1 instanceof Uint8ClampedArray) {
                if (arg0 === "uint8") {
                  data = Uint8Array.from(arg1);
                } else {
                  throw new TypeError(`A Uint8ClampedArray tensor's data must be type of uint8`);
                }
              } else if (arg0 === "float16" && arg1 instanceof Uint16Array && typedArrayConstructor !== Uint16Array) {
                data = new globalThis.Float16Array(arg1.buffer, arg1.byteOffset, arg1.length);
              } else {
                throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
              }
            }
          } else {
            maybeDims = arg1;
            if (Array.isArray(arg0)) {
              if (arg0.length === 0) {
                throw new TypeError("Tensor type cannot be inferred from an empty array.");
              }
              const firstElementType = typeof arg0[0];
              if (firstElementType === "string") {
                type = "string";
                data = arg0;
              } else if (firstElementType === "boolean") {
                type = "bool";
                data = Uint8Array.from(arg0);
              } else {
                throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
              }
            } else if (arg0 instanceof Uint8ClampedArray) {
              type = "uint8";
              data = Uint8Array.from(arg0);
            } else {
              const mappedType = tensor_impl_type_mapping_js_1.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
              if (mappedType === void 0) {
                throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
              }
              type = mappedType;
              data = arg0;
            }
          }
          if (maybeDims === void 0) {
            maybeDims = [data.length];
          } else if (!Array.isArray(maybeDims)) {
            throw new TypeError("A tensor's dims must be a number array");
          }
          dims = maybeDims;
          this.cpuData = data;
          this.dataLocation = "cpu";
        }
        const size = (0, tensor_utils_impl_js_1.calculateSize)(dims);
        if (this.cpuData && size !== this.cpuData.length) {
          if ((type === "uint4" || type === "int4") && Math.ceil(size / 2) === this.cpuData.length) {
          } else {
            throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);
          }
        }
        this.type = type;
        this.dims = dims;
        this.size = size;
      }
      // #endregion
      // #region factory
      static async fromImage(image, options) {
        return (0, tensor_factory_impl_js_1.tensorFromImage)(image, options);
      }
      static fromTexture(texture, options) {
        return (0, tensor_factory_impl_js_1.tensorFromTexture)(texture, options);
      }
      static fromGpuBuffer(gpuBuffer, options) {
        return (0, tensor_factory_impl_js_1.tensorFromGpuBuffer)(gpuBuffer, options);
      }
      static fromMLTensor(mlTensor, options) {
        return (0, tensor_factory_impl_js_1.tensorFromMLTensor)(mlTensor, options);
      }
      static fromPinnedBuffer(type, buffer, dims) {
        return (0, tensor_factory_impl_js_1.tensorFromPinnedBuffer)(type, buffer, dims);
      }
      // #endregion
      // #region conversions
      toDataURL(options) {
        return (0, tensor_conversion_impl_js_1.tensorToDataURL)(this, options);
      }
      toImageData(options) {
        return (0, tensor_conversion_impl_js_1.tensorToImageData)(this, options);
      }
      // #endregion
      // #region properties
      get data() {
        this.ensureValid();
        if (!this.cpuData) {
          throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
        }
        return this.cpuData;
      }
      get location() {
        return this.dataLocation;
      }
      get texture() {
        this.ensureValid();
        if (!this.gpuTextureData) {
          throw new Error("The data is not stored as a WebGL texture.");
        }
        return this.gpuTextureData;
      }
      get gpuBuffer() {
        this.ensureValid();
        if (!this.gpuBufferData) {
          throw new Error("The data is not stored as a WebGPU buffer.");
        }
        return this.gpuBufferData;
      }
      get mlTensor() {
        this.ensureValid();
        if (!this.mlTensorData) {
          throw new Error("The data is not stored as a WebNN MLTensor.");
        }
        return this.mlTensorData;
      }
      // #endregion
      // #region methods
      async getData(releaseData) {
        this.ensureValid();
        switch (this.dataLocation) {
          case "cpu":
          case "cpu-pinned":
            return this.data;
          case "texture":
          case "gpu-buffer":
          case "ml-tensor": {
            if (!this.downloader) {
              throw new Error("The current tensor is not created with a specified data downloader.");
            }
            if (this.isDownloading) {
              throw new Error("The current tensor is being downloaded.");
            }
            try {
              this.isDownloading = true;
              const data = await this.downloader();
              this.downloader = void 0;
              this.dataLocation = "cpu";
              this.cpuData = data;
              if (releaseData && this.disposer) {
                this.disposer();
                this.disposer = void 0;
              }
              return data;
            } finally {
              this.isDownloading = false;
            }
          }
          default:
            throw new Error(`cannot get data from location: ${this.dataLocation}`);
        }
      }
      dispose() {
        if (this.isDownloading) {
          throw new Error("The current tensor is being downloaded.");
        }
        if (this.disposer) {
          this.disposer();
          this.disposer = void 0;
        }
        this.cpuData = void 0;
        this.gpuTextureData = void 0;
        this.gpuBufferData = void 0;
        this.mlTensorData = void 0;
        this.downloader = void 0;
        this.isDownloading = void 0;
        this.dataLocation = "none";
      }
      // #endregion
      // #region tensor utilities
      ensureValid() {
        if (this.dataLocation === "none") {
          throw new Error("The tensor is disposed.");
        }
      }
      reshape(dims) {
        this.ensureValid();
        if (this.downloader || this.disposer) {
          throw new Error("Cannot reshape a tensor that owns GPU resource.");
        }
        return (0, tensor_utils_impl_js_1.tensorReshape)(this, dims);
      }
    };
    exports.Tensor = Tensor3;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor.js
var require_tensor = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tensor = void 0;
    var tensor_impl_js_1 = require_tensor_impl();
    exports.Tensor = tensor_impl_js_1.Tensor;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/trace.js
var require_trace = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/trace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TRACE_FUNC_END = exports.TRACE_FUNC_BEGIN = exports.TRACE = void 0;
    var env_impl_js_1 = require_env_impl();
    var TRACE2 = (deviceType, label) => {
      if (typeof env_impl_js_1.env.trace === "undefined" ? !env_impl_js_1.env.wasm.trace : !env_impl_js_1.env.trace) {
        return;
      }
      console.timeStamp(`${deviceType}::ORT::${label}`);
    };
    exports.TRACE = TRACE2;
    var TRACE_FUNC2 = (msg, extraMsg) => {
      const stack = new Error().stack?.split(/\r\n|\r|\n/g) || [];
      let hasTraceFunc = false;
      for (let i = 0; i < stack.length; i++) {
        if (hasTraceFunc && !stack[i].includes("TRACE_FUNC")) {
          let label = `FUNC_${msg}::${stack[i].trim().split(" ")[1]}`;
          if (extraMsg) {
            label += `::${extraMsg}`;
          }
          (0, exports.TRACE)("CPU", label);
          return;
        }
        if (stack[i].includes("TRACE_FUNC")) {
          hasTraceFunc = true;
        }
      }
    };
    var TRACE_FUNC_BEGIN2 = (extraMsg) => {
      if (typeof env_impl_js_1.env.trace === "undefined" ? !env_impl_js_1.env.wasm.trace : !env_impl_js_1.env.trace) {
        return;
      }
      TRACE_FUNC2("BEGIN", extraMsg);
    };
    exports.TRACE_FUNC_BEGIN = TRACE_FUNC_BEGIN2;
    var TRACE_FUNC_END2 = (extraMsg) => {
      if (typeof env_impl_js_1.env.trace === "undefined" ? !env_impl_js_1.env.wasm.trace : !env_impl_js_1.env.trace) {
        return;
      }
      TRACE_FUNC2("END", extraMsg);
    };
    exports.TRACE_FUNC_END = TRACE_FUNC_END2;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/inference-session-impl.js
var require_inference_session_impl = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/inference-session-impl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InferenceSession = void 0;
    var backend_impl_js_1 = require_backend_impl();
    var tensor_js_1 = require_tensor();
    var trace_js_1 = require_trace();
    var InferenceSession3 = class {
      constructor(handler) {
        this.handler = handler;
      }
      async run(feeds, arg1, arg2) {
        (0, trace_js_1.TRACE_FUNC_BEGIN)();
        const fetches = {};
        let options = {};
        if (typeof feeds !== "object" || feeds === null || feeds instanceof tensor_js_1.Tensor || Array.isArray(feeds)) {
          throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
        }
        let isFetchesEmpty = true;
        if (typeof arg1 === "object") {
          if (arg1 === null) {
            throw new TypeError("Unexpected argument[1]: cannot be null.");
          }
          if (arg1 instanceof tensor_js_1.Tensor) {
            throw new TypeError("'fetches' cannot be a Tensor");
          }
          if (Array.isArray(arg1)) {
            if (arg1.length === 0) {
              throw new TypeError("'fetches' cannot be an empty array.");
            }
            isFetchesEmpty = false;
            for (const name of arg1) {
              if (typeof name !== "string") {
                throw new TypeError("'fetches' must be a string array or an object.");
              }
              if (this.outputNames.indexOf(name) === -1) {
                throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
              }
              fetches[name] = null;
            }
            if (typeof arg2 === "object" && arg2 !== null) {
              options = arg2;
            } else if (typeof arg2 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else {
            let isFetches = false;
            const arg1Keys = Object.getOwnPropertyNames(arg1);
            for (const name of this.outputNames) {
              if (arg1Keys.indexOf(name) !== -1) {
                const v = arg1[name];
                if (v === null || v instanceof tensor_js_1.Tensor) {
                  isFetches = true;
                  isFetchesEmpty = false;
                  fetches[name] = v;
                }
              }
            }
            if (isFetches) {
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              options = arg1;
            }
          }
        } else if (typeof arg1 !== "undefined") {
          throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
        }
        for (const name of this.inputNames) {
          if (typeof feeds[name] === "undefined") {
            throw new Error(`input '${name}' is missing in 'feeds'.`);
          }
        }
        if (isFetchesEmpty) {
          for (const name of this.outputNames) {
            fetches[name] = null;
          }
        }
        const results = await this.handler.run(feeds, fetches, options);
        const returnValue = {};
        for (const key in results) {
          if (Object.hasOwnProperty.call(results, key)) {
            const result = results[key];
            if (result instanceof tensor_js_1.Tensor) {
              returnValue[key] = result;
            } else {
              returnValue[key] = new tensor_js_1.Tensor(result.type, result.data, result.dims);
            }
          }
        }
        (0, trace_js_1.TRACE_FUNC_END)();
        return returnValue;
      }
      async release() {
        return this.handler.dispose();
      }
      static async create(arg0, arg1, arg2, arg3) {
        (0, trace_js_1.TRACE_FUNC_BEGIN)();
        let filePathOrUint8Array;
        let options = {};
        if (typeof arg0 === "string") {
          filePathOrUint8Array = arg0;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
        } else if (arg0 instanceof Uint8Array) {
          filePathOrUint8Array = arg0;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
        } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && arg0 instanceof SharedArrayBuffer) {
          const buffer = arg0;
          let byteOffset = 0;
          let byteLength = arg0.byteLength;
          if (typeof arg1 === "object" && arg1 !== null) {
            options = arg1;
          } else if (typeof arg1 === "number") {
            byteOffset = arg1;
            if (!Number.isSafeInteger(byteOffset)) {
              throw new RangeError("'byteOffset' must be an integer.");
            }
            if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
              throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);
            }
            byteLength = arg0.byteLength - byteOffset;
            if (typeof arg2 === "number") {
              byteLength = arg2;
              if (!Number.isSafeInteger(byteLength)) {
                throw new RangeError("'byteLength' must be an integer.");
              }
              if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);
              }
              if (typeof arg3 === "object" && arg3 !== null) {
                options = arg3;
              } else if (typeof arg3 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else if (typeof arg2 !== "undefined") {
              throw new TypeError("'byteLength' must be a number.");
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("'options' must be an object.");
          }
          filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
        } else {
          throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
        }
        const [backend, optionsWithValidatedEPs] = await (0, backend_impl_js_1.resolveBackendAndExecutionProviders)(options);
        const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, optionsWithValidatedEPs);
        (0, trace_js_1.TRACE_FUNC_END)();
        return new InferenceSession3(handler);
      }
      startProfiling() {
        this.handler.startProfiling();
      }
      endProfiling() {
        this.handler.endProfiling();
      }
      get inputNames() {
        return this.handler.inputNames;
      }
      get outputNames() {
        return this.handler.outputNames;
      }
    };
    exports.InferenceSession = InferenceSession3;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/inference-session.js
var require_inference_session = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/inference-session.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InferenceSession = void 0;
    var inference_session_impl_js_1 = require_inference_session_impl();
    exports.InferenceSession = inference_session_impl_js_1.InferenceSession;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-conversion.js
var require_tensor_conversion = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-conversion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-factory.js
var require_tensor_factory = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/tensor-factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/onnx-model.js
var require_onnx_model = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/onnx-model.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/onnx-value.js
var require_onnx_value = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/onnx-value.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-common/dist/cjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_backend(), exports);
    __exportStar(require_env(), exports);
    __exportStar(require_inference_session(), exports);
    __exportStar(require_tensor(), exports);
    __exportStar(require_tensor_conversion(), exports);
    __exportStar(require_tensor_factory(), exports);
    __exportStar(require_trace(), exports);
    __exportStar(require_onnx_model(), exports);
    __exportStar(require_onnx_value(), exports);
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-node/dist/binding.js
var require_binding = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-node/dist/binding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.initOrt = exports.binding = void 0;
    var onnxruntime_common_1 = require_cjs();
    exports.binding = // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires
    require(`../bin/napi-v3/${process.platform}/${process.arch}/onnxruntime_binding.node`);
    var ortInitialized = false;
    var initOrt = () => {
      if (!ortInitialized) {
        ortInitialized = true;
        let logLevel = 2;
        if (onnxruntime_common_1.env.logLevel) {
          switch (onnxruntime_common_1.env.logLevel) {
            case "verbose":
              logLevel = 0;
              break;
            case "info":
              logLevel = 1;
              break;
            case "warning":
              logLevel = 2;
              break;
            case "error":
              logLevel = 3;
              break;
            case "fatal":
              logLevel = 4;
              break;
            default:
              throw new Error(`Unsupported log level: ${onnxruntime_common_1.env.logLevel}`);
          }
        }
        exports.binding.initOrtOnce(logLevel, onnxruntime_common_1.Tensor);
      }
    };
    exports.initOrt = initOrt;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-node/dist/backend.js
var require_backend2 = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-node/dist/backend.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _OnnxruntimeSessionHandler_inferenceSession;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.listSupportedBackends = exports.onnxruntimeBackend = void 0;
    var binding_1 = require_binding();
    var OnnxruntimeSessionHandler = class {
      constructor(pathOrBuffer, options) {
        _OnnxruntimeSessionHandler_inferenceSession.set(this, void 0);
        (0, binding_1.initOrt)();
        __classPrivateFieldSet(this, _OnnxruntimeSessionHandler_inferenceSession, new binding_1.binding.InferenceSession(), "f");
        if (typeof pathOrBuffer === "string") {
          __classPrivateFieldGet(this, _OnnxruntimeSessionHandler_inferenceSession, "f").loadModel(pathOrBuffer, options);
        } else {
          __classPrivateFieldGet(this, _OnnxruntimeSessionHandler_inferenceSession, "f").loadModel(pathOrBuffer.buffer, pathOrBuffer.byteOffset, pathOrBuffer.byteLength, options);
        }
        this.inputNames = __classPrivateFieldGet(this, _OnnxruntimeSessionHandler_inferenceSession, "f").inputNames;
        this.outputNames = __classPrivateFieldGet(this, _OnnxruntimeSessionHandler_inferenceSession, "f").outputNames;
      }
      async dispose() {
        __classPrivateFieldGet(this, _OnnxruntimeSessionHandler_inferenceSession, "f").dispose();
      }
      startProfiling() {
      }
      endProfiling() {
        __classPrivateFieldGet(this, _OnnxruntimeSessionHandler_inferenceSession, "f").endProfiling();
      }
      async run(feeds, fetches, options) {
        return new Promise((resolve, reject) => {
          setImmediate(() => {
            try {
              resolve(__classPrivateFieldGet(this, _OnnxruntimeSessionHandler_inferenceSession, "f").run(feeds, fetches, options));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
    };
    _OnnxruntimeSessionHandler_inferenceSession = /* @__PURE__ */ new WeakMap();
    var OnnxruntimeBackend = class {
      async init() {
        return Promise.resolve();
      }
      async createInferenceSessionHandler(pathOrBuffer, options) {
        return new Promise((resolve, reject) => {
          setImmediate(() => {
            try {
              resolve(new OnnxruntimeSessionHandler(pathOrBuffer, options || {}));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
    };
    exports.onnxruntimeBackend = new OnnxruntimeBackend();
    exports.listSupportedBackends = binding_1.binding.listSupportedBackends;
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-node/dist/version.js
var require_version2 = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-node/dist/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "1.21.0";
  }
});

// node_modules/@huggingface/transformers/node_modules/onnxruntime-node/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/onnxruntime-node/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.listSupportedBackends = void 0;
    __exportStar(require_cjs(), exports);
    var backend_1 = require_backend2();
    Object.defineProperty(exports, "listSupportedBackends", { enumerable: true, get: function() {
      return backend_1.listSupportedBackends;
    } });
    var onnxruntime_common_1 = require_cjs();
    var version_1 = require_version2();
    var backend_2 = require_backend2();
    var backends2 = (0, backend_2.listSupportedBackends)();
    for (const backend of backends2) {
      (0, onnxruntime_common_1.registerBackend)(backend.name, backend_2.onnxruntimeBackend, 100);
    }
    Object.defineProperty(onnxruntime_common_1.env.versions, "node", { value: version_1.version, enumerable: true });
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/is.js
var require_is = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/is.js"(exports, module2) {
    "use strict";
    var defined = function(val) {
      return typeof val !== "undefined" && val !== null;
    };
    var object = function(val) {
      return typeof val === "object";
    };
    var plainObject = function(val) {
      return Object.prototype.toString.call(val) === "[object Object]";
    };
    var fn = function(val) {
      return typeof val === "function";
    };
    var bool = function(val) {
      return typeof val === "boolean";
    };
    var buffer = function(val) {
      return val instanceof Buffer;
    };
    var typedArray = function(val) {
      if (defined(val)) {
        switch (val.constructor) {
          case Uint8Array:
          case Uint8ClampedArray:
          case Int8Array:
          case Uint16Array:
          case Int16Array:
          case Uint32Array:
          case Int32Array:
          case Float32Array:
          case Float64Array:
            return true;
        }
      }
      return false;
    };
    var arrayBuffer = function(val) {
      return val instanceof ArrayBuffer;
    };
    var string = function(val) {
      return typeof val === "string" && val.length > 0;
    };
    var number = function(val) {
      return typeof val === "number" && !Number.isNaN(val);
    };
    var integer = function(val) {
      return Number.isInteger(val);
    };
    var inRange = function(val, min, max) {
      return val >= min && val <= max;
    };
    var inArray = function(val, list) {
      return list.includes(val);
    };
    var invalidParameterError = function(name, expected, actual) {
      return new Error(
        `Expected ${expected} for ${name} but received ${actual} of type ${typeof actual}`
      );
    };
    var nativeError = function(native, context) {
      context.message = native.message;
      return context;
    };
    module2.exports = {
      defined,
      object,
      plainObject,
      fn,
      bool,
      buffer,
      typedArray,
      arrayBuffer,
      string,
      number,
      integer,
      inRange,
      inArray,
      invalidParameterError,
      nativeError
    };
  }
});

// node_modules/detect-libc/lib/process.js
var require_process = __commonJS({
  "node_modules/detect-libc/lib/process.js"(exports, module2) {
    "use strict";
    var isLinux = () => process.platform === "linux";
    var report = null;
    var getReport = () => {
      if (!report) {
        if (isLinux() && process.report) {
          const orig = process.report.excludeNetwork;
          process.report.excludeNetwork = true;
          report = process.report.getReport();
          process.report.excludeNetwork = orig;
        } else {
          report = {};
        }
      }
      return report;
    };
    module2.exports = { isLinux, getReport };
  }
});

// node_modules/detect-libc/lib/filesystem.js
var require_filesystem = __commonJS({
  "node_modules/detect-libc/lib/filesystem.js"(exports, module2) {
    "use strict";
    var fs = require("fs");
    var LDD_PATH = "/usr/bin/ldd";
    var readFileSync = (path) => fs.readFileSync(path, "utf-8");
    var readFile = (path) => new Promise((resolve, reject) => {
      fs.readFile(path, "utf-8", (err, data) => {
        if (err) {
          reject(err);
        } else {
          resolve(data);
        }
      });
    });
    module2.exports = {
      LDD_PATH,
      readFileSync,
      readFile
    };
  }
});

// node_modules/detect-libc/lib/detect-libc.js
var require_detect_libc = __commonJS({
  "node_modules/detect-libc/lib/detect-libc.js"(exports, module2) {
    "use strict";
    var childProcess = require("child_process");
    var { isLinux, getReport } = require_process();
    var { LDD_PATH, readFile, readFileSync } = require_filesystem();
    var cachedFamilyFilesystem;
    var cachedVersionFilesystem;
    var command = "getconf GNU_LIBC_VERSION 2>&1 || true; ldd --version 2>&1 || true";
    var commandOut = "";
    var safeCommand = () => {
      if (!commandOut) {
        return new Promise((resolve) => {
          childProcess.exec(command, (err, out) => {
            commandOut = err ? " " : out;
            resolve(commandOut);
          });
        });
      }
      return commandOut;
    };
    var safeCommandSync = () => {
      if (!commandOut) {
        try {
          commandOut = childProcess.execSync(command, { encoding: "utf8" });
        } catch (_err) {
          commandOut = " ";
        }
      }
      return commandOut;
    };
    var GLIBC = "glibc";
    var RE_GLIBC_VERSION = /LIBC[a-z0-9 \-).]*?(\d+\.\d+)/i;
    var MUSL = "musl";
    var isFileMusl = (f) => f.includes("libc.musl-") || f.includes("ld-musl-");
    var familyFromReport = () => {
      const report = getReport();
      if (report.header && report.header.glibcVersionRuntime) {
        return GLIBC;
      }
      if (Array.isArray(report.sharedObjects)) {
        if (report.sharedObjects.some(isFileMusl)) {
          return MUSL;
        }
      }
      return null;
    };
    var familyFromCommand = (out) => {
      const [getconf, ldd1] = out.split(/[\r\n]+/);
      if (getconf && getconf.includes(GLIBC)) {
        return GLIBC;
      }
      if (ldd1 && ldd1.includes(MUSL)) {
        return MUSL;
      }
      return null;
    };
    var getFamilyFromLddContent = (content) => {
      if (content.includes("musl")) {
        return MUSL;
      }
      if (content.includes("GNU C Library")) {
        return GLIBC;
      }
      return null;
    };
    var familyFromFilesystem = async () => {
      if (cachedFamilyFilesystem !== void 0) {
        return cachedFamilyFilesystem;
      }
      cachedFamilyFilesystem = null;
      try {
        const lddContent = await readFile(LDD_PATH);
        cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);
      } catch (e) {
      }
      return cachedFamilyFilesystem;
    };
    var familyFromFilesystemSync = () => {
      if (cachedFamilyFilesystem !== void 0) {
        return cachedFamilyFilesystem;
      }
      cachedFamilyFilesystem = null;
      try {
        const lddContent = readFileSync(LDD_PATH);
        cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);
      } catch (e) {
      }
      return cachedFamilyFilesystem;
    };
    var family = async () => {
      let family2 = null;
      if (isLinux()) {
        family2 = await familyFromFilesystem();
        if (!family2) {
          family2 = familyFromReport();
        }
        if (!family2) {
          const out = await safeCommand();
          family2 = familyFromCommand(out);
        }
      }
      return family2;
    };
    var familySync = () => {
      let family2 = null;
      if (isLinux()) {
        family2 = familyFromFilesystemSync();
        if (!family2) {
          family2 = familyFromReport();
        }
        if (!family2) {
          const out = safeCommandSync();
          family2 = familyFromCommand(out);
        }
      }
      return family2;
    };
    var isNonGlibcLinux = async () => isLinux() && await family() !== GLIBC;
    var isNonGlibcLinuxSync = () => isLinux() && familySync() !== GLIBC;
    var versionFromFilesystem = async () => {
      if (cachedVersionFilesystem !== void 0) {
        return cachedVersionFilesystem;
      }
      cachedVersionFilesystem = null;
      try {
        const lddContent = await readFile(LDD_PATH);
        const versionMatch = lddContent.match(RE_GLIBC_VERSION);
        if (versionMatch) {
          cachedVersionFilesystem = versionMatch[1];
        }
      } catch (e) {
      }
      return cachedVersionFilesystem;
    };
    var versionFromFilesystemSync = () => {
      if (cachedVersionFilesystem !== void 0) {
        return cachedVersionFilesystem;
      }
      cachedVersionFilesystem = null;
      try {
        const lddContent = readFileSync(LDD_PATH);
        const versionMatch = lddContent.match(RE_GLIBC_VERSION);
        if (versionMatch) {
          cachedVersionFilesystem = versionMatch[1];
        }
      } catch (e) {
      }
      return cachedVersionFilesystem;
    };
    var versionFromReport = () => {
      const report = getReport();
      if (report.header && report.header.glibcVersionRuntime) {
        return report.header.glibcVersionRuntime;
      }
      return null;
    };
    var versionSuffix = (s) => s.trim().split(/\s+/)[1];
    var versionFromCommand = (out) => {
      const [getconf, ldd1, ldd2] = out.split(/[\r\n]+/);
      if (getconf && getconf.includes(GLIBC)) {
        return versionSuffix(getconf);
      }
      if (ldd1 && ldd2 && ldd1.includes(MUSL)) {
        return versionSuffix(ldd2);
      }
      return null;
    };
    var version2 = async () => {
      let version3 = null;
      if (isLinux()) {
        version3 = await versionFromFilesystem();
        if (!version3) {
          version3 = versionFromReport();
        }
        if (!version3) {
          const out = await safeCommand();
          version3 = versionFromCommand(out);
        }
      }
      return version3;
    };
    var versionSync = () => {
      let version3 = null;
      if (isLinux()) {
        version3 = versionFromFilesystemSync();
        if (!version3) {
          version3 = versionFromReport();
        }
        if (!version3) {
          const out = safeCommandSync();
          version3 = versionFromCommand(out);
        }
      }
      return version3;
    };
    module2.exports = {
      GLIBC,
      MUSL,
      family,
      familySync,
      isNonGlibcLinux,
      isNonGlibcLinuxSync,
      version: version2,
      versionSync
    };
  }
});

// node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "node_modules/semver/internal/debug.js"(exports, module2) {
    "use strict";
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module2.exports = debug;
  }
});

// node_modules/semver/internal/constants.js
var require_constants = __commonJS({
  "node_modules/semver/internal/constants.js"(exports, module2) {
    "use strict";
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module2.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// node_modules/semver/internal/re.js
var require_re = __commonJS({
  "node_modules/semver/internal/re.js"(exports, module2) {
    "use strict";
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants();
    var debug = require_debug();
    exports = module2.exports = {};
    var re = exports.re = [];
    var safeRe = exports.safeRe = [];
    var src = exports.src = [];
    var safeSrc = exports.safeSrc = [];
    var t = exports.t = {};
    var R2 = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = (value) => {
      for (const [token, max] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
      }
      return value;
    };
    var createToken = (name, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R2++;
      debug(name, index, value);
      t[name] = index;
      src[index] = value;
      safeSrc[index] = safe;
      re[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NONNUMERICIDENTIFIER]}|${src[t.NUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NONNUMERICIDENTIFIER]}|${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
    createToken("COERCE", `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src[t.COERCEPLAIN] + `(?:${src[t.PRERELEASE]})?(?:${src[t.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    createToken("COERCERTLFULL", src[t.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "node_modules/semver/internal/parse-options.js"(exports, module2) {
    "use strict";
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    };
    module2.exports = parseOptions;
  }
});

// node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/semver/internal/identifiers.js"(exports, module2) {
    "use strict";
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module2.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "node_modules/semver/classes/semver.js"(exports, module2) {
    "use strict";
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants();
    var { safeRe: re, t } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class {
      constructor(version2, options) {
        options = parseOptions(options);
        if (version2 instanceof SemVer) {
          if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
            return version2;
          } else {
            version2 = version2.version;
          }
        } else if (typeof version2 !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version2}".`);
        }
        if (version2.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug("SemVer", version2, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m = version2.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        this.raw = version2;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug("build compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release, identifier, identifierBase) {
        if (release.startsWith("pre")) {
          if (!identifier && identifierBase === false) {
            throw new Error("invalid increment argument: identifier is empty");
          }
          if (identifier) {
            const match = `-${identifier}`.match(this.options.loose ? re[t.PRERELEASELOOSE] : re[t.PRERELEASE]);
            if (!match || match[1] !== identifier) {
              throw new Error(`invalid identifier: ${identifier}`);
            }
          }
        }
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "release":
            if (this.prerelease.length === 0) {
              throw new Error(`version ${this.raw} is not a prerelease`);
            }
            this.prerelease.length = 0;
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module2.exports = SemVer;
  }
});

// node_modules/semver/functions/parse.js
var require_parse = __commonJS({
  "node_modules/semver/functions/parse.js"(exports, module2) {
    "use strict";
    var SemVer = require_semver();
    var parse = (version2, options, throwErrors = false) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      try {
        return new SemVer(version2, options);
      } catch (er) {
        if (!throwErrors) {
          return null;
        }
        throw er;
      }
    };
    module2.exports = parse;
  }
});

// node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "node_modules/semver/functions/coerce.js"(exports, module2) {
    "use strict";
    var SemVer = require_semver();
    var parse = require_parse();
    var { safeRe: re, t } = require_re();
    var coerce = (version2, options) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 === "number") {
        version2 = String(version2);
      }
      if (typeof version2 !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version2.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
      } else {
        const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
        let next;
        while ((next = coerceRtlRegex.exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        }
        coerceRtlRegex.lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      const major = match[2];
      const minor = match[3] || "0";
      const patch = match[4] || "0";
      const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
      const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
      return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options);
    };
    module2.exports = coerce;
  }
});

// node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "node_modules/semver/functions/compare.js"(exports, module2) {
    "use strict";
    var SemVer = require_semver();
    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module2.exports = compare;
  }
});

// node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "node_modules/semver/functions/gte.js"(exports, module2) {
    "use strict";
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module2.exports = gte;
  }
});

// node_modules/semver/internal/lrucache.js
var require_lrucache = __commonJS({
  "node_modules/semver/internal/lrucache.js"(exports, module2) {
    "use strict";
    var LRUCache = class {
      constructor() {
        this.max = 1e3;
        this.map = /* @__PURE__ */ new Map();
      }
      get(key) {
        const value = this.map.get(key);
        if (value === void 0) {
          return void 0;
        } else {
          this.map.delete(key);
          this.map.set(key, value);
          return value;
        }
      }
      delete(key) {
        return this.map.delete(key);
      }
      set(key, value) {
        const deleted = this.delete(key);
        if (!deleted && value !== void 0) {
          if (this.map.size >= this.max) {
            const firstKey = this.map.keys().next().value;
            this.delete(firstKey);
          }
          this.map.set(key, value);
        }
        return this;
      }
    };
    module2.exports = LRUCache;
  }
});

// node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "node_modules/semver/functions/eq.js"(exports, module2) {
    "use strict";
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module2.exports = eq;
  }
});

// node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "node_modules/semver/functions/neq.js"(exports, module2) {
    "use strict";
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module2.exports = neq;
  }
});

// node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "node_modules/semver/functions/gt.js"(exports, module2) {
    "use strict";
    var compare = require_compare();
    var gt = (a, b, loose) => compare(a, b, loose) > 0;
    module2.exports = gt;
  }
});

// node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "node_modules/semver/functions/lt.js"(exports, module2) {
    "use strict";
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module2.exports = lt;
  }
});

// node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "node_modules/semver/functions/lte.js"(exports, module2) {
    "use strict";
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module2.exports = lte;
  }
});

// node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "node_modules/semver/functions/cmp.js"(exports, module2) {
    "use strict";
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a === b;
        case "!==":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module2.exports = cmp;
  }
});

// node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "node_modules/semver/classes/comparator.js"(exports, module2) {
    "use strict";
    var ANY = Symbol("SemVer ANY");
    var Comparator = class {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY || version2 === ANY) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module2.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re, t } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range = require_range();
  }
});

// node_modules/semver/classes/range.js
var require_range = __commonJS({
  "node_modules/semver/classes/range.js"(exports, module2) {
    "use strict";
    var SPACE_CHARACTERS = /\s+/g;
    var Range = class {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.formatted = void 0;
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i = 0; i < this.set.length; i++) {
            if (i > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i];
            for (let k = 0; k < comps.length; k++) {
              if (k > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module2.exports = Range;
    var LRU = require_lrucache();
    var cache = new LRU();
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      safeRe: re,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
    };
    var replaceTilde = (comp, options) => {
      const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, (_2, M, m, p, pr) => {
        debug("tilde", comp, _2, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
    };
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r, (_2, M, m, p, pr) => {
        debug("caret", comp, _2, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version2, options) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === Comparator.ANY) {
            continue;
          }
          if (set[i].semver.prerelease.length > 0) {
            const allowed = set[i].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "node_modules/semver/functions/satisfies.js"(exports, module2) {
    "use strict";
    var Range = require_range();
    var satisfies = (version2, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version2);
    };
    module2.exports = satisfies;
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/package.json
var require_package = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/package.json"(exports, module2) {
    module2.exports = {
      name: "sharp",
      description: "High performance Node.js image processing, the fastest module to resize JPEG, PNG, WebP, GIF, AVIF and TIFF images",
      version: "0.34.2",
      author: "Lovell Fuller <npm@lovell.info>",
      homepage: "https://sharp.pixelplumbing.com",
      contributors: [
        "Pierre Inglebert <pierre.inglebert@gmail.com>",
        "Jonathan Ong <jonathanrichardong@gmail.com>",
        "Chanon Sajjamanochai <chanon.s@gmail.com>",
        "Juliano Julio <julianojulio@gmail.com>",
        "Daniel Gasienica <daniel@gasienica.ch>",
        "Julian Walker <julian@fiftythree.com>",
        "Amit Pitaru <pitaru.amit@gmail.com>",
        "Brandon Aaron <hello.brandon@aaron.sh>",
        "Andreas Lind <andreas@one.com>",
        "Maurus Cuelenaere <mcuelenaere@gmail.com>",
        "Linus Unneb\xE4ck <linus@folkdatorn.se>",
        "Victor Mateevitsi <mvictoras@gmail.com>",
        "Alaric Holloway <alaric.holloway@gmail.com>",
        "Bernhard K. Weisshuhn <bkw@codingforce.com>",
        "Chris Riley <criley@primedia.com>",
        "David Carley <dacarley@gmail.com>",
        "John Tobin <john@limelightmobileinc.com>",
        "Kenton Gray <kentongray@gmail.com>",
        "Felix B\xFCnemann <Felix.Buenemann@gmail.com>",
        "Samy Al Zahrani <samyalzahrany@gmail.com>",
        "Chintan Thakkar <lemnisk8@gmail.com>",
        "F. Orlando Galashan <frulo@gmx.de>",
        "Kleis Auke Wolthuizen <info@kleisauke.nl>",
        "Matt Hirsch <mhirsch@media.mit.edu>",
        "Matthias Thoemmes <thoemmes@gmail.com>",
        "Patrick Paskaris <patrick@paskaris.gr>",
        "J\xE9r\xE9my Lal <kapouer@melix.org>",
        "Rahul Nanwani <r.nanwani@gmail.com>",
        "Alice Monday <alice0meta@gmail.com>",
        "Kristo Jorgenson <kristo.jorgenson@gmail.com>",
        "YvesBos <yves_bos@outlook.com>",
        "Guy Maliar <guy@tailorbrands.com>",
        "Nicolas Coden <nicolas@ncoden.fr>",
        "Matt Parrish <matt.r.parrish@gmail.com>",
        "Marcel Bretschneider <marcel.bretschneider@gmail.com>",
        "Matthew McEachen <matthew+github@mceachen.org>",
        "Jarda Kot\u011B\u0161ovec <jarda.kotesovec@gmail.com>",
        "Kenric D'Souza <kenric.dsouza@gmail.com>",
        "Oleh Aleinyk <oleg.aleynik@gmail.com>",
        "Marcel Bretschneider <marcel.bretschneider@gmail.com>",
        "Andrea Bianco <andrea.bianco@unibas.ch>",
        "Rik Heywood <rik@rik.org>",
        "Thomas Parisot <hi@oncletom.io>",
        "Nathan Graves <nathanrgraves+github@gmail.com>",
        "Tom Lokhorst <tom@lokhorst.eu>",
        "Espen Hovlandsdal <espen@hovlandsdal.com>",
        "Sylvain Dumont <sylvain.dumont35@gmail.com>",
        "Alun Davies <alun.owain.davies@googlemail.com>",
        "Aidan Hoolachan <ajhoolachan21@gmail.com>",
        "Axel Eirola <axel.eirola@iki.fi>",
        "Freezy <freezy@xbmc.org>",
        "Daiz <taneli.vatanen@gmail.com>",
        "Julian Aubourg <j@ubourg.net>",
        "Keith Belovay <keith@picthrive.com>",
        "Michael B. Klein <mbklein@gmail.com>",
        "Jordan Prudhomme <jordan@raboland.fr>",
        "Ilya Ovdin <iovdin@gmail.com>",
        "Andargor <andargor@yahoo.com>",
        "Paul Neave <paul.neave@gmail.com>",
        "Brendan Kennedy <brenwken@gmail.com>",
        "Brychan Bennett-Odlum <git@brychan.io>",
        "Edward Silverton <e.silverton@gmail.com>",
        "Roman Malieiev <aromaleev@gmail.com>",
        "Tomas Szabo <tomas.szabo@deftomat.com>",
        "Robert O'Rourke <robert@o-rourke.org>",
        "Guillermo Alfonso Varela Chouci\xF1o <guillevch@gmail.com>",
        "Christian Flintrup <chr@gigahost.dk>",
        "Manan Jadhav <manan@motionden.com>",
        "Leon Radley <leon@radley.se>",
        "alza54 <alza54@thiocod.in>",
        "Jacob Smith <jacob@frende.me>",
        "Michael Nutt <michael@nutt.im>",
        "Brad Parham <baparham@gmail.com>",
        "Taneli Vatanen <taneli.vatanen@gmail.com>",
        "Joris Dugu\xE9 <zaruike10@gmail.com>",
        "Chris Banks <christopher.bradley.banks@gmail.com>",
        "Ompal Singh <ompal.hitm09@gmail.com>",
        "Brodan <christopher.hranj@gmail.com>",
        "Ankur Parihar <ankur.github@gmail.com>",
        "Brahim Ait elhaj <brahima@gmail.com>",
        "Mart Jansink <m.jansink@gmail.com>",
        "Lachlan Newman <lachnewman007@gmail.com>",
        "Dennis Beatty <dennis@dcbeatty.com>",
        "Ingvar Stepanyan <me@rreverser.com>",
        "Don Denton <don@happycollision.com>"
      ],
      scripts: {
        install: "node install/check",
        clean: "rm -rf src/build/ .nyc_output/ coverage/ test/fixtures/output.*",
        test: "npm run test-lint && npm run test-unit && npm run test-licensing && npm run test-types",
        "test-lint": "semistandard && cpplint",
        "test-unit": "nyc --reporter=lcov --reporter=text --check-coverage --branches=100 mocha",
        "test-licensing": 'license-checker --production --summary --onlyAllow="Apache-2.0;BSD;ISC;LGPL-3.0-or-later;MIT"',
        "test-leak": "./test/leak/leak.sh",
        "test-types": "tsd",
        "package-from-local-build": "node npm/from-local-build",
        "package-from-github-release": "node npm/from-github-release",
        "docs-build": "node docs/build.mjs",
        "docs-serve": "cd docs && npm start",
        "docs-publish": "cd docs && npm run build && npx firebase-tools deploy --project pixelplumbing --only hosting:pixelplumbing-sharp"
      },
      type: "commonjs",
      main: "lib/index.js",
      types: "lib/index.d.ts",
      files: [
        "install",
        "lib",
        "src/*.{cc,h,gyp}"
      ],
      repository: {
        type: "git",
        url: "git://github.com/lovell/sharp.git"
      },
      keywords: [
        "jpeg",
        "png",
        "webp",
        "avif",
        "tiff",
        "gif",
        "svg",
        "jp2",
        "dzi",
        "image",
        "resize",
        "thumbnail",
        "crop",
        "embed",
        "libvips",
        "vips"
      ],
      dependencies: {
        color: "^4.2.3",
        "detect-libc": "^2.0.4",
        semver: "^7.7.2"
      },
      optionalDependencies: {
        "@img/sharp-darwin-arm64": "0.34.2",
        "@img/sharp-darwin-x64": "0.34.2",
        "@img/sharp-libvips-darwin-arm64": "1.1.0",
        "@img/sharp-libvips-darwin-x64": "1.1.0",
        "@img/sharp-libvips-linux-arm": "1.1.0",
        "@img/sharp-libvips-linux-arm64": "1.1.0",
        "@img/sharp-libvips-linux-ppc64": "1.1.0",
        "@img/sharp-libvips-linux-s390x": "1.1.0",
        "@img/sharp-libvips-linux-x64": "1.1.0",
        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0",
        "@img/sharp-libvips-linuxmusl-x64": "1.1.0",
        "@img/sharp-linux-arm": "0.34.2",
        "@img/sharp-linux-arm64": "0.34.2",
        "@img/sharp-linux-s390x": "0.34.2",
        "@img/sharp-linux-x64": "0.34.2",
        "@img/sharp-linuxmusl-arm64": "0.34.2",
        "@img/sharp-linuxmusl-x64": "0.34.2",
        "@img/sharp-wasm32": "0.34.2",
        "@img/sharp-win32-arm64": "0.34.2",
        "@img/sharp-win32-ia32": "0.34.2",
        "@img/sharp-win32-x64": "0.34.2"
      },
      devDependencies: {
        "@emnapi/runtime": "^1.4.3",
        "@img/sharp-libvips-dev": "1.1.0",
        "@img/sharp-libvips-dev-wasm32": "1.1.0",
        "@img/sharp-libvips-win32-arm64": "1.1.0",
        "@img/sharp-libvips-win32-ia32": "1.1.0",
        "@img/sharp-libvips-win32-x64": "1.1.0",
        "@types/node": "*",
        cc: "^3.0.1",
        emnapi: "^1.4.3",
        "exif-reader": "^2.0.2",
        "extract-zip": "^2.0.1",
        icc: "^3.0.0",
        "jsdoc-to-markdown": "^9.1.1",
        "license-checker": "^25.0.1",
        mocha: "^11.4.0",
        "node-addon-api": "^8.3.1",
        nyc: "^17.1.0",
        prebuild: "^13.0.1",
        semistandard: "^17.0.0",
        "tar-fs": "^3.0.8",
        tsd: "^0.32.0"
      },
      license: "Apache-2.0",
      engines: {
        node: "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      config: {
        libvips: ">=8.16.1"
      },
      funding: {
        url: "https://opencollective.com/libvips"
      },
      binary: {
        napi_versions: [
          9
        ]
      },
      semistandard: {
        env: [
          "mocha"
        ]
      },
      cc: {
        linelength: "120",
        filter: [
          "build/include"
        ]
      },
      nyc: {
        include: [
          "lib"
        ]
      },
      tsd: {
        directory: "test/types/"
      }
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/libvips.js
var require_libvips = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/libvips.js"(exports, module2) {
    "use strict";
    var { spawnSync } = require("child_process");
    var { createHash } = require("crypto");
    var semverCoerce = require_coerce();
    var semverGreaterThanOrEqualTo = require_gte();
    var semverSatisfies = require_satisfies();
    var detectLibc = require_detect_libc();
    var { config, engines, optionalDependencies } = require_package();
    var minimumLibvipsVersionLabelled = process.env.npm_package_config_libvips || /* istanbul ignore next */
    config.libvips;
    var minimumLibvipsVersion = semverCoerce(minimumLibvipsVersionLabelled).version;
    var prebuiltPlatforms = [
      "darwin-arm64",
      "darwin-x64",
      "linux-arm",
      "linux-arm64",
      "linux-ppc64",
      "linux-s390x",
      "linux-x64",
      "linuxmusl-arm64",
      "linuxmusl-x64",
      "win32-arm64",
      "win32-ia32",
      "win32-x64"
    ];
    var spawnSyncOptions = {
      encoding: "utf8",
      shell: true
    };
    var log = (item) => {
      if (item instanceof Error) {
        console.error(`sharp: Installation error: ${item.message}`);
      } else {
        console.log(`sharp: ${item}`);
      }
    };
    var runtimeLibc = () => detectLibc.isNonGlibcLinuxSync() ? detectLibc.familySync() : "";
    var runtimePlatformArch = () => `${process.platform}${runtimeLibc()}-${process.arch}`;
    var buildPlatformArch = () => {
      if (isEmscripten()) {
        return "wasm32";
      }
      const { npm_config_arch, npm_config_platform, npm_config_libc } = process.env;
      const libc = typeof npm_config_libc === "string" ? npm_config_libc : runtimeLibc();
      return `${npm_config_platform || process.platform}${libc}-${npm_config_arch || process.arch}`;
    };
    var buildSharpLibvipsIncludeDir = () => {
      try {
        return require(`@img/sharp-libvips-dev-${buildPlatformArch()}/include`);
      } catch {
        try {
          return require("@img/sharp-libvips-dev/include");
        } catch {
        }
      }
      return "";
    };
    var buildSharpLibvipsCPlusPlusDir = () => {
      try {
        return require("@img/sharp-libvips-dev/cplusplus");
      } catch {
      }
      return "";
    };
    var buildSharpLibvipsLibDir = () => {
      try {
        return require(`@img/sharp-libvips-dev-${buildPlatformArch()}/lib`);
      } catch {
        try {
          return require(`@img/sharp-libvips-${buildPlatformArch()}/lib`);
        } catch {
        }
      }
      return "";
    };
    var isUnsupportedNodeRuntime = () => {
      if (process.release?.name === "node" && process.versions) {
        if (!semverSatisfies(process.versions.node, engines.node)) {
          return { found: process.versions.node, expected: engines.node };
        }
      }
    };
    var isEmscripten = () => {
      const { CC } = process.env;
      return Boolean(CC && CC.endsWith("/emcc"));
    };
    var isRosetta = () => {
      if (process.platform === "darwin" && process.arch === "x64") {
        const translated = spawnSync("sysctl sysctl.proc_translated", spawnSyncOptions).stdout;
        return (translated || "").trim() === "sysctl.proc_translated: 1";
      }
      return false;
    };
    var sha512 = (s) => createHash("sha512").update(s).digest("hex");
    var yarnLocator = () => {
      try {
        const identHash = sha512(`imgsharp-libvips-${buildPlatformArch()}`);
        const npmVersion = semverCoerce(optionalDependencies[`@img/sharp-libvips-${buildPlatformArch()}`], {
          includePrerelease: true
        }).version;
        return sha512(`${identHash}npm:${npmVersion}`).slice(0, 10);
      } catch {
      }
      return "";
    };
    var spawnRebuild = () => spawnSync(`node-gyp rebuild --directory=src ${isEmscripten() ? "--nodedir=emscripten" : ""}`, {
      ...spawnSyncOptions,
      stdio: "inherit"
    }).status;
    var globalLibvipsVersion = () => {
      if (process.platform !== "win32") {
        const globalLibvipsVersion2 = spawnSync("pkg-config --modversion vips-cpp", {
          ...spawnSyncOptions,
          env: {
            ...process.env,
            PKG_CONFIG_PATH: pkgConfigPath()
          }
        }).stdout;
        return (globalLibvipsVersion2 || "").trim();
      } else {
        return "";
      }
    };
    var pkgConfigPath = () => {
      if (process.platform !== "win32") {
        const brewPkgConfigPath = spawnSync(
          'which brew >/dev/null 2>&1 && brew environment --plain | grep PKG_CONFIG_LIBDIR | cut -d" " -f2',
          spawnSyncOptions
        ).stdout || "";
        return [
          brewPkgConfigPath.trim(),
          process.env.PKG_CONFIG_PATH,
          "/usr/local/lib/pkgconfig",
          "/usr/lib/pkgconfig",
          "/usr/local/libdata/pkgconfig",
          "/usr/libdata/pkgconfig"
        ].filter(Boolean).join(":");
      } else {
        return "";
      }
    };
    var skipSearch = (status, reason, logger) => {
      if (logger) {
        logger(`Detected ${reason}, skipping search for globally-installed libvips`);
      }
      return status;
    };
    var useGlobalLibvips = (logger) => {
      if (Boolean(process.env.SHARP_IGNORE_GLOBAL_LIBVIPS) === true) {
        return skipSearch(false, "SHARP_IGNORE_GLOBAL_LIBVIPS", logger);
      }
      if (Boolean(process.env.SHARP_FORCE_GLOBAL_LIBVIPS) === true) {
        return skipSearch(true, "SHARP_FORCE_GLOBAL_LIBVIPS", logger);
      }
      if (isRosetta()) {
        return skipSearch(false, "Rosetta", logger);
      }
      const globalVipsVersion = globalLibvipsVersion();
      return !!globalVipsVersion && /* istanbul ignore next */
      semverGreaterThanOrEqualTo(globalVipsVersion, minimumLibvipsVersion);
    };
    module2.exports = {
      minimumLibvipsVersion,
      prebuiltPlatforms,
      buildPlatformArch,
      buildSharpLibvipsIncludeDir,
      buildSharpLibvipsCPlusPlusDir,
      buildSharpLibvipsLibDir,
      isUnsupportedNodeRuntime,
      runtimePlatformArch,
      log,
      yarnLocator,
      spawnRebuild,
      globalLibvipsVersion,
      pkgConfigPath,
      useGlobalLibvips
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/sharp.js
var require_sharp = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/sharp.js"(exports, module2) {
    "use strict";
    var { familySync, versionSync } = require_detect_libc();
    var { runtimePlatformArch, isUnsupportedNodeRuntime, prebuiltPlatforms, minimumLibvipsVersion } = require_libvips();
    var runtimePlatform = runtimePlatformArch();
    var paths = [
      `../src/build/Release/sharp-${runtimePlatform}.node`,
      "../src/build/Release/sharp-wasm32.node",
      `@img/sharp-${runtimePlatform}/sharp.node`,
      "@img/sharp-wasm32/sharp.node"
    ];
    var path;
    var sharp;
    var errors = [];
    for (path of paths) {
      try {
        sharp = require(path);
        break;
      } catch (err) {
        errors.push(err);
      }
    }
    if (sharp && path.startsWith("@img/sharp-linux-x64") && !sharp._isUsingX64V2()) {
      const err = new Error("Prebuilt binaries for linux-x64 require v2 microarchitecture");
      err.code = "Unsupported CPU";
      errors.push(err);
      sharp = null;
    }
    if (sharp) {
      module2.exports = sharp;
    } else {
      const [isLinux, isMacOs, isWindows] = ["linux", "darwin", "win32"].map((os) => runtimePlatform.startsWith(os));
      const help = [`Could not load the "sharp" module using the ${runtimePlatform} runtime`];
      errors.forEach((err) => {
        if (err.code !== "MODULE_NOT_FOUND") {
          help.push(`${err.code}: ${err.message}`);
        }
      });
      const messages = errors.map((err) => err.message).join(" ");
      help.push("Possible solutions:");
      if (isUnsupportedNodeRuntime()) {
        const { found, expected } = isUnsupportedNodeRuntime();
        help.push(
          "- Please upgrade Node.js:",
          `    Found ${found}`,
          `    Requires ${expected}`
        );
      } else if (prebuiltPlatforms.includes(runtimePlatform)) {
        const [os, cpu] = runtimePlatform.split("-");
        const libc = os.endsWith("musl") ? " --libc=musl" : "";
        help.push(
          "- Ensure optional dependencies can be installed:",
          "    npm install --include=optional sharp",
          "- Ensure your package manager supports multi-platform installation:",
          "    See https://sharp.pixelplumbing.com/install#cross-platform",
          "- Add platform-specific dependencies:",
          `    npm install --os=${os.replace("musl", "")}${libc} --cpu=${cpu} sharp`
        );
      } else {
        help.push(
          `- Manually install libvips >= ${minimumLibvipsVersion}`,
          "- Add experimental WebAssembly-based dependencies:",
          "    npm install --cpu=wasm32 sharp",
          "    npm install @img/sharp-wasm32"
        );
      }
      if (isLinux && /(symbol not found|CXXABI_)/i.test(messages)) {
        try {
          const { config } = require(`@img/sharp-libvips-${runtimePlatform}/package`);
          const libcFound = `${familySync()} ${versionSync()}`;
          const libcRequires = `${config.musl ? "musl" : "glibc"} ${config.musl || config.glibc}`;
          help.push(
            "- Update your OS:",
            `    Found ${libcFound}`,
            `    Requires ${libcRequires}`
          );
        } catch (errEngines) {
        }
      }
      if (isLinux && /\/snap\/core[0-9]{2}/.test(messages)) {
        help.push(
          "- Remove the Node.js Snap, which does not support native modules",
          "    snap remove node"
        );
      }
      if (isMacOs && /Incompatible library version/.test(messages)) {
        help.push(
          "- Update Homebrew:",
          "    brew update && brew upgrade vips"
        );
      }
      if (errors.some((err) => err.code === "ERR_DLOPEN_DISABLED")) {
        help.push("- Run Node.js without using the --no-addons flag");
      }
      if (isWindows && /The specified procedure could not be found/.test(messages)) {
        help.push(
          "- Using the canvas package on Windows?",
          "    See https://sharp.pixelplumbing.com/install#canvas-and-windows",
          "- Check for outdated versions of sharp in the dependency tree:",
          "    npm ls sharp"
        );
      }
      help.push(
        "- Consult the installation documentation:",
        "    See https://sharp.pixelplumbing.com/install"
      );
      throw new Error(help.join("\n"));
    }
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/constructor.js
var require_constructor = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/constructor.js"(exports, module2) {
    "use strict";
    var util = require("util");
    var stream = require("stream");
    var is = require_is();
    require_sharp();
    var debuglog = util.debuglog("sharp");
    var Sharp = function(input, options) {
      if (arguments.length === 1 && !is.defined(input)) {
        throw new Error("Invalid input");
      }
      if (!(this instanceof Sharp)) {
        return new Sharp(input, options);
      }
      stream.Duplex.call(this);
      this.options = {
        // resize options
        topOffsetPre: -1,
        leftOffsetPre: -1,
        widthPre: -1,
        heightPre: -1,
        topOffsetPost: -1,
        leftOffsetPost: -1,
        widthPost: -1,
        heightPost: -1,
        width: -1,
        height: -1,
        canvas: "crop",
        position: 0,
        resizeBackground: [0, 0, 0, 255],
        angle: 0,
        rotationAngle: 0,
        rotationBackground: [0, 0, 0, 255],
        rotateBeforePreExtract: false,
        flip: false,
        flop: false,
        extendTop: 0,
        extendBottom: 0,
        extendLeft: 0,
        extendRight: 0,
        extendBackground: [0, 0, 0, 255],
        extendWith: "background",
        withoutEnlargement: false,
        withoutReduction: false,
        affineMatrix: [],
        affineBackground: [0, 0, 0, 255],
        affineIdx: 0,
        affineIdy: 0,
        affineOdx: 0,
        affineOdy: 0,
        affineInterpolator: this.constructor.interpolators.bilinear,
        kernel: "lanczos3",
        fastShrinkOnLoad: true,
        // operations
        tint: [-1, 0, 0, 0],
        flatten: false,
        flattenBackground: [0, 0, 0],
        unflatten: false,
        negate: false,
        negateAlpha: true,
        medianSize: 0,
        blurSigma: 0,
        precision: "integer",
        minAmpl: 0.2,
        sharpenSigma: 0,
        sharpenM1: 1,
        sharpenM2: 2,
        sharpenX1: 2,
        sharpenY2: 10,
        sharpenY3: 20,
        threshold: 0,
        thresholdGrayscale: true,
        trimBackground: [],
        trimThreshold: -1,
        trimLineArt: false,
        dilateWidth: 0,
        erodeWidth: 0,
        gamma: 0,
        gammaOut: 0,
        greyscale: false,
        normalise: false,
        normaliseLower: 1,
        normaliseUpper: 99,
        claheWidth: 0,
        claheHeight: 0,
        claheMaxSlope: 3,
        brightness: 1,
        saturation: 1,
        hue: 0,
        lightness: 0,
        booleanBufferIn: null,
        booleanFileIn: "",
        joinChannelIn: [],
        extractChannel: -1,
        removeAlpha: false,
        ensureAlpha: -1,
        colourspace: "srgb",
        colourspacePipeline: "last",
        composite: [],
        // output
        fileOut: "",
        formatOut: "input",
        streamOut: false,
        keepMetadata: 0,
        withMetadataOrientation: -1,
        withMetadataDensity: 0,
        withIccProfile: "",
        withExif: {},
        withExifMerge: true,
        resolveWithObject: false,
        loop: -1,
        delay: [],
        // output format
        jpegQuality: 80,
        jpegProgressive: false,
        jpegChromaSubsampling: "4:2:0",
        jpegTrellisQuantisation: false,
        jpegOvershootDeringing: false,
        jpegOptimiseScans: false,
        jpegOptimiseCoding: true,
        jpegQuantisationTable: 0,
        pngProgressive: false,
        pngCompressionLevel: 6,
        pngAdaptiveFiltering: false,
        pngPalette: false,
        pngQuality: 100,
        pngEffort: 7,
        pngBitdepth: 8,
        pngDither: 1,
        jp2Quality: 80,
        jp2TileHeight: 512,
        jp2TileWidth: 512,
        jp2Lossless: false,
        jp2ChromaSubsampling: "4:4:4",
        webpQuality: 80,
        webpAlphaQuality: 100,
        webpLossless: false,
        webpNearLossless: false,
        webpSmartSubsample: false,
        webpSmartDeblock: false,
        webpPreset: "default",
        webpEffort: 4,
        webpMinSize: false,
        webpMixed: false,
        gifBitdepth: 8,
        gifEffort: 7,
        gifDither: 1,
        gifInterFrameMaxError: 0,
        gifInterPaletteMaxError: 3,
        gifReuse: true,
        gifProgressive: false,
        tiffQuality: 80,
        tiffCompression: "jpeg",
        tiffPredictor: "horizontal",
        tiffPyramid: false,
        tiffMiniswhite: false,
        tiffBitdepth: 8,
        tiffTile: false,
        tiffTileHeight: 256,
        tiffTileWidth: 256,
        tiffXres: 1,
        tiffYres: 1,
        tiffResolutionUnit: "inch",
        heifQuality: 50,
        heifLossless: false,
        heifCompression: "av1",
        heifEffort: 4,
        heifChromaSubsampling: "4:4:4",
        heifBitdepth: 8,
        jxlDistance: 1,
        jxlDecodingTier: 0,
        jxlEffort: 7,
        jxlLossless: false,
        rawDepth: "uchar",
        tileSize: 256,
        tileOverlap: 0,
        tileContainer: "fs",
        tileLayout: "dz",
        tileFormat: "last",
        tileDepth: "last",
        tileAngle: 0,
        tileSkipBlanks: -1,
        tileBackground: [255, 255, 255, 255],
        tileCentre: false,
        tileId: "https://example.com/iiif",
        tileBasename: "",
        timeoutSeconds: 0,
        linearA: [],
        linearB: [],
        pdfBackground: [255, 255, 255, 255],
        // Function to notify of libvips warnings
        debuglog: (warning) => {
          this.emit("warning", warning);
          debuglog(warning);
        },
        // Function to notify of queue length changes
        queueListener: function(queueLength) {
          Sharp.queue.emit("change", queueLength);
        }
      };
      this.options.input = this._createInputDescriptor(input, options, { allowStream: true });
      return this;
    };
    Object.setPrototypeOf(Sharp.prototype, stream.Duplex.prototype);
    Object.setPrototypeOf(Sharp, stream.Duplex);
    function clone() {
      const clone2 = this.constructor.call();
      const { debuglog: debuglog2, queueListener, ...options } = this.options;
      clone2.options = structuredClone(options);
      clone2.options.debuglog = debuglog2;
      clone2.options.queueListener = queueListener;
      if (this._isStreamInput()) {
        this.on("finish", () => {
          this._flattenBufferIn();
          clone2.options.input.buffer = this.options.input.buffer;
          clone2.emit("finish");
        });
      }
      return clone2;
    }
    Object.assign(Sharp.prototype, { clone });
    module2.exports = Sharp;
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/input.js
var require_input = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/input.js"(exports, module2) {
    "use strict";
    var is = require_is();
    var sharp = require_sharp();
    var align = {
      left: "low",
      top: "low",
      low: "low",
      center: "centre",
      centre: "centre",
      right: "high",
      bottom: "high",
      high: "high"
    };
    function _inputOptionsFromObject(obj) {
      const { raw, density, limitInputPixels, ignoreIcc, unlimited, sequentialRead, failOn, failOnError, animated, page, pages, subifd, pdfBackground, autoOrient } = obj;
      return [raw, density, limitInputPixels, ignoreIcc, unlimited, sequentialRead, failOn, failOnError, animated, page, pages, subifd, pdfBackground, autoOrient].some(is.defined) ? { raw, density, limitInputPixels, ignoreIcc, unlimited, sequentialRead, failOn, failOnError, animated, page, pages, subifd, pdfBackground, autoOrient } : void 0;
    }
    function _createInputDescriptor(input, inputOptions, containerOptions) {
      const inputDescriptor = {
        autoOrient: false,
        failOn: "warning",
        limitInputPixels: Math.pow(16383, 2),
        ignoreIcc: false,
        unlimited: false,
        sequentialRead: true
      };
      if (is.string(input)) {
        inputDescriptor.file = input;
      } else if (is.buffer(input)) {
        if (input.length === 0) {
          throw Error("Input Buffer is empty");
        }
        inputDescriptor.buffer = input;
      } else if (is.arrayBuffer(input)) {
        if (input.byteLength === 0) {
          throw Error("Input bit Array is empty");
        }
        inputDescriptor.buffer = Buffer.from(input, 0, input.byteLength);
      } else if (is.typedArray(input)) {
        if (input.length === 0) {
          throw Error("Input Bit Array is empty");
        }
        inputDescriptor.buffer = Buffer.from(input.buffer, input.byteOffset, input.byteLength);
      } else if (is.plainObject(input) && !is.defined(inputOptions)) {
        inputOptions = input;
        if (_inputOptionsFromObject(inputOptions)) {
          inputDescriptor.buffer = [];
        }
      } else if (!is.defined(input) && !is.defined(inputOptions) && is.object(containerOptions) && containerOptions.allowStream) {
        inputDescriptor.buffer = [];
      } else if (Array.isArray(input)) {
        if (input.length > 1) {
          if (!this.options.joining) {
            this.options.joining = true;
            this.options.join = input.map((i) => this._createInputDescriptor(i));
          } else {
            throw new Error("Recursive join is unsupported");
          }
        } else {
          throw new Error("Expected at least two images to join");
        }
      } else {
        throw new Error(`Unsupported input '${input}' of type ${typeof input}${is.defined(inputOptions) ? ` when also providing options of type ${typeof inputOptions}` : ""}`);
      }
      if (is.object(inputOptions)) {
        if (is.defined(inputOptions.failOnError)) {
          if (is.bool(inputOptions.failOnError)) {
            inputDescriptor.failOn = inputOptions.failOnError ? "warning" : "none";
          } else {
            throw is.invalidParameterError("failOnError", "boolean", inputOptions.failOnError);
          }
        }
        if (is.defined(inputOptions.failOn)) {
          if (is.string(inputOptions.failOn) && is.inArray(inputOptions.failOn, ["none", "truncated", "error", "warning"])) {
            inputDescriptor.failOn = inputOptions.failOn;
          } else {
            throw is.invalidParameterError("failOn", "one of: none, truncated, error, warning", inputOptions.failOn);
          }
        }
        if (is.defined(inputOptions.autoOrient)) {
          if (is.bool(inputOptions.autoOrient)) {
            inputDescriptor.autoOrient = inputOptions.autoOrient;
          } else {
            throw is.invalidParameterError("autoOrient", "boolean", inputOptions.autoOrient);
          }
        }
        if (is.defined(inputOptions.density)) {
          if (is.inRange(inputOptions.density, 1, 1e5)) {
            inputDescriptor.density = inputOptions.density;
          } else {
            throw is.invalidParameterError("density", "number between 1 and 100000", inputOptions.density);
          }
        }
        if (is.defined(inputOptions.ignoreIcc)) {
          if (is.bool(inputOptions.ignoreIcc)) {
            inputDescriptor.ignoreIcc = inputOptions.ignoreIcc;
          } else {
            throw is.invalidParameterError("ignoreIcc", "boolean", inputOptions.ignoreIcc);
          }
        }
        if (is.defined(inputOptions.limitInputPixels)) {
          if (is.bool(inputOptions.limitInputPixels)) {
            inputDescriptor.limitInputPixels = inputOptions.limitInputPixels ? Math.pow(16383, 2) : 0;
          } else if (is.integer(inputOptions.limitInputPixels) && is.inRange(inputOptions.limitInputPixels, 0, Number.MAX_SAFE_INTEGER)) {
            inputDescriptor.limitInputPixels = inputOptions.limitInputPixels;
          } else {
            throw is.invalidParameterError("limitInputPixels", "positive integer", inputOptions.limitInputPixels);
          }
        }
        if (is.defined(inputOptions.unlimited)) {
          if (is.bool(inputOptions.unlimited)) {
            inputDescriptor.unlimited = inputOptions.unlimited;
          } else {
            throw is.invalidParameterError("unlimited", "boolean", inputOptions.unlimited);
          }
        }
        if (is.defined(inputOptions.sequentialRead)) {
          if (is.bool(inputOptions.sequentialRead)) {
            inputDescriptor.sequentialRead = inputOptions.sequentialRead;
          } else {
            throw is.invalidParameterError("sequentialRead", "boolean", inputOptions.sequentialRead);
          }
        }
        if (is.defined(inputOptions.raw)) {
          if (is.object(inputOptions.raw) && is.integer(inputOptions.raw.width) && inputOptions.raw.width > 0 && is.integer(inputOptions.raw.height) && inputOptions.raw.height > 0 && is.integer(inputOptions.raw.channels) && is.inRange(inputOptions.raw.channels, 1, 4)) {
            inputDescriptor.rawWidth = inputOptions.raw.width;
            inputDescriptor.rawHeight = inputOptions.raw.height;
            inputDescriptor.rawChannels = inputOptions.raw.channels;
            inputDescriptor.rawPremultiplied = !!inputOptions.raw.premultiplied;
            switch (input.constructor) {
              case Uint8Array:
              case Uint8ClampedArray:
                inputDescriptor.rawDepth = "uchar";
                break;
              case Int8Array:
                inputDescriptor.rawDepth = "char";
                break;
              case Uint16Array:
                inputDescriptor.rawDepth = "ushort";
                break;
              case Int16Array:
                inputDescriptor.rawDepth = "short";
                break;
              case Uint32Array:
                inputDescriptor.rawDepth = "uint";
                break;
              case Int32Array:
                inputDescriptor.rawDepth = "int";
                break;
              case Float32Array:
                inputDescriptor.rawDepth = "float";
                break;
              case Float64Array:
                inputDescriptor.rawDepth = "double";
                break;
              default:
                inputDescriptor.rawDepth = "uchar";
                break;
            }
          } else {
            throw new Error("Expected width, height and channels for raw pixel input");
          }
        }
        if (is.defined(inputOptions.animated)) {
          if (is.bool(inputOptions.animated)) {
            inputDescriptor.pages = inputOptions.animated ? -1 : 1;
          } else {
            throw is.invalidParameterError("animated", "boolean", inputOptions.animated);
          }
        }
        if (is.defined(inputOptions.pages)) {
          if (is.integer(inputOptions.pages) && is.inRange(inputOptions.pages, -1, 1e5)) {
            inputDescriptor.pages = inputOptions.pages;
          } else {
            throw is.invalidParameterError("pages", "integer between -1 and 100000", inputOptions.pages);
          }
        }
        if (is.defined(inputOptions.page)) {
          if (is.integer(inputOptions.page) && is.inRange(inputOptions.page, 0, 1e5)) {
            inputDescriptor.page = inputOptions.page;
          } else {
            throw is.invalidParameterError("page", "integer between 0 and 100000", inputOptions.page);
          }
        }
        if (is.defined(inputOptions.level)) {
          if (is.integer(inputOptions.level) && is.inRange(inputOptions.level, 0, 256)) {
            inputDescriptor.level = inputOptions.level;
          } else {
            throw is.invalidParameterError("level", "integer between 0 and 256", inputOptions.level);
          }
        }
        if (is.defined(inputOptions.subifd)) {
          if (is.integer(inputOptions.subifd) && is.inRange(inputOptions.subifd, -1, 1e5)) {
            inputDescriptor.subifd = inputOptions.subifd;
          } else {
            throw is.invalidParameterError("subifd", "integer between -1 and 100000", inputOptions.subifd);
          }
        }
        if (is.defined(inputOptions.pdfBackground)) {
          inputDescriptor.pdfBackground = this._getBackgroundColourOption(inputOptions.pdfBackground);
        }
        if (is.defined(inputOptions.create)) {
          if (is.object(inputOptions.create) && is.integer(inputOptions.create.width) && inputOptions.create.width > 0 && is.integer(inputOptions.create.height) && inputOptions.create.height > 0 && is.integer(inputOptions.create.channels)) {
            inputDescriptor.createWidth = inputOptions.create.width;
            inputDescriptor.createHeight = inputOptions.create.height;
            inputDescriptor.createChannels = inputOptions.create.channels;
            if (is.defined(inputOptions.create.noise)) {
              if (!is.object(inputOptions.create.noise)) {
                throw new Error("Expected noise to be an object");
              }
              if (!is.inArray(inputOptions.create.noise.type, ["gaussian"])) {
                throw new Error("Only gaussian noise is supported at the moment");
              }
              if (!is.inRange(inputOptions.create.channels, 1, 4)) {
                throw is.invalidParameterError("create.channels", "number between 1 and 4", inputOptions.create.channels);
              }
              inputDescriptor.createNoiseType = inputOptions.create.noise.type;
              if (is.number(inputOptions.create.noise.mean) && is.inRange(inputOptions.create.noise.mean, 0, 1e4)) {
                inputDescriptor.createNoiseMean = inputOptions.create.noise.mean;
              } else {
                throw is.invalidParameterError("create.noise.mean", "number between 0 and 10000", inputOptions.create.noise.mean);
              }
              if (is.number(inputOptions.create.noise.sigma) && is.inRange(inputOptions.create.noise.sigma, 0, 1e4)) {
                inputDescriptor.createNoiseSigma = inputOptions.create.noise.sigma;
              } else {
                throw is.invalidParameterError("create.noise.sigma", "number between 0 and 10000", inputOptions.create.noise.sigma);
              }
            } else if (is.defined(inputOptions.create.background)) {
              if (!is.inRange(inputOptions.create.channels, 3, 4)) {
                throw is.invalidParameterError("create.channels", "number between 3 and 4", inputOptions.create.channels);
              }
              inputDescriptor.createBackground = this._getBackgroundColourOption(inputOptions.create.background);
            } else {
              throw new Error("Expected valid noise or background to create a new input image");
            }
            delete inputDescriptor.buffer;
          } else {
            throw new Error("Expected valid width, height and channels to create a new input image");
          }
        }
        if (is.defined(inputOptions.text)) {
          if (is.object(inputOptions.text) && is.string(inputOptions.text.text)) {
            inputDescriptor.textValue = inputOptions.text.text;
            if (is.defined(inputOptions.text.height) && is.defined(inputOptions.text.dpi)) {
              throw new Error("Expected only one of dpi or height");
            }
            if (is.defined(inputOptions.text.font)) {
              if (is.string(inputOptions.text.font)) {
                inputDescriptor.textFont = inputOptions.text.font;
              } else {
                throw is.invalidParameterError("text.font", "string", inputOptions.text.font);
              }
            }
            if (is.defined(inputOptions.text.fontfile)) {
              if (is.string(inputOptions.text.fontfile)) {
                inputDescriptor.textFontfile = inputOptions.text.fontfile;
              } else {
                throw is.invalidParameterError("text.fontfile", "string", inputOptions.text.fontfile);
              }
            }
            if (is.defined(inputOptions.text.width)) {
              if (is.integer(inputOptions.text.width) && inputOptions.text.width > 0) {
                inputDescriptor.textWidth = inputOptions.text.width;
              } else {
                throw is.invalidParameterError("text.width", "positive integer", inputOptions.text.width);
              }
            }
            if (is.defined(inputOptions.text.height)) {
              if (is.integer(inputOptions.text.height) && inputOptions.text.height > 0) {
                inputDescriptor.textHeight = inputOptions.text.height;
              } else {
                throw is.invalidParameterError("text.height", "positive integer", inputOptions.text.height);
              }
            }
            if (is.defined(inputOptions.text.align)) {
              if (is.string(inputOptions.text.align) && is.string(this.constructor.align[inputOptions.text.align])) {
                inputDescriptor.textAlign = this.constructor.align[inputOptions.text.align];
              } else {
                throw is.invalidParameterError("text.align", "valid alignment", inputOptions.text.align);
              }
            }
            if (is.defined(inputOptions.text.justify)) {
              if (is.bool(inputOptions.text.justify)) {
                inputDescriptor.textJustify = inputOptions.text.justify;
              } else {
                throw is.invalidParameterError("text.justify", "boolean", inputOptions.text.justify);
              }
            }
            if (is.defined(inputOptions.text.dpi)) {
              if (is.integer(inputOptions.text.dpi) && is.inRange(inputOptions.text.dpi, 1, 1e6)) {
                inputDescriptor.textDpi = inputOptions.text.dpi;
              } else {
                throw is.invalidParameterError("text.dpi", "integer between 1 and 1000000", inputOptions.text.dpi);
              }
            }
            if (is.defined(inputOptions.text.rgba)) {
              if (is.bool(inputOptions.text.rgba)) {
                inputDescriptor.textRgba = inputOptions.text.rgba;
              } else {
                throw is.invalidParameterError("text.rgba", "bool", inputOptions.text.rgba);
              }
            }
            if (is.defined(inputOptions.text.spacing)) {
              if (is.integer(inputOptions.text.spacing) && is.inRange(inputOptions.text.spacing, -1e6, 1e6)) {
                inputDescriptor.textSpacing = inputOptions.text.spacing;
              } else {
                throw is.invalidParameterError("text.spacing", "integer between -1000000 and 1000000", inputOptions.text.spacing);
              }
            }
            if (is.defined(inputOptions.text.wrap)) {
              if (is.string(inputOptions.text.wrap) && is.inArray(inputOptions.text.wrap, ["word", "char", "word-char", "none"])) {
                inputDescriptor.textWrap = inputOptions.text.wrap;
              } else {
                throw is.invalidParameterError("text.wrap", "one of: word, char, word-char, none", inputOptions.text.wrap);
              }
            }
            delete inputDescriptor.buffer;
          } else {
            throw new Error("Expected a valid string to create an image with text.");
          }
        }
        if (is.defined(inputOptions.join)) {
          if (is.defined(this.options.join)) {
            if (is.defined(inputOptions.join.animated)) {
              if (is.bool(inputOptions.join.animated)) {
                inputDescriptor.joinAnimated = inputOptions.join.animated;
              } else {
                throw is.invalidParameterError("join.animated", "boolean", inputOptions.join.animated);
              }
            }
            if (is.defined(inputOptions.join.across)) {
              if (is.integer(inputOptions.join.across) && is.inRange(inputOptions.join.across, 1, 1e6)) {
                inputDescriptor.joinAcross = inputOptions.join.across;
              } else {
                throw is.invalidParameterError("join.across", "integer between 1 and 100000", inputOptions.join.across);
              }
            }
            if (is.defined(inputOptions.join.shim)) {
              if (is.integer(inputOptions.join.shim) && is.inRange(inputOptions.join.shim, 0, 1e6)) {
                inputDescriptor.joinShim = inputOptions.join.shim;
              } else {
                throw is.invalidParameterError("join.shim", "integer between 0 and 100000", inputOptions.join.shim);
              }
            }
            if (is.defined(inputOptions.join.background)) {
              inputDescriptor.joinBackground = this._getBackgroundColourOption(inputOptions.join.background);
            }
            if (is.defined(inputOptions.join.halign)) {
              if (is.string(inputOptions.join.halign) && is.string(this.constructor.align[inputOptions.join.halign])) {
                inputDescriptor.joinHalign = this.constructor.align[inputOptions.join.halign];
              } else {
                throw is.invalidParameterError("join.halign", "valid alignment", inputOptions.join.halign);
              }
            }
            if (is.defined(inputOptions.join.valign)) {
              if (is.string(inputOptions.join.valign) && is.string(this.constructor.align[inputOptions.join.valign])) {
                inputDescriptor.joinValign = this.constructor.align[inputOptions.join.valign];
              } else {
                throw is.invalidParameterError("join.valign", "valid alignment", inputOptions.join.valign);
              }
            }
          } else {
            throw new Error("Expected input to be an array of images to join");
          }
        }
      } else if (is.defined(inputOptions)) {
        throw new Error("Invalid input options " + inputOptions);
      }
      return inputDescriptor;
    }
    function _write(chunk, encoding, callback) {
      if (Array.isArray(this.options.input.buffer)) {
        if (is.buffer(chunk)) {
          if (this.options.input.buffer.length === 0) {
            this.on("finish", () => {
              this.streamInFinished = true;
            });
          }
          this.options.input.buffer.push(chunk);
          callback();
        } else {
          callback(new Error("Non-Buffer data on Writable Stream"));
        }
      } else {
        callback(new Error("Unexpected data on Writable Stream"));
      }
    }
    function _flattenBufferIn() {
      if (this._isStreamInput()) {
        this.options.input.buffer = Buffer.concat(this.options.input.buffer);
      }
    }
    function _isStreamInput() {
      return Array.isArray(this.options.input.buffer);
    }
    function metadata(callback) {
      const stack = Error();
      if (is.fn(callback)) {
        if (this._isStreamInput()) {
          this.on("finish", () => {
            this._flattenBufferIn();
            sharp.metadata(this.options, (err, metadata2) => {
              if (err) {
                callback(is.nativeError(err, stack));
              } else {
                callback(null, metadata2);
              }
            });
          });
        } else {
          sharp.metadata(this.options, (err, metadata2) => {
            if (err) {
              callback(is.nativeError(err, stack));
            } else {
              callback(null, metadata2);
            }
          });
        }
        return this;
      } else {
        if (this._isStreamInput()) {
          return new Promise((resolve, reject) => {
            const finished = () => {
              this._flattenBufferIn();
              sharp.metadata(this.options, (err, metadata2) => {
                if (err) {
                  reject(is.nativeError(err, stack));
                } else {
                  resolve(metadata2);
                }
              });
            };
            if (this.writableFinished) {
              finished();
            } else {
              this.once("finish", finished);
            }
          });
        } else {
          return new Promise((resolve, reject) => {
            sharp.metadata(this.options, (err, metadata2) => {
              if (err) {
                reject(is.nativeError(err, stack));
              } else {
                resolve(metadata2);
              }
            });
          });
        }
      }
    }
    function stats(callback) {
      const stack = Error();
      if (is.fn(callback)) {
        if (this._isStreamInput()) {
          this.on("finish", () => {
            this._flattenBufferIn();
            sharp.stats(this.options, (err, stats2) => {
              if (err) {
                callback(is.nativeError(err, stack));
              } else {
                callback(null, stats2);
              }
            });
          });
        } else {
          sharp.stats(this.options, (err, stats2) => {
            if (err) {
              callback(is.nativeError(err, stack));
            } else {
              callback(null, stats2);
            }
          });
        }
        return this;
      } else {
        if (this._isStreamInput()) {
          return new Promise((resolve, reject) => {
            this.on("finish", function() {
              this._flattenBufferIn();
              sharp.stats(this.options, (err, stats2) => {
                if (err) {
                  reject(is.nativeError(err, stack));
                } else {
                  resolve(stats2);
                }
              });
            });
          });
        } else {
          return new Promise((resolve, reject) => {
            sharp.stats(this.options, (err, stats2) => {
              if (err) {
                reject(is.nativeError(err, stack));
              } else {
                resolve(stats2);
              }
            });
          });
        }
      }
    }
    module2.exports = function(Sharp) {
      Object.assign(Sharp.prototype, {
        // Private
        _inputOptionsFromObject,
        _createInputDescriptor,
        _write,
        _flattenBufferIn,
        _isStreamInput,
        // Public
        metadata,
        stats
      });
      Sharp.align = align;
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/resize.js
var require_resize = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/resize.js"(exports, module2) {
    "use strict";
    var is = require_is();
    var gravity = {
      center: 0,
      centre: 0,
      north: 1,
      east: 2,
      south: 3,
      west: 4,
      northeast: 5,
      southeast: 6,
      southwest: 7,
      northwest: 8
    };
    var position = {
      top: 1,
      right: 2,
      bottom: 3,
      left: 4,
      "right top": 5,
      "right bottom": 6,
      "left bottom": 7,
      "left top": 8
    };
    var extendWith = {
      background: "background",
      copy: "copy",
      repeat: "repeat",
      mirror: "mirror"
    };
    var strategy = {
      entropy: 16,
      attention: 17
    };
    var kernel = {
      nearest: "nearest",
      linear: "linear",
      cubic: "cubic",
      mitchell: "mitchell",
      lanczos2: "lanczos2",
      lanczos3: "lanczos3",
      mks2013: "mks2013",
      mks2021: "mks2021"
    };
    var fit = {
      contain: "contain",
      cover: "cover",
      fill: "fill",
      inside: "inside",
      outside: "outside"
    };
    var mapFitToCanvas = {
      contain: "embed",
      cover: "crop",
      fill: "ignore_aspect",
      inside: "max",
      outside: "min"
    };
    function isRotationExpected(options) {
      return options.angle % 360 !== 0 || options.input.autoOrient === true || options.rotationAngle !== 0;
    }
    function isResizeExpected(options) {
      return options.width !== -1 || options.height !== -1;
    }
    function resize(widthOrOptions, height, options) {
      if (isResizeExpected(this.options)) {
        this.options.debuglog("ignoring previous resize options");
      }
      if (this.options.widthPost !== -1) {
        this.options.debuglog("operation order will be: extract, resize, extract");
      }
      if (is.defined(widthOrOptions)) {
        if (is.object(widthOrOptions) && !is.defined(options)) {
          options = widthOrOptions;
        } else if (is.integer(widthOrOptions) && widthOrOptions > 0) {
          this.options.width = widthOrOptions;
        } else {
          throw is.invalidParameterError("width", "positive integer", widthOrOptions);
        }
      } else {
        this.options.width = -1;
      }
      if (is.defined(height)) {
        if (is.integer(height) && height > 0) {
          this.options.height = height;
        } else {
          throw is.invalidParameterError("height", "positive integer", height);
        }
      } else {
        this.options.height = -1;
      }
      if (is.object(options)) {
        if (is.defined(options.width)) {
          if (is.integer(options.width) && options.width > 0) {
            this.options.width = options.width;
          } else {
            throw is.invalidParameterError("width", "positive integer", options.width);
          }
        }
        if (is.defined(options.height)) {
          if (is.integer(options.height) && options.height > 0) {
            this.options.height = options.height;
          } else {
            throw is.invalidParameterError("height", "positive integer", options.height);
          }
        }
        if (is.defined(options.fit)) {
          const canvas = mapFitToCanvas[options.fit];
          if (is.string(canvas)) {
            this.options.canvas = canvas;
          } else {
            throw is.invalidParameterError("fit", "valid fit", options.fit);
          }
        }
        if (is.defined(options.position)) {
          const pos = is.integer(options.position) ? options.position : strategy[options.position] || position[options.position] || gravity[options.position];
          if (is.integer(pos) && (is.inRange(pos, 0, 8) || is.inRange(pos, 16, 17))) {
            this.options.position = pos;
          } else {
            throw is.invalidParameterError("position", "valid position/gravity/strategy", options.position);
          }
        }
        this._setBackgroundColourOption("resizeBackground", options.background);
        if (is.defined(options.kernel)) {
          if (is.string(kernel[options.kernel])) {
            this.options.kernel = kernel[options.kernel];
          } else {
            throw is.invalidParameterError("kernel", "valid kernel name", options.kernel);
          }
        }
        if (is.defined(options.withoutEnlargement)) {
          this._setBooleanOption("withoutEnlargement", options.withoutEnlargement);
        }
        if (is.defined(options.withoutReduction)) {
          this._setBooleanOption("withoutReduction", options.withoutReduction);
        }
        if (is.defined(options.fastShrinkOnLoad)) {
          this._setBooleanOption("fastShrinkOnLoad", options.fastShrinkOnLoad);
        }
      }
      if (isRotationExpected(this.options) && isResizeExpected(this.options)) {
        this.options.rotateBeforePreExtract = true;
      }
      return this;
    }
    function extend(extend2) {
      if (is.integer(extend2) && extend2 > 0) {
        this.options.extendTop = extend2;
        this.options.extendBottom = extend2;
        this.options.extendLeft = extend2;
        this.options.extendRight = extend2;
      } else if (is.object(extend2)) {
        if (is.defined(extend2.top)) {
          if (is.integer(extend2.top) && extend2.top >= 0) {
            this.options.extendTop = extend2.top;
          } else {
            throw is.invalidParameterError("top", "positive integer", extend2.top);
          }
        }
        if (is.defined(extend2.bottom)) {
          if (is.integer(extend2.bottom) && extend2.bottom >= 0) {
            this.options.extendBottom = extend2.bottom;
          } else {
            throw is.invalidParameterError("bottom", "positive integer", extend2.bottom);
          }
        }
        if (is.defined(extend2.left)) {
          if (is.integer(extend2.left) && extend2.left >= 0) {
            this.options.extendLeft = extend2.left;
          } else {
            throw is.invalidParameterError("left", "positive integer", extend2.left);
          }
        }
        if (is.defined(extend2.right)) {
          if (is.integer(extend2.right) && extend2.right >= 0) {
            this.options.extendRight = extend2.right;
          } else {
            throw is.invalidParameterError("right", "positive integer", extend2.right);
          }
        }
        this._setBackgroundColourOption("extendBackground", extend2.background);
        if (is.defined(extend2.extendWith)) {
          if (is.string(extendWith[extend2.extendWith])) {
            this.options.extendWith = extendWith[extend2.extendWith];
          } else {
            throw is.invalidParameterError("extendWith", "one of: background, copy, repeat, mirror", extend2.extendWith);
          }
        }
      } else {
        throw is.invalidParameterError("extend", "integer or object", extend2);
      }
      return this;
    }
    function extract(options) {
      const suffix = isResizeExpected(this.options) || this.options.widthPre !== -1 ? "Post" : "Pre";
      if (this.options[`width${suffix}`] !== -1) {
        this.options.debuglog("ignoring previous extract options");
      }
      ["left", "top", "width", "height"].forEach(function(name) {
        const value = options[name];
        if (is.integer(value) && value >= 0) {
          this.options[name + (name === "left" || name === "top" ? "Offset" : "") + suffix] = value;
        } else {
          throw is.invalidParameterError(name, "integer", value);
        }
      }, this);
      if (isRotationExpected(this.options) && !isResizeExpected(this.options)) {
        if (this.options.widthPre === -1 || this.options.widthPost === -1) {
          this.options.rotateBeforePreExtract = true;
        }
      }
      return this;
    }
    function trim(options) {
      this.options.trimThreshold = 10;
      if (is.defined(options)) {
        if (is.object(options)) {
          if (is.defined(options.background)) {
            this._setBackgroundColourOption("trimBackground", options.background);
          }
          if (is.defined(options.threshold)) {
            if (is.number(options.threshold) && options.threshold >= 0) {
              this.options.trimThreshold = options.threshold;
            } else {
              throw is.invalidParameterError("threshold", "positive number", options.threshold);
            }
          }
          if (is.defined(options.lineArt)) {
            this._setBooleanOption("trimLineArt", options.lineArt);
          }
        } else {
          throw is.invalidParameterError("trim", "object", options);
        }
      }
      if (isRotationExpected(this.options)) {
        this.options.rotateBeforePreExtract = true;
      }
      return this;
    }
    module2.exports = function(Sharp) {
      Object.assign(Sharp.prototype, {
        resize,
        extend,
        extract,
        trim
      });
      Sharp.gravity = gravity;
      Sharp.strategy = strategy;
      Sharp.kernel = kernel;
      Sharp.fit = fit;
      Sharp.position = position;
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/composite.js
var require_composite = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/composite.js"(exports, module2) {
    "use strict";
    var is = require_is();
    var blend = {
      clear: "clear",
      source: "source",
      over: "over",
      in: "in",
      out: "out",
      atop: "atop",
      dest: "dest",
      "dest-over": "dest-over",
      "dest-in": "dest-in",
      "dest-out": "dest-out",
      "dest-atop": "dest-atop",
      xor: "xor",
      add: "add",
      saturate: "saturate",
      multiply: "multiply",
      screen: "screen",
      overlay: "overlay",
      darken: "darken",
      lighten: "lighten",
      "colour-dodge": "colour-dodge",
      "color-dodge": "colour-dodge",
      "colour-burn": "colour-burn",
      "color-burn": "colour-burn",
      "hard-light": "hard-light",
      "soft-light": "soft-light",
      difference: "difference",
      exclusion: "exclusion"
    };
    function composite(images) {
      if (!Array.isArray(images)) {
        throw is.invalidParameterError("images to composite", "array", images);
      }
      this.options.composite = images.map((image) => {
        if (!is.object(image)) {
          throw is.invalidParameterError("image to composite", "object", image);
        }
        const inputOptions = this._inputOptionsFromObject(image);
        const composite2 = {
          input: this._createInputDescriptor(image.input, inputOptions, { allowStream: false }),
          blend: "over",
          tile: false,
          left: 0,
          top: 0,
          hasOffset: false,
          gravity: 0,
          premultiplied: false
        };
        if (is.defined(image.blend)) {
          if (is.string(blend[image.blend])) {
            composite2.blend = blend[image.blend];
          } else {
            throw is.invalidParameterError("blend", "valid blend name", image.blend);
          }
        }
        if (is.defined(image.tile)) {
          if (is.bool(image.tile)) {
            composite2.tile = image.tile;
          } else {
            throw is.invalidParameterError("tile", "boolean", image.tile);
          }
        }
        if (is.defined(image.left)) {
          if (is.integer(image.left)) {
            composite2.left = image.left;
          } else {
            throw is.invalidParameterError("left", "integer", image.left);
          }
        }
        if (is.defined(image.top)) {
          if (is.integer(image.top)) {
            composite2.top = image.top;
          } else {
            throw is.invalidParameterError("top", "integer", image.top);
          }
        }
        if (is.defined(image.top) !== is.defined(image.left)) {
          throw new Error("Expected both left and top to be set");
        } else {
          composite2.hasOffset = is.integer(image.top) && is.integer(image.left);
        }
        if (is.defined(image.gravity)) {
          if (is.integer(image.gravity) && is.inRange(image.gravity, 0, 8)) {
            composite2.gravity = image.gravity;
          } else if (is.string(image.gravity) && is.integer(this.constructor.gravity[image.gravity])) {
            composite2.gravity = this.constructor.gravity[image.gravity];
          } else {
            throw is.invalidParameterError("gravity", "valid gravity", image.gravity);
          }
        }
        if (is.defined(image.premultiplied)) {
          if (is.bool(image.premultiplied)) {
            composite2.premultiplied = image.premultiplied;
          } else {
            throw is.invalidParameterError("premultiplied", "boolean", image.premultiplied);
          }
        }
        return composite2;
      });
      return this;
    }
    module2.exports = function(Sharp) {
      Sharp.prototype.composite = composite;
      Sharp.blend = blend;
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/operation.js
var require_operation = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/operation.js"(exports, module2) {
    "use strict";
    var is = require_is();
    var vipsPrecision = {
      integer: "integer",
      float: "float",
      approximate: "approximate"
    };
    function rotate(angle, options) {
      if (!is.defined(angle)) {
        return this.autoOrient();
      }
      if (this.options.angle || this.options.rotationAngle) {
        this.options.debuglog("ignoring previous rotate options");
        this.options.angle = 0;
        this.options.rotationAngle = 0;
      }
      if (is.integer(angle) && !(angle % 90)) {
        this.options.angle = angle;
      } else if (is.number(angle)) {
        this.options.rotationAngle = angle;
        if (is.object(options) && options.background) {
          this._setBackgroundColourOption("rotationBackground", options.background);
        }
      } else {
        throw is.invalidParameterError("angle", "numeric", angle);
      }
      return this;
    }
    function autoOrient() {
      this.options.input.autoOrient = true;
      return this;
    }
    function flip(flip2) {
      this.options.flip = is.bool(flip2) ? flip2 : true;
      return this;
    }
    function flop(flop2) {
      this.options.flop = is.bool(flop2) ? flop2 : true;
      return this;
    }
    function affine(matrix, options) {
      const flatMatrix = [].concat(...matrix);
      if (flatMatrix.length === 4 && flatMatrix.every(is.number)) {
        this.options.affineMatrix = flatMatrix;
      } else {
        throw is.invalidParameterError("matrix", "1x4 or 2x2 array", matrix);
      }
      if (is.defined(options)) {
        if (is.object(options)) {
          this._setBackgroundColourOption("affineBackground", options.background);
          if (is.defined(options.idx)) {
            if (is.number(options.idx)) {
              this.options.affineIdx = options.idx;
            } else {
              throw is.invalidParameterError("options.idx", "number", options.idx);
            }
          }
          if (is.defined(options.idy)) {
            if (is.number(options.idy)) {
              this.options.affineIdy = options.idy;
            } else {
              throw is.invalidParameterError("options.idy", "number", options.idy);
            }
          }
          if (is.defined(options.odx)) {
            if (is.number(options.odx)) {
              this.options.affineOdx = options.odx;
            } else {
              throw is.invalidParameterError("options.odx", "number", options.odx);
            }
          }
          if (is.defined(options.ody)) {
            if (is.number(options.ody)) {
              this.options.affineOdy = options.ody;
            } else {
              throw is.invalidParameterError("options.ody", "number", options.ody);
            }
          }
          if (is.defined(options.interpolator)) {
            if (is.inArray(options.interpolator, Object.values(this.constructor.interpolators))) {
              this.options.affineInterpolator = options.interpolator;
            } else {
              throw is.invalidParameterError("options.interpolator", "valid interpolator name", options.interpolator);
            }
          }
        } else {
          throw is.invalidParameterError("options", "object", options);
        }
      }
      return this;
    }
    function sharpen(options, flat, jagged) {
      if (!is.defined(options)) {
        this.options.sharpenSigma = -1;
      } else if (is.bool(options)) {
        this.options.sharpenSigma = options ? -1 : 0;
      } else if (is.number(options) && is.inRange(options, 0.01, 1e4)) {
        this.options.sharpenSigma = options;
        if (is.defined(flat)) {
          if (is.number(flat) && is.inRange(flat, 0, 1e4)) {
            this.options.sharpenM1 = flat;
          } else {
            throw is.invalidParameterError("flat", "number between 0 and 10000", flat);
          }
        }
        if (is.defined(jagged)) {
          if (is.number(jagged) && is.inRange(jagged, 0, 1e4)) {
            this.options.sharpenM2 = jagged;
          } else {
            throw is.invalidParameterError("jagged", "number between 0 and 10000", jagged);
          }
        }
      } else if (is.plainObject(options)) {
        if (is.number(options.sigma) && is.inRange(options.sigma, 1e-6, 10)) {
          this.options.sharpenSigma = options.sigma;
        } else {
          throw is.invalidParameterError("options.sigma", "number between 0.000001 and 10", options.sigma);
        }
        if (is.defined(options.m1)) {
          if (is.number(options.m1) && is.inRange(options.m1, 0, 1e6)) {
            this.options.sharpenM1 = options.m1;
          } else {
            throw is.invalidParameterError("options.m1", "number between 0 and 1000000", options.m1);
          }
        }
        if (is.defined(options.m2)) {
          if (is.number(options.m2) && is.inRange(options.m2, 0, 1e6)) {
            this.options.sharpenM2 = options.m2;
          } else {
            throw is.invalidParameterError("options.m2", "number between 0 and 1000000", options.m2);
          }
        }
        if (is.defined(options.x1)) {
          if (is.number(options.x1) && is.inRange(options.x1, 0, 1e6)) {
            this.options.sharpenX1 = options.x1;
          } else {
            throw is.invalidParameterError("options.x1", "number between 0 and 1000000", options.x1);
          }
        }
        if (is.defined(options.y2)) {
          if (is.number(options.y2) && is.inRange(options.y2, 0, 1e6)) {
            this.options.sharpenY2 = options.y2;
          } else {
            throw is.invalidParameterError("options.y2", "number between 0 and 1000000", options.y2);
          }
        }
        if (is.defined(options.y3)) {
          if (is.number(options.y3) && is.inRange(options.y3, 0, 1e6)) {
            this.options.sharpenY3 = options.y3;
          } else {
            throw is.invalidParameterError("options.y3", "number between 0 and 1000000", options.y3);
          }
        }
      } else {
        throw is.invalidParameterError("sigma", "number between 0.01 and 10000", options);
      }
      return this;
    }
    function median(size) {
      if (!is.defined(size)) {
        this.options.medianSize = 3;
      } else if (is.integer(size) && is.inRange(size, 1, 1e3)) {
        this.options.medianSize = size;
      } else {
        throw is.invalidParameterError("size", "integer between 1 and 1000", size);
      }
      return this;
    }
    function blur(options) {
      let sigma;
      if (is.number(options)) {
        sigma = options;
      } else if (is.plainObject(options)) {
        if (!is.number(options.sigma)) {
          throw is.invalidParameterError("options.sigma", "number between 0.3 and 1000", sigma);
        }
        sigma = options.sigma;
        if ("precision" in options) {
          if (is.string(vipsPrecision[options.precision])) {
            this.options.precision = vipsPrecision[options.precision];
          } else {
            throw is.invalidParameterError("precision", "one of: integer, float, approximate", options.precision);
          }
        }
        if ("minAmplitude" in options) {
          if (is.number(options.minAmplitude) && is.inRange(options.minAmplitude, 1e-3, 1)) {
            this.options.minAmpl = options.minAmplitude;
          } else {
            throw is.invalidParameterError("minAmplitude", "number between 0.001 and 1", options.minAmplitude);
          }
        }
      }
      if (!is.defined(options)) {
        this.options.blurSigma = -1;
      } else if (is.bool(options)) {
        this.options.blurSigma = options ? -1 : 0;
      } else if (is.number(sigma) && is.inRange(sigma, 0.3, 1e3)) {
        this.options.blurSigma = sigma;
      } else {
        throw is.invalidParameterError("sigma", "number between 0.3 and 1000", sigma);
      }
      return this;
    }
    function dilate(width) {
      if (!is.defined(width)) {
        this.options.dilateWidth = 1;
      } else if (is.integer(width) && width > 0) {
        this.options.dilateWidth = width;
      } else {
        throw is.invalidParameterError("dilate", "positive integer", dilate);
      }
      return this;
    }
    function erode(width) {
      if (!is.defined(width)) {
        this.options.erodeWidth = 1;
      } else if (is.integer(width) && width > 0) {
        this.options.erodeWidth = width;
      } else {
        throw is.invalidParameterError("erode", "positive integer", erode);
      }
      return this;
    }
    function flatten(options) {
      this.options.flatten = is.bool(options) ? options : true;
      if (is.object(options)) {
        this._setBackgroundColourOption("flattenBackground", options.background);
      }
      return this;
    }
    function unflatten() {
      this.options.unflatten = true;
      return this;
    }
    function gamma(gamma2, gammaOut) {
      if (!is.defined(gamma2)) {
        this.options.gamma = 2.2;
      } else if (is.number(gamma2) && is.inRange(gamma2, 1, 3)) {
        this.options.gamma = gamma2;
      } else {
        throw is.invalidParameterError("gamma", "number between 1.0 and 3.0", gamma2);
      }
      if (!is.defined(gammaOut)) {
        this.options.gammaOut = this.options.gamma;
      } else if (is.number(gammaOut) && is.inRange(gammaOut, 1, 3)) {
        this.options.gammaOut = gammaOut;
      } else {
        throw is.invalidParameterError("gammaOut", "number between 1.0 and 3.0", gammaOut);
      }
      return this;
    }
    function negate(options) {
      this.options.negate = is.bool(options) ? options : true;
      if (is.plainObject(options) && "alpha" in options) {
        if (!is.bool(options.alpha)) {
          throw is.invalidParameterError("alpha", "should be boolean value", options.alpha);
        } else {
          this.options.negateAlpha = options.alpha;
        }
      }
      return this;
    }
    function normalise(options) {
      if (is.plainObject(options)) {
        if (is.defined(options.lower)) {
          if (is.number(options.lower) && is.inRange(options.lower, 0, 99)) {
            this.options.normaliseLower = options.lower;
          } else {
            throw is.invalidParameterError("lower", "number between 0 and 99", options.lower);
          }
        }
        if (is.defined(options.upper)) {
          if (is.number(options.upper) && is.inRange(options.upper, 1, 100)) {
            this.options.normaliseUpper = options.upper;
          } else {
            throw is.invalidParameterError("upper", "number between 1 and 100", options.upper);
          }
        }
      }
      if (this.options.normaliseLower >= this.options.normaliseUpper) {
        throw is.invalidParameterError(
          "range",
          "lower to be less than upper",
          `${this.options.normaliseLower} >= ${this.options.normaliseUpper}`
        );
      }
      this.options.normalise = true;
      return this;
    }
    function normalize(options) {
      return this.normalise(options);
    }
    function clahe(options) {
      if (is.plainObject(options)) {
        if (is.integer(options.width) && options.width > 0) {
          this.options.claheWidth = options.width;
        } else {
          throw is.invalidParameterError("width", "integer greater than zero", options.width);
        }
        if (is.integer(options.height) && options.height > 0) {
          this.options.claheHeight = options.height;
        } else {
          throw is.invalidParameterError("height", "integer greater than zero", options.height);
        }
        if (is.defined(options.maxSlope)) {
          if (is.integer(options.maxSlope) && is.inRange(options.maxSlope, 0, 100)) {
            this.options.claheMaxSlope = options.maxSlope;
          } else {
            throw is.invalidParameterError("maxSlope", "integer between 0 and 100", options.maxSlope);
          }
        }
      } else {
        throw is.invalidParameterError("options", "plain object", options);
      }
      return this;
    }
    function convolve(kernel) {
      if (!is.object(kernel) || !Array.isArray(kernel.kernel) || !is.integer(kernel.width) || !is.integer(kernel.height) || !is.inRange(kernel.width, 3, 1001) || !is.inRange(kernel.height, 3, 1001) || kernel.height * kernel.width !== kernel.kernel.length) {
        throw new Error("Invalid convolution kernel");
      }
      if (!is.integer(kernel.scale)) {
        kernel.scale = kernel.kernel.reduce(function(a, b) {
          return a + b;
        }, 0);
      }
      if (kernel.scale < 1) {
        kernel.scale = 1;
      }
      if (!is.integer(kernel.offset)) {
        kernel.offset = 0;
      }
      this.options.convKernel = kernel;
      return this;
    }
    function threshold(threshold2, options) {
      if (!is.defined(threshold2)) {
        this.options.threshold = 128;
      } else if (is.bool(threshold2)) {
        this.options.threshold = threshold2 ? 128 : 0;
      } else if (is.integer(threshold2) && is.inRange(threshold2, 0, 255)) {
        this.options.threshold = threshold2;
      } else {
        throw is.invalidParameterError("threshold", "integer between 0 and 255", threshold2);
      }
      if (!is.object(options) || options.greyscale === true || options.grayscale === true) {
        this.options.thresholdGrayscale = true;
      } else {
        this.options.thresholdGrayscale = false;
      }
      return this;
    }
    function boolean(operand, operator, options) {
      this.options.boolean = this._createInputDescriptor(operand, options);
      if (is.string(operator) && is.inArray(operator, ["and", "or", "eor"])) {
        this.options.booleanOp = operator;
      } else {
        throw is.invalidParameterError("operator", "one of: and, or, eor", operator);
      }
      return this;
    }
    function linear(a, b) {
      if (!is.defined(a) && is.number(b)) {
        a = 1;
      } else if (is.number(a) && !is.defined(b)) {
        b = 0;
      }
      if (!is.defined(a)) {
        this.options.linearA = [];
      } else if (is.number(a)) {
        this.options.linearA = [a];
      } else if (Array.isArray(a) && a.length && a.every(is.number)) {
        this.options.linearA = a;
      } else {
        throw is.invalidParameterError("a", "number or array of numbers", a);
      }
      if (!is.defined(b)) {
        this.options.linearB = [];
      } else if (is.number(b)) {
        this.options.linearB = [b];
      } else if (Array.isArray(b) && b.length && b.every(is.number)) {
        this.options.linearB = b;
      } else {
        throw is.invalidParameterError("b", "number or array of numbers", b);
      }
      if (this.options.linearA.length !== this.options.linearB.length) {
        throw new Error("Expected a and b to be arrays of the same length");
      }
      return this;
    }
    function recomb(inputMatrix) {
      if (!Array.isArray(inputMatrix)) {
        throw is.invalidParameterError("inputMatrix", "array", inputMatrix);
      }
      if (inputMatrix.length !== 3 && inputMatrix.length !== 4) {
        throw is.invalidParameterError("inputMatrix", "3x3 or 4x4 array", inputMatrix.length);
      }
      const recombMatrix = inputMatrix.flat().map(Number);
      if (recombMatrix.length !== 9 && recombMatrix.length !== 16) {
        throw is.invalidParameterError("inputMatrix", "cardinality of 9 or 16", recombMatrix.length);
      }
      this.options.recombMatrix = recombMatrix;
      return this;
    }
    function modulate(options) {
      if (!is.plainObject(options)) {
        throw is.invalidParameterError("options", "plain object", options);
      }
      if ("brightness" in options) {
        if (is.number(options.brightness) && options.brightness >= 0) {
          this.options.brightness = options.brightness;
        } else {
          throw is.invalidParameterError("brightness", "number above zero", options.brightness);
        }
      }
      if ("saturation" in options) {
        if (is.number(options.saturation) && options.saturation >= 0) {
          this.options.saturation = options.saturation;
        } else {
          throw is.invalidParameterError("saturation", "number above zero", options.saturation);
        }
      }
      if ("hue" in options) {
        if (is.integer(options.hue)) {
          this.options.hue = options.hue % 360;
        } else {
          throw is.invalidParameterError("hue", "number", options.hue);
        }
      }
      if ("lightness" in options) {
        if (is.number(options.lightness)) {
          this.options.lightness = options.lightness;
        } else {
          throw is.invalidParameterError("lightness", "number", options.lightness);
        }
      }
      return this;
    }
    module2.exports = function(Sharp) {
      Object.assign(Sharp.prototype, {
        autoOrient,
        rotate,
        flip,
        flop,
        affine,
        sharpen,
        erode,
        dilate,
        median,
        blur,
        flatten,
        unflatten,
        gamma,
        negate,
        normalise,
        normalize,
        clahe,
        convolve,
        threshold,
        boolean,
        linear,
        recomb,
        modulate
      });
    };
  }
});

// node_modules/color-name/index.js
var require_color_name = __commonJS({
  "node_modules/color-name/index.js"(exports, module2) {
    "use strict";
    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// node_modules/is-arrayish/index.js
var require_is_arrayish = __commonJS({
  "node_modules/is-arrayish/index.js"(exports, module2) {
    module2.exports = function isArrayish(obj) {
      if (!obj || typeof obj === "string") {
        return false;
      }
      return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
    };
  }
});

// node_modules/simple-swizzle/index.js
var require_simple_swizzle = __commonJS({
  "node_modules/simple-swizzle/index.js"(exports, module2) {
    "use strict";
    var isArrayish = require_is_arrayish();
    var concat = Array.prototype.concat;
    var slice = Array.prototype.slice;
    var swizzle = module2.exports = function swizzle2(args) {
      var results = [];
      for (var i = 0, len = args.length; i < len; i++) {
        var arg = args[i];
        if (isArrayish(arg)) {
          results = concat.call(results, slice.call(arg));
        } else {
          results.push(arg);
        }
      }
      return results;
    };
    swizzle.wrap = function(fn) {
      return function() {
        return fn(swizzle(arguments));
      };
    };
  }
});

// node_modules/color-string/index.js
var require_color_string = __commonJS({
  "node_modules/color-string/index.js"(exports, module2) {
    var colorNames = require_color_name();
    var swizzle = require_simple_swizzle();
    var hasOwnProperty = Object.hasOwnProperty;
    var reverseNames = /* @__PURE__ */ Object.create(null);
    for (name in colorNames) {
      if (hasOwnProperty.call(colorNames, name)) {
        reverseNames[colorNames[name]] = name;
      }
    }
    var name;
    var cs = module2.exports = {
      to: {},
      get: {}
    };
    cs.get = function(string) {
      var prefix = string.substring(0, 3).toLowerCase();
      var val;
      var model;
      switch (prefix) {
        case "hsl":
          val = cs.get.hsl(string);
          model = "hsl";
          break;
        case "hwb":
          val = cs.get.hwb(string);
          model = "hwb";
          break;
        default:
          val = cs.get.rgb(string);
          model = "rgb";
          break;
      }
      if (!val) {
        return null;
      }
      return { model, value: val };
    };
    cs.get.rgb = function(string) {
      if (!string) {
        return null;
      }
      var abbr = /^#([a-f0-9]{3,4})$/i;
      var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
      var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
      var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
      var keyword = /^(\w+)$/;
      var rgb = [0, 0, 0, 1];
      var match;
      var i;
      var hexAlpha;
      if (match = string.match(hex)) {
        hexAlpha = match[2];
        match = match[1];
        for (i = 0; i < 3; i++) {
          var i2 = i * 2;
          rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
        }
        if (hexAlpha) {
          rgb[3] = parseInt(hexAlpha, 16) / 255;
        }
      } else if (match = string.match(abbr)) {
        match = match[1];
        hexAlpha = match[3];
        for (i = 0; i < 3; i++) {
          rgb[i] = parseInt(match[i] + match[i], 16);
        }
        if (hexAlpha) {
          rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
        }
      } else if (match = string.match(rgba)) {
        for (i = 0; i < 3; i++) {
          rgb[i] = parseInt(match[i + 1], 0);
        }
        if (match[4]) {
          if (match[5]) {
            rgb[3] = parseFloat(match[4]) * 0.01;
          } else {
            rgb[3] = parseFloat(match[4]);
          }
        }
      } else if (match = string.match(per)) {
        for (i = 0; i < 3; i++) {
          rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
        }
        if (match[4]) {
          if (match[5]) {
            rgb[3] = parseFloat(match[4]) * 0.01;
          } else {
            rgb[3] = parseFloat(match[4]);
          }
        }
      } else if (match = string.match(keyword)) {
        if (match[1] === "transparent") {
          return [0, 0, 0, 0];
        }
        if (!hasOwnProperty.call(colorNames, match[1])) {
          return null;
        }
        rgb = colorNames[match[1]];
        rgb[3] = 1;
        return rgb;
      } else {
        return null;
      }
      for (i = 0; i < 3; i++) {
        rgb[i] = clamp(rgb[i], 0, 255);
      }
      rgb[3] = clamp(rgb[3], 0, 1);
      return rgb;
    };
    cs.get.hsl = function(string) {
      if (!string) {
        return null;
      }
      var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
      var match = string.match(hsl);
      if (match) {
        var alpha = parseFloat(match[4]);
        var h2 = (parseFloat(match[1]) % 360 + 360) % 360;
        var s = clamp(parseFloat(match[2]), 0, 100);
        var l = clamp(parseFloat(match[3]), 0, 100);
        var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h2, s, l, a];
      }
      return null;
    };
    cs.get.hwb = function(string) {
      if (!string) {
        return null;
      }
      var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
      var match = string.match(hwb);
      if (match) {
        var alpha = parseFloat(match[4]);
        var h2 = (parseFloat(match[1]) % 360 + 360) % 360;
        var w2 = clamp(parseFloat(match[2]), 0, 100);
        var b = clamp(parseFloat(match[3]), 0, 100);
        var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h2, w2, b, a];
      }
      return null;
    };
    cs.to.hex = function() {
      var rgba = swizzle(arguments);
      return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
    };
    cs.to.rgb = function() {
      var rgba = swizzle(arguments);
      return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
    };
    cs.to.rgb.percent = function() {
      var rgba = swizzle(arguments);
      var r = Math.round(rgba[0] / 255 * 100);
      var g = Math.round(rgba[1] / 255 * 100);
      var b = Math.round(rgba[2] / 255 * 100);
      return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r + "%, " + g + "%, " + b + "%)" : "rgba(" + r + "%, " + g + "%, " + b + "%, " + rgba[3] + ")";
    };
    cs.to.hsl = function() {
      var hsla = swizzle(arguments);
      return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
    };
    cs.to.hwb = function() {
      var hwba = swizzle(arguments);
      var a = "";
      if (hwba.length >= 4 && hwba[3] !== 1) {
        a = ", " + hwba[3];
      }
      return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a + ")";
    };
    cs.to.keyword = function(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    };
    function clamp(num, min, max) {
      return Math.min(Math.max(min, num), max);
    }
    function hexDouble(num) {
      var str = Math.round(num).toString(16).toUpperCase();
      return str.length < 2 ? "0" + str : str;
    }
  }
});

// node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  "node_modules/color-convert/conversions.js"(exports, module2) {
    var cssKeywords = require_color_name();
    var reverseKeywords = {};
    for (const key of Object.keys(cssKeywords)) {
      reverseKeywords[cssKeywords[key]] = key;
    }
    var convert = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    module2.exports = convert;
    for (const model of Object.keys(convert)) {
      if (!("channels" in convert[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      const { channels, labels } = convert[model];
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], "channels", { value: channels });
      Object.defineProperty(convert[model], "labels", { value: labels });
    }
    convert.rgb.hsl = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const min = Math.min(r, g, b);
      const max = Math.max(r, g, b);
      const delta = max - min;
      let h2;
      let s;
      if (max === min) {
        h2 = 0;
      } else if (r === max) {
        h2 = (g - b) / delta;
      } else if (g === max) {
        h2 = 2 + (b - r) / delta;
      } else if (b === max) {
        h2 = 4 + (r - g) / delta;
      }
      h2 = Math.min(h2 * 60, 360);
      if (h2 < 0) {
        h2 += 360;
      }
      const l = (min + max) / 2;
      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }
      return [h2, s * 100, l * 100];
    };
    convert.rgb.hsv = function(rgb) {
      let rdif;
      let gdif;
      let bdif;
      let h2;
      let s;
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const v = Math.max(r, g, b);
      const diff = v - Math.min(r, g, b);
      const diffc = function(c) {
        return (v - c) / 6 / diff + 1 / 2;
      };
      if (diff === 0) {
        h2 = 0;
        s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
          h2 = bdif - gdif;
        } else if (g === v) {
          h2 = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h2 = 2 / 3 + gdif - rdif;
        }
        if (h2 < 0) {
          h2 += 1;
        } else if (h2 > 1) {
          h2 -= 1;
        }
      }
      return [
        h2 * 360,
        s * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      const r = rgb[0];
      const g = rgb[1];
      let b = rgb[2];
      const h2 = convert.rgb.hsl(rgb)[0];
      const w2 = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h2, w2 * 100, b * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const k = Math.min(1 - r, 1 - g, 1 - b);
      const c = (1 - r - k) / (1 - k) || 0;
      const m = (1 - g - k) / (1 - k) || 0;
      const y2 = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y2 * 100, k * 100];
    };
    function comparativeDistance(x2, y2) {
      return (x2[0] - y2[0]) ** 2 + (x2[1] - y2[1]) ** 2 + (x2[2] - y2[2]) ** 2;
    }
    convert.rgb.keyword = function(rgb) {
      const reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      let currentClosestDistance = Infinity;
      let currentClosestKeyword;
      for (const keyword of Object.keys(cssKeywords)) {
        const value = cssKeywords[keyword];
        const distance = comparativeDistance(rgb, value);
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      let r = rgb[0] / 255;
      let g = rgb[1] / 255;
      let b = rgb[2] / 255;
      r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
      g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
      b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
      const x2 = r * 0.4124 + g * 0.3576 + b * 0.1805;
      const y2 = r * 0.2126 + g * 0.7152 + b * 0.0722;
      const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x2 * 100, y2 * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      const xyz = convert.rgb.xyz(rgb);
      let x2 = xyz[0];
      let y2 = xyz[1];
      let z = xyz[2];
      x2 /= 95.047;
      y2 /= 100;
      z /= 108.883;
      x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
      y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
      z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
      const l = 116 * y2 - 16;
      const a = 500 * (x2 - y2);
      const b = 200 * (y2 - z);
      return [l, a, b];
    };
    convert.hsl.rgb = function(hsl) {
      const h2 = hsl[0] / 360;
      const s = hsl[1] / 100;
      const l = hsl[2] / 100;
      let t2;
      let t3;
      let val;
      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }
      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      const t1 = 2 * l - t2;
      const rgb = [0, 0, 0];
      for (let i = 0; i < 3; i++) {
        t3 = h2 + 1 / 3 * -(i - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      const h2 = hsl[0];
      let s = hsl[1] / 100;
      let l = hsl[2] / 100;
      let smin = s;
      const lmin = Math.max(l, 0.01);
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      const v = (l + s) / 2;
      const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h2, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      const h2 = hsv[0] / 60;
      const s = hsv[1] / 100;
      let v = hsv[2] / 100;
      const hi = Math.floor(h2) % 6;
      const f = h2 - Math.floor(h2);
      const p = 255 * v * (1 - s);
      const q2 = 255 * v * (1 - s * f);
      const t = 255 * v * (1 - s * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q2, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q2, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q2];
      }
    };
    convert.hsv.hsl = function(hsv) {
      const h2 = hsv[0];
      const s = hsv[1] / 100;
      const v = hsv[2] / 100;
      const vmin = Math.max(v, 0.01);
      let sl;
      let l;
      l = (2 - s) * v;
      const lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h2, sl * 100, l * 100];
    };
    convert.hwb.rgb = function(hwb) {
      const h2 = hwb[0] / 360;
      let wh = hwb[1] / 100;
      let bl = hwb[2] / 100;
      const ratio = wh + bl;
      let f;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      const i = Math.floor(6 * h2);
      const v = 1 - bl;
      f = 6 * h2 - i;
      if ((i & 1) !== 0) {
        f = 1 - f;
      }
      const n = wh + f * (v - wh);
      let r;
      let g;
      let b;
      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;
        case 1:
          r = n;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n;
          break;
        case 3:
          r = wh;
          g = n;
          b = v;
          break;
        case 4:
          r = n;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }
      return [r * 255, g * 255, b * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      const c = cmyk[0] / 100;
      const m = cmyk[1] / 100;
      const y2 = cmyk[2] / 100;
      const k = cmyk[3] / 100;
      const r = 1 - Math.min(1, c * (1 - k) + k);
      const g = 1 - Math.min(1, m * (1 - k) + k);
      const b = 1 - Math.min(1, y2 * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.rgb = function(xyz) {
      const x2 = xyz[0] / 100;
      const y2 = xyz[1] / 100;
      const z = xyz[2] / 100;
      let r;
      let g;
      let b;
      r = x2 * 3.2406 + y2 * -1.5372 + z * -0.4986;
      g = x2 * -0.9689 + y2 * 1.8758 + z * 0.0415;
      b = x2 * 0.0557 + y2 * -0.204 + z * 1.057;
      r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.lab = function(xyz) {
      let x2 = xyz[0];
      let y2 = xyz[1];
      let z = xyz[2];
      x2 /= 95.047;
      y2 /= 100;
      z /= 108.883;
      x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
      y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
      z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
      const l = 116 * y2 - 16;
      const a = 500 * (x2 - y2);
      const b = 200 * (y2 - z);
      return [l, a, b];
    };
    convert.lab.xyz = function(lab) {
      const l = lab[0];
      const a = lab[1];
      const b = lab[2];
      let x2;
      let y2;
      let z;
      y2 = (l + 16) / 116;
      x2 = a / 500 + y2;
      z = y2 - b / 200;
      const y22 = y2 ** 3;
      const x22 = x2 ** 3;
      const z2 = z ** 3;
      y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787;
      x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x2 *= 95.047;
      y2 *= 100;
      z *= 108.883;
      return [x2, y2, z];
    };
    convert.lab.lch = function(lab) {
      const l = lab[0];
      const a = lab[1];
      const b = lab[2];
      let h2;
      const hr = Math.atan2(b, a);
      h2 = hr * 360 / 2 / Math.PI;
      if (h2 < 0) {
        h2 += 360;
      }
      const c = Math.sqrt(a * a + b * b);
      return [l, c, h2];
    };
    convert.lch.lab = function(lch) {
      const l = lch[0];
      const c = lch[1];
      const h2 = lch[2];
      const hr = h2 / 360 * 2 * Math.PI;
      const a = c * Math.cos(hr);
      const b = c * Math.sin(hr);
      return [l, a, b];
    };
    convert.rgb.ansi16 = function(args, saturation = null) {
      const [r, g, b] = args;
      let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      const r = args[0];
      const g = args[1];
      const b = args[2];
      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      let color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      const mult = (~~(args > 50) + 1) * 0.5;
      const r = (color & 1) * mult * 255;
      const g = (color >> 1 & 1) * mult * 255;
      const b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        const c = (args - 232) * 10 + 8;
        return [c, c, c];
      }
      args -= 16;
      let rem;
      const r = Math.floor(args / 36) / 5 * 255;
      const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      const b = rem % 6 / 5 * 255;
      return [r, g, b];
    };
    convert.rgb.hex = function(args) {
      const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      const string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      let colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map((char) => {
          return char + char;
        }).join("");
      }
      const integer = parseInt(colorString, 16);
      const r = integer >> 16 & 255;
      const g = integer >> 8 & 255;
      const b = integer & 255;
      return [r, g, b];
    };
    convert.rgb.hcg = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const max = Math.max(Math.max(r, g), b);
      const min = Math.min(Math.min(r, g), b);
      const chroma = max - min;
      let grayscale;
      let hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      const s = hsl[1] / 100;
      const l = hsl[2] / 100;
      const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
      let f = 0;
      if (c < 1) {
        f = (l - 0.5 * c) / (1 - c);
      }
      return [hsl[0], c * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      const s = hsv[1] / 100;
      const v = hsv[2] / 100;
      const c = s * v;
      let f = 0;
      if (c < 1) {
        f = (v - c) / (1 - c);
      }
      return [hsv[0], c * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      const h2 = hcg[0] / 360;
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }
      const pure = [0, 0, 0];
      const hi = h2 % 1 * 6;
      const v = hi % 1;
      const w2 = 1 - v;
      let mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w2;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w2;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w2;
      }
      mg = (1 - c) * g;
      return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const v = c + g * (1 - c);
      let f = 0;
      if (v > 0) {
        f = c / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const l = g * (1 - c) + 0.5 * c;
      let s = 0;
      if (l > 0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c / (2 * (1 - l));
      }
      return [hcg[0], s * 100, l * 100];
    };
    convert.hcg.hwb = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      const w2 = hwb[1] / 100;
      const b = hwb[2] / 100;
      const v = 1 - b;
      const c = v - w2;
      let g = 0;
      if (c < 1) {
        g = (v - c) / (1 - c);
      }
      return [hwb[0], c * 100, g * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hsv = convert.gray.hsl;
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      const val = Math.round(gray[0] / 100 * 255) & 255;
      const integer = (val << 16) + (val << 8) + val;
      const string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// node_modules/color-convert/route.js
var require_route = __commonJS({
  "node_modules/color-convert/route.js"(exports, module2) {
    var conversions = require_conversions();
    function buildGraph() {
      const graph = {};
      const models = Object.keys(conversions);
      for (let len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      const graph = buildGraph();
      const queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        const current = queue.pop();
        const adjacents = Object.keys(conversions[current]);
        for (let len = adjacents.length, i = 0; i < len; i++) {
          const adjacent = adjacents[i];
          const node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from, to) {
      return function(args) {
        return to(from(args));
      };
    }
    function wrapConversion(toModel, graph) {
      const path = [graph[toModel].parent, toModel];
      let fn = conversions[graph[toModel].parent][toModel];
      let cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path;
      return fn;
    }
    module2.exports = function(fromModel) {
      const graph = deriveBFS(fromModel);
      const conversion = {};
      const models = Object.keys(graph);
      for (let len = models.length, i = 0; i < len; i++) {
        const toModel = models[i];
        const node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  "node_modules/color-convert/index.js"(exports, module2) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      const wrappedFn = function(...args) {
        const arg0 = args[0];
        if (arg0 === void 0 || arg0 === null) {
          return arg0;
        }
        if (arg0.length > 1) {
          args = arg0;
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      const wrappedFn = function(...args) {
        const arg0 = args[0];
        if (arg0 === void 0 || arg0 === null) {
          return arg0;
        }
        if (arg0.length > 1) {
          args = arg0;
        }
        const result = fn(args);
        if (typeof result === "object") {
          for (let len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach((fromModel) => {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      const routes = route(fromModel);
      const routeModels = Object.keys(routes);
      routeModels.forEach((toModel) => {
        const fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module2.exports = convert;
  }
});

// node_modules/color/index.js
var require_color = __commonJS({
  "node_modules/color/index.js"(exports, module2) {
    var colorString = require_color_string();
    var convert = require_color_convert();
    var skippedModels = [
      // To be honest, I don't really feel like keyword belongs in color convert, but eh.
      "keyword",
      // Gray conflicts with some method names, and has its own method defined.
      "gray",
      // Shouldn't really be in color-convert either...
      "hex"
    ];
    var hashedModelKeys = {};
    for (const model of Object.keys(convert)) {
      hashedModelKeys[[...convert[model].labels].sort().join("")] = model;
    }
    var limiters = {};
    function Color(object, model) {
      if (!(this instanceof Color)) {
        return new Color(object, model);
      }
      if (model && model in skippedModels) {
        model = null;
      }
      if (model && !(model in convert)) {
        throw new Error("Unknown model: " + model);
      }
      let i;
      let channels;
      if (object == null) {
        this.model = "rgb";
        this.color = [0, 0, 0];
        this.valpha = 1;
      } else if (object instanceof Color) {
        this.model = object.model;
        this.color = [...object.color];
        this.valpha = object.valpha;
      } else if (typeof object === "string") {
        const result = colorString.get(object);
        if (result === null) {
          throw new Error("Unable to parse color from string: " + object);
        }
        this.model = result.model;
        channels = convert[this.model].channels;
        this.color = result.value.slice(0, channels);
        this.valpha = typeof result.value[channels] === "number" ? result.value[channels] : 1;
      } else if (object.length > 0) {
        this.model = model || "rgb";
        channels = convert[this.model].channels;
        const newArray = Array.prototype.slice.call(object, 0, channels);
        this.color = zeroArray(newArray, channels);
        this.valpha = typeof object[channels] === "number" ? object[channels] : 1;
      } else if (typeof object === "number") {
        this.model = "rgb";
        this.color = [
          object >> 16 & 255,
          object >> 8 & 255,
          object & 255
        ];
        this.valpha = 1;
      } else {
        this.valpha = 1;
        const keys = Object.keys(object);
        if ("alpha" in object) {
          keys.splice(keys.indexOf("alpha"), 1);
          this.valpha = typeof object.alpha === "number" ? object.alpha : 0;
        }
        const hashedKeys = keys.sort().join("");
        if (!(hashedKeys in hashedModelKeys)) {
          throw new Error("Unable to parse color from object: " + JSON.stringify(object));
        }
        this.model = hashedModelKeys[hashedKeys];
        const { labels } = convert[this.model];
        const color = [];
        for (i = 0; i < labels.length; i++) {
          color.push(object[labels[i]]);
        }
        this.color = zeroArray(color);
      }
      if (limiters[this.model]) {
        channels = convert[this.model].channels;
        for (i = 0; i < channels; i++) {
          const limit = limiters[this.model][i];
          if (limit) {
            this.color[i] = limit(this.color[i]);
          }
        }
      }
      this.valpha = Math.max(0, Math.min(1, this.valpha));
      if (Object.freeze) {
        Object.freeze(this);
      }
    }
    Color.prototype = {
      toString() {
        return this.string();
      },
      toJSON() {
        return this[this.model]();
      },
      string(places) {
        let self2 = this.model in colorString.to ? this : this.rgb();
        self2 = self2.round(typeof places === "number" ? places : 1);
        const args = self2.valpha === 1 ? self2.color : [...self2.color, this.valpha];
        return colorString.to[self2.model](args);
      },
      percentString(places) {
        const self2 = this.rgb().round(typeof places === "number" ? places : 1);
        const args = self2.valpha === 1 ? self2.color : [...self2.color, this.valpha];
        return colorString.to.rgb.percent(args);
      },
      array() {
        return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];
      },
      object() {
        const result = {};
        const { channels } = convert[this.model];
        const { labels } = convert[this.model];
        for (let i = 0; i < channels; i++) {
          result[labels[i]] = this.color[i];
        }
        if (this.valpha !== 1) {
          result.alpha = this.valpha;
        }
        return result;
      },
      unitArray() {
        const rgb = this.rgb().color;
        rgb[0] /= 255;
        rgb[1] /= 255;
        rgb[2] /= 255;
        if (this.valpha !== 1) {
          rgb.push(this.valpha);
        }
        return rgb;
      },
      unitObject() {
        const rgb = this.rgb().object();
        rgb.r /= 255;
        rgb.g /= 255;
        rgb.b /= 255;
        if (this.valpha !== 1) {
          rgb.alpha = this.valpha;
        }
        return rgb;
      },
      round(places) {
        places = Math.max(places || 0, 0);
        return new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);
      },
      alpha(value) {
        if (value !== void 0) {
          return new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);
        }
        return this.valpha;
      },
      // Rgb
      red: getset("rgb", 0, maxfn(255)),
      green: getset("rgb", 1, maxfn(255)),
      blue: getset("rgb", 2, maxfn(255)),
      hue: getset(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, (value) => (value % 360 + 360) % 360),
      saturationl: getset("hsl", 1, maxfn(100)),
      lightness: getset("hsl", 2, maxfn(100)),
      saturationv: getset("hsv", 1, maxfn(100)),
      value: getset("hsv", 2, maxfn(100)),
      chroma: getset("hcg", 1, maxfn(100)),
      gray: getset("hcg", 2, maxfn(100)),
      white: getset("hwb", 1, maxfn(100)),
      wblack: getset("hwb", 2, maxfn(100)),
      cyan: getset("cmyk", 0, maxfn(100)),
      magenta: getset("cmyk", 1, maxfn(100)),
      yellow: getset("cmyk", 2, maxfn(100)),
      black: getset("cmyk", 3, maxfn(100)),
      x: getset("xyz", 0, maxfn(95.047)),
      y: getset("xyz", 1, maxfn(100)),
      z: getset("xyz", 2, maxfn(108.833)),
      l: getset("lab", 0, maxfn(100)),
      a: getset("lab", 1),
      b: getset("lab", 2),
      keyword(value) {
        if (value !== void 0) {
          return new Color(value);
        }
        return convert[this.model].keyword(this.color);
      },
      hex(value) {
        if (value !== void 0) {
          return new Color(value);
        }
        return colorString.to.hex(this.rgb().round().color);
      },
      hexa(value) {
        if (value !== void 0) {
          return new Color(value);
        }
        const rgbArray = this.rgb().round().color;
        let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();
        if (alphaHex.length === 1) {
          alphaHex = "0" + alphaHex;
        }
        return colorString.to.hex(rgbArray) + alphaHex;
      },
      rgbNumber() {
        const rgb = this.rgb().color;
        return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;
      },
      luminosity() {
        const rgb = this.rgb().color;
        const lum = [];
        for (const [i, element] of rgb.entries()) {
          const chan = element / 255;
          lum[i] = chan <= 0.04045 ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;
        }
        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
      },
      contrast(color2) {
        const lum1 = this.luminosity();
        const lum2 = color2.luminosity();
        if (lum1 > lum2) {
          return (lum1 + 0.05) / (lum2 + 0.05);
        }
        return (lum2 + 0.05) / (lum1 + 0.05);
      },
      level(color2) {
        const contrastRatio = this.contrast(color2);
        if (contrastRatio >= 7) {
          return "AAA";
        }
        return contrastRatio >= 4.5 ? "AA" : "";
      },
      isDark() {
        const rgb = this.rgb().color;
        const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 1e4;
        return yiq < 128;
      },
      isLight() {
        return !this.isDark();
      },
      negate() {
        const rgb = this.rgb();
        for (let i = 0; i < 3; i++) {
          rgb.color[i] = 255 - rgb.color[i];
        }
        return rgb;
      },
      lighten(ratio) {
        const hsl = this.hsl();
        hsl.color[2] += hsl.color[2] * ratio;
        return hsl;
      },
      darken(ratio) {
        const hsl = this.hsl();
        hsl.color[2] -= hsl.color[2] * ratio;
        return hsl;
      },
      saturate(ratio) {
        const hsl = this.hsl();
        hsl.color[1] += hsl.color[1] * ratio;
        return hsl;
      },
      desaturate(ratio) {
        const hsl = this.hsl();
        hsl.color[1] -= hsl.color[1] * ratio;
        return hsl;
      },
      whiten(ratio) {
        const hwb = this.hwb();
        hwb.color[1] += hwb.color[1] * ratio;
        return hwb;
      },
      blacken(ratio) {
        const hwb = this.hwb();
        hwb.color[2] += hwb.color[2] * ratio;
        return hwb;
      },
      grayscale() {
        const rgb = this.rgb().color;
        const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
        return Color.rgb(value, value, value);
      },
      fade(ratio) {
        return this.alpha(this.valpha - this.valpha * ratio);
      },
      opaquer(ratio) {
        return this.alpha(this.valpha + this.valpha * ratio);
      },
      rotate(degrees) {
        const hsl = this.hsl();
        let hue = hsl.color[0];
        hue = (hue + degrees) % 360;
        hue = hue < 0 ? 360 + hue : hue;
        hsl.color[0] = hue;
        return hsl;
      },
      mix(mixinColor, weight) {
        if (!mixinColor || !mixinColor.rgb) {
          throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
        }
        const color1 = mixinColor.rgb();
        const color2 = this.rgb();
        const p = weight === void 0 ? 0.5 : weight;
        const w2 = 2 * p - 1;
        const a = color1.alpha() - color2.alpha();
        const w1 = ((w2 * a === -1 ? w2 : (w2 + a) / (1 + w2 * a)) + 1) / 2;
        const w22 = 1 - w1;
        return Color.rgb(
          w1 * color1.red() + w22 * color2.red(),
          w1 * color1.green() + w22 * color2.green(),
          w1 * color1.blue() + w22 * color2.blue(),
          color1.alpha() * p + color2.alpha() * (1 - p)
        );
      }
    };
    for (const model of Object.keys(convert)) {
      if (skippedModels.includes(model)) {
        continue;
      }
      const { channels } = convert[model];
      Color.prototype[model] = function(...args) {
        if (this.model === model) {
          return new Color(this);
        }
        if (args.length > 0) {
          return new Color(args, model);
        }
        return new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);
      };
      Color[model] = function(...args) {
        let color = args[0];
        if (typeof color === "number") {
          color = zeroArray(args, channels);
        }
        return new Color(color, model);
      };
    }
    function roundTo(number, places) {
      return Number(number.toFixed(places));
    }
    function roundToPlace(places) {
      return function(number) {
        return roundTo(number, places);
      };
    }
    function getset(model, channel, modifier) {
      model = Array.isArray(model) ? model : [model];
      for (const m of model) {
        (limiters[m] || (limiters[m] = []))[channel] = modifier;
      }
      model = model[0];
      return function(value) {
        let result;
        if (value !== void 0) {
          if (modifier) {
            value = modifier(value);
          }
          result = this[model]();
          result.color[channel] = value;
          return result;
        }
        result = this[model]().color[channel];
        if (modifier) {
          result = modifier(result);
        }
        return result;
      };
    }
    function maxfn(max) {
      return function(v) {
        return Math.max(0, Math.min(max, v));
      };
    }
    function assertArray(value) {
      return Array.isArray(value) ? value : [value];
    }
    function zeroArray(array, length) {
      for (let i = 0; i < length; i++) {
        if (typeof array[i] !== "number") {
          array[i] = 0;
        }
      }
      return array;
    }
    module2.exports = Color;
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/colour.js
var require_colour = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/colour.js"(exports, module2) {
    "use strict";
    var color = require_color();
    var is = require_is();
    var colourspace = {
      multiband: "multiband",
      "b-w": "b-w",
      bw: "b-w",
      cmyk: "cmyk",
      srgb: "srgb"
    };
    function tint(tint2) {
      this._setBackgroundColourOption("tint", tint2);
      return this;
    }
    function greyscale(greyscale2) {
      this.options.greyscale = is.bool(greyscale2) ? greyscale2 : true;
      return this;
    }
    function grayscale(grayscale2) {
      return this.greyscale(grayscale2);
    }
    function pipelineColourspace(colourspace2) {
      if (!is.string(colourspace2)) {
        throw is.invalidParameterError("colourspace", "string", colourspace2);
      }
      this.options.colourspacePipeline = colourspace2;
      return this;
    }
    function pipelineColorspace(colorspace) {
      return this.pipelineColourspace(colorspace);
    }
    function toColourspace(colourspace2) {
      if (!is.string(colourspace2)) {
        throw is.invalidParameterError("colourspace", "string", colourspace2);
      }
      this.options.colourspace = colourspace2;
      return this;
    }
    function toColorspace(colorspace) {
      return this.toColourspace(colorspace);
    }
    function _getBackgroundColourOption(value) {
      if (is.object(value) || is.string(value)) {
        const colour = color(value);
        return [
          colour.red(),
          colour.green(),
          colour.blue(),
          Math.round(colour.alpha() * 255)
        ];
      } else {
        throw is.invalidParameterError("background", "object or string", value);
      }
    }
    function _setBackgroundColourOption(key, value) {
      if (is.defined(value)) {
        this.options[key] = _getBackgroundColourOption(value);
      }
    }
    module2.exports = function(Sharp) {
      Object.assign(Sharp.prototype, {
        // Public
        tint,
        greyscale,
        grayscale,
        pipelineColourspace,
        pipelineColorspace,
        toColourspace,
        toColorspace,
        // Private
        _getBackgroundColourOption,
        _setBackgroundColourOption
      });
      Sharp.colourspace = colourspace;
      Sharp.colorspace = colourspace;
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/channel.js
var require_channel = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/channel.js"(exports, module2) {
    "use strict";
    var is = require_is();
    var bool = {
      and: "and",
      or: "or",
      eor: "eor"
    };
    function removeAlpha() {
      this.options.removeAlpha = true;
      return this;
    }
    function ensureAlpha(alpha) {
      if (is.defined(alpha)) {
        if (is.number(alpha) && is.inRange(alpha, 0, 1)) {
          this.options.ensureAlpha = alpha;
        } else {
          throw is.invalidParameterError("alpha", "number between 0 and 1", alpha);
        }
      } else {
        this.options.ensureAlpha = 1;
      }
      return this;
    }
    function extractChannel(channel) {
      const channelMap = { red: 0, green: 1, blue: 2, alpha: 3 };
      if (Object.keys(channelMap).includes(channel)) {
        channel = channelMap[channel];
      }
      if (is.integer(channel) && is.inRange(channel, 0, 4)) {
        this.options.extractChannel = channel;
      } else {
        throw is.invalidParameterError("channel", "integer or one of: red, green, blue, alpha", channel);
      }
      return this;
    }
    function joinChannel(images, options) {
      if (Array.isArray(images)) {
        images.forEach(function(image) {
          this.options.joinChannelIn.push(this._createInputDescriptor(image, options));
        }, this);
      } else {
        this.options.joinChannelIn.push(this._createInputDescriptor(images, options));
      }
      return this;
    }
    function bandbool(boolOp) {
      if (is.string(boolOp) && is.inArray(boolOp, ["and", "or", "eor"])) {
        this.options.bandBoolOp = boolOp;
      } else {
        throw is.invalidParameterError("boolOp", "one of: and, or, eor", boolOp);
      }
      return this;
    }
    module2.exports = function(Sharp) {
      Object.assign(Sharp.prototype, {
        // Public instance functions
        removeAlpha,
        ensureAlpha,
        extractChannel,
        joinChannel,
        bandbool
      });
      Sharp.bool = bool;
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/output.js
var require_output = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/output.js"(exports, module2) {
    "use strict";
    var path = require("path");
    var is = require_is();
    var sharp = require_sharp();
    var formats = /* @__PURE__ */ new Map([
      ["heic", "heif"],
      ["heif", "heif"],
      ["avif", "avif"],
      ["jpeg", "jpeg"],
      ["jpg", "jpeg"],
      ["jpe", "jpeg"],
      ["tile", "tile"],
      ["dz", "tile"],
      ["png", "png"],
      ["raw", "raw"],
      ["tiff", "tiff"],
      ["tif", "tiff"],
      ["webp", "webp"],
      ["gif", "gif"],
      ["jp2", "jp2"],
      ["jpx", "jp2"],
      ["j2k", "jp2"],
      ["j2c", "jp2"],
      ["jxl", "jxl"]
    ]);
    var jp2Regex = /\.(jp[2x]|j2[kc])$/i;
    var errJp2Save = () => new Error("JP2 output requires libvips with support for OpenJPEG");
    var bitdepthFromColourCount = (colours) => 1 << 31 - Math.clz32(Math.ceil(Math.log2(colours)));
    function toFile(fileOut, callback) {
      let err;
      if (!is.string(fileOut)) {
        err = new Error("Missing output file path");
      } else if (is.string(this.options.input.file) && path.resolve(this.options.input.file) === path.resolve(fileOut)) {
        err = new Error("Cannot use same file for input and output");
      } else if (jp2Regex.test(path.extname(fileOut)) && !this.constructor.format.jp2k.output.file) {
        err = errJp2Save();
      }
      if (err) {
        if (is.fn(callback)) {
          callback(err);
        } else {
          return Promise.reject(err);
        }
      } else {
        this.options.fileOut = fileOut;
        const stack = Error();
        return this._pipeline(callback, stack);
      }
      return this;
    }
    function toBuffer(options, callback) {
      if (is.object(options)) {
        this._setBooleanOption("resolveWithObject", options.resolveWithObject);
      } else if (this.options.resolveWithObject) {
        this.options.resolveWithObject = false;
      }
      this.options.fileOut = "";
      const stack = Error();
      return this._pipeline(is.fn(options) ? options : callback, stack);
    }
    function keepExif() {
      this.options.keepMetadata |= 1;
      return this;
    }
    function withExif(exif) {
      if (is.object(exif)) {
        for (const [ifd, entries] of Object.entries(exif)) {
          if (is.object(entries)) {
            for (const [k, v] of Object.entries(entries)) {
              if (is.string(v)) {
                this.options.withExif[`exif-${ifd.toLowerCase()}-${k}`] = v;
              } else {
                throw is.invalidParameterError(`${ifd}.${k}`, "string", v);
              }
            }
          } else {
            throw is.invalidParameterError(ifd, "object", entries);
          }
        }
      } else {
        throw is.invalidParameterError("exif", "object", exif);
      }
      this.options.withExifMerge = false;
      return this.keepExif();
    }
    function withExifMerge(exif) {
      this.withExif(exif);
      this.options.withExifMerge = true;
      return this;
    }
    function keepIccProfile() {
      this.options.keepMetadata |= 8;
      return this;
    }
    function withIccProfile(icc, options) {
      if (is.string(icc)) {
        this.options.withIccProfile = icc;
      } else {
        throw is.invalidParameterError("icc", "string", icc);
      }
      this.keepIccProfile();
      if (is.object(options)) {
        if (is.defined(options.attach)) {
          if (is.bool(options.attach)) {
            if (!options.attach) {
              this.options.keepMetadata &= ~8;
            }
          } else {
            throw is.invalidParameterError("attach", "boolean", options.attach);
          }
        }
      }
      return this;
    }
    function keepMetadata() {
      this.options.keepMetadata = 31;
      return this;
    }
    function withMetadata(options) {
      this.keepMetadata();
      this.withIccProfile("srgb");
      if (is.object(options)) {
        if (is.defined(options.orientation)) {
          if (is.integer(options.orientation) && is.inRange(options.orientation, 1, 8)) {
            this.options.withMetadataOrientation = options.orientation;
          } else {
            throw is.invalidParameterError("orientation", "integer between 1 and 8", options.orientation);
          }
        }
        if (is.defined(options.density)) {
          if (is.number(options.density) && options.density > 0) {
            this.options.withMetadataDensity = options.density;
          } else {
            throw is.invalidParameterError("density", "positive number", options.density);
          }
        }
        if (is.defined(options.icc)) {
          this.withIccProfile(options.icc);
        }
        if (is.defined(options.exif)) {
          this.withExifMerge(options.exif);
        }
      }
      return this;
    }
    function toFormat(format, options) {
      const actualFormat = formats.get((is.object(format) && is.string(format.id) ? format.id : format).toLowerCase());
      if (!actualFormat) {
        throw is.invalidParameterError("format", `one of: ${[...formats.keys()].join(", ")}`, format);
      }
      return this[actualFormat](options);
    }
    function jpeg(options) {
      if (is.object(options)) {
        if (is.defined(options.quality)) {
          if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {
            this.options.jpegQuality = options.quality;
          } else {
            throw is.invalidParameterError("quality", "integer between 1 and 100", options.quality);
          }
        }
        if (is.defined(options.progressive)) {
          this._setBooleanOption("jpegProgressive", options.progressive);
        }
        if (is.defined(options.chromaSubsampling)) {
          if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ["4:2:0", "4:4:4"])) {
            this.options.jpegChromaSubsampling = options.chromaSubsampling;
          } else {
            throw is.invalidParameterError("chromaSubsampling", "one of: 4:2:0, 4:4:4", options.chromaSubsampling);
          }
        }
        const optimiseCoding = is.bool(options.optimizeCoding) ? options.optimizeCoding : options.optimiseCoding;
        if (is.defined(optimiseCoding)) {
          this._setBooleanOption("jpegOptimiseCoding", optimiseCoding);
        }
        if (is.defined(options.mozjpeg)) {
          if (is.bool(options.mozjpeg)) {
            if (options.mozjpeg) {
              this.options.jpegTrellisQuantisation = true;
              this.options.jpegOvershootDeringing = true;
              this.options.jpegOptimiseScans = true;
              this.options.jpegProgressive = true;
              this.options.jpegQuantisationTable = 3;
            }
          } else {
            throw is.invalidParameterError("mozjpeg", "boolean", options.mozjpeg);
          }
        }
        const trellisQuantisation = is.bool(options.trellisQuantization) ? options.trellisQuantization : options.trellisQuantisation;
        if (is.defined(trellisQuantisation)) {
          this._setBooleanOption("jpegTrellisQuantisation", trellisQuantisation);
        }
        if (is.defined(options.overshootDeringing)) {
          this._setBooleanOption("jpegOvershootDeringing", options.overshootDeringing);
        }
        const optimiseScans = is.bool(options.optimizeScans) ? options.optimizeScans : options.optimiseScans;
        if (is.defined(optimiseScans)) {
          this._setBooleanOption("jpegOptimiseScans", optimiseScans);
          if (optimiseScans) {
            this.options.jpegProgressive = true;
          }
        }
        const quantisationTable = is.number(options.quantizationTable) ? options.quantizationTable : options.quantisationTable;
        if (is.defined(quantisationTable)) {
          if (is.integer(quantisationTable) && is.inRange(quantisationTable, 0, 8)) {
            this.options.jpegQuantisationTable = quantisationTable;
          } else {
            throw is.invalidParameterError("quantisationTable", "integer between 0 and 8", quantisationTable);
          }
        }
      }
      return this._updateFormatOut("jpeg", options);
    }
    function png(options) {
      if (is.object(options)) {
        if (is.defined(options.progressive)) {
          this._setBooleanOption("pngProgressive", options.progressive);
        }
        if (is.defined(options.compressionLevel)) {
          if (is.integer(options.compressionLevel) && is.inRange(options.compressionLevel, 0, 9)) {
            this.options.pngCompressionLevel = options.compressionLevel;
          } else {
            throw is.invalidParameterError("compressionLevel", "integer between 0 and 9", options.compressionLevel);
          }
        }
        if (is.defined(options.adaptiveFiltering)) {
          this._setBooleanOption("pngAdaptiveFiltering", options.adaptiveFiltering);
        }
        const colours = options.colours || options.colors;
        if (is.defined(colours)) {
          if (is.integer(colours) && is.inRange(colours, 2, 256)) {
            this.options.pngBitdepth = bitdepthFromColourCount(colours);
          } else {
            throw is.invalidParameterError("colours", "integer between 2 and 256", colours);
          }
        }
        if (is.defined(options.palette)) {
          this._setBooleanOption("pngPalette", options.palette);
        } else if ([options.quality, options.effort, options.colours, options.colors, options.dither].some(is.defined)) {
          this._setBooleanOption("pngPalette", true);
        }
        if (this.options.pngPalette) {
          if (is.defined(options.quality)) {
            if (is.integer(options.quality) && is.inRange(options.quality, 0, 100)) {
              this.options.pngQuality = options.quality;
            } else {
              throw is.invalidParameterError("quality", "integer between 0 and 100", options.quality);
            }
          }
          if (is.defined(options.effort)) {
            if (is.integer(options.effort) && is.inRange(options.effort, 1, 10)) {
              this.options.pngEffort = options.effort;
            } else {
              throw is.invalidParameterError("effort", "integer between 1 and 10", options.effort);
            }
          }
          if (is.defined(options.dither)) {
            if (is.number(options.dither) && is.inRange(options.dither, 0, 1)) {
              this.options.pngDither = options.dither;
            } else {
              throw is.invalidParameterError("dither", "number between 0.0 and 1.0", options.dither);
            }
          }
        }
      }
      return this._updateFormatOut("png", options);
    }
    function webp(options) {
      if (is.object(options)) {
        if (is.defined(options.quality)) {
          if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {
            this.options.webpQuality = options.quality;
          } else {
            throw is.invalidParameterError("quality", "integer between 1 and 100", options.quality);
          }
        }
        if (is.defined(options.alphaQuality)) {
          if (is.integer(options.alphaQuality) && is.inRange(options.alphaQuality, 0, 100)) {
            this.options.webpAlphaQuality = options.alphaQuality;
          } else {
            throw is.invalidParameterError("alphaQuality", "integer between 0 and 100", options.alphaQuality);
          }
        }
        if (is.defined(options.lossless)) {
          this._setBooleanOption("webpLossless", options.lossless);
        }
        if (is.defined(options.nearLossless)) {
          this._setBooleanOption("webpNearLossless", options.nearLossless);
        }
        if (is.defined(options.smartSubsample)) {
          this._setBooleanOption("webpSmartSubsample", options.smartSubsample);
        }
        if (is.defined(options.smartDeblock)) {
          this._setBooleanOption("webpSmartDeblock", options.smartDeblock);
        }
        if (is.defined(options.preset)) {
          if (is.string(options.preset) && is.inArray(options.preset, ["default", "photo", "picture", "drawing", "icon", "text"])) {
            this.options.webpPreset = options.preset;
          } else {
            throw is.invalidParameterError("preset", "one of: default, photo, picture, drawing, icon, text", options.preset);
          }
        }
        if (is.defined(options.effort)) {
          if (is.integer(options.effort) && is.inRange(options.effort, 0, 6)) {
            this.options.webpEffort = options.effort;
          } else {
            throw is.invalidParameterError("effort", "integer between 0 and 6", options.effort);
          }
        }
        if (is.defined(options.minSize)) {
          this._setBooleanOption("webpMinSize", options.minSize);
        }
        if (is.defined(options.mixed)) {
          this._setBooleanOption("webpMixed", options.mixed);
        }
      }
      trySetAnimationOptions(options, this.options);
      return this._updateFormatOut("webp", options);
    }
    function gif(options) {
      if (is.object(options)) {
        if (is.defined(options.reuse)) {
          this._setBooleanOption("gifReuse", options.reuse);
        }
        if (is.defined(options.progressive)) {
          this._setBooleanOption("gifProgressive", options.progressive);
        }
        const colours = options.colours || options.colors;
        if (is.defined(colours)) {
          if (is.integer(colours) && is.inRange(colours, 2, 256)) {
            this.options.gifBitdepth = bitdepthFromColourCount(colours);
          } else {
            throw is.invalidParameterError("colours", "integer between 2 and 256", colours);
          }
        }
        if (is.defined(options.effort)) {
          if (is.number(options.effort) && is.inRange(options.effort, 1, 10)) {
            this.options.gifEffort = options.effort;
          } else {
            throw is.invalidParameterError("effort", "integer between 1 and 10", options.effort);
          }
        }
        if (is.defined(options.dither)) {
          if (is.number(options.dither) && is.inRange(options.dither, 0, 1)) {
            this.options.gifDither = options.dither;
          } else {
            throw is.invalidParameterError("dither", "number between 0.0 and 1.0", options.dither);
          }
        }
        if (is.defined(options.interFrameMaxError)) {
          if (is.number(options.interFrameMaxError) && is.inRange(options.interFrameMaxError, 0, 32)) {
            this.options.gifInterFrameMaxError = options.interFrameMaxError;
          } else {
            throw is.invalidParameterError("interFrameMaxError", "number between 0.0 and 32.0", options.interFrameMaxError);
          }
        }
        if (is.defined(options.interPaletteMaxError)) {
          if (is.number(options.interPaletteMaxError) && is.inRange(options.interPaletteMaxError, 0, 256)) {
            this.options.gifInterPaletteMaxError = options.interPaletteMaxError;
          } else {
            throw is.invalidParameterError("interPaletteMaxError", "number between 0.0 and 256.0", options.interPaletteMaxError);
          }
        }
      }
      trySetAnimationOptions(options, this.options);
      return this._updateFormatOut("gif", options);
    }
    function jp2(options) {
      if (!this.constructor.format.jp2k.output.buffer) {
        throw errJp2Save();
      }
      if (is.object(options)) {
        if (is.defined(options.quality)) {
          if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {
            this.options.jp2Quality = options.quality;
          } else {
            throw is.invalidParameterError("quality", "integer between 1 and 100", options.quality);
          }
        }
        if (is.defined(options.lossless)) {
          if (is.bool(options.lossless)) {
            this.options.jp2Lossless = options.lossless;
          } else {
            throw is.invalidParameterError("lossless", "boolean", options.lossless);
          }
        }
        if (is.defined(options.tileWidth)) {
          if (is.integer(options.tileWidth) && is.inRange(options.tileWidth, 1, 32768)) {
            this.options.jp2TileWidth = options.tileWidth;
          } else {
            throw is.invalidParameterError("tileWidth", "integer between 1 and 32768", options.tileWidth);
          }
        }
        if (is.defined(options.tileHeight)) {
          if (is.integer(options.tileHeight) && is.inRange(options.tileHeight, 1, 32768)) {
            this.options.jp2TileHeight = options.tileHeight;
          } else {
            throw is.invalidParameterError("tileHeight", "integer between 1 and 32768", options.tileHeight);
          }
        }
        if (is.defined(options.chromaSubsampling)) {
          if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ["4:2:0", "4:4:4"])) {
            this.options.jp2ChromaSubsampling = options.chromaSubsampling;
          } else {
            throw is.invalidParameterError("chromaSubsampling", "one of: 4:2:0, 4:4:4", options.chromaSubsampling);
          }
        }
      }
      return this._updateFormatOut("jp2", options);
    }
    function trySetAnimationOptions(source, target) {
      if (is.object(source) && is.defined(source.loop)) {
        if (is.integer(source.loop) && is.inRange(source.loop, 0, 65535)) {
          target.loop = source.loop;
        } else {
          throw is.invalidParameterError("loop", "integer between 0 and 65535", source.loop);
        }
      }
      if (is.object(source) && is.defined(source.delay)) {
        if (is.integer(source.delay) && is.inRange(source.delay, 0, 65535)) {
          target.delay = [source.delay];
        } else if (Array.isArray(source.delay) && source.delay.every(is.integer) && source.delay.every((v) => is.inRange(v, 0, 65535))) {
          target.delay = source.delay;
        } else {
          throw is.invalidParameterError("delay", "integer or an array of integers between 0 and 65535", source.delay);
        }
      }
    }
    function tiff(options) {
      if (is.object(options)) {
        if (is.defined(options.quality)) {
          if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {
            this.options.tiffQuality = options.quality;
          } else {
            throw is.invalidParameterError("quality", "integer between 1 and 100", options.quality);
          }
        }
        if (is.defined(options.bitdepth)) {
          if (is.integer(options.bitdepth) && is.inArray(options.bitdepth, [1, 2, 4, 8])) {
            this.options.tiffBitdepth = options.bitdepth;
          } else {
            throw is.invalidParameterError("bitdepth", "1, 2, 4 or 8", options.bitdepth);
          }
        }
        if (is.defined(options.tile)) {
          this._setBooleanOption("tiffTile", options.tile);
        }
        if (is.defined(options.tileWidth)) {
          if (is.integer(options.tileWidth) && options.tileWidth > 0) {
            this.options.tiffTileWidth = options.tileWidth;
          } else {
            throw is.invalidParameterError("tileWidth", "integer greater than zero", options.tileWidth);
          }
        }
        if (is.defined(options.tileHeight)) {
          if (is.integer(options.tileHeight) && options.tileHeight > 0) {
            this.options.tiffTileHeight = options.tileHeight;
          } else {
            throw is.invalidParameterError("tileHeight", "integer greater than zero", options.tileHeight);
          }
        }
        if (is.defined(options.miniswhite)) {
          this._setBooleanOption("tiffMiniswhite", options.miniswhite);
        }
        if (is.defined(options.pyramid)) {
          this._setBooleanOption("tiffPyramid", options.pyramid);
        }
        if (is.defined(options.xres)) {
          if (is.number(options.xres) && options.xres > 0) {
            this.options.tiffXres = options.xres;
          } else {
            throw is.invalidParameterError("xres", "number greater than zero", options.xres);
          }
        }
        if (is.defined(options.yres)) {
          if (is.number(options.yres) && options.yres > 0) {
            this.options.tiffYres = options.yres;
          } else {
            throw is.invalidParameterError("yres", "number greater than zero", options.yres);
          }
        }
        if (is.defined(options.compression)) {
          if (is.string(options.compression) && is.inArray(options.compression, ["none", "jpeg", "deflate", "packbits", "ccittfax4", "lzw", "webp", "zstd", "jp2k"])) {
            this.options.tiffCompression = options.compression;
          } else {
            throw is.invalidParameterError("compression", "one of: none, jpeg, deflate, packbits, ccittfax4, lzw, webp, zstd, jp2k", options.compression);
          }
        }
        if (is.defined(options.predictor)) {
          if (is.string(options.predictor) && is.inArray(options.predictor, ["none", "horizontal", "float"])) {
            this.options.tiffPredictor = options.predictor;
          } else {
            throw is.invalidParameterError("predictor", "one of: none, horizontal, float", options.predictor);
          }
        }
        if (is.defined(options.resolutionUnit)) {
          if (is.string(options.resolutionUnit) && is.inArray(options.resolutionUnit, ["inch", "cm"])) {
            this.options.tiffResolutionUnit = options.resolutionUnit;
          } else {
            throw is.invalidParameterError("resolutionUnit", "one of: inch, cm", options.resolutionUnit);
          }
        }
      }
      return this._updateFormatOut("tiff", options);
    }
    function avif(options) {
      return this.heif({ ...options, compression: "av1" });
    }
    function heif(options) {
      if (is.object(options)) {
        if (is.string(options.compression) && is.inArray(options.compression, ["av1", "hevc"])) {
          this.options.heifCompression = options.compression;
        } else {
          throw is.invalidParameterError("compression", "one of: av1, hevc", options.compression);
        }
        if (is.defined(options.quality)) {
          if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {
            this.options.heifQuality = options.quality;
          } else {
            throw is.invalidParameterError("quality", "integer between 1 and 100", options.quality);
          }
        }
        if (is.defined(options.lossless)) {
          if (is.bool(options.lossless)) {
            this.options.heifLossless = options.lossless;
          } else {
            throw is.invalidParameterError("lossless", "boolean", options.lossless);
          }
        }
        if (is.defined(options.effort)) {
          if (is.integer(options.effort) && is.inRange(options.effort, 0, 9)) {
            this.options.heifEffort = options.effort;
          } else {
            throw is.invalidParameterError("effort", "integer between 0 and 9", options.effort);
          }
        }
        if (is.defined(options.chromaSubsampling)) {
          if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ["4:2:0", "4:4:4"])) {
            this.options.heifChromaSubsampling = options.chromaSubsampling;
          } else {
            throw is.invalidParameterError("chromaSubsampling", "one of: 4:2:0, 4:4:4", options.chromaSubsampling);
          }
        }
        if (is.defined(options.bitdepth)) {
          if (is.integer(options.bitdepth) && is.inArray(options.bitdepth, [8, 10, 12])) {
            if (options.bitdepth !== 8 && this.constructor.versions.heif) {
              throw is.invalidParameterError("bitdepth when using prebuilt binaries", 8, options.bitdepth);
            }
            this.options.heifBitdepth = options.bitdepth;
          } else {
            throw is.invalidParameterError("bitdepth", "8, 10 or 12", options.bitdepth);
          }
        }
      } else {
        throw is.invalidParameterError("options", "Object", options);
      }
      return this._updateFormatOut("heif", options);
    }
    function jxl(options) {
      if (is.object(options)) {
        if (is.defined(options.quality)) {
          if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {
            this.options.jxlDistance = options.quality >= 30 ? 0.1 + (100 - options.quality) * 0.09 : 53 / 3e3 * options.quality * options.quality - 23 / 20 * options.quality + 25;
          } else {
            throw is.invalidParameterError("quality", "integer between 1 and 100", options.quality);
          }
        } else if (is.defined(options.distance)) {
          if (is.number(options.distance) && is.inRange(options.distance, 0, 15)) {
            this.options.jxlDistance = options.distance;
          } else {
            throw is.invalidParameterError("distance", "number between 0.0 and 15.0", options.distance);
          }
        }
        if (is.defined(options.decodingTier)) {
          if (is.integer(options.decodingTier) && is.inRange(options.decodingTier, 0, 4)) {
            this.options.jxlDecodingTier = options.decodingTier;
          } else {
            throw is.invalidParameterError("decodingTier", "integer between 0 and 4", options.decodingTier);
          }
        }
        if (is.defined(options.lossless)) {
          if (is.bool(options.lossless)) {
            this.options.jxlLossless = options.lossless;
          } else {
            throw is.invalidParameterError("lossless", "boolean", options.lossless);
          }
        }
        if (is.defined(options.effort)) {
          if (is.integer(options.effort) && is.inRange(options.effort, 1, 9)) {
            this.options.jxlEffort = options.effort;
          } else {
            throw is.invalidParameterError("effort", "integer between 1 and 9", options.effort);
          }
        }
      }
      trySetAnimationOptions(options, this.options);
      return this._updateFormatOut("jxl", options);
    }
    function raw(options) {
      if (is.object(options)) {
        if (is.defined(options.depth)) {
          if (is.string(options.depth) && is.inArray(
            options.depth,
            ["char", "uchar", "short", "ushort", "int", "uint", "float", "complex", "double", "dpcomplex"]
          )) {
            this.options.rawDepth = options.depth;
          } else {
            throw is.invalidParameterError("depth", "one of: char, uchar, short, ushort, int, uint, float, complex, double, dpcomplex", options.depth);
          }
        }
      }
      return this._updateFormatOut("raw");
    }
    function tile(options) {
      if (is.object(options)) {
        if (is.defined(options.size)) {
          if (is.integer(options.size) && is.inRange(options.size, 1, 8192)) {
            this.options.tileSize = options.size;
          } else {
            throw is.invalidParameterError("size", "integer between 1 and 8192", options.size);
          }
        }
        if (is.defined(options.overlap)) {
          if (is.integer(options.overlap) && is.inRange(options.overlap, 0, 8192)) {
            if (options.overlap > this.options.tileSize) {
              throw is.invalidParameterError("overlap", `<= size (${this.options.tileSize})`, options.overlap);
            }
            this.options.tileOverlap = options.overlap;
          } else {
            throw is.invalidParameterError("overlap", "integer between 0 and 8192", options.overlap);
          }
        }
        if (is.defined(options.container)) {
          if (is.string(options.container) && is.inArray(options.container, ["fs", "zip"])) {
            this.options.tileContainer = options.container;
          } else {
            throw is.invalidParameterError("container", "one of: fs, zip", options.container);
          }
        }
        if (is.defined(options.layout)) {
          if (is.string(options.layout) && is.inArray(options.layout, ["dz", "google", "iiif", "iiif3", "zoomify"])) {
            this.options.tileLayout = options.layout;
          } else {
            throw is.invalidParameterError("layout", "one of: dz, google, iiif, iiif3, zoomify", options.layout);
          }
        }
        if (is.defined(options.angle)) {
          if (is.integer(options.angle) && !(options.angle % 90)) {
            this.options.tileAngle = options.angle;
          } else {
            throw is.invalidParameterError("angle", "positive/negative multiple of 90", options.angle);
          }
        }
        this._setBackgroundColourOption("tileBackground", options.background);
        if (is.defined(options.depth)) {
          if (is.string(options.depth) && is.inArray(options.depth, ["onepixel", "onetile", "one"])) {
            this.options.tileDepth = options.depth;
          } else {
            throw is.invalidParameterError("depth", "one of: onepixel, onetile, one", options.depth);
          }
        }
        if (is.defined(options.skipBlanks)) {
          if (is.integer(options.skipBlanks) && is.inRange(options.skipBlanks, -1, 65535)) {
            this.options.tileSkipBlanks = options.skipBlanks;
          } else {
            throw is.invalidParameterError("skipBlanks", "integer between -1 and 255/65535", options.skipBlanks);
          }
        } else if (is.defined(options.layout) && options.layout === "google") {
          this.options.tileSkipBlanks = 5;
        }
        const centre = is.bool(options.center) ? options.center : options.centre;
        if (is.defined(centre)) {
          this._setBooleanOption("tileCentre", centre);
        }
        if (is.defined(options.id)) {
          if (is.string(options.id)) {
            this.options.tileId = options.id;
          } else {
            throw is.invalidParameterError("id", "string", options.id);
          }
        }
        if (is.defined(options.basename)) {
          if (is.string(options.basename)) {
            this.options.tileBasename = options.basename;
          } else {
            throw is.invalidParameterError("basename", "string", options.basename);
          }
        }
      }
      if (is.inArray(this.options.formatOut, ["jpeg", "png", "webp"])) {
        this.options.tileFormat = this.options.formatOut;
      } else if (this.options.formatOut !== "input") {
        throw is.invalidParameterError("format", "one of: jpeg, png, webp", this.options.formatOut);
      }
      return this._updateFormatOut("dz");
    }
    function timeout(options) {
      if (!is.plainObject(options)) {
        throw is.invalidParameterError("options", "object", options);
      }
      if (is.integer(options.seconds) && is.inRange(options.seconds, 0, 3600)) {
        this.options.timeoutSeconds = options.seconds;
      } else {
        throw is.invalidParameterError("seconds", "integer between 0 and 3600", options.seconds);
      }
      return this;
    }
    function _updateFormatOut(formatOut, options) {
      if (!(is.object(options) && options.force === false)) {
        this.options.formatOut = formatOut;
      }
      return this;
    }
    function _setBooleanOption(key, val) {
      if (is.bool(val)) {
        this.options[key] = val;
      } else {
        throw is.invalidParameterError(key, "boolean", val);
      }
    }
    function _read() {
      if (!this.options.streamOut) {
        this.options.streamOut = true;
        const stack = Error();
        this._pipeline(void 0, stack);
      }
    }
    function _pipeline(callback, stack) {
      if (typeof callback === "function") {
        if (this._isStreamInput()) {
          this.on("finish", () => {
            this._flattenBufferIn();
            sharp.pipeline(this.options, (err, data, info) => {
              if (err) {
                callback(is.nativeError(err, stack));
              } else {
                callback(null, data, info);
              }
            });
          });
        } else {
          sharp.pipeline(this.options, (err, data, info) => {
            if (err) {
              callback(is.nativeError(err, stack));
            } else {
              callback(null, data, info);
            }
          });
        }
        return this;
      } else if (this.options.streamOut) {
        if (this._isStreamInput()) {
          this.once("finish", () => {
            this._flattenBufferIn();
            sharp.pipeline(this.options, (err, data, info) => {
              if (err) {
                this.emit("error", is.nativeError(err, stack));
              } else {
                this.emit("info", info);
                this.push(data);
              }
              this.push(null);
              this.on("end", () => this.emit("close"));
            });
          });
          if (this.streamInFinished) {
            this.emit("finish");
          }
        } else {
          sharp.pipeline(this.options, (err, data, info) => {
            if (err) {
              this.emit("error", is.nativeError(err, stack));
            } else {
              this.emit("info", info);
              this.push(data);
            }
            this.push(null);
            this.on("end", () => this.emit("close"));
          });
        }
        return this;
      } else {
        if (this._isStreamInput()) {
          return new Promise((resolve, reject) => {
            this.once("finish", () => {
              this._flattenBufferIn();
              sharp.pipeline(this.options, (err, data, info) => {
                if (err) {
                  reject(is.nativeError(err, stack));
                } else {
                  if (this.options.resolveWithObject) {
                    resolve({ data, info });
                  } else {
                    resolve(data);
                  }
                }
              });
            });
          });
        } else {
          return new Promise((resolve, reject) => {
            sharp.pipeline(this.options, (err, data, info) => {
              if (err) {
                reject(is.nativeError(err, stack));
              } else {
                if (this.options.resolveWithObject) {
                  resolve({ data, info });
                } else {
                  resolve(data);
                }
              }
            });
          });
        }
      }
    }
    module2.exports = function(Sharp) {
      Object.assign(Sharp.prototype, {
        // Public
        toFile,
        toBuffer,
        keepExif,
        withExif,
        withExifMerge,
        keepIccProfile,
        withIccProfile,
        keepMetadata,
        withMetadata,
        toFormat,
        jpeg,
        jp2,
        png,
        webp,
        tiff,
        avif,
        heif,
        jxl,
        gif,
        raw,
        tile,
        timeout,
        // Private
        _updateFormatOut,
        _setBooleanOption,
        _read,
        _pipeline
      });
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/utility.js
var require_utility = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/utility.js"(exports, module2) {
    "use strict";
    var events = require("events");
    var detectLibc = require_detect_libc();
    var is = require_is();
    var { runtimePlatformArch } = require_libvips();
    var sharp = require_sharp();
    var runtimePlatform = runtimePlatformArch();
    var libvipsVersion = sharp.libvipsVersion();
    var format = sharp.format();
    format.heif.output.alias = ["avif", "heic"];
    format.jpeg.output.alias = ["jpe", "jpg"];
    format.tiff.output.alias = ["tif"];
    format.jp2k.output.alias = ["j2c", "j2k", "jp2", "jpx"];
    var interpolators = {
      /** [Nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation). Suitable for image enlargement only. */
      nearest: "nearest",
      /** [Bilinear interpolation](http://en.wikipedia.org/wiki/Bilinear_interpolation). Faster than bicubic but with less smooth results. */
      bilinear: "bilinear",
      /** [Bicubic interpolation](http://en.wikipedia.org/wiki/Bicubic_interpolation) (the default). */
      bicubic: "bicubic",
      /** [LBB interpolation](https://github.com/libvips/libvips/blob/master/libvips/resample/lbb.cpp#L100). Prevents some "[acutance](http://en.wikipedia.org/wiki/Acutance)" but typically reduces performance by a factor of 2. */
      locallyBoundedBicubic: "lbb",
      /** [Nohalo interpolation](http://eprints.soton.ac.uk/268086/). Prevents acutance but typically reduces performance by a factor of 3. */
      nohalo: "nohalo",
      /** [VSQBS interpolation](https://github.com/libvips/libvips/blob/master/libvips/resample/vsqbs.cpp#L48). Prevents "staircasing" when enlarging. */
      vertexSplitQuadraticBasisSpline: "vsqbs"
    };
    var versions = {
      vips: libvipsVersion.semver
    };
    if (!libvipsVersion.isGlobal) {
      if (!libvipsVersion.isWasm) {
        try {
          versions = require(`@img/sharp-${runtimePlatform}/versions`);
        } catch (_2) {
          try {
            versions = require(`@img/sharp-libvips-${runtimePlatform}/versions`);
          } catch (_3) {
          }
        }
      } else {
        try {
          versions = require("@img/sharp-wasm32/versions");
        } catch (_2) {
        }
      }
    }
    versions.sharp = require_package().version;
    if (versions.heif && format.heif) {
      format.heif.input.fileSuffix = [".avif"];
      format.heif.output.alias = ["avif"];
    }
    function cache(options) {
      if (is.bool(options)) {
        if (options) {
          return sharp.cache(50, 20, 100);
        } else {
          return sharp.cache(0, 0, 0);
        }
      } else if (is.object(options)) {
        return sharp.cache(options.memory, options.files, options.items);
      } else {
        return sharp.cache();
      }
    }
    cache(true);
    function concurrency(concurrency2) {
      return sharp.concurrency(is.integer(concurrency2) ? concurrency2 : null);
    }
    if (detectLibc.familySync() === detectLibc.GLIBC && !sharp._isUsingJemalloc()) {
      sharp.concurrency(1);
    } else if (detectLibc.familySync() === detectLibc.MUSL && sharp.concurrency() === 1024) {
      sharp.concurrency(require("os").availableParallelism());
    }
    var queue = new events.EventEmitter();
    function counters() {
      return sharp.counters();
    }
    function simd(simd2) {
      return sharp.simd(is.bool(simd2) ? simd2 : null);
    }
    function block(options) {
      if (is.object(options)) {
        if (Array.isArray(options.operation) && options.operation.every(is.string)) {
          sharp.block(options.operation, true);
        } else {
          throw is.invalidParameterError("operation", "Array<string>", options.operation);
        }
      } else {
        throw is.invalidParameterError("options", "object", options);
      }
    }
    function unblock(options) {
      if (is.object(options)) {
        if (Array.isArray(options.operation) && options.operation.every(is.string)) {
          sharp.block(options.operation, false);
        } else {
          throw is.invalidParameterError("operation", "Array<string>", options.operation);
        }
      } else {
        throw is.invalidParameterError("options", "object", options);
      }
    }
    module2.exports = function(Sharp) {
      Sharp.cache = cache;
      Sharp.concurrency = concurrency;
      Sharp.counters = counters;
      Sharp.simd = simd;
      Sharp.format = format;
      Sharp.interpolators = interpolators;
      Sharp.versions = versions;
      Sharp.queue = queue;
      Sharp.block = block;
      Sharp.unblock = unblock;
    };
  }
});

// node_modules/@huggingface/transformers/node_modules/sharp/lib/index.js
var require_lib = __commonJS({
  "node_modules/@huggingface/transformers/node_modules/sharp/lib/index.js"(exports, module2) {
    "use strict";
    var Sharp = require_constructor();
    require_input()(Sharp);
    require_resize()(Sharp);
    require_composite()(Sharp);
    require_operation()(Sharp);
    require_colour()(Sharp);
    require_channel()(Sharp);
    require_output()(Sharp);
    require_utility()(Sharp);
    module2.exports = Sharp;
  }
});

// node_modules/@huggingface/transformers/dist/transformers.node.mjs
function __webpack_require__(moduleId) {
  var cachedModule = __webpack_module_cache__[moduleId];
  if (cachedModule !== void 0) {
    return cachedModule.exports;
  }
  var module2 = __webpack_module_cache__[moduleId] = {
    /******/
    // no module.id needed
    /******/
    // no module.loaded needed
    /******/
    exports: {}
    /******/
  };
  __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
  return module2.exports;
}
var __WEBPACK_EXTERNAL_MODULE_fs__, __WEBPACK_EXTERNAL_MODULE_onnxruntime_node_6a60201e__, __WEBPACK_EXTERNAL_MODULE_path__, __WEBPACK_EXTERNAL_MODULE_sharp__, __WEBPACK_EXTERNAL_MODULE_url__, import_meta, __webpack_modules__, __webpack_module_cache__, __webpack_exports__, __webpack_exports__ASTFeatureExtractor, __webpack_exports__ASTForAudioClassification, __webpack_exports__ASTModel, __webpack_exports__ASTPreTrainedModel, __webpack_exports__AlbertForMaskedLM, __webpack_exports__AlbertForQuestionAnswering, __webpack_exports__AlbertForSequenceClassification, __webpack_exports__AlbertModel, __webpack_exports__AlbertPreTrainedModel, __webpack_exports__AlbertTokenizer, __webpack_exports__AudioClassificationPipeline, __webpack_exports__AutoConfig, __webpack_exports__AutoFeatureExtractor, __webpack_exports__AutoImageProcessor, __webpack_exports__AutoModel, __webpack_exports__AutoModelForAudioClassification, __webpack_exports__AutoModelForAudioFrameClassification, __webpack_exports__AutoModelForAudioTextToText, __webpack_exports__AutoModelForCTC, __webpack_exports__AutoModelForCausalLM, __webpack_exports__AutoModelForDepthEstimation, __webpack_exports__AutoModelForDocumentQuestionAnswering, __webpack_exports__AutoModelForImageClassification, __webpack_exports__AutoModelForImageFeatureExtraction, __webpack_exports__AutoModelForImageMatting, __webpack_exports__AutoModelForImageSegmentation, __webpack_exports__AutoModelForImageTextToText, __webpack_exports__AutoModelForImageToImage, __webpack_exports__AutoModelForMaskGeneration, __webpack_exports__AutoModelForMaskedLM, __webpack_exports__AutoModelForNormalEstimation, __webpack_exports__AutoModelForObjectDetection, __webpack_exports__AutoModelForPoseEstimation, __webpack_exports__AutoModelForQuestionAnswering, __webpack_exports__AutoModelForSemanticSegmentation, __webpack_exports__AutoModelForSeq2SeqLM, __webpack_exports__AutoModelForSequenceClassification, __webpack_exports__AutoModelForSpeechSeq2Seq, __webpack_exports__AutoModelForTextToSpectrogram, __webpack_exports__AutoModelForTextToWaveform, __webpack_exports__AutoModelForTokenClassification, __webpack_exports__AutoModelForUniversalSegmentation, __webpack_exports__AutoModelForVision2Seq, __webpack_exports__AutoModelForXVector, __webpack_exports__AutoModelForZeroShotObjectDetection, __webpack_exports__AutoProcessor, __webpack_exports__AutoTokenizer, __webpack_exports__AutomaticSpeechRecognitionPipeline, __webpack_exports__BackgroundRemovalPipeline, __webpack_exports__BartForConditionalGeneration, __webpack_exports__BartForSequenceClassification, __webpack_exports__BartModel, __webpack_exports__BartPretrainedModel, __webpack_exports__BartTokenizer, __webpack_exports__BaseModelOutput, __webpack_exports__BaseStreamer, __webpack_exports__BeitFeatureExtractor, __webpack_exports__BeitForImageClassification, __webpack_exports__BeitModel, __webpack_exports__BeitPreTrainedModel, __webpack_exports__BertForMaskedLM, __webpack_exports__BertForQuestionAnswering, __webpack_exports__BertForSequenceClassification, __webpack_exports__BertForTokenClassification, __webpack_exports__BertModel, __webpack_exports__BertPreTrainedModel, __webpack_exports__BertTokenizer, __webpack_exports__BitImageProcessor, __webpack_exports__BlenderbotForConditionalGeneration, __webpack_exports__BlenderbotModel, __webpack_exports__BlenderbotPreTrainedModel, __webpack_exports__BlenderbotSmallForConditionalGeneration, __webpack_exports__BlenderbotSmallModel, __webpack_exports__BlenderbotSmallPreTrainedModel, __webpack_exports__BlenderbotSmallTokenizer, __webpack_exports__BlenderbotTokenizer, __webpack_exports__BloomForCausalLM, __webpack_exports__BloomModel, __webpack_exports__BloomPreTrainedModel, __webpack_exports__BloomTokenizer, __webpack_exports__CLIPFeatureExtractor, __webpack_exports__CLIPImageProcessor, __webpack_exports__CLIPModel, __webpack_exports__CLIPPreTrainedModel, __webpack_exports__CLIPSegForImageSegmentation, __webpack_exports__CLIPSegModel, __webpack_exports__CLIPSegPreTrainedModel, __webpack_exports__CLIPTextModel, __webpack_exports__CLIPTextModelWithProjection, __webpack_exports__CLIPTokenizer, __webpack_exports__CLIPVisionModel, __webpack_exports__CLIPVisionModelWithProjection, __webpack_exports__CamembertForMaskedLM, __webpack_exports__CamembertForQuestionAnswering, __webpack_exports__CamembertForSequenceClassification, __webpack_exports__CamembertForTokenClassification, __webpack_exports__CamembertModel, __webpack_exports__CamembertPreTrainedModel, __webpack_exports__CamembertTokenizer, __webpack_exports__CausalLMOutput, __webpack_exports__CausalLMOutputWithPast, __webpack_exports__ChineseCLIPFeatureExtractor, __webpack_exports__ChineseCLIPModel, __webpack_exports__ChineseCLIPPreTrainedModel, __webpack_exports__ClapAudioModelWithProjection, __webpack_exports__ClapFeatureExtractor, __webpack_exports__ClapModel, __webpack_exports__ClapPreTrainedModel, __webpack_exports__ClapTextModelWithProjection, __webpack_exports__ClassifierFreeGuidanceLogitsProcessor, __webpack_exports__CodeGenForCausalLM, __webpack_exports__CodeGenModel, __webpack_exports__CodeGenPreTrainedModel, __webpack_exports__CodeGenTokenizer, __webpack_exports__CodeLlamaTokenizer, __webpack_exports__CohereForCausalLM, __webpack_exports__CohereModel, __webpack_exports__CoherePreTrainedModel, __webpack_exports__CohereTokenizer, __webpack_exports__ConvBertForMaskedLM, __webpack_exports__ConvBertForQuestionAnswering, __webpack_exports__ConvBertForSequenceClassification, __webpack_exports__ConvBertForTokenClassification, __webpack_exports__ConvBertModel, __webpack_exports__ConvBertPreTrainedModel, __webpack_exports__ConvBertTokenizer, __webpack_exports__ConvNextFeatureExtractor, __webpack_exports__ConvNextForImageClassification, __webpack_exports__ConvNextImageProcessor, __webpack_exports__ConvNextModel, __webpack_exports__ConvNextPreTrainedModel, __webpack_exports__ConvNextV2ForImageClassification, __webpack_exports__ConvNextV2Model, __webpack_exports__ConvNextV2PreTrainedModel, __webpack_exports__DFineForObjectDetection, __webpack_exports__DFineModel, __webpack_exports__DFinePreTrainedModel, __webpack_exports__DPTFeatureExtractor, __webpack_exports__DPTForDepthEstimation, __webpack_exports__DPTImageProcessor, __webpack_exports__DPTModel, __webpack_exports__DPTPreTrainedModel, __webpack_exports__DacDecoderModel, __webpack_exports__DacDecoderOutput, __webpack_exports__DacEncoderModel, __webpack_exports__DacEncoderOutput, __webpack_exports__DacFeatureExtractor, __webpack_exports__DacModel, __webpack_exports__DacPreTrainedModel, __webpack_exports__DataTypeMap, __webpack_exports__DebertaForMaskedLM, __webpack_exports__DebertaForQuestionAnswering, __webpack_exports__DebertaForSequenceClassification, __webpack_exports__DebertaForTokenClassification, __webpack_exports__DebertaModel, __webpack_exports__DebertaPreTrainedModel, __webpack_exports__DebertaTokenizer, __webpack_exports__DebertaV2ForMaskedLM, __webpack_exports__DebertaV2ForQuestionAnswering, __webpack_exports__DebertaV2ForSequenceClassification, __webpack_exports__DebertaV2ForTokenClassification, __webpack_exports__DebertaV2Model, __webpack_exports__DebertaV2PreTrainedModel, __webpack_exports__DebertaV2Tokenizer, __webpack_exports__DecisionTransformerModel, __webpack_exports__DecisionTransformerPreTrainedModel, __webpack_exports__DeiTFeatureExtractor, __webpack_exports__DeiTForImageClassification, __webpack_exports__DeiTImageProcessor, __webpack_exports__DeiTModel, __webpack_exports__DeiTPreTrainedModel, __webpack_exports__DepthAnythingForDepthEstimation, __webpack_exports__DepthAnythingPreTrainedModel, __webpack_exports__DepthEstimationPipeline, __webpack_exports__DepthProForDepthEstimation, __webpack_exports__DepthProPreTrainedModel, __webpack_exports__DetrFeatureExtractor, __webpack_exports__DetrForObjectDetection, __webpack_exports__DetrForSegmentation, __webpack_exports__DetrImageProcessor, __webpack_exports__DetrModel, __webpack_exports__DetrObjectDetectionOutput, __webpack_exports__DetrPreTrainedModel, __webpack_exports__DetrSegmentationOutput, __webpack_exports__Dinov2ForImageClassification, __webpack_exports__Dinov2Model, __webpack_exports__Dinov2PreTrainedModel, __webpack_exports__Dinov2WithRegistersForImageClassification, __webpack_exports__Dinov2WithRegistersModel, __webpack_exports__Dinov2WithRegistersPreTrainedModel, __webpack_exports__DistilBertForMaskedLM, __webpack_exports__DistilBertForQuestionAnswering, __webpack_exports__DistilBertForSequenceClassification, __webpack_exports__DistilBertForTokenClassification, __webpack_exports__DistilBertModel, __webpack_exports__DistilBertPreTrainedModel, __webpack_exports__DistilBertTokenizer, __webpack_exports__DocumentQuestionAnsweringPipeline, __webpack_exports__DonutFeatureExtractor, __webpack_exports__DonutImageProcessor, __webpack_exports__DonutSwinModel, __webpack_exports__DonutSwinPreTrainedModel, __webpack_exports__EfficientNetForImageClassification, __webpack_exports__EfficientNetImageProcessor, __webpack_exports__EfficientNetModel, __webpack_exports__EfficientNetPreTrainedModel, __webpack_exports__ElectraForMaskedLM, __webpack_exports__ElectraForQuestionAnswering, __webpack_exports__ElectraForSequenceClassification, __webpack_exports__ElectraForTokenClassification, __webpack_exports__ElectraModel, __webpack_exports__ElectraPreTrainedModel, __webpack_exports__ElectraTokenizer, __webpack_exports__EncodecFeatureExtractor, __webpack_exports__EosTokenCriteria, __webpack_exports__EsmForMaskedLM, __webpack_exports__EsmForSequenceClassification, __webpack_exports__EsmForTokenClassification, __webpack_exports__EsmModel, __webpack_exports__EsmPreTrainedModel, __webpack_exports__EsmTokenizer, __webpack_exports__ExaoneForCausalLM, __webpack_exports__ExaoneModel, __webpack_exports__ExaonePreTrainedModel, __webpack_exports__FFT, __webpack_exports__FalconForCausalLM, __webpack_exports__FalconModel, __webpack_exports__FalconPreTrainedModel, __webpack_exports__FalconTokenizer, __webpack_exports__FastViTForImageClassification, __webpack_exports__FastViTModel, __webpack_exports__FastViTPreTrainedModel, __webpack_exports__FeatureExtractionPipeline, __webpack_exports__FeatureExtractor, __webpack_exports__FillMaskPipeline, __webpack_exports__Florence2ForConditionalGeneration, __webpack_exports__Florence2PreTrainedModel, __webpack_exports__Florence2Processor, __webpack_exports__ForcedBOSTokenLogitsProcessor, __webpack_exports__ForcedEOSTokenLogitsProcessor, __webpack_exports__GLPNFeatureExtractor, __webpack_exports__GLPNForDepthEstimation, __webpack_exports__GLPNModel, __webpack_exports__GLPNPreTrainedModel, __webpack_exports__GPT2LMHeadModel, __webpack_exports__GPT2Model, __webpack_exports__GPT2PreTrainedModel, __webpack_exports__GPT2Tokenizer, __webpack_exports__GPTBigCodeForCausalLM, __webpack_exports__GPTBigCodeModel, __webpack_exports__GPTBigCodePreTrainedModel, __webpack_exports__GPTJForCausalLM, __webpack_exports__GPTJModel, __webpack_exports__GPTJPreTrainedModel, __webpack_exports__GPTNeoForCausalLM, __webpack_exports__GPTNeoModel, __webpack_exports__GPTNeoPreTrainedModel, __webpack_exports__GPTNeoXForCausalLM, __webpack_exports__GPTNeoXModel, __webpack_exports__GPTNeoXPreTrainedModel, __webpack_exports__GPTNeoXTokenizer, __webpack_exports__Gemma2ForCausalLM, __webpack_exports__Gemma2Model, __webpack_exports__Gemma2PreTrainedModel, __webpack_exports__Gemma3ForCausalLM, __webpack_exports__Gemma3Model, __webpack_exports__Gemma3PreTrainedModel, __webpack_exports__GemmaForCausalLM, __webpack_exports__GemmaModel, __webpack_exports__GemmaPreTrainedModel, __webpack_exports__GemmaTokenizer, __webpack_exports__GlmForCausalLM, __webpack_exports__GlmModel, __webpack_exports__GlmPreTrainedModel, __webpack_exports__GraniteForCausalLM, __webpack_exports__GraniteModel, __webpack_exports__GranitePreTrainedModel, __webpack_exports__Grok1Tokenizer, __webpack_exports__GroundingDinoForObjectDetection, __webpack_exports__GroundingDinoImageProcessor, __webpack_exports__GroundingDinoPreTrainedModel, __webpack_exports__GroundingDinoProcessor, __webpack_exports__GroupViTModel, __webpack_exports__GroupViTPreTrainedModel, __webpack_exports__HeliumForCausalLM, __webpack_exports__HeliumModel, __webpack_exports__HeliumPreTrainedModel, __webpack_exports__HerbertTokenizer, __webpack_exports__HieraForImageClassification, __webpack_exports__HieraModel, __webpack_exports__HieraPreTrainedModel, __webpack_exports__HubertForCTC, __webpack_exports__HubertForSequenceClassification, __webpack_exports__HubertModel, __webpack_exports__HubertPreTrainedModel, __webpack_exports__IJepaForImageClassification, __webpack_exports__IJepaModel, __webpack_exports__IJepaPreTrainedModel, __webpack_exports__Idefics3ForConditionalGeneration, __webpack_exports__Idefics3ImageProcessor, __webpack_exports__Idefics3PreTrainedModel, __webpack_exports__Idefics3Processor, __webpack_exports__ImageClassificationPipeline, __webpack_exports__ImageFeatureExtractionPipeline, __webpack_exports__ImageFeatureExtractor, __webpack_exports__ImageMattingOutput, __webpack_exports__ImageProcessor, __webpack_exports__ImageSegmentationPipeline, __webpack_exports__ImageToImagePipeline, __webpack_exports__ImageToTextPipeline, __webpack_exports__InterruptableStoppingCriteria, __webpack_exports__JAISLMHeadModel, __webpack_exports__JAISModel, __webpack_exports__JAISPreTrainedModel, __webpack_exports__JinaCLIPImageProcessor, __webpack_exports__JinaCLIPModel, __webpack_exports__JinaCLIPPreTrainedModel, __webpack_exports__JinaCLIPProcessor, __webpack_exports__JinaCLIPTextModel, __webpack_exports__JinaCLIPVisionModel, __webpack_exports__LiteWhisperForConditionalGeneration, __webpack_exports__LlamaForCausalLM, __webpack_exports__LlamaModel, __webpack_exports__LlamaPreTrainedModel, __webpack_exports__LlamaTokenizer, __webpack_exports__LlavaForConditionalGeneration, __webpack_exports__LlavaOnevisionForConditionalGeneration, __webpack_exports__LlavaOnevisionImageProcessor, __webpack_exports__LlavaPreTrainedModel, __webpack_exports__LogitsProcessor, __webpack_exports__LogitsProcessorList, __webpack_exports__LogitsWarper, __webpack_exports__LongT5ForConditionalGeneration, __webpack_exports__LongT5Model, __webpack_exports__LongT5PreTrainedModel, __webpack_exports__M2M100ForConditionalGeneration, __webpack_exports__M2M100Model, __webpack_exports__M2M100PreTrainedModel, __webpack_exports__M2M100Tokenizer, __webpack_exports__MBart50Tokenizer, __webpack_exports__MBartForCausalLM, __webpack_exports__MBartForConditionalGeneration, __webpack_exports__MBartForSequenceClassification, __webpack_exports__MBartModel, __webpack_exports__MBartPreTrainedModel, __webpack_exports__MBartTokenizer, __webpack_exports__MPNetForMaskedLM, __webpack_exports__MPNetForQuestionAnswering, __webpack_exports__MPNetForSequenceClassification, __webpack_exports__MPNetForTokenClassification, __webpack_exports__MPNetModel, __webpack_exports__MPNetPreTrainedModel, __webpack_exports__MPNetTokenizer, __webpack_exports__MT5ForConditionalGeneration, __webpack_exports__MT5Model, __webpack_exports__MT5PreTrainedModel, __webpack_exports__MarianMTModel, __webpack_exports__MarianModel, __webpack_exports__MarianPreTrainedModel, __webpack_exports__MarianTokenizer, __webpack_exports__Mask2FormerImageProcessor, __webpack_exports__MaskFormerFeatureExtractor, __webpack_exports__MaskFormerForInstanceSegmentation, __webpack_exports__MaskFormerImageProcessor, __webpack_exports__MaskFormerModel, __webpack_exports__MaskFormerPreTrainedModel, __webpack_exports__MaskedLMOutput, __webpack_exports__MaxLengthCriteria, __webpack_exports__Metric3DForDepthEstimation, __webpack_exports__Metric3DPreTrainedModel, __webpack_exports__Metric3Dv2ForDepthEstimation, __webpack_exports__Metric3Dv2PreTrainedModel, __webpack_exports__MgpstrForSceneTextRecognition, __webpack_exports__MgpstrModelOutput, __webpack_exports__MgpstrPreTrainedModel, __webpack_exports__MgpstrProcessor, __webpack_exports__MgpstrTokenizer, __webpack_exports__MimiDecoderModel, __webpack_exports__MimiDecoderOutput, __webpack_exports__MimiEncoderModel, __webpack_exports__MimiEncoderOutput, __webpack_exports__MimiModel, __webpack_exports__MimiPreTrainedModel, __webpack_exports__MinLengthLogitsProcessor, __webpack_exports__MinNewTokensLengthLogitsProcessor, __webpack_exports__MistralForCausalLM, __webpack_exports__MistralModel, __webpack_exports__MistralPreTrainedModel, __webpack_exports__MobileBertForMaskedLM, __webpack_exports__MobileBertForQuestionAnswering, __webpack_exports__MobileBertForSequenceClassification, __webpack_exports__MobileBertModel, __webpack_exports__MobileBertPreTrainedModel, __webpack_exports__MobileBertTokenizer, __webpack_exports__MobileLLMForCausalLM, __webpack_exports__MobileLLMModel, __webpack_exports__MobileLLMPreTrainedModel, __webpack_exports__MobileNetV1FeatureExtractor, __webpack_exports__MobileNetV1ForImageClassification, __webpack_exports__MobileNetV1ForSemanticSegmentation, __webpack_exports__MobileNetV1ImageProcessor, __webpack_exports__MobileNetV1Model, __webpack_exports__MobileNetV1PreTrainedModel, __webpack_exports__MobileNetV2FeatureExtractor, __webpack_exports__MobileNetV2ForImageClassification, __webpack_exports__MobileNetV2ForSemanticSegmentation, __webpack_exports__MobileNetV2ImageProcessor, __webpack_exports__MobileNetV2Model, __webpack_exports__MobileNetV2PreTrainedModel, __webpack_exports__MobileNetV3FeatureExtractor, __webpack_exports__MobileNetV3ForImageClassification, __webpack_exports__MobileNetV3ForSemanticSegmentation, __webpack_exports__MobileNetV3ImageProcessor, __webpack_exports__MobileNetV3Model, __webpack_exports__MobileNetV3PreTrainedModel, __webpack_exports__MobileNetV4FeatureExtractor, __webpack_exports__MobileNetV4ForImageClassification, __webpack_exports__MobileNetV4ForSemanticSegmentation, __webpack_exports__MobileNetV4ImageProcessor, __webpack_exports__MobileNetV4Model, __webpack_exports__MobileNetV4PreTrainedModel, __webpack_exports__MobileViTFeatureExtractor, __webpack_exports__MobileViTForImageClassification, __webpack_exports__MobileViTImageProcessor, __webpack_exports__MobileViTModel, __webpack_exports__MobileViTPreTrainedModel, __webpack_exports__MobileViTV2ForImageClassification, __webpack_exports__MobileViTV2Model, __webpack_exports__MobileViTV2PreTrainedModel, __webpack_exports__ModelOutput, __webpack_exports__ModernBertForMaskedLM, __webpack_exports__ModernBertForSequenceClassification, __webpack_exports__ModernBertForTokenClassification, __webpack_exports__ModernBertModel, __webpack_exports__ModernBertPreTrainedModel, __webpack_exports__Moondream1ForConditionalGeneration, __webpack_exports__MoonshineFeatureExtractor, __webpack_exports__MoonshineForConditionalGeneration, __webpack_exports__MoonshineModel, __webpack_exports__MoonshinePreTrainedModel, __webpack_exports__MoonshineProcessor, __webpack_exports__MptForCausalLM, __webpack_exports__MptModel, __webpack_exports__MptPreTrainedModel, __webpack_exports__MultiModalityCausalLM, __webpack_exports__MultiModalityPreTrainedModel, __webpack_exports__MusicgenForCausalLM, __webpack_exports__MusicgenForConditionalGeneration, __webpack_exports__MusicgenModel, __webpack_exports__MusicgenPreTrainedModel, __webpack_exports__NllbTokenizer, __webpack_exports__NoBadWordsLogitsProcessor, __webpack_exports__NoRepeatNGramLogitsProcessor, __webpack_exports__NomicBertModel, __webpack_exports__NomicBertPreTrainedModel, __webpack_exports__NougatImageProcessor, __webpack_exports__NougatTokenizer, __webpack_exports__OPTForCausalLM, __webpack_exports__OPTModel, __webpack_exports__OPTPreTrainedModel, __webpack_exports__ObjectDetectionPipeline, __webpack_exports__Olmo2ForCausalLM, __webpack_exports__Olmo2Model, __webpack_exports__Olmo2PreTrainedModel, __webpack_exports__OlmoForCausalLM, __webpack_exports__OlmoModel, __webpack_exports__OlmoPreTrainedModel, __webpack_exports__OpenELMForCausalLM, __webpack_exports__OpenELMModel, __webpack_exports__OpenELMPreTrainedModel, __webpack_exports__OwlViTFeatureExtractor, __webpack_exports__OwlViTForObjectDetection, __webpack_exports__OwlViTImageProcessor, __webpack_exports__OwlViTModel, __webpack_exports__OwlViTPreTrainedModel, __webpack_exports__OwlViTProcessor, __webpack_exports__Owlv2ForObjectDetection, __webpack_exports__Owlv2ImageProcessor, __webpack_exports__Owlv2Model, __webpack_exports__Owlv2PreTrainedModel, __webpack_exports__PaliGemmaForConditionalGeneration, __webpack_exports__PaliGemmaPreTrainedModel, __webpack_exports__PaliGemmaProcessor, __webpack_exports__PatchTSMixerForPrediction, __webpack_exports__PatchTSMixerModel, __webpack_exports__PatchTSMixerPreTrainedModel, __webpack_exports__PatchTSTForPrediction, __webpack_exports__PatchTSTModel, __webpack_exports__PatchTSTPreTrainedModel, __webpack_exports__Phi3ForCausalLM, __webpack_exports__Phi3Model, __webpack_exports__Phi3PreTrainedModel, __webpack_exports__Phi3VForCausalLM, __webpack_exports__Phi3VImageProcessor, __webpack_exports__Phi3VPreTrainedModel, __webpack_exports__Phi3VProcessor, __webpack_exports__PhiForCausalLM, __webpack_exports__PhiModel, __webpack_exports__PhiPreTrainedModel, __webpack_exports__Pipeline, __webpack_exports__PreTrainedModel, __webpack_exports__PreTrainedTokenizer, __webpack_exports__PretrainedConfig, __webpack_exports__PretrainedMixin, __webpack_exports__Processor, __webpack_exports__PvtForImageClassification, __webpack_exports__PvtImageProcessor, __webpack_exports__PvtModel, __webpack_exports__PvtPreTrainedModel, __webpack_exports__PyAnnoteFeatureExtractor, __webpack_exports__PyAnnoteForAudioFrameClassification, __webpack_exports__PyAnnoteModel, __webpack_exports__PyAnnotePreTrainedModel, __webpack_exports__PyAnnoteProcessor, __webpack_exports__QuestionAnsweringModelOutput, __webpack_exports__QuestionAnsweringPipeline, __webpack_exports__Qwen2ForCausalLM, __webpack_exports__Qwen2Model, __webpack_exports__Qwen2PreTrainedModel, __webpack_exports__Qwen2Tokenizer, __webpack_exports__Qwen2VLForConditionalGeneration, __webpack_exports__Qwen2VLImageProcessor, __webpack_exports__Qwen2VLPreTrainedModel, __webpack_exports__Qwen2VLProcessor, __webpack_exports__Qwen3ForCausalLM, __webpack_exports__Qwen3Model, __webpack_exports__Qwen3PreTrainedModel, __webpack_exports__RFDetrForObjectDetection, __webpack_exports__RFDetrModel, __webpack_exports__RFDetrObjectDetectionOutput, __webpack_exports__RFDetrPreTrainedModel, __webpack_exports__RTDetrForObjectDetection, __webpack_exports__RTDetrImageProcessor, __webpack_exports__RTDetrModel, __webpack_exports__RTDetrObjectDetectionOutput, __webpack_exports__RTDetrPreTrainedModel, __webpack_exports__RTDetrV2ForObjectDetection, __webpack_exports__RTDetrV2Model, __webpack_exports__RTDetrV2ObjectDetectionOutput, __webpack_exports__RTDetrV2PreTrainedModel, __webpack_exports__RawAudio, __webpack_exports__RawImage, __webpack_exports__RawVideo, __webpack_exports__RawVideoFrame, __webpack_exports__RepetitionPenaltyLogitsProcessor, __webpack_exports__ResNetForImageClassification, __webpack_exports__ResNetModel, __webpack_exports__ResNetPreTrainedModel, __webpack_exports__RoFormerForMaskedLM, __webpack_exports__RoFormerForQuestionAnswering, __webpack_exports__RoFormerForSequenceClassification, __webpack_exports__RoFormerForTokenClassification, __webpack_exports__RoFormerModel, __webpack_exports__RoFormerPreTrainedModel, __webpack_exports__RoFormerTokenizer, __webpack_exports__RobertaForMaskedLM, __webpack_exports__RobertaForQuestionAnswering, __webpack_exports__RobertaForSequenceClassification, __webpack_exports__RobertaForTokenClassification, __webpack_exports__RobertaModel, __webpack_exports__RobertaPreTrainedModel, __webpack_exports__RobertaTokenizer, __webpack_exports__SamImageProcessor, __webpack_exports__SamImageSegmentationOutput, __webpack_exports__SamModel, __webpack_exports__SamPreTrainedModel, __webpack_exports__SamProcessor, __webpack_exports__SapiensForDepthEstimation, __webpack_exports__SapiensForNormalEstimation, __webpack_exports__SapiensForSemanticSegmentation, __webpack_exports__SapiensPreTrainedModel, __webpack_exports__SeamlessM4TFeatureExtractor, __webpack_exports__SegformerFeatureExtractor, __webpack_exports__SegformerForImageClassification, __webpack_exports__SegformerForSemanticSegmentation, __webpack_exports__SegformerImageProcessor, __webpack_exports__SegformerModel, __webpack_exports__SegformerPreTrainedModel, __webpack_exports__Seq2SeqLMOutput, __webpack_exports__SequenceClassifierOutput, __webpack_exports__SiglipImageProcessor, __webpack_exports__SiglipModel, __webpack_exports__SiglipPreTrainedModel, __webpack_exports__SiglipTextModel, __webpack_exports__SiglipTokenizer, __webpack_exports__SiglipVisionModel, __webpack_exports__SmolVLMForConditionalGeneration, __webpack_exports__SmolVLMImageProcessor, __webpack_exports__SmolVLMProcessor, __webpack_exports__SnacDecoderModel, __webpack_exports__SnacEncoderModel, __webpack_exports__SnacFeatureExtractor, __webpack_exports__SnacModel, __webpack_exports__SnacPreTrainedModel, __webpack_exports__SpeechT5FeatureExtractor, __webpack_exports__SpeechT5ForSpeechToText, __webpack_exports__SpeechT5ForTextToSpeech, __webpack_exports__SpeechT5HifiGan, __webpack_exports__SpeechT5Model, __webpack_exports__SpeechT5PreTrainedModel, __webpack_exports__SpeechT5Processor, __webpack_exports__SpeechT5Tokenizer, __webpack_exports__SqueezeBertForMaskedLM, __webpack_exports__SqueezeBertForQuestionAnswering, __webpack_exports__SqueezeBertForSequenceClassification, __webpack_exports__SqueezeBertModel, __webpack_exports__SqueezeBertPreTrainedModel, __webpack_exports__SqueezeBertTokenizer, __webpack_exports__StableLmForCausalLM, __webpack_exports__StableLmModel, __webpack_exports__StableLmPreTrainedModel, __webpack_exports__Starcoder2ForCausalLM, __webpack_exports__Starcoder2Model, __webpack_exports__Starcoder2PreTrainedModel, __webpack_exports__StoppingCriteria, __webpack_exports__StoppingCriteriaList, __webpack_exports__StyleTextToSpeech2Model, __webpack_exports__StyleTextToSpeech2PreTrainedModel, __webpack_exports__SummarizationPipeline, __webpack_exports__SuppressTokensAtBeginLogitsProcessor, __webpack_exports__Swin2SRForImageSuperResolution, __webpack_exports__Swin2SRImageProcessor, __webpack_exports__Swin2SRModel, __webpack_exports__Swin2SRPreTrainedModel, __webpack_exports__SwinForImageClassification, __webpack_exports__SwinForSemanticSegmentation, __webpack_exports__SwinModel, __webpack_exports__SwinPreTrainedModel, __webpack_exports__T5ForConditionalGeneration, __webpack_exports__T5Model, __webpack_exports__T5PreTrainedModel, __webpack_exports__T5Tokenizer, __webpack_exports__TableTransformerForObjectDetection, __webpack_exports__TableTransformerModel, __webpack_exports__TableTransformerObjectDetectionOutput, __webpack_exports__TableTransformerPreTrainedModel, __webpack_exports__TemperatureLogitsWarper, __webpack_exports__Tensor, __webpack_exports__Text2TextGenerationPipeline, __webpack_exports__TextClassificationPipeline, __webpack_exports__TextGenerationPipeline, __webpack_exports__TextStreamer, __webpack_exports__TextToAudioPipeline, __webpack_exports__TokenClassificationPipeline, __webpack_exports__TokenClassifierOutput, __webpack_exports__TokenizerModel, __webpack_exports__TopKLogitsWarper, __webpack_exports__TopPLogitsWarper, __webpack_exports__TrOCRForCausalLM, __webpack_exports__TrOCRPreTrainedModel, __webpack_exports__TranslationPipeline, __webpack_exports__UltravoxModel, __webpack_exports__UltravoxPreTrainedModel, __webpack_exports__UltravoxProcessor, __webpack_exports__UniSpeechForCTC, __webpack_exports__UniSpeechForSequenceClassification, __webpack_exports__UniSpeechModel, __webpack_exports__UniSpeechPreTrainedModel, __webpack_exports__UniSpeechSatForAudioFrameClassification, __webpack_exports__UniSpeechSatForCTC, __webpack_exports__UniSpeechSatForSequenceClassification, __webpack_exports__UniSpeechSatModel, __webpack_exports__UniSpeechSatPreTrainedModel, __webpack_exports__VLChatProcessor, __webpack_exports__VLMImageProcessor, __webpack_exports__ViTFeatureExtractor, __webpack_exports__ViTForImageClassification, __webpack_exports__ViTImageProcessor, __webpack_exports__ViTMAEModel, __webpack_exports__ViTMAEPreTrainedModel, __webpack_exports__ViTMSNForImageClassification, __webpack_exports__ViTMSNModel, __webpack_exports__ViTMSNPreTrainedModel, __webpack_exports__ViTModel, __webpack_exports__ViTPreTrainedModel, __webpack_exports__VisionEncoderDecoderModel, __webpack_exports__VitMatteForImageMatting, __webpack_exports__VitMatteImageProcessor, __webpack_exports__VitMattePreTrainedModel, __webpack_exports__VitPoseForPoseEstimation, __webpack_exports__VitPoseImageProcessor, __webpack_exports__VitPosePreTrainedModel, __webpack_exports__VitsModel, __webpack_exports__VitsModelOutput, __webpack_exports__VitsPreTrainedModel, __webpack_exports__VitsTokenizer, __webpack_exports__Wav2Vec2BertForCTC, __webpack_exports__Wav2Vec2BertForSequenceClassification, __webpack_exports__Wav2Vec2BertModel, __webpack_exports__Wav2Vec2BertPreTrainedModel, __webpack_exports__Wav2Vec2CTCTokenizer, __webpack_exports__Wav2Vec2FeatureExtractor, __webpack_exports__Wav2Vec2ForAudioFrameClassification, __webpack_exports__Wav2Vec2ForCTC, __webpack_exports__Wav2Vec2ForSequenceClassification, __webpack_exports__Wav2Vec2Model, __webpack_exports__Wav2Vec2PreTrainedModel, __webpack_exports__Wav2Vec2Processor, __webpack_exports__Wav2Vec2ProcessorWithLM, __webpack_exports__WavLMForAudioFrameClassification, __webpack_exports__WavLMForCTC, __webpack_exports__WavLMForSequenceClassification, __webpack_exports__WavLMForXVector, __webpack_exports__WavLMModel, __webpack_exports__WavLMPreTrainedModel, __webpack_exports__WeSpeakerFeatureExtractor, __webpack_exports__WeSpeakerResNetModel, __webpack_exports__WeSpeakerResNetPreTrainedModel, __webpack_exports__WhisperFeatureExtractor, __webpack_exports__WhisperForConditionalGeneration, __webpack_exports__WhisperModel, __webpack_exports__WhisperPreTrainedModel, __webpack_exports__WhisperProcessor, __webpack_exports__WhisperTextStreamer, __webpack_exports__WhisperTimeStampLogitsProcessor, __webpack_exports__WhisperTokenizer, __webpack_exports__XLMForQuestionAnswering, __webpack_exports__XLMForSequenceClassification, __webpack_exports__XLMForTokenClassification, __webpack_exports__XLMModel, __webpack_exports__XLMPreTrainedModel, __webpack_exports__XLMRobertaForMaskedLM, __webpack_exports__XLMRobertaForQuestionAnswering, __webpack_exports__XLMRobertaForSequenceClassification, __webpack_exports__XLMRobertaForTokenClassification, __webpack_exports__XLMRobertaModel, __webpack_exports__XLMRobertaPreTrainedModel, __webpack_exports__XLMRobertaTokenizer, __webpack_exports__XLMTokenizer, __webpack_exports__XLMWithLMHeadModel, __webpack_exports__XVectorOutput, __webpack_exports__YolosFeatureExtractor, __webpack_exports__YolosForObjectDetection, __webpack_exports__YolosImageProcessor, __webpack_exports__YolosModel, __webpack_exports__YolosObjectDetectionOutput, __webpack_exports__YolosPreTrainedModel, __webpack_exports__ZeroShotAudioClassificationPipeline, __webpack_exports__ZeroShotClassificationPipeline, __webpack_exports__ZeroShotImageClassificationPipeline, __webpack_exports__ZeroShotObjectDetectionPipeline, __webpack_exports__bankers_round, __webpack_exports__cat, __webpack_exports__cos_sim, __webpack_exports__dot, __webpack_exports__dynamic_time_warping, __webpack_exports__env, __webpack_exports__full, __webpack_exports__full_like, __webpack_exports__getKeyValueShapes, __webpack_exports__hamming, __webpack_exports__hanning, __webpack_exports__interpolate, __webpack_exports__interpolate_4d, __webpack_exports__interpolate_data, __webpack_exports__is_chinese_char, __webpack_exports__layer_norm, __webpack_exports__load_image, __webpack_exports__load_video, __webpack_exports__log_softmax, __webpack_exports__magnitude, __webpack_exports__matmul, __webpack_exports__max, __webpack_exports__mean, __webpack_exports__mean_pooling, __webpack_exports__medianFilter, __webpack_exports__mel_filter_bank, __webpack_exports__min, __webpack_exports__ones, __webpack_exports__ones_like, __webpack_exports__permute, __webpack_exports__permute_data, __webpack_exports__pipeline, __webpack_exports__quantize_embeddings, __webpack_exports__rand, __webpack_exports__read_audio, __webpack_exports__rfft, __webpack_exports__round, __webpack_exports__slice, __webpack_exports__softmax, __webpack_exports__spectrogram, __webpack_exports__stack, __webpack_exports__std_mean, __webpack_exports__topk, __webpack_exports__window_function, __webpack_exports__zeros, __webpack_exports__zeros_like;
var init_transformers_node = __esm({
  "node_modules/@huggingface/transformers/dist/transformers.node.mjs"() {
    __WEBPACK_EXTERNAL_MODULE_fs__ = __toESM(require("fs"), 1);
    init_esm();
    __WEBPACK_EXTERNAL_MODULE_onnxruntime_node_6a60201e__ = __toESM(require_dist2(), 1);
    __WEBPACK_EXTERNAL_MODULE_path__ = __toESM(require("path"), 1);
    __WEBPACK_EXTERNAL_MODULE_sharp__ = __toESM(require_lib(), 1);
    __WEBPACK_EXTERNAL_MODULE_url__ = __toESM(require("url"), 1);
    import_meta = {};
    __webpack_modules__ = {
      /***/
      "fs": (
        /*!*********************!*\
          !*** external "fs" ***!
          \*********************/
        /***/
        (module2) => {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_fs__;
        }
      ),
      /***/
      "onnxruntime-common": (
        /*!*************************************!*\
          !*** external "onnxruntime-common" ***!
          \*************************************/
        /***/
        (module2) => {
          module2.exports = esm_exports;
        }
      ),
      /***/
      "onnxruntime-node": (
        /*!***********************************!*\
          !*** external "onnxruntime-node" ***!
          \***********************************/
        /***/
        (module2) => {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_onnxruntime_node_6a60201e__;
        }
      ),
      /***/
      "path": (
        /*!***********************!*\
          !*** external "path" ***!
          \***********************/
        /***/
        (module2) => {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_path__;
        }
      ),
      /***/
      "sharp": (
        /*!************************!*\
          !*** external "sharp" ***!
          \************************/
        /***/
        (module2) => {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_sharp__;
        }
      ),
      /***/
      "url": (
        /*!**********************!*\
          !*** external "url" ***!
          \**********************/
        /***/
        (module2) => {
          module2.exports = __WEBPACK_EXTERNAL_MODULE_url__;
        }
      ),
      /***/
      "?8b6b": (
        /*!*********************************!*\
          !*** onnxruntime-web (ignored) ***!
          \*********************************/
        /***/
        () => {
        }
      ),
      /***/
      "./node_modules/@huggingface/jinja/dist/index.js": (
        /*!*******************************************************!*\
          !*** ./node_modules/@huggingface/jinja/dist/index.js ***!
          \*******************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Environment: () => (
              /* binding */
              Environment
            ),
            /* harmony export */
            Interpreter: () => (
              /* binding */
              Interpreter
            ),
            /* harmony export */
            Template: () => (
              /* binding */
              Template
            ),
            /* harmony export */
            parse: () => (
              /* binding */
              parse
            ),
            /* harmony export */
            tokenize: () => (
              /* binding */
              tokenize
            )
            /* harmony export */
          });
          var TOKEN_TYPES = Object.freeze({
            Text: "Text",
            // The text between Jinja statements or expressions
            NumericLiteral: "NumericLiteral",
            // e.g., 123
            BooleanLiteral: "BooleanLiteral",
            // true or false
            NullLiteral: "NullLiteral",
            // none
            StringLiteral: "StringLiteral",
            // 'string'
            Identifier: "Identifier",
            // Variables, functions, etc.
            Equals: "Equals",
            // =
            OpenParen: "OpenParen",
            // (
            CloseParen: "CloseParen",
            // )
            OpenStatement: "OpenStatement",
            // {%
            CloseStatement: "CloseStatement",
            // %}
            OpenExpression: "OpenExpression",
            // {{
            CloseExpression: "CloseExpression",
            // }}
            OpenSquareBracket: "OpenSquareBracket",
            // [
            CloseSquareBracket: "CloseSquareBracket",
            // ]
            OpenCurlyBracket: "OpenCurlyBracket",
            // {
            CloseCurlyBracket: "CloseCurlyBracket",
            // }
            Comma: "Comma",
            // ,
            Dot: "Dot",
            // .
            Colon: "Colon",
            // :
            Pipe: "Pipe",
            // |
            CallOperator: "CallOperator",
            // ()
            AdditiveBinaryOperator: "AdditiveBinaryOperator",
            // + -
            MultiplicativeBinaryOperator: "MultiplicativeBinaryOperator",
            // * / %
            ComparisonBinaryOperator: "ComparisonBinaryOperator",
            // < > <= >= == !=
            UnaryOperator: "UnaryOperator",
            // ! - +
            // Keywords
            Set: "Set",
            If: "If",
            For: "For",
            In: "In",
            Is: "Is",
            NotIn: "NotIn",
            Else: "Else",
            EndSet: "EndSet",
            EndIf: "EndIf",
            ElseIf: "ElseIf",
            EndFor: "EndFor",
            And: "And",
            Or: "Or",
            Not: "UnaryOperator",
            Macro: "Macro",
            EndMacro: "EndMacro",
            Break: "Break",
            Continue: "Continue"
          });
          var KEYWORDS = Object.freeze({
            set: TOKEN_TYPES.Set,
            for: TOKEN_TYPES.For,
            in: TOKEN_TYPES.In,
            is: TOKEN_TYPES.Is,
            if: TOKEN_TYPES.If,
            else: TOKEN_TYPES.Else,
            endset: TOKEN_TYPES.EndSet,
            endif: TOKEN_TYPES.EndIf,
            elif: TOKEN_TYPES.ElseIf,
            endfor: TOKEN_TYPES.EndFor,
            and: TOKEN_TYPES.And,
            or: TOKEN_TYPES.Or,
            not: TOKEN_TYPES.Not,
            "not in": TOKEN_TYPES.NotIn,
            macro: TOKEN_TYPES.Macro,
            endmacro: TOKEN_TYPES.EndMacro,
            break: TOKEN_TYPES.Break,
            continue: TOKEN_TYPES.Continue,
            // Literals
            true: TOKEN_TYPES.BooleanLiteral,
            false: TOKEN_TYPES.BooleanLiteral,
            none: TOKEN_TYPES.NullLiteral,
            // NOTE: According to the Jinja docs: The special constants true, false, and none are indeed lowercase.
            // Because that caused confusion in the past, (True used to expand to an undefined variable that was considered false),
            // all three can now also be written in title case (True, False, and None). However, for consistency, (all Jinja identifiers are lowercase)
            // you should use the lowercase versions.
            True: TOKEN_TYPES.BooleanLiteral,
            False: TOKEN_TYPES.BooleanLiteral,
            None: TOKEN_TYPES.NullLiteral
          });
          var Token = class {
            /**
             * Constructs a new Token.
             * @param {string} value The raw value as seen inside the source code.
             * @param {TokenType} type The type of token.
             */
            constructor(value, type) {
              this.value = value;
              this.type = type;
            }
          };
          function isWord(char) {
            return /\w/.test(char);
          }
          function isInteger(char) {
            return /[0-9]/.test(char);
          }
          var ORDERED_MAPPING_TABLE = [
            // Control sequences
            ["{%", TOKEN_TYPES.OpenStatement],
            ["%}", TOKEN_TYPES.CloseStatement],
            ["{{", TOKEN_TYPES.OpenExpression],
            ["}}", TOKEN_TYPES.CloseExpression],
            // Single character tokens
            ["(", TOKEN_TYPES.OpenParen],
            [")", TOKEN_TYPES.CloseParen],
            ["{", TOKEN_TYPES.OpenCurlyBracket],
            ["}", TOKEN_TYPES.CloseCurlyBracket],
            ["[", TOKEN_TYPES.OpenSquareBracket],
            ["]", TOKEN_TYPES.CloseSquareBracket],
            [",", TOKEN_TYPES.Comma],
            [".", TOKEN_TYPES.Dot],
            [":", TOKEN_TYPES.Colon],
            ["|", TOKEN_TYPES.Pipe],
            // Comparison operators
            ["<=", TOKEN_TYPES.ComparisonBinaryOperator],
            [">=", TOKEN_TYPES.ComparisonBinaryOperator],
            ["==", TOKEN_TYPES.ComparisonBinaryOperator],
            ["!=", TOKEN_TYPES.ComparisonBinaryOperator],
            ["<", TOKEN_TYPES.ComparisonBinaryOperator],
            [">", TOKEN_TYPES.ComparisonBinaryOperator],
            // Arithmetic operators
            ["+", TOKEN_TYPES.AdditiveBinaryOperator],
            ["-", TOKEN_TYPES.AdditiveBinaryOperator],
            ["*", TOKEN_TYPES.MultiplicativeBinaryOperator],
            ["/", TOKEN_TYPES.MultiplicativeBinaryOperator],
            ["%", TOKEN_TYPES.MultiplicativeBinaryOperator],
            // Assignment operator
            ["=", TOKEN_TYPES.Equals]
          ];
          var ESCAPE_CHARACTERS = /* @__PURE__ */ new Map([
            ["n", "\n"],
            // New line
            ["t", "	"],
            // Horizontal tab
            ["r", "\r"],
            // Carriage return
            ["b", "\b"],
            // Backspace
            ["f", "\f"],
            // Form feed
            ["v", "\v"],
            // Vertical tab
            ["'", "'"],
            // Single quote
            ['"', '"'],
            // Double quote
            ["\\", "\\"]
            // Backslash
          ]);
          function preprocess(template, options = {}) {
            if (template.endsWith("\n")) {
              template = template.slice(0, -1);
            }
            template = template.replace(/{#.*?#}/gs, "{##}");
            if (options.lstrip_blocks) {
              template = template.replace(/^[ \t]*({[#%])/gm, "$1");
            }
            if (options.trim_blocks) {
              template = template.replace(/([#%]})\n/g, "$1");
            }
            return template.replace(/{##}/g, "").replace(/-%}\s*/g, "%}").replace(/\s*{%-/g, "{%").replace(/-}}\s*/g, "}}").replace(/\s*{{-/g, "{{");
          }
          function tokenize(source, options = {}) {
            const tokens = [];
            const src = preprocess(source, options);
            let cursorPosition = 0;
            const consumeWhile = (predicate) => {
              let str = "";
              while (predicate(src[cursorPosition])) {
                if (src[cursorPosition] === "\\") {
                  ++cursorPosition;
                  if (cursorPosition >= src.length)
                    throw new SyntaxError("Unexpected end of input");
                  const escaped = src[cursorPosition++];
                  const unescaped = ESCAPE_CHARACTERS.get(escaped);
                  if (unescaped === void 0) {
                    throw new SyntaxError(`Unexpected escaped character: ${escaped}`);
                  }
                  str += unescaped;
                  continue;
                }
                str += src[cursorPosition++];
                if (cursorPosition >= src.length)
                  throw new SyntaxError("Unexpected end of input");
              }
              return str;
            };
            main:
              while (cursorPosition < src.length) {
                const lastTokenType = tokens.at(-1)?.type;
                if (lastTokenType === void 0 || lastTokenType === TOKEN_TYPES.CloseStatement || lastTokenType === TOKEN_TYPES.CloseExpression) {
                  let text = "";
                  while (cursorPosition < src.length && // Keep going until we hit the next Jinja statement or expression
                  !(src[cursorPosition] === "{" && (src[cursorPosition + 1] === "%" || src[cursorPosition + 1] === "{"))) {
                    text += src[cursorPosition++];
                  }
                  if (text.length > 0) {
                    tokens.push(new Token(text, TOKEN_TYPES.Text));
                    continue;
                  }
                }
                consumeWhile((char2) => /\s/.test(char2));
                const char = src[cursorPosition];
                if (char === "-" || char === "+") {
                  const lastTokenType2 = tokens.at(-1)?.type;
                  if (lastTokenType2 === TOKEN_TYPES.Text || lastTokenType2 === void 0) {
                    throw new SyntaxError(`Unexpected character: ${char}`);
                  }
                  switch (lastTokenType2) {
                    case TOKEN_TYPES.Identifier:
                    case TOKEN_TYPES.NumericLiteral:
                    case TOKEN_TYPES.BooleanLiteral:
                    case TOKEN_TYPES.NullLiteral:
                    case TOKEN_TYPES.StringLiteral:
                    case TOKEN_TYPES.CloseParen:
                    case TOKEN_TYPES.CloseSquareBracket:
                      break;
                    default: {
                      ++cursorPosition;
                      const num = consumeWhile(isInteger);
                      tokens.push(
                        new Token(`${char}${num}`, num.length > 0 ? TOKEN_TYPES.NumericLiteral : TOKEN_TYPES.UnaryOperator)
                      );
                      continue;
                    }
                  }
                }
                for (const [char2, token] of ORDERED_MAPPING_TABLE) {
                  const slice2 = src.slice(cursorPosition, cursorPosition + char2.length);
                  if (slice2 === char2) {
                    tokens.push(new Token(char2, token));
                    cursorPosition += char2.length;
                    continue main;
                  }
                }
                if (char === "'" || char === '"') {
                  ++cursorPosition;
                  const str = consumeWhile((c) => c !== char);
                  tokens.push(new Token(str, TOKEN_TYPES.StringLiteral));
                  ++cursorPosition;
                  continue;
                }
                if (isInteger(char)) {
                  const num = consumeWhile(isInteger);
                  tokens.push(new Token(num, TOKEN_TYPES.NumericLiteral));
                  continue;
                }
                if (isWord(char)) {
                  const word = consumeWhile(isWord);
                  const type = Object.hasOwn(KEYWORDS, word) ? KEYWORDS[word] : TOKEN_TYPES.Identifier;
                  if (type === TOKEN_TYPES.In && tokens.at(-1)?.type === TOKEN_TYPES.Not) {
                    tokens.pop();
                    tokens.push(new Token("not in", TOKEN_TYPES.NotIn));
                  } else {
                    tokens.push(new Token(word, type));
                  }
                  continue;
                }
                throw new SyntaxError(`Unexpected character: ${char}`);
              }
            return tokens;
          }
          var Statement = class {
            constructor() {
              __publicField(this, "type", "Statement");
            }
          };
          var Program = class extends Statement {
            constructor(body) {
              super();
              __publicField(this, "type", "Program");
              this.body = body;
            }
          };
          var If = class extends Statement {
            constructor(test, body, alternate) {
              super();
              __publicField(this, "type", "If");
              this.test = test;
              this.body = body;
              this.alternate = alternate;
            }
          };
          var For = class extends Statement {
            constructor(loopvar, iterable, body, defaultBlock) {
              super();
              __publicField(this, "type", "For");
              this.loopvar = loopvar;
              this.iterable = iterable;
              this.body = body;
              this.defaultBlock = defaultBlock;
            }
          };
          var Break = class extends Statement {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "Break");
            }
          };
          var Continue = class extends Statement {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "Continue");
            }
          };
          var SetStatement = class extends Statement {
            constructor(assignee, value, body) {
              super();
              __publicField(this, "type", "Set");
              this.assignee = assignee;
              this.value = value;
              this.body = body;
            }
          };
          var Macro = class extends Statement {
            constructor(name, args, body) {
              super();
              __publicField(this, "type", "Macro");
              this.name = name;
              this.args = args;
              this.body = body;
            }
          };
          var Expression = class extends Statement {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "Expression");
            }
          };
          var MemberExpression = class extends Expression {
            constructor(object, property, computed) {
              super();
              __publicField(this, "type", "MemberExpression");
              this.object = object;
              this.property = property;
              this.computed = computed;
            }
          };
          var CallExpression = class extends Expression {
            constructor(callee, args) {
              super();
              __publicField(this, "type", "CallExpression");
              this.callee = callee;
              this.args = args;
            }
          };
          var Identifier = class extends Expression {
            /**
             * @param {string} value The name of the identifier
             */
            constructor(value) {
              super();
              __publicField(this, "type", "Identifier");
              this.value = value;
            }
          };
          var Literal = class extends Expression {
            constructor(value) {
              super();
              __publicField(this, "type", "Literal");
              this.value = value;
            }
          };
          var NumericLiteral = class extends Literal {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "NumericLiteral");
            }
          };
          var StringLiteral = class extends Literal {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "StringLiteral");
            }
          };
          var BooleanLiteral = class extends Literal {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "BooleanLiteral");
            }
          };
          var NullLiteral = class extends Literal {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "NullLiteral");
            }
          };
          var ArrayLiteral = class extends Literal {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "ArrayLiteral");
            }
          };
          var TupleLiteral = class extends Literal {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "TupleLiteral");
            }
          };
          var ObjectLiteral = class extends Literal {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "ObjectLiteral");
            }
          };
          var BinaryExpression = class extends Expression {
            constructor(operator, left, right) {
              super();
              __publicField(this, "type", "BinaryExpression");
              this.operator = operator;
              this.left = left;
              this.right = right;
            }
          };
          var FilterExpression = class extends Expression {
            constructor(operand, filter) {
              super();
              __publicField(this, "type", "FilterExpression");
              this.operand = operand;
              this.filter = filter;
            }
          };
          var SelectExpression = class extends Expression {
            constructor(iterable, test) {
              super();
              __publicField(this, "type", "SelectExpression");
              this.iterable = iterable;
              this.test = test;
            }
          };
          var TestExpression = class extends Expression {
            constructor(operand, negate, test) {
              super();
              __publicField(this, "type", "TestExpression");
              this.operand = operand;
              this.negate = negate;
              this.test = test;
            }
          };
          var UnaryExpression = class extends Expression {
            constructor(operator, argument) {
              super();
              __publicField(this, "type", "UnaryExpression");
              this.operator = operator;
              this.argument = argument;
            }
          };
          var SliceExpression = class extends Expression {
            constructor(start = void 0, stop = void 0, step = void 0) {
              super();
              __publicField(this, "type", "SliceExpression");
              this.start = start;
              this.stop = stop;
              this.step = step;
            }
          };
          var KeywordArgumentExpression = class extends Expression {
            constructor(key, value) {
              super();
              __publicField(this, "type", "KeywordArgumentExpression");
              this.key = key;
              this.value = value;
            }
          };
          function parse(tokens) {
            const program = new Program([]);
            let current = 0;
            function expect(type, error) {
              const prev = tokens[current++];
              if (!prev || prev.type !== type) {
                throw new Error(`Parser Error: ${error}. ${prev.type} !== ${type}.`);
              }
              return prev;
            }
            function parseAny() {
              switch (tokens[current].type) {
                case TOKEN_TYPES.Text:
                  return parseText();
                case TOKEN_TYPES.OpenStatement:
                  return parseJinjaStatement();
                case TOKEN_TYPES.OpenExpression:
                  return parseJinjaExpression();
                default:
                  throw new SyntaxError(`Unexpected token type: ${tokens[current].type}`);
              }
            }
            function not(...types) {
              return current + types.length <= tokens.length && types.some((type, i) => type !== tokens[current + i].type);
            }
            function is(...types) {
              return current + types.length <= tokens.length && types.every((type, i) => type === tokens[current + i].type);
            }
            function parseText() {
              return new StringLiteral(expect(TOKEN_TYPES.Text, "Expected text token").value);
            }
            function parseJinjaStatement() {
              expect(TOKEN_TYPES.OpenStatement, "Expected opening statement token");
              let result;
              switch (tokens[current].type) {
                case TOKEN_TYPES.Set:
                  ++current;
                  result = parseSetStatement();
                  expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
                  break;
                case TOKEN_TYPES.If:
                  ++current;
                  result = parseIfStatement();
                  expect(TOKEN_TYPES.OpenStatement, "Expected {% token");
                  expect(TOKEN_TYPES.EndIf, "Expected endif token");
                  expect(TOKEN_TYPES.CloseStatement, "Expected %} token");
                  break;
                case TOKEN_TYPES.Macro:
                  ++current;
                  result = parseMacroStatement();
                  expect(TOKEN_TYPES.OpenStatement, "Expected {% token");
                  expect(TOKEN_TYPES.EndMacro, "Expected endmacro token");
                  expect(TOKEN_TYPES.CloseStatement, "Expected %} token");
                  break;
                case TOKEN_TYPES.For:
                  ++current;
                  result = parseForStatement();
                  expect(TOKEN_TYPES.OpenStatement, "Expected {% token");
                  expect(TOKEN_TYPES.EndFor, "Expected endfor token");
                  expect(TOKEN_TYPES.CloseStatement, "Expected %} token");
                  break;
                case TOKEN_TYPES.Break:
                  ++current;
                  expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
                  result = new Break();
                  break;
                case TOKEN_TYPES.Continue:
                  ++current;
                  expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
                  result = new Continue();
                  break;
                default:
                  throw new SyntaxError(`Unknown statement type: ${tokens[current].type}`);
              }
              return result;
            }
            function parseJinjaExpression() {
              expect(TOKEN_TYPES.OpenExpression, "Expected opening expression token");
              const result = parseExpression();
              expect(TOKEN_TYPES.CloseExpression, "Expected closing expression token");
              return result;
            }
            function parseSetStatement() {
              const left = parseExpression();
              if (is(TOKEN_TYPES.Equals)) {
                ++current;
                const value = parseExpression();
                return new SetStatement(left, value, []);
              } else {
                const body = [];
                expect(TOKEN_TYPES.CloseStatement, "Expected %} token");
                while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type === TOKEN_TYPES.EndSet)) {
                  const another = parseAny();
                  body.push(another);
                }
                expect(TOKEN_TYPES.OpenStatement, "Expected {% token");
                expect(TOKEN_TYPES.EndSet, "Expected endset token");
                return new SetStatement(left, null, body);
              }
            }
            function parseIfStatement() {
              const test = parseExpression();
              expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
              const body = [];
              const alternate = [];
              while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && (tokens[current + 1]?.type === TOKEN_TYPES.ElseIf || tokens[current + 1]?.type === TOKEN_TYPES.Else || tokens[current + 1]?.type === TOKEN_TYPES.EndIf))) {
                body.push(parseAny());
              }
              if (tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type !== TOKEN_TYPES.EndIf) {
                ++current;
                if (is(TOKEN_TYPES.ElseIf)) {
                  expect(TOKEN_TYPES.ElseIf, "Expected elseif token");
                  alternate.push(parseIfStatement());
                } else {
                  expect(TOKEN_TYPES.Else, "Expected else token");
                  expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
                  while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type === TOKEN_TYPES.EndIf)) {
                    alternate.push(parseAny());
                  }
                }
              }
              return new If(test, body, alternate);
            }
            function parseMacroStatement() {
              const name = parsePrimaryExpression();
              if (name.type !== "Identifier") {
                throw new SyntaxError(`Expected identifier following macro statement`);
              }
              const args = parseArgs();
              expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
              const body = [];
              while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndMacro)) {
                body.push(parseAny());
              }
              return new Macro(name, args, body);
            }
            function parseExpressionSequence(primary = false) {
              const fn = primary ? parsePrimaryExpression : parseExpression;
              const expressions = [fn()];
              const isTuple = is(TOKEN_TYPES.Comma);
              while (isTuple) {
                ++current;
                expressions.push(fn());
                if (!is(TOKEN_TYPES.Comma)) {
                  break;
                }
              }
              return isTuple ? new TupleLiteral(expressions) : expressions[0];
            }
            function parseForStatement() {
              const loopVariable = parseExpressionSequence(true);
              if (!(loopVariable instanceof Identifier || loopVariable instanceof TupleLiteral)) {
                throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${loopVariable.type} instead`);
              }
              expect(TOKEN_TYPES.In, "Expected `in` keyword following loop variable");
              const iterable = parseExpression();
              expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
              const body = [];
              while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndFor) && not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.Else)) {
                body.push(parseAny());
              }
              const alternative = [];
              if (is(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.Else)) {
                ++current;
                ++current;
                expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
                while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndFor)) {
                  alternative.push(parseAny());
                }
              }
              return new For(loopVariable, iterable, body, alternative);
            }
            function parseExpression() {
              return parseIfExpression();
            }
            function parseIfExpression() {
              const a = parseLogicalOrExpression();
              if (is(TOKEN_TYPES.If)) {
                ++current;
                const predicate = parseLogicalOrExpression();
                if (is(TOKEN_TYPES.Else)) {
                  ++current;
                  const b = parseLogicalOrExpression();
                  return new If(predicate, [a], [b]);
                } else {
                  return new SelectExpression(a, predicate);
                }
              }
              return a;
            }
            function parseLogicalOrExpression() {
              let left = parseLogicalAndExpression();
              while (is(TOKEN_TYPES.Or)) {
                const operator = tokens[current];
                ++current;
                const right = parseLogicalAndExpression();
                left = new BinaryExpression(operator, left, right);
              }
              return left;
            }
            function parseLogicalAndExpression() {
              let left = parseLogicalNegationExpression();
              while (is(TOKEN_TYPES.And)) {
                const operator = tokens[current];
                ++current;
                const right = parseLogicalNegationExpression();
                left = new BinaryExpression(operator, left, right);
              }
              return left;
            }
            function parseLogicalNegationExpression() {
              let right;
              while (is(TOKEN_TYPES.Not)) {
                const operator = tokens[current];
                ++current;
                const arg = parseLogicalNegationExpression();
                right = new UnaryExpression(operator, arg);
              }
              return right ?? parseComparisonExpression();
            }
            function parseComparisonExpression() {
              let left = parseAdditiveExpression();
              while (is(TOKEN_TYPES.ComparisonBinaryOperator) || is(TOKEN_TYPES.In) || is(TOKEN_TYPES.NotIn)) {
                const operator = tokens[current];
                ++current;
                const right = parseAdditiveExpression();
                left = new BinaryExpression(operator, left, right);
              }
              return left;
            }
            function parseAdditiveExpression() {
              let left = parseMultiplicativeExpression();
              while (is(TOKEN_TYPES.AdditiveBinaryOperator)) {
                const operator = tokens[current];
                ++current;
                const right = parseMultiplicativeExpression();
                left = new BinaryExpression(operator, left, right);
              }
              return left;
            }
            function parseCallMemberExpression() {
              const member = parseMemberExpression(parsePrimaryExpression());
              if (is(TOKEN_TYPES.OpenParen)) {
                return parseCallExpression(member);
              }
              return member;
            }
            function parseCallExpression(callee) {
              let expression = new CallExpression(callee, parseArgs());
              expression = parseMemberExpression(expression);
              if (is(TOKEN_TYPES.OpenParen)) {
                expression = parseCallExpression(expression);
              }
              return expression;
            }
            function parseArgs() {
              expect(TOKEN_TYPES.OpenParen, "Expected opening parenthesis for arguments list");
              const args = parseArgumentsList();
              expect(TOKEN_TYPES.CloseParen, "Expected closing parenthesis for arguments list");
              return args;
            }
            function parseArgumentsList() {
              const args = [];
              while (!is(TOKEN_TYPES.CloseParen)) {
                let argument = parseExpression();
                if (is(TOKEN_TYPES.Equals)) {
                  ++current;
                  if (!(argument instanceof Identifier)) {
                    throw new SyntaxError(`Expected identifier for keyword argument`);
                  }
                  const value = parseExpression();
                  argument = new KeywordArgumentExpression(argument, value);
                }
                args.push(argument);
                if (is(TOKEN_TYPES.Comma)) {
                  ++current;
                }
              }
              return args;
            }
            function parseMemberExpressionArgumentsList() {
              const slices = [];
              let isSlice = false;
              while (!is(TOKEN_TYPES.CloseSquareBracket)) {
                if (is(TOKEN_TYPES.Colon)) {
                  slices.push(void 0);
                  ++current;
                  isSlice = true;
                } else {
                  slices.push(parseExpression());
                  if (is(TOKEN_TYPES.Colon)) {
                    ++current;
                    isSlice = true;
                  }
                }
              }
              if (slices.length === 0) {
                throw new SyntaxError(`Expected at least one argument for member/slice expression`);
              }
              if (isSlice) {
                if (slices.length > 3) {
                  throw new SyntaxError(`Expected 0-3 arguments for slice expression`);
                }
                return new SliceExpression(...slices);
              }
              return slices[0];
            }
            function parseMemberExpression(object) {
              while (is(TOKEN_TYPES.Dot) || is(TOKEN_TYPES.OpenSquareBracket)) {
                const operator = tokens[current];
                ++current;
                let property;
                const computed = operator.type !== TOKEN_TYPES.Dot;
                if (computed) {
                  property = parseMemberExpressionArgumentsList();
                  expect(TOKEN_TYPES.CloseSquareBracket, "Expected closing square bracket");
                } else {
                  property = parsePrimaryExpression();
                  if (property.type !== "Identifier") {
                    throw new SyntaxError(`Expected identifier following dot operator`);
                  }
                }
                object = new MemberExpression(object, property, computed);
              }
              return object;
            }
            function parseMultiplicativeExpression() {
              let left = parseTestExpression();
              while (is(TOKEN_TYPES.MultiplicativeBinaryOperator)) {
                const operator = tokens[current];
                ++current;
                const right = parseTestExpression();
                left = new BinaryExpression(operator, left, right);
              }
              return left;
            }
            function parseTestExpression() {
              let operand = parseFilterExpression();
              while (is(TOKEN_TYPES.Is)) {
                ++current;
                const negate = is(TOKEN_TYPES.Not);
                if (negate) {
                  ++current;
                }
                let filter = parsePrimaryExpression();
                if (filter instanceof BooleanLiteral) {
                  filter = new Identifier(filter.value.toString());
                } else if (filter instanceof NullLiteral) {
                  filter = new Identifier("none");
                }
                if (!(filter instanceof Identifier)) {
                  throw new SyntaxError(`Expected identifier for the test`);
                }
                operand = new TestExpression(operand, negate, filter);
              }
              return operand;
            }
            function parseFilterExpression() {
              let operand = parseCallMemberExpression();
              while (is(TOKEN_TYPES.Pipe)) {
                ++current;
                let filter = parsePrimaryExpression();
                if (!(filter instanceof Identifier)) {
                  throw new SyntaxError(`Expected identifier for the filter`);
                }
                if (is(TOKEN_TYPES.OpenParen)) {
                  filter = parseCallExpression(filter);
                }
                operand = new FilterExpression(operand, filter);
              }
              return operand;
            }
            function parsePrimaryExpression() {
              const token = tokens[current];
              switch (token.type) {
                case TOKEN_TYPES.NumericLiteral:
                  ++current;
                  return new NumericLiteral(Number(token.value));
                case TOKEN_TYPES.StringLiteral:
                  ++current;
                  return new StringLiteral(token.value);
                case TOKEN_TYPES.BooleanLiteral:
                  ++current;
                  return new BooleanLiteral(token.value.toLowerCase() === "true");
                case TOKEN_TYPES.NullLiteral:
                  ++current;
                  return new NullLiteral(null);
                case TOKEN_TYPES.Identifier:
                  ++current;
                  return new Identifier(token.value);
                case TOKEN_TYPES.OpenParen: {
                  ++current;
                  const expression = parseExpressionSequence();
                  if (tokens[current].type !== TOKEN_TYPES.CloseParen) {
                    throw new SyntaxError(`Expected closing parenthesis, got ${tokens[current].type} instead`);
                  }
                  ++current;
                  return expression;
                }
                case TOKEN_TYPES.OpenSquareBracket: {
                  ++current;
                  const values = [];
                  while (!is(TOKEN_TYPES.CloseSquareBracket)) {
                    values.push(parseExpression());
                    if (is(TOKEN_TYPES.Comma)) {
                      ++current;
                    }
                  }
                  ++current;
                  return new ArrayLiteral(values);
                }
                case TOKEN_TYPES.OpenCurlyBracket: {
                  ++current;
                  const values = /* @__PURE__ */ new Map();
                  while (!is(TOKEN_TYPES.CloseCurlyBracket)) {
                    const key = parseExpression();
                    expect(TOKEN_TYPES.Colon, "Expected colon between key and value in object literal");
                    const value = parseExpression();
                    values.set(key, value);
                    if (is(TOKEN_TYPES.Comma)) {
                      ++current;
                    }
                  }
                  ++current;
                  return new ObjectLiteral(values);
                }
                default:
                  throw new SyntaxError(`Unexpected token: ${token.type}`);
              }
            }
            while (current < tokens.length) {
              program.body.push(parseAny());
            }
            return program;
          }
          function range(start, stop, step = 1) {
            if (stop === void 0) {
              stop = start;
              start = 0;
            }
            const result = [];
            for (let i = start; i < stop; i += step) {
              result.push(i);
            }
            return result;
          }
          function slice(array, start, stop, step = 1) {
            const direction = Math.sign(step);
            if (direction >= 0) {
              start = (start ?? (start = 0)) < 0 ? Math.max(array.length + start, 0) : Math.min(start, array.length);
              stop = (stop ?? (stop = array.length)) < 0 ? Math.max(array.length + stop, 0) : Math.min(stop, array.length);
            } else {
              start = (start ?? (start = array.length - 1)) < 0 ? Math.max(array.length + start, -1) : Math.min(start, array.length - 1);
              stop = (stop ?? (stop = -1)) < -1 ? Math.max(array.length + stop, -1) : Math.min(stop, array.length - 1);
            }
            const result = [];
            for (let i = start; direction * i < direction * stop; i += step) {
              result.push(array[i]);
            }
            return result;
          }
          function titleCase(value) {
            return value.replace(/\b\w/g, (c) => c.toUpperCase());
          }
          var BreakControl = class extends Error {
          };
          var ContinueControl = class extends Error {
          };
          var RuntimeValue = class {
            /**
             * Creates a new RuntimeValue.
             */
            constructor(value = void 0) {
              __publicField(this, "type", "RuntimeValue");
              __publicField(this, "value");
              /**
               * A collection of built-in functions for this type.
               */
              __publicField(this, "builtins", /* @__PURE__ */ new Map());
              this.value = value;
            }
            /**
             * Determines truthiness or falsiness of the runtime value.
             * This function should be overridden by subclasses if it has custom truthiness criteria.
             * @returns {BooleanValue} BooleanValue(true) if the value is truthy, BooleanValue(false) otherwise.
             */
            __bool__() {
              return new BooleanValue(!!this.value);
            }
          };
          var NumericValue = class extends RuntimeValue {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "NumericValue");
            }
          };
          var StringValue = class extends RuntimeValue {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "StringValue");
              __publicField(this, "builtins", /* @__PURE__ */ new Map([
                [
                  "upper",
                  new FunctionValue(() => {
                    return new StringValue(this.value.toUpperCase());
                  })
                ],
                [
                  "lower",
                  new FunctionValue(() => {
                    return new StringValue(this.value.toLowerCase());
                  })
                ],
                [
                  "strip",
                  new FunctionValue(() => {
                    return new StringValue(this.value.trim());
                  })
                ],
                [
                  "title",
                  new FunctionValue(() => {
                    return new StringValue(titleCase(this.value));
                  })
                ],
                ["length", new NumericValue(this.value.length)],
                [
                  "rstrip",
                  new FunctionValue(() => {
                    return new StringValue(this.value.trimEnd());
                  })
                ],
                [
                  "lstrip",
                  new FunctionValue(() => {
                    return new StringValue(this.value.trimStart());
                  })
                ],
                [
                  "startswith",
                  new FunctionValue((args) => {
                    if (args.length === 0) {
                      throw new Error("startswith() requires at least one argument");
                    }
                    const prefix = args[0];
                    if (!(prefix instanceof StringValue)) {
                      throw new Error("startswith() argument must be a string");
                    }
                    return new BooleanValue(this.value.startsWith(prefix.value));
                  })
                ],
                [
                  "endswith",
                  new FunctionValue((args) => {
                    if (args.length === 0) {
                      throw new Error("endswith() requires at least one argument");
                    }
                    const suffix = args[0];
                    if (!(suffix instanceof StringValue)) {
                      throw new Error("endswith() argument must be a string");
                    }
                    return new BooleanValue(this.value.endsWith(suffix.value));
                  })
                ],
                [
                  "split",
                  // follows Python's `str.split(sep=None, maxsplit=-1)` function behavior
                  // https://docs.python.org/3.13/library/stdtypes.html#str.split
                  new FunctionValue((args) => {
                    const sep = args[0] ?? new NullValue();
                    if (!(sep instanceof StringValue || sep instanceof NullValue)) {
                      throw new Error("sep argument must be a string or null");
                    }
                    const maxsplit = args[1] ?? new NumericValue(-1);
                    if (!(maxsplit instanceof NumericValue)) {
                      throw new Error("maxsplit argument must be a number");
                    }
                    let result = [];
                    if (sep instanceof NullValue) {
                      const text = this.value.trimStart();
                      for (const { 0: match, index } of text.matchAll(/\S+/g)) {
                        if (maxsplit.value !== -1 && result.length >= maxsplit.value && index !== void 0) {
                          result.push(match + text.slice(index + match.length));
                          break;
                        }
                        result.push(match);
                      }
                    } else {
                      if (sep.value === "") {
                        throw new Error("empty separator");
                      }
                      result = this.value.split(sep.value);
                      if (maxsplit.value !== -1 && result.length > maxsplit.value) {
                        result.push(result.splice(maxsplit.value).join(sep.value));
                      }
                    }
                    return new ArrayValue(result.map((part) => new StringValue(part)));
                  })
                ]
              ]));
            }
          };
          var BooleanValue = class extends RuntimeValue {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "BooleanValue");
            }
          };
          var ObjectValue = class extends RuntimeValue {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "ObjectValue");
              __publicField(this, "builtins", /* @__PURE__ */ new Map([
                [
                  "get",
                  new FunctionValue(([key, defaultValue]) => {
                    if (!(key instanceof StringValue)) {
                      throw new Error(`Object key must be a string: got ${key.type}`);
                    }
                    return this.value.get(key.value) ?? defaultValue ?? new NullValue();
                  })
                ],
                [
                  "items",
                  new FunctionValue(() => {
                    return new ArrayValue(
                      Array.from(this.value.entries()).map(([key, value]) => new ArrayValue([new StringValue(key), value]))
                    );
                  })
                ]
              ]));
            }
            /**
             * NOTE: necessary to override since all JavaScript arrays are considered truthy,
             * while only non-empty Python arrays are consider truthy.
             *
             * e.g.,
             *  - JavaScript:  {} && 5 -> 5
             *  - Python:      {} and 5 -> {}
             */
            __bool__() {
              return new BooleanValue(this.value.size > 0);
            }
          };
          var KeywordArgumentsValue = class extends ObjectValue {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "KeywordArgumentsValue");
            }
          };
          var ArrayValue = class extends RuntimeValue {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "ArrayValue");
              __publicField(this, "builtins", /* @__PURE__ */ new Map([["length", new NumericValue(this.value.length)]]));
            }
            /**
             * NOTE: necessary to override since all JavaScript arrays are considered truthy,
             * while only non-empty Python arrays are consider truthy.
             *
             * e.g.,
             *  - JavaScript:  [] && 5 -> 5
             *  - Python:      [] and 5 -> []
             */
            __bool__() {
              return new BooleanValue(this.value.length > 0);
            }
          };
          var TupleValue = class extends ArrayValue {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "TupleValue");
            }
          };
          var FunctionValue = class extends RuntimeValue {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "FunctionValue");
            }
          };
          var NullValue = class extends RuntimeValue {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "NullValue");
            }
          };
          var UndefinedValue = class extends RuntimeValue {
            constructor() {
              super(...arguments);
              __publicField(this, "type", "UndefinedValue");
            }
          };
          var Environment = class {
            constructor(parent) {
              /**
               * The variables declared in this environment.
               */
              __publicField(this, "variables", /* @__PURE__ */ new Map([
                [
                  "namespace",
                  new FunctionValue((args) => {
                    if (args.length === 0) {
                      return new ObjectValue(/* @__PURE__ */ new Map());
                    }
                    if (args.length !== 1 || !(args[0] instanceof ObjectValue)) {
                      throw new Error("`namespace` expects either zero arguments or a single object argument");
                    }
                    return args[0];
                  })
                ]
              ]));
              /**
               * The tests available in this environment.
               */
              __publicField(this, "tests", /* @__PURE__ */ new Map([
                ["boolean", (operand) => operand.type === "BooleanValue"],
                ["callable", (operand) => operand instanceof FunctionValue],
                [
                  "odd",
                  (operand) => {
                    if (operand.type !== "NumericValue") {
                      throw new Error(`Cannot apply test "odd" to type: ${operand.type}`);
                    }
                    return operand.value % 2 !== 0;
                  }
                ],
                [
                  "even",
                  (operand) => {
                    if (operand.type !== "NumericValue") {
                      throw new Error(`Cannot apply test "even" to type: ${operand.type}`);
                    }
                    return operand.value % 2 === 0;
                  }
                ],
                ["false", (operand) => operand.type === "BooleanValue" && !operand.value],
                ["true", (operand) => operand.type === "BooleanValue" && operand.value],
                ["none", (operand) => operand.type === "NullValue"],
                ["string", (operand) => operand.type === "StringValue"],
                ["number", (operand) => operand.type === "NumericValue"],
                ["integer", (operand) => operand.type === "NumericValue" && Number.isInteger(operand.value)],
                ["iterable", (operand) => operand.type === "ArrayValue" || operand.type === "StringValue"],
                ["mapping", (operand) => operand.type === "ObjectValue"],
                [
                  "lower",
                  (operand) => {
                    const str = operand.value;
                    return operand.type === "StringValue" && str === str.toLowerCase();
                  }
                ],
                [
                  "upper",
                  (operand) => {
                    const str = operand.value;
                    return operand.type === "StringValue" && str === str.toUpperCase();
                  }
                ],
                ["none", (operand) => operand.type === "NullValue"],
                ["defined", (operand) => operand.type !== "UndefinedValue"],
                ["undefined", (operand) => operand.type === "UndefinedValue"],
                ["equalto", (a, b) => a.value === b.value],
                ["eq", (a, b) => a.value === b.value]
              ]));
              this.parent = parent;
            }
            /**
             * Set the value of a variable in the current environment.
             */
            set(name, value) {
              return this.declareVariable(name, convertToRuntimeValues(value));
            }
            declareVariable(name, value) {
              if (this.variables.has(name)) {
                throw new SyntaxError(`Variable already declared: ${name}`);
              }
              this.variables.set(name, value);
              return value;
            }
            // private assignVariable(name: string, value: AnyRuntimeValue): AnyRuntimeValue {
            // 	const env = this.resolve(name);
            // 	env.variables.set(name, value);
            // 	return value;
            // }
            /**
             * Set variable in the current scope.
             * See https://jinja.palletsprojects.com/en/3.0.x/templates/#assignments for more information.
             */
            setVariable(name, value) {
              this.variables.set(name, value);
              return value;
            }
            /**
             * Resolve the environment in which the variable is declared.
             * @param {string} name The name of the variable.
             * @returns {Environment} The environment in which the variable is declared.
             */
            resolve(name) {
              if (this.variables.has(name)) {
                return this;
              }
              if (this.parent) {
                return this.parent.resolve(name);
              }
              throw new Error(`Unknown variable: ${name}`);
            }
            lookupVariable(name) {
              try {
                return this.resolve(name).variables.get(name) ?? new UndefinedValue();
              } catch {
                return new UndefinedValue();
              }
            }
          };
          var Interpreter = class {
            constructor(env4) {
              __publicField(this, "global");
              this.global = env4 ?? new Environment();
            }
            /**
             * Run the program.
             */
            run(program) {
              return this.evaluate(program, this.global);
            }
            /**
             * Evaluates expressions following the binary operation type.
             */
            evaluateBinaryExpression(node, environment) {
              const left = this.evaluate(node.left, environment);
              switch (node.operator.value) {
                case "and":
                  return left.__bool__().value ? this.evaluate(node.right, environment) : left;
                case "or":
                  return left.__bool__().value ? left : this.evaluate(node.right, environment);
              }
              const right = this.evaluate(node.right, environment);
              switch (node.operator.value) {
                case "==":
                  return new BooleanValue(left.value == right.value);
                case "!=":
                  return new BooleanValue(left.value != right.value);
              }
              if (left instanceof UndefinedValue || right instanceof UndefinedValue) {
                throw new Error("Cannot perform operation on undefined values");
              } else if (left instanceof NullValue || right instanceof NullValue) {
                throw new Error("Cannot perform operation on null values");
              } else if (left instanceof NumericValue && right instanceof NumericValue) {
                switch (node.operator.value) {
                  case "+":
                    return new NumericValue(left.value + right.value);
                  case "-":
                    return new NumericValue(left.value - right.value);
                  case "*":
                    return new NumericValue(left.value * right.value);
                  case "/":
                    return new NumericValue(left.value / right.value);
                  case "%":
                    return new NumericValue(left.value % right.value);
                  case "<":
                    return new BooleanValue(left.value < right.value);
                  case ">":
                    return new BooleanValue(left.value > right.value);
                  case ">=":
                    return new BooleanValue(left.value >= right.value);
                  case "<=":
                    return new BooleanValue(left.value <= right.value);
                }
              } else if (left instanceof ArrayValue && right instanceof ArrayValue) {
                switch (node.operator.value) {
                  case "+":
                    return new ArrayValue(left.value.concat(right.value));
                }
              } else if (right instanceof ArrayValue) {
                const member = right.value.find((x2) => x2.value === left.value) !== void 0;
                switch (node.operator.value) {
                  case "in":
                    return new BooleanValue(member);
                  case "not in":
                    return new BooleanValue(!member);
                }
              }
              if (left instanceof StringValue || right instanceof StringValue) {
                switch (node.operator.value) {
                  case "+":
                    return new StringValue(left.value.toString() + right.value.toString());
                }
              }
              if (left instanceof StringValue && right instanceof StringValue) {
                switch (node.operator.value) {
                  case "in":
                    return new BooleanValue(right.value.includes(left.value));
                  case "not in":
                    return new BooleanValue(!right.value.includes(left.value));
                }
              }
              if (left instanceof StringValue && right instanceof ObjectValue) {
                switch (node.operator.value) {
                  case "in":
                    return new BooleanValue(right.value.has(left.value));
                  case "not in":
                    return new BooleanValue(!right.value.has(left.value));
                }
              }
              throw new SyntaxError(`Unknown operator "${node.operator.value}" between ${left.type} and ${right.type}`);
            }
            evaluateArguments(args, environment) {
              const positionalArguments = [];
              const keywordArguments = /* @__PURE__ */ new Map();
              for (const argument of args) {
                if (argument.type === "KeywordArgumentExpression") {
                  const kwarg = argument;
                  keywordArguments.set(kwarg.key.value, this.evaluate(kwarg.value, environment));
                } else {
                  if (keywordArguments.size > 0) {
                    throw new Error("Positional arguments must come before keyword arguments");
                  }
                  positionalArguments.push(this.evaluate(argument, environment));
                }
              }
              return [positionalArguments, keywordArguments];
            }
            /**
             * Evaluates expressions following the filter operation type.
             */
            evaluateFilterExpression(node, environment) {
              const operand = this.evaluate(node.operand, environment);
              if (node.filter.type === "Identifier") {
                const filter = node.filter;
                if (filter.value === "tojson") {
                  return new StringValue(toJSON(operand));
                }
                if (operand instanceof ArrayValue) {
                  switch (filter.value) {
                    case "list":
                      return operand;
                    case "first":
                      return operand.value[0];
                    case "last":
                      return operand.value[operand.value.length - 1];
                    case "length":
                      return new NumericValue(operand.value.length);
                    case "reverse":
                      return new ArrayValue(operand.value.reverse());
                    case "sort":
                      return new ArrayValue(
                        operand.value.sort((a, b) => {
                          if (a.type !== b.type) {
                            throw new Error(`Cannot compare different types: ${a.type} and ${b.type}`);
                          }
                          switch (a.type) {
                            case "NumericValue":
                              return a.value - b.value;
                            case "StringValue":
                              return a.value.localeCompare(b.value);
                            default:
                              throw new Error(`Cannot compare type: ${a.type}`);
                          }
                        })
                      );
                    case "join":
                      return new StringValue(operand.value.map((x2) => x2.value).join(""));
                    case "string":
                      return new StringValue(toJSON(operand));
                    default:
                      throw new Error(`Unknown ArrayValue filter: ${filter.value}`);
                  }
                } else if (operand instanceof StringValue) {
                  switch (filter.value) {
                    case "length":
                      return new NumericValue(operand.value.length);
                    case "upper":
                      return new StringValue(operand.value.toUpperCase());
                    case "lower":
                      return new StringValue(operand.value.toLowerCase());
                    case "title":
                      return new StringValue(titleCase(operand.value));
                    case "capitalize":
                      return new StringValue(operand.value.charAt(0).toUpperCase() + operand.value.slice(1));
                    case "trim":
                      return new StringValue(operand.value.trim());
                    case "indent":
                      return new StringValue(
                        operand.value.split("\n").map(
                          (x2, i) => (
                            // By default, don't indent the first line or empty lines
                            i === 0 || x2.length === 0 ? x2 : "    " + x2
                          )
                        ).join("\n")
                      );
                    case "join":
                    case "string":
                      return operand;
                    default:
                      throw new Error(`Unknown StringValue filter: ${filter.value}`);
                  }
                } else if (operand instanceof NumericValue) {
                  switch (filter.value) {
                    case "abs":
                      return new NumericValue(Math.abs(operand.value));
                    default:
                      throw new Error(`Unknown NumericValue filter: ${filter.value}`);
                  }
                } else if (operand instanceof ObjectValue) {
                  switch (filter.value) {
                    case "items":
                      return new ArrayValue(
                        Array.from(operand.value.entries()).map(([key, value]) => new ArrayValue([new StringValue(key), value]))
                      );
                    case "length":
                      return new NumericValue(operand.value.size);
                    default:
                      throw new Error(`Unknown ObjectValue filter: ${filter.value}`);
                  }
                }
                throw new Error(`Cannot apply filter "${filter.value}" to type: ${operand.type}`);
              } else if (node.filter.type === "CallExpression") {
                const filter = node.filter;
                if (filter.callee.type !== "Identifier") {
                  throw new Error(`Unknown filter: ${filter.callee.type}`);
                }
                const filterName = filter.callee.value;
                if (filterName === "tojson") {
                  const [, kwargs] = this.evaluateArguments(filter.args, environment);
                  const indent = kwargs.get("indent") ?? new NullValue();
                  if (!(indent instanceof NumericValue || indent instanceof NullValue)) {
                    throw new Error("If set, indent must be a number");
                  }
                  return new StringValue(toJSON(operand, indent.value));
                } else if (filterName === "join") {
                  let value;
                  if (operand instanceof StringValue) {
                    value = Array.from(operand.value);
                  } else if (operand instanceof ArrayValue) {
                    value = operand.value.map((x2) => x2.value);
                  } else {
                    throw new Error(`Cannot apply filter "${filterName}" to type: ${operand.type}`);
                  }
                  const [args, kwargs] = this.evaluateArguments(filter.args, environment);
                  const separator = args.at(0) ?? kwargs.get("separator") ?? new StringValue("");
                  if (!(separator instanceof StringValue)) {
                    throw new Error("separator must be a string");
                  }
                  return new StringValue(value.join(separator.value));
                }
                if (operand instanceof ArrayValue) {
                  switch (filterName) {
                    case "selectattr":
                    case "rejectattr": {
                      const select = filterName === "selectattr";
                      if (operand.value.some((x2) => !(x2 instanceof ObjectValue))) {
                        throw new Error(`\`${filterName}\` can only be applied to array of objects`);
                      }
                      if (filter.args.some((x2) => x2.type !== "StringLiteral")) {
                        throw new Error(`arguments of \`${filterName}\` must be strings`);
                      }
                      const [attr, testName, value] = filter.args.map((x2) => this.evaluate(x2, environment));
                      let testFunction;
                      if (testName) {
                        const test = environment.tests.get(testName.value);
                        if (!test) {
                          throw new Error(`Unknown test: ${testName.value}`);
                        }
                        testFunction = test;
                      } else {
                        testFunction = (...x2) => x2[0].__bool__().value;
                      }
                      const filtered = operand.value.filter((item) => {
                        const a = item.value.get(attr.value);
                        const result = a ? testFunction(a, value) : false;
                        return select ? result : !result;
                      });
                      return new ArrayValue(filtered);
                    }
                    case "map": {
                      const [, kwargs] = this.evaluateArguments(filter.args, environment);
                      if (kwargs.has("attribute")) {
                        const attr = kwargs.get("attribute");
                        if (!(attr instanceof StringValue)) {
                          throw new Error("attribute must be a string");
                        }
                        const defaultValue = kwargs.get("default");
                        const mapped = operand.value.map((item) => {
                          if (!(item instanceof ObjectValue)) {
                            throw new Error("items in map must be an object");
                          }
                          return item.value.get(attr.value) ?? defaultValue ?? new UndefinedValue();
                        });
                        return new ArrayValue(mapped);
                      } else {
                        throw new Error("`map` expressions without `attribute` set are not currently supported.");
                      }
                    }
                  }
                  throw new Error(`Unknown ArrayValue filter: ${filterName}`);
                } else if (operand instanceof StringValue) {
                  switch (filterName) {
                    case "indent": {
                      const [args, kwargs] = this.evaluateArguments(filter.args, environment);
                      const width = args.at(0) ?? kwargs.get("width") ?? new NumericValue(4);
                      if (!(width instanceof NumericValue)) {
                        throw new Error("width must be a number");
                      }
                      const first = args.at(1) ?? kwargs.get("first") ?? new BooleanValue(false);
                      const blank = args.at(2) ?? kwargs.get("blank") ?? new BooleanValue(false);
                      const lines = operand.value.split("\n");
                      const indent = " ".repeat(width.value);
                      const indented = lines.map(
                        (x2, i) => !first.value && i === 0 || !blank.value && x2.length === 0 ? x2 : indent + x2
                      );
                      return new StringValue(indented.join("\n"));
                    }
                  }
                  throw new Error(`Unknown StringValue filter: ${filterName}`);
                } else {
                  throw new Error(`Cannot apply filter "${filterName}" to type: ${operand.type}`);
                }
              }
              throw new Error(`Unknown filter: ${node.filter.type}`);
            }
            /**
             * Evaluates expressions following the test operation type.
             */
            evaluateTestExpression(node, environment) {
              const operand = this.evaluate(node.operand, environment);
              const test = environment.tests.get(node.test.value);
              if (!test) {
                throw new Error(`Unknown test: ${node.test.value}`);
              }
              const result = test(operand);
              return new BooleanValue(node.negate ? !result : result);
            }
            /**
             * Evaluates expressions following the unary operation type.
             */
            evaluateUnaryExpression(node, environment) {
              const argument = this.evaluate(node.argument, environment);
              switch (node.operator.value) {
                case "not":
                  return new BooleanValue(!argument.value);
                default:
                  throw new SyntaxError(`Unknown operator: ${node.operator.value}`);
              }
            }
            evalProgram(program, environment) {
              return this.evaluateBlock(program.body, environment);
            }
            evaluateBlock(statements, environment) {
              let result = "";
              for (const statement of statements) {
                const lastEvaluated = this.evaluate(statement, environment);
                if (lastEvaluated.type !== "NullValue" && lastEvaluated.type !== "UndefinedValue") {
                  result += lastEvaluated.value;
                }
              }
              return new StringValue(result);
            }
            evaluateIdentifier(node, environment) {
              return environment.lookupVariable(node.value);
            }
            evaluateCallExpression(expr, environment) {
              const [args, kwargs] = this.evaluateArguments(expr.args, environment);
              if (kwargs.size > 0) {
                args.push(new KeywordArgumentsValue(kwargs));
              }
              const fn = this.evaluate(expr.callee, environment);
              if (fn.type !== "FunctionValue") {
                throw new Error(`Cannot call something that is not a function: got ${fn.type}`);
              }
              return fn.value(args, environment);
            }
            evaluateSliceExpression(object, expr, environment) {
              if (!(object instanceof ArrayValue || object instanceof StringValue)) {
                throw new Error("Slice object must be an array or string");
              }
              const start = this.evaluate(expr.start, environment);
              const stop = this.evaluate(expr.stop, environment);
              const step = this.evaluate(expr.step, environment);
              if (!(start instanceof NumericValue || start instanceof UndefinedValue)) {
                throw new Error("Slice start must be numeric or undefined");
              }
              if (!(stop instanceof NumericValue || stop instanceof UndefinedValue)) {
                throw new Error("Slice stop must be numeric or undefined");
              }
              if (!(step instanceof NumericValue || step instanceof UndefinedValue)) {
                throw new Error("Slice step must be numeric or undefined");
              }
              if (object instanceof ArrayValue) {
                return new ArrayValue(slice(object.value, start.value, stop.value, step.value));
              } else {
                return new StringValue(slice(Array.from(object.value), start.value, stop.value, step.value).join(""));
              }
            }
            evaluateMemberExpression(expr, environment) {
              const object = this.evaluate(expr.object, environment);
              let property;
              if (expr.computed) {
                if (expr.property.type === "SliceExpression") {
                  return this.evaluateSliceExpression(object, expr.property, environment);
                } else {
                  property = this.evaluate(expr.property, environment);
                }
              } else {
                property = new StringValue(expr.property.value);
              }
              let value;
              if (object instanceof ObjectValue) {
                if (!(property instanceof StringValue)) {
                  throw new Error(`Cannot access property with non-string: got ${property.type}`);
                }
                value = object.value.get(property.value) ?? object.builtins.get(property.value);
              } else if (object instanceof ArrayValue || object instanceof StringValue) {
                if (property instanceof NumericValue) {
                  value = object.value.at(property.value);
                  if (object instanceof StringValue) {
                    value = new StringValue(object.value.at(property.value));
                  }
                } else if (property instanceof StringValue) {
                  value = object.builtins.get(property.value);
                } else {
                  throw new Error(`Cannot access property with non-string/non-number: got ${property.type}`);
                }
              } else {
                if (!(property instanceof StringValue)) {
                  throw new Error(`Cannot access property with non-string: got ${property.type}`);
                }
                value = object.builtins.get(property.value);
              }
              return value instanceof RuntimeValue ? value : new UndefinedValue();
            }
            evaluateSet(node, environment) {
              const rhs = node.value ? this.evaluate(node.value, environment) : this.evaluateBlock(node.body, environment);
              if (node.assignee.type === "Identifier") {
                const variableName = node.assignee.value;
                environment.setVariable(variableName, rhs);
              } else if (node.assignee.type === "MemberExpression") {
                const member = node.assignee;
                const object = this.evaluate(member.object, environment);
                if (!(object instanceof ObjectValue)) {
                  throw new Error("Cannot assign to member of non-object");
                }
                if (member.property.type !== "Identifier") {
                  throw new Error("Cannot assign to member with non-identifier property");
                }
                object.value.set(member.property.value, rhs);
              } else {
                throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(node.assignee)}`);
              }
              return new NullValue();
            }
            evaluateIf(node, environment) {
              const test = this.evaluate(node.test, environment);
              return this.evaluateBlock(test.__bool__().value ? node.body : node.alternate, environment);
            }
            evaluateFor(node, environment) {
              const scope = new Environment(environment);
              let test, iterable;
              if (node.iterable.type === "SelectExpression") {
                const select = node.iterable;
                iterable = this.evaluate(select.iterable, scope);
                test = select.test;
              } else {
                iterable = this.evaluate(node.iterable, scope);
              }
              if (!(iterable instanceof ArrayValue)) {
                throw new Error(`Expected iterable type in for loop: got ${iterable.type}`);
              }
              const items = [];
              const scopeUpdateFunctions = [];
              for (let i = 0; i < iterable.value.length; ++i) {
                const loopScope = new Environment(scope);
                const current = iterable.value[i];
                let scopeUpdateFunction;
                if (node.loopvar.type === "Identifier") {
                  scopeUpdateFunction = (scope2) => scope2.setVariable(node.loopvar.value, current);
                } else if (node.loopvar.type === "TupleLiteral") {
                  const loopvar = node.loopvar;
                  if (current.type !== "ArrayValue") {
                    throw new Error(`Cannot unpack non-iterable type: ${current.type}`);
                  }
                  const c = current;
                  if (loopvar.value.length !== c.value.length) {
                    throw new Error(`Too ${loopvar.value.length > c.value.length ? "few" : "many"} items to unpack`);
                  }
                  scopeUpdateFunction = (scope2) => {
                    for (let j = 0; j < loopvar.value.length; ++j) {
                      if (loopvar.value[j].type !== "Identifier") {
                        throw new Error(`Cannot unpack non-identifier type: ${loopvar.value[j].type}`);
                      }
                      scope2.setVariable(loopvar.value[j].value, c.value[j]);
                    }
                  };
                } else {
                  throw new Error(`Invalid loop variable(s): ${node.loopvar.type}`);
                }
                if (test) {
                  scopeUpdateFunction(loopScope);
                  const testValue = this.evaluate(test, loopScope);
                  if (!testValue.__bool__().value) {
                    continue;
                  }
                }
                items.push(current);
                scopeUpdateFunctions.push(scopeUpdateFunction);
              }
              let result = "";
              let noIteration = true;
              for (let i = 0; i < items.length; ++i) {
                const loop = /* @__PURE__ */ new Map([
                  ["index", new NumericValue(i + 1)],
                  ["index0", new NumericValue(i)],
                  ["revindex", new NumericValue(items.length - i)],
                  ["revindex0", new NumericValue(items.length - i - 1)],
                  ["first", new BooleanValue(i === 0)],
                  ["last", new BooleanValue(i === items.length - 1)],
                  ["length", new NumericValue(items.length)],
                  ["previtem", i > 0 ? items[i - 1] : new UndefinedValue()],
                  ["nextitem", i < items.length - 1 ? items[i + 1] : new UndefinedValue()]
                ]);
                scope.setVariable("loop", new ObjectValue(loop));
                scopeUpdateFunctions[i](scope);
                try {
                  const evaluated = this.evaluateBlock(node.body, scope);
                  result += evaluated.value;
                } catch (err) {
                  if (err instanceof ContinueControl) {
                    continue;
                  }
                  if (err instanceof BreakControl) {
                    break;
                  }
                  throw err;
                }
                noIteration = false;
              }
              if (noIteration) {
                const defaultEvaluated = this.evaluateBlock(node.defaultBlock, scope);
                result += defaultEvaluated.value;
              }
              return new StringValue(result);
            }
            /**
             * See https://jinja.palletsprojects.com/en/3.1.x/templates/#macros for more information.
             */
            evaluateMacro(node, environment) {
              environment.setVariable(
                node.name.value,
                new FunctionValue((args, scope) => {
                  const macroScope = new Environment(scope);
                  args = args.slice();
                  let kwargs;
                  if (args.at(-1)?.type === "KeywordArgumentsValue") {
                    kwargs = args.pop();
                  }
                  for (let i = 0; i < node.args.length; ++i) {
                    const nodeArg = node.args[i];
                    const passedArg = args[i];
                    if (nodeArg.type === "Identifier") {
                      const identifier = nodeArg;
                      if (!passedArg) {
                        throw new Error(`Missing positional argument: ${identifier.value}`);
                      }
                      macroScope.setVariable(identifier.value, passedArg);
                    } else if (nodeArg.type === "KeywordArgumentExpression") {
                      const kwarg = nodeArg;
                      const value = passedArg ?? // Try positional arguments first
                      kwargs?.value.get(kwarg.key.value) ?? // Look in user-passed kwargs
                      this.evaluate(kwarg.value, macroScope);
                      macroScope.setVariable(kwarg.key.value, value);
                    } else {
                      throw new Error(`Unknown argument type: ${nodeArg.type}`);
                    }
                  }
                  return this.evaluateBlock(node.body, macroScope);
                })
              );
              return new NullValue();
            }
            evaluate(statement, environment) {
              if (statement === void 0)
                return new UndefinedValue();
              switch (statement.type) {
                case "Program":
                  return this.evalProgram(statement, environment);
                case "Set":
                  return this.evaluateSet(statement, environment);
                case "If":
                  return this.evaluateIf(statement, environment);
                case "For":
                  return this.evaluateFor(statement, environment);
                case "Macro":
                  return this.evaluateMacro(statement, environment);
                case "Break":
                  throw new BreakControl();
                case "Continue":
                  throw new ContinueControl();
                case "NumericLiteral":
                  return new NumericValue(Number(statement.value));
                case "StringLiteral":
                  return new StringValue(statement.value);
                case "BooleanLiteral":
                  return new BooleanValue(statement.value);
                case "NullLiteral":
                  return new NullValue(statement.value);
                case "ArrayLiteral":
                  return new ArrayValue(statement.value.map((x2) => this.evaluate(x2, environment)));
                case "TupleLiteral":
                  return new TupleValue(statement.value.map((x2) => this.evaluate(x2, environment)));
                case "ObjectLiteral": {
                  const mapping = /* @__PURE__ */ new Map();
                  for (const [key, value] of statement.value) {
                    const evaluatedKey = this.evaluate(key, environment);
                    if (!(evaluatedKey instanceof StringValue)) {
                      throw new Error(`Object keys must be strings: got ${evaluatedKey.type}`);
                    }
                    mapping.set(evaluatedKey.value, this.evaluate(value, environment));
                  }
                  return new ObjectValue(mapping);
                }
                case "Identifier":
                  return this.evaluateIdentifier(statement, environment);
                case "CallExpression":
                  return this.evaluateCallExpression(statement, environment);
                case "MemberExpression":
                  return this.evaluateMemberExpression(statement, environment);
                case "UnaryExpression":
                  return this.evaluateUnaryExpression(statement, environment);
                case "BinaryExpression":
                  return this.evaluateBinaryExpression(statement, environment);
                case "FilterExpression":
                  return this.evaluateFilterExpression(statement, environment);
                case "TestExpression":
                  return this.evaluateTestExpression(statement, environment);
                default:
                  throw new SyntaxError(`Unknown node type: ${statement.type}`);
              }
            }
          };
          function convertToRuntimeValues(input) {
            switch (typeof input) {
              case "number":
                return new NumericValue(input);
              case "string":
                return new StringValue(input);
              case "boolean":
                return new BooleanValue(input);
              case "undefined":
                return new UndefinedValue();
              case "object":
                if (input === null) {
                  return new NullValue();
                } else if (Array.isArray(input)) {
                  return new ArrayValue(input.map(convertToRuntimeValues));
                } else {
                  return new ObjectValue(
                    new Map(Object.entries(input).map(([key, value]) => [key, convertToRuntimeValues(value)]))
                  );
                }
              case "function":
                return new FunctionValue((args, _scope) => {
                  const result = input(...args.map((x2) => x2.value)) ?? null;
                  return convertToRuntimeValues(result);
                });
              default:
                throw new Error(`Cannot convert to runtime value: ${input}`);
            }
          }
          function toJSON(input, indent, depth) {
            const currentDepth = depth ?? 0;
            switch (input.type) {
              case "NullValue":
              case "UndefinedValue":
                return "null";
              case "NumericValue":
              case "StringValue":
              case "BooleanValue":
                return JSON.stringify(input.value);
              case "ArrayValue":
              case "ObjectValue": {
                const indentValue = indent ? " ".repeat(indent) : "";
                const basePadding = "\n" + indentValue.repeat(currentDepth);
                const childrenPadding = basePadding + indentValue;
                if (input.type === "ArrayValue") {
                  const core = input.value.map((x2) => toJSON(x2, indent, currentDepth + 1));
                  return indent ? `[${childrenPadding}${core.join(`,${childrenPadding}`)}${basePadding}]` : `[${core.join(", ")}]`;
                } else {
                  const core = Array.from(input.value.entries()).map(([key, value]) => {
                    const v = `"${key}": ${toJSON(value, indent, currentDepth + 1)}`;
                    return indent ? `${childrenPadding}${v}` : v;
                  });
                  return indent ? `{${core.join(",")}${basePadding}}` : `{${core.join(", ")}}`;
                }
              }
              default:
                throw new Error(`Cannot convert to JSON: ${input.type}`);
            }
          }
          var NEWLINE = "\n";
          var OPEN_STATEMENT = "{%- ";
          var CLOSE_STATEMENT = " -%}";
          var OPERATOR_PRECEDENCE = {
            MultiplicativeBinaryOperator: 2,
            AdditiveBinaryOperator: 1,
            ComparisonBinaryOperator: 0
          };
          function format(program, indent = "	") {
            const indentStr = typeof indent === "number" ? " ".repeat(indent) : indent;
            const body = formatStatements(program.body, 0, indentStr);
            return body.replace(/\n$/, "");
          }
          function createStatement(...text) {
            return OPEN_STATEMENT + text.join(" ") + CLOSE_STATEMENT;
          }
          function formatStatements(stmts, depth, indentStr) {
            return stmts.map((stmt) => formatStatement(stmt, depth, indentStr)).join(NEWLINE);
          }
          function formatStatement(node, depth, indentStr) {
            const pad = indentStr.repeat(depth);
            switch (node.type) {
              case "Program":
                return formatStatements(node.body, depth, indentStr);
              case "If":
                return formatIf(node, depth, indentStr);
              case "For":
                return formatFor(node, depth, indentStr);
              case "Set":
                return formatSet(node, depth, indentStr);
              case "Macro":
                return formatMacro(node, depth, indentStr);
              case "Break":
                return pad + createStatement("break");
              case "Continue":
                return pad + createStatement("continue");
              default:
                return pad + "{{- " + formatExpression(node) + " -}}";
            }
          }
          function formatIf(node, depth, indentStr) {
            const pad = indentStr.repeat(depth);
            const clauses = [];
            let current = node;
            while (current) {
              clauses.push({ test: current.test, body: current.body });
              if (current.alternate.length === 1 && current.alternate[0].type === "If") {
                current = current.alternate[0];
              } else {
                break;
              }
            }
            let out = pad + createStatement("if", formatExpression(clauses[0].test)) + NEWLINE + formatStatements(clauses[0].body, depth + 1, indentStr);
            for (let i = 1; i < clauses.length; i++) {
              out += NEWLINE + pad + createStatement("elif", formatExpression(clauses[i].test)) + NEWLINE + formatStatements(clauses[i].body, depth + 1, indentStr);
            }
            if (current && current.alternate.length > 0) {
              out += NEWLINE + pad + createStatement("else") + NEWLINE + formatStatements(current.alternate, depth + 1, indentStr);
            }
            out += NEWLINE + pad + createStatement("endif");
            return out;
          }
          function formatFor(node, depth, indentStr) {
            const pad = indentStr.repeat(depth);
            let formattedIterable = "";
            if (node.iterable.type === "SelectExpression") {
              const n = node.iterable;
              formattedIterable = `${formatExpression(n.iterable)} if ${formatExpression(n.test)}`;
            } else {
              formattedIterable = formatExpression(node.iterable);
            }
            let out = pad + createStatement("for", formatExpression(node.loopvar), "in", formattedIterable) + NEWLINE + formatStatements(node.body, depth + 1, indentStr);
            if (node.defaultBlock.length > 0) {
              out += NEWLINE + pad + createStatement("else") + NEWLINE + formatStatements(node.defaultBlock, depth + 1, indentStr);
            }
            out += NEWLINE + pad + createStatement("endfor");
            return out;
          }
          function formatSet(node, depth, indentStr) {
            const pad = indentStr.repeat(depth);
            const left = formatExpression(node.assignee);
            const right = node.value ? formatExpression(node.value) : "";
            const value = pad + createStatement("set", `${left}${node.value ? " = " + right : ""}`);
            if (node.body.length === 0) {
              return value;
            }
            return value + NEWLINE + formatStatements(node.body, depth + 1, indentStr) + NEWLINE + pad + createStatement("endset");
          }
          function formatMacro(node, depth, indentStr) {
            const pad = indentStr.repeat(depth);
            const args = node.args.map(formatExpression).join(", ");
            return pad + createStatement("macro", `${node.name.value}(${args})`) + NEWLINE + formatStatements(node.body, depth + 1, indentStr) + NEWLINE + pad + createStatement("endmacro");
          }
          function formatExpression(node, parentPrec = -1) {
            switch (node.type) {
              case "Identifier":
                return node.value;
              case "NullLiteral":
                return "none";
              case "NumericLiteral":
              case "BooleanLiteral":
                return `${node.value}`;
              case "StringLiteral":
                return JSON.stringify(node.value);
              case "BinaryExpression": {
                const n = node;
                const thisPrecedence = OPERATOR_PRECEDENCE[n.operator.type] ?? 0;
                const left = formatExpression(n.left, thisPrecedence);
                const right = formatExpression(n.right, thisPrecedence + 1);
                const expr = `${left} ${n.operator.value} ${right}`;
                return thisPrecedence < parentPrec ? `(${expr})` : expr;
              }
              case "UnaryExpression": {
                const n = node;
                const val = n.operator.value + (n.operator.value === "not" ? " " : "") + formatExpression(n.argument, Infinity);
                return val;
              }
              case "LogicalNegationExpression":
                return `not ${formatExpression(node.argument, Infinity)}`;
              case "CallExpression": {
                const n = node;
                const args = n.args.map((a) => formatExpression(a, -1)).join(", ");
                return `${formatExpression(n.callee, -1)}(${args})`;
              }
              case "MemberExpression": {
                const n = node;
                let obj = formatExpression(n.object, -1);
                if (n.object.type !== "Identifier") {
                  obj = `(${obj})`;
                }
                let prop = formatExpression(n.property, -1);
                if (!n.computed && n.property.type !== "Identifier") {
                  prop = `(${prop})`;
                }
                return n.computed ? `${obj}[${prop}]` : `${obj}.${prop}`;
              }
              case "FilterExpression": {
                const n = node;
                const operand = formatExpression(n.operand, Infinity);
                if (n.filter.type === "CallExpression") {
                  return `${operand} | ${formatExpression(n.filter, -1)}`;
                }
                return `${operand} | ${n.filter.value}`;
              }
              case "SelectExpression": {
                const n = node;
                return `${formatExpression(n.iterable, -1)} | select(${formatExpression(n.test, -1)})`;
              }
              case "TestExpression": {
                const n = node;
                return `${formatExpression(n.operand, -1)} is${n.negate ? " not" : ""} ${n.test.value}`;
              }
              case "ArrayLiteral":
              case "TupleLiteral": {
                const elems = node.value.map((e) => formatExpression(e, -1));
                const brackets = node.type === "ArrayLiteral" ? "[]" : "()";
                return `${brackets[0]}${elems.join(", ")}${brackets[1]}`;
              }
              case "ObjectLiteral": {
                const entries = Array.from(node.value.entries()).map(
                  ([k, v]) => `${formatExpression(k, -1)}: ${formatExpression(v, -1)}`
                );
                return `{ ${entries.join(", ")} }`;
              }
              case "SliceExpression": {
                const n = node;
                const s = n.start ? formatExpression(n.start, -1) : "";
                const t = n.stop ? formatExpression(n.stop, -1) : "";
                const st = n.step ? `:${formatExpression(n.step, -1)}` : "";
                return `${s}:${t}${st}`;
              }
              case "KeywordArgumentExpression": {
                const n = node;
                return `${n.key.value}=${formatExpression(n.value, -1)}`;
              }
              case "If": {
                const n = node;
                const test = formatExpression(n.test, -1);
                const body = formatExpression(n.body[0], 0);
                const alternate = formatExpression(n.alternate[0], -1);
                return `${body} if ${test} else ${alternate}`;
              }
              default:
                throw new Error(`Unknown expression type: ${node.type}`);
            }
          }
          var Template = class {
            /**
             * @param {string} template The template string
             */
            constructor(template) {
              __publicField(this, "parsed");
              const tokens = tokenize(template, {
                lstrip_blocks: true,
                trim_blocks: true
              });
              this.parsed = parse(tokens);
            }
            render(items) {
              const env4 = new Environment();
              env4.set("false", false);
              env4.set("true", true);
              env4.set("raise_exception", (args) => {
                throw new Error(args);
              });
              env4.set("range", range);
              if (items) {
                for (const [key, value] of Object.entries(items)) {
                  env4.set(key, value);
                }
              }
              const interpreter = new Interpreter(env4);
              const result = interpreter.run(this.parsed);
              return result.value;
            }
            format(options) {
              return format(this.parsed, options?.indent || "	");
            }
          };
        }
      ),
      /***/
      "./src/backends/onnx.js": (
        /*!******************************!*\
          !*** ./src/backends/onnx.js ***!
          \******************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          var onnxruntime_web__WEBPACK_IMPORTED_MODULE_2___namespace_cache;
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Tensor: () => (
              /* reexport safe */
              onnxruntime_common__WEBPACK_IMPORTED_MODULE_3__.Tensor
            ),
            /* harmony export */
            createInferenceSession: () => (
              /* binding */
              createInferenceSession
            ),
            /* harmony export */
            deviceToExecutionProviders: () => (
              /* binding */
              deviceToExecutionProviders
            ),
            /* harmony export */
            isONNXProxy: () => (
              /* binding */
              isONNXProxy
            ),
            /* harmony export */
            isONNXTensor: () => (
              /* binding */
              isONNXTensor
            )
            /* harmony export */
          });
          var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../env.js */
            "./src/env.js"
          );
          var onnxruntime_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! onnxruntime-node */
            "onnxruntime-node"
          );
          var onnxruntime_web__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! onnxruntime-web */
            "?8b6b"
          );
          var onnxruntime_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! onnxruntime-common */
            "onnxruntime-common"
          );
          const DEVICE_TO_EXECUTION_PROVIDER_MAPPING = Object.freeze({
            auto: null,
            // Auto-detect based on device and environment
            gpu: null,
            // Auto-detect GPU
            cpu: "cpu",
            // CPU
            wasm: "wasm",
            // WebAssembly
            webgpu: "webgpu",
            // WebGPU
            cuda: "cuda",
            // CUDA
            dml: "dml",
            // DirectML
            webnn: { name: "webnn", deviceType: "cpu" },
            // WebNN (default)
            "webnn-npu": { name: "webnn", deviceType: "npu" },
            // WebNN NPU
            "webnn-gpu": { name: "webnn", deviceType: "gpu" },
            // WebNN GPU
            "webnn-cpu": { name: "webnn", deviceType: "cpu" }
            // WebNN CPU
          });
          const supportedDevices = [];
          let defaultDevices;
          let ONNX;
          const ORT_SYMBOL = Symbol.for("onnxruntime");
          if (ORT_SYMBOL in globalThis) {
            ONNX = globalThis[ORT_SYMBOL];
          } else if (_env_js__WEBPACK_IMPORTED_MODULE_0__.apis.IS_NODE_ENV) {
            ONNX = onnxruntime_node__WEBPACK_IMPORTED_MODULE_1__["default"] ?? onnxruntime_node__WEBPACK_IMPORTED_MODULE_1__;
            switch (process.platform) {
              case "win32":
                supportedDevices.push("dml");
                break;
              case "linux":
                if (process.arch === "x64") {
                  supportedDevices.push("cuda");
                }
                break;
              case "darwin":
                break;
            }
            supportedDevices.push("cpu");
            defaultDevices = ["cpu"];
          } else {
            ONNX = onnxruntime_web__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (onnxruntime_web__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__2.t(onnxruntime_web__WEBPACK_IMPORTED_MODULE_2__, 2));
            if (_env_js__WEBPACK_IMPORTED_MODULE_0__.apis.IS_WEBNN_AVAILABLE) {
              supportedDevices.push("webnn-npu", "webnn-gpu", "webnn-cpu", "webnn");
            }
            if (_env_js__WEBPACK_IMPORTED_MODULE_0__.apis.IS_WEBGPU_AVAILABLE) {
              supportedDevices.push("webgpu");
            }
            supportedDevices.push("wasm");
            defaultDevices = ["wasm"];
          }
          const InferenceSession3 = ONNX.InferenceSession;
          function deviceToExecutionProviders(device = null) {
            if (!device)
              return defaultDevices;
            switch (device) {
              case "auto":
                return supportedDevices;
              case "gpu":
                return supportedDevices.filter(
                  (x2) => ["webgpu", "cuda", "dml", "webnn-gpu"].includes(x2)
                );
            }
            if (supportedDevices.includes(device)) {
              return [DEVICE_TO_EXECUTION_PROVIDER_MAPPING[device] ?? device];
            }
            throw new Error(`Unsupported device: "${device}". Should be one of: ${supportedDevices.join(", ")}.`);
          }
          let wasmInitPromise = null;
          async function createInferenceSession(buffer_or_path, session_options, session_config) {
            if (wasmInitPromise) {
              await wasmInitPromise;
            }
            const sessionPromise = InferenceSession3.create(buffer_or_path, session_options);
            wasmInitPromise ?? (wasmInitPromise = sessionPromise);
            const session = await sessionPromise;
            session.config = session_config;
            return session;
          }
          function isONNXTensor(x2) {
            return x2 instanceof ONNX.Tensor;
          }
          const ONNX_ENV = ONNX?.env;
          if (ONNX_ENV?.wasm) {
            if (
              // @ts-ignore Cannot find name 'ServiceWorkerGlobalScope'.ts(2304)
              !(typeof ServiceWorkerGlobalScope !== "undefined" && self instanceof ServiceWorkerGlobalScope) && !ONNX_ENV.wasm.wasmPaths
            ) {
              ONNX_ENV.wasm.wasmPaths = `https://cdn.jsdelivr.net/npm/@huggingface/transformers@${_env_js__WEBPACK_IMPORTED_MODULE_0__.env.version}/dist/`;
            }
            ONNX_ENV.wasm.proxy = false;
          }
          if (ONNX_ENV?.webgpu) {
            ONNX_ENV.webgpu.powerPreference = "high-performance";
          }
          function isONNXProxy() {
            return ONNX_ENV?.wasm?.proxy;
          }
          _env_js__WEBPACK_IMPORTED_MODULE_0__.env.backends.onnx = ONNX_ENV;
        }
      ),
      /***/
      "./src/base/feature_extraction_utils.js": (
        /*!**********************************************!*\
          !*** ./src/base/feature_extraction_utils.js ***!
          \**********************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            FeatureExtractor: () => (
              /* binding */
              FeatureExtractor
            ),
            /* harmony export */
            validate_audio_inputs: () => (
              /* binding */
              validate_audio_inputs
            )
            /* harmony export */
          });
          var _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../utils/constants.js */
            "./src/utils/constants.js"
          );
          var _utils_generic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../utils/generic.js */
            "./src/utils/generic.js"
          );
          var _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../utils/hub.js */
            "./src/utils/hub.js"
          );
          class FeatureExtractor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_1__.Callable {
            /**
             * Constructs a new FeatureExtractor instance.
             *
             * @param {Object} config The configuration for the feature extractor.
             */
            constructor(config) {
              super();
              this.config = config;
            }
            /**
             * Instantiate one of the feature extractor classes of the library from a pretrained model.
             * 
             * The feature extractor class to instantiate is selected based on the `feature_extractor_type` property of
             * the config object (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)
             * 
             * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:
             * - A string, the *model id* of a pretrained feature_extractor hosted inside a model repo on huggingface.co.
             *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a
             *   user or organization name, like `dbmdz/bert-base-german-cased`.
             * - A path to a *directory* containing feature_extractor files, e.g., `./my_model_directory/`.
             * @param {import('../utils/hub.js').PretrainedOptions} options Additional options for loading the feature_extractor.
             * 
             * @returns {Promise<FeatureExtractor>} A new instance of the Feature Extractor class.
             */
            static async from_pretrained(pretrained_model_name_or_path, options) {
              const config = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__.getModelJSON)(pretrained_model_name_or_path, _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.FEATURE_EXTRACTOR_NAME, true, options);
              return new this(config);
            }
          }
          function validate_audio_inputs(audio, feature_extractor) {
            if (!(audio instanceof Float32Array || audio instanceof Float64Array)) {
              throw new Error(
                `${feature_extractor} expects input to be a Float32Array or a Float64Array, but got ${audio?.constructor?.name ?? typeof audio} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`
              );
            }
          }
        }
      ),
      /***/
      "./src/base/image_processors_utils.js": (
        /*!********************************************!*\
          !*** ./src/base/image_processors_utils.js ***!
          \********************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            ImageProcessor: () => (
              /* binding */
              ImageProcessor
            ),
            /* harmony export */
            center_to_corners_format: () => (
              /* binding */
              center_to_corners_format
            ),
            /* harmony export */
            post_process_instance_segmentation: () => (
              /* binding */
              post_process_instance_segmentation
            ),
            /* harmony export */
            post_process_object_detection: () => (
              /* binding */
              post_process_object_detection
            ),
            /* harmony export */
            post_process_panoptic_segmentation: () => (
              /* binding */
              post_process_panoptic_segmentation
            ),
            /* harmony export */
            post_process_semantic_segmentation: () => (
              /* binding */
              post_process_semantic_segmentation
            )
            /* harmony export */
          });
          var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../utils/generic.js */
            "./src/utils/generic.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../utils/maths.js */
            "./src/utils/maths.js"
          );
          var _utils_image_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../utils/image.js */
            "./src/utils/image.js"
          );
          var _utils_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
            /*! ../utils/core.js */
            "./src/utils/core.js"
          );
          var _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
            /*! ../utils/hub.js */
            "./src/utils/hub.js"
          );
          var _utils_constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
            /*! ../utils/constants.js */
            "./src/utils/constants.js"
          );
          function constraint_to_multiple_of(val, multiple, minVal = 0, maxVal = null) {
            const a = val / multiple;
            let x2 = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.bankers_round)(a) * multiple;
            if (maxVal !== null && x2 > maxVal) {
              x2 = Math.floor(a) * multiple;
            }
            if (x2 < minVal) {
              x2 = Math.ceil(a) * multiple;
            }
            return x2;
          }
          function enforce_size_divisibility([width, height], divisor) {
            return [
              Math.max(Math.floor(width / divisor), 1) * divisor,
              Math.max(Math.floor(height / divisor), 1) * divisor
            ];
          }
          function center_to_corners_format([centerX, centerY, width, height]) {
            return [
              centerX - width / 2,
              centerY - height / 2,
              centerX + width / 2,
              centerY + height / 2
            ];
          }
          function post_process_object_detection(outputs, threshold = 0.5, target_sizes = null, is_zero_shot = false) {
            const out_logits = outputs.logits;
            const out_bbox = outputs.pred_boxes;
            const [batch_size, num_boxes, num_classes] = out_logits.dims;
            if (target_sizes !== null && target_sizes.length !== batch_size) {
              throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
            }
            let toReturn = [];
            for (let i = 0; i < batch_size; ++i) {
              let target_size = target_sizes !== null ? target_sizes[i] : null;
              let info = {
                boxes: [],
                classes: [],
                scores: []
              };
              let logits = out_logits[i];
              let bbox = out_bbox[i];
              for (let j = 0; j < num_boxes; ++j) {
                let logit = logits[j];
                let indices = [];
                let probs;
                if (is_zero_shot) {
                  probs = logit.sigmoid().data;
                  for (let k = 0; k < probs.length; ++k) {
                    if (probs[k] > threshold) {
                      indices.push(k);
                    }
                  }
                } else {
                  let maxIndex = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(logit.data)[1];
                  if (maxIndex === num_classes - 1) {
                    continue;
                  }
                  probs = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.softmax)(logit.data);
                  if (probs[maxIndex] < threshold) {
                    continue;
                  }
                  indices.push(maxIndex);
                }
                for (const index of indices) {
                  let box = bbox[j].data;
                  box = center_to_corners_format(box);
                  if (target_size !== null) {
                    box = box.map((x2, i2) => x2 * target_size[(i2 + 1) % 2]);
                  }
                  info.boxes.push(box);
                  info.classes.push(index);
                  info.scores.push(probs[index]);
                }
              }
              toReturn.push(info);
            }
            return toReturn;
          }
          function post_process_semantic_segmentation(outputs, target_sizes = null) {
            const logits = outputs.logits;
            const batch_size = logits.dims[0];
            if (target_sizes !== null && target_sizes.length !== batch_size) {
              throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
            }
            const toReturn = [];
            for (let i = 0; i < batch_size; ++i) {
              const target_size = target_sizes !== null ? target_sizes[i] : null;
              let data = logits[i];
              if (target_size !== null) {
                data = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate)(data, target_size, "bilinear", false);
              }
              const [height, width] = target_size ?? data.dims.slice(-2);
              const segmentation = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(
                "int32",
                new Int32Array(height * width),
                [height, width]
              );
              const buffer = data[0].data;
              const segmentation_data = segmentation.data;
              for (let j = 1; j < data.dims[0]; ++j) {
                const row = data[j].data;
                for (let k = 0; k < row.length; ++k) {
                  if (row[k] > buffer[k]) {
                    buffer[k] = row[k];
                    segmentation_data[k] = j;
                  }
                }
              }
              const hasLabel = new Array(data.dims[0]);
              for (let j = 0; j < segmentation_data.length; ++j) {
                const index = segmentation_data[j];
                hasLabel[index] = index;
              }
              const labels = hasLabel.filter((x2) => x2 !== void 0);
              toReturn.push({ segmentation, labels });
            }
            return toReturn;
          }
          function remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold, num_labels) {
            const mask_probs_item = [];
            const pred_scores_item = [];
            const pred_labels_item = [];
            for (let j = 0; j < class_logits.dims[0]; ++j) {
              const cls = class_logits[j];
              const mask = mask_logits[j];
              const pred_label = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(cls.data)[1];
              if (pred_label === num_labels) {
                continue;
              }
              const scores = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.softmax)(cls.data);
              const pred_score = scores[pred_label];
              if (pred_score > object_mask_threshold) {
                mask_probs_item.push(mask);
                pred_scores_item.push(pred_score);
                pred_labels_item.push(pred_label);
              }
            }
            return [mask_probs_item, pred_scores_item, pred_labels_item];
          }
          function check_segment_validity(mask_labels, mask_probs, k, mask_threshold = 0.5, overlap_mask_area_threshold = 0.8) {
            const mask_k = [];
            let mask_k_area = 0;
            let original_area = 0;
            const mask_probs_k_data = mask_probs[k].data;
            for (let i = 0; i < mask_labels.length; ++i) {
              if (mask_labels[i] === k) {
                mask_k.push(i);
                ++mask_k_area;
              }
              if (mask_probs_k_data[i] >= mask_threshold) {
                ++original_area;
              }
            }
            let mask_exists = mask_k_area > 0 && original_area > 0;
            if (mask_exists) {
              let area_ratio = mask_k_area / original_area;
              mask_exists = area_ratio > overlap_mask_area_threshold;
            }
            return [mask_exists, mask_k];
          }
          function compute_segments(mask_probs, pred_scores, pred_labels, mask_threshold, overlap_mask_area_threshold, label_ids_to_fuse = null, target_size = null) {
            const [height, width] = target_size ?? mask_probs[0].dims;
            const segmentation = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(
              "int32",
              new Int32Array(height * width),
              [height, width]
            );
            const segments = [];
            if (target_size !== null) {
              for (let i = 0; i < mask_probs.length; ++i) {
                mask_probs[i] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate)(mask_probs[i], target_size, "bilinear", false);
              }
            }
            const mask_labels = new Int32Array(mask_probs[0].data.length);
            const bestScores = new Float32Array(mask_probs[0].data.length);
            for (let i = 0; i < mask_probs.length; ++i) {
              let score = pred_scores[i];
              const mask_probs_i_data = mask_probs[i].data;
              for (let j = 0; j < mask_probs_i_data.length; ++j) {
                mask_probs_i_data[j] *= score;
                if (mask_probs_i_data[j] > bestScores[j]) {
                  mask_labels[j] = i;
                  bestScores[j] = mask_probs_i_data[j];
                }
              }
            }
            let current_segment_id = 0;
            const segmentation_data = segmentation.data;
            for (let k = 0; k < pred_labels.length; ++k) {
              const pred_class = pred_labels[k];
              const [mask_exists, mask_k] = check_segment_validity(
                mask_labels,
                mask_probs,
                k,
                mask_threshold,
                overlap_mask_area_threshold
              );
              if (!mask_exists) {
                continue;
              }
              ++current_segment_id;
              for (const index of mask_k) {
                segmentation_data[index] = current_segment_id;
              }
              segments.push({
                id: current_segment_id,
                label_id: pred_class,
                // was_fused: should_fuse, TODO
                score: pred_scores[k]
              });
            }
            return [segmentation, segments];
          }
          function smart_resize(height, width, factor = 28, min_pixels = 56 * 56, max_pixels = 14 * 14 * 4 * 1280) {
            if (height < factor || width < factor) {
              throw new Error(`height:${height} or width:${width} must be larger than factor:${factor}`);
            } else if (Math.max(height, width) / Math.min(height, width) > 200) {
              throw new Error(
                `absolute aspect ratio must be smaller than 200, got ${Math.max(height, width) / Math.min(height, width)}`
              );
            }
            let h_bar = Math.round(height / factor) * factor;
            let w_bar = Math.round(width / factor) * factor;
            if (h_bar * w_bar > max_pixels) {
              const beta = Math.sqrt(height * width / max_pixels);
              h_bar = Math.floor(height / beta / factor) * factor;
              w_bar = Math.floor(width / beta / factor) * factor;
            } else if (h_bar * w_bar < min_pixels) {
              const beta = Math.sqrt(min_pixels / (height * width));
              h_bar = Math.ceil(height * beta / factor) * factor;
              w_bar = Math.ceil(width * beta / factor) * factor;
            }
            return [h_bar, w_bar];
          }
          function post_process_panoptic_segmentation(outputs, threshold = 0.5, mask_threshold = 0.5, overlap_mask_area_threshold = 0.8, label_ids_to_fuse = null, target_sizes = null) {
            if (label_ids_to_fuse === null) {
              console.warn("`label_ids_to_fuse` unset. No instance will be fused.");
              label_ids_to_fuse = /* @__PURE__ */ new Set();
            }
            const class_queries_logits = outputs.class_queries_logits ?? outputs.logits;
            const masks_queries_logits = outputs.masks_queries_logits ?? outputs.pred_masks;
            const mask_probs = masks_queries_logits.sigmoid();
            let [batch_size, num_queries, num_labels] = class_queries_logits.dims;
            num_labels -= 1;
            if (target_sizes !== null && target_sizes.length !== batch_size) {
              throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
            }
            let toReturn = [];
            for (let i = 0; i < batch_size; ++i) {
              let target_size = target_sizes !== null ? target_sizes[i] : null;
              let class_logits = class_queries_logits[i];
              let mask_logits = mask_probs[i];
              let [mask_probs_item, pred_scores_item, pred_labels_item] = remove_low_and_no_objects(class_logits, mask_logits, threshold, num_labels);
              if (pred_labels_item.length === 0) {
                let [height, width] = target_size ?? mask_logits.dims.slice(-2);
                let segmentation2 = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(
                  "int32",
                  new Int32Array(height * width).fill(-1),
                  [height, width]
                );
                toReturn.push({
                  segmentation: segmentation2,
                  segments_info: []
                });
                continue;
              }
              let [segmentation, segments] = compute_segments(
                mask_probs_item,
                pred_scores_item,
                pred_labels_item,
                mask_threshold,
                overlap_mask_area_threshold,
                label_ids_to_fuse,
                target_size
              );
              toReturn.push({
                segmentation,
                segments_info: segments
              });
            }
            return toReturn;
          }
          function post_process_instance_segmentation(outputs, threshold = 0.5, target_sizes = null) {
            throw new Error("`post_process_instance_segmentation` is not yet implemented.");
          }
          class ImageProcessor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
             * Constructs a new `ImageProcessor`.
             * @param {ImageProcessorConfig} config The configuration object.
             */
            constructor(config) {
              super();
              this.image_mean = config.image_mean ?? config.mean;
              this.image_std = config.image_std ?? config.std;
              this.resample = config.resample ?? 2;
              this.do_rescale = config.do_rescale ?? true;
              this.rescale_factor = config.rescale_factor ?? 1 / 255;
              this.do_normalize = config.do_normalize;
              this.do_thumbnail = config.do_thumbnail;
              this.size = config.size ?? config.image_size;
              this.do_resize = config.do_resize ?? this.size !== void 0;
              this.size_divisibility = config.size_divisibility ?? config.size_divisor;
              this.do_center_crop = config.do_center_crop;
              this.crop_size = config.crop_size;
              this.do_convert_rgb = config.do_convert_rgb ?? true;
              this.do_crop_margin = config.do_crop_margin;
              this.pad_size = config.pad_size;
              this.do_pad = config.do_pad;
              this.min_pixels = config.min_pixels;
              this.max_pixels = config.max_pixels;
              if (this.do_pad && !this.pad_size && this.size && this.size.width !== void 0 && this.size.height !== void 0) {
                this.pad_size = this.size;
              }
              this.do_flip_channel_order = config.do_flip_channel_order ?? false;
              this.config = config;
            }
            /**
             * Resize the image to make a thumbnail. The image is resized so that no dimension is larger than any
             * corresponding dimension of the specified size.
             * @param {RawImage} image The image to be resized.
             * @param {{height:number, width:number}} size The size `{"height": h, "width": w}` to resize the image to.
             * @param {string | 0 | 1 | 2 | 3 | 4 | 5} [resample=2] The resampling filter to use.
             * @returns {Promise<RawImage>} The resized image.
             */
            async thumbnail(image, size, resample = 2) {
              const input_height = image.height;
              const input_width = image.width;
              const output_height = size.height;
              const output_width = size.width;
              let height = Math.min(input_height, output_height);
              let width = Math.min(input_width, output_width);
              if (height === input_height && width === input_width) {
                return image;
              }
              if (input_height > input_width) {
                width = Math.floor(input_width * height / input_height);
              } else if (input_width > input_height) {
                height = Math.floor(input_height * width / input_width);
              }
              return await image.resize(width, height, { resample });
            }
            /**
             * Crops the margin of the image. Gray pixels are considered margin (i.e., pixels with a value below the threshold).
             * @param {RawImage} image The image to be cropped.
             * @param {number} gray_threshold Value below which pixels are considered to be gray.
             * @returns {Promise<RawImage>} The cropped image.
             */
            async crop_margin(image, gray_threshold = 200) {
              const gray_image = image.clone().grayscale();
              const minValue = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.min)(gray_image.data)[0];
              const maxValue = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(gray_image.data)[0];
              const diff = maxValue - minValue;
              if (diff === 0) {
                return image;
              }
              const threshold = gray_threshold / 255;
              let x_min = gray_image.width, y_min = gray_image.height, x_max = 0, y_max = 0;
              const gray_image_data = gray_image.data;
              for (let j = 0; j < gray_image.height; ++j) {
                const row = j * gray_image.width;
                for (let i = 0; i < gray_image.width; ++i) {
                  if ((gray_image_data[row + i] - minValue) / diff < threshold) {
                    x_min = Math.min(x_min, i);
                    y_min = Math.min(y_min, j);
                    x_max = Math.max(x_max, i);
                    y_max = Math.max(y_max, j);
                  }
                }
              }
              image = await image.crop([x_min, y_min, x_max, y_max]);
              return image;
            }
            /**
             * Pad the image by a certain amount.
             * @param {Float32Array} pixelData The pixel data to pad.
             * @param {number[]} imgDims The dimensions of the image (height, width, channels).
             * @param {{width:number; height:number}|number|'square'} padSize The dimensions of the padded image.
             * @param {Object} options The options for padding.
             * @param {'constant'|'symmetric'} [options.mode='constant'] The type of padding to add.
             * @param {boolean} [options.center=false] Whether to center the image.
             * @param {number|number[]} [options.constant_values=0] The constant value to use for padding.
             * @returns {[Float32Array, number[]]} The padded pixel data and image dimensions.
             */
            pad_image(pixelData, imgDims, padSize, {
              mode = "constant",
              center = false,
              constant_values = 0
            } = {}) {
              const [imageHeight, imageWidth, imageChannels] = imgDims;
              let paddedImageWidth, paddedImageHeight;
              if (typeof padSize === "number") {
                paddedImageWidth = padSize;
                paddedImageHeight = padSize;
              } else if (padSize === "square") {
                paddedImageWidth = paddedImageHeight = Math.max(imageHeight, imageWidth);
              } else {
                paddedImageWidth = padSize.width;
                paddedImageHeight = padSize.height;
              }
              if (paddedImageWidth !== imageWidth || paddedImageHeight !== imageHeight) {
                const paddedPixelData = new Float32Array(paddedImageWidth * paddedImageHeight * imageChannels);
                if (Array.isArray(constant_values)) {
                  for (let i = 0; i < paddedPixelData.length; ++i) {
                    paddedPixelData[i] = constant_values[i % imageChannels];
                  }
                } else if (constant_values !== 0) {
                  paddedPixelData.fill(constant_values);
                }
                const [left, top] = center ? [Math.floor((paddedImageWidth - imageWidth) / 2), Math.floor((paddedImageHeight - imageHeight) / 2)] : [0, 0];
                for (let i = 0; i < imageHeight; ++i) {
                  const a = (i + top) * paddedImageWidth;
                  const b = i * imageWidth;
                  for (let j = 0; j < imageWidth; ++j) {
                    const c = (a + j + left) * imageChannels;
                    const d = (b + j) * imageChannels;
                    for (let k = 0; k < imageChannels; ++k) {
                      paddedPixelData[c + k] = pixelData[d + k];
                    }
                  }
                }
                if (mode === "symmetric") {
                  if (center) {
                    throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");
                  }
                  const h1 = imageHeight - 1;
                  const w1 = imageWidth - 1;
                  for (let i = 0; i < paddedImageHeight; ++i) {
                    const a = i * paddedImageWidth;
                    const b = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.calculateReflectOffset)(i, h1) * imageWidth;
                    for (let j = 0; j < paddedImageWidth; ++j) {
                      if (i < imageHeight && j < imageWidth)
                        continue;
                      const c = (a + j) * imageChannels;
                      const d = (b + (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.calculateReflectOffset)(j, w1)) * imageChannels;
                      for (let k = 0; k < imageChannels; ++k) {
                        paddedPixelData[c + k] = pixelData[d + k];
                      }
                    }
                  }
                }
                pixelData = paddedPixelData;
                imgDims = [paddedImageHeight, paddedImageWidth, imageChannels];
              }
              return [pixelData, imgDims];
            }
            /**
             * Rescale the image' pixel values by `this.rescale_factor`.
             * @param {Float32Array} pixelData The pixel data to rescale.
             * @returns {void}
             */
            rescale(pixelData) {
              for (let i = 0; i < pixelData.length; ++i) {
                pixelData[i] = this.rescale_factor * pixelData[i];
              }
            }
            /**
             * Find the target (width, height) dimension of the output image after
             * resizing given the input image and the desired size.
             * @param {RawImage} image The image to resize.
             * @param {any} size The size to use for resizing the image. 
             * @returns {[number, number]} The target (width, height) dimension of the output image after resizing.
             */
            get_resize_output_image_size(image, size) {
              const [srcWidth, srcHeight] = image.size;
              let shortest_edge;
              let longest_edge;
              if (this.do_thumbnail) {
                const { height, width } = size;
                shortest_edge = Math.min(height, width);
              } else if (Number.isInteger(size)) {
                shortest_edge = size;
                longest_edge = this.config.max_size ?? shortest_edge;
              } else if (size !== void 0) {
                shortest_edge = size.shortest_edge;
                longest_edge = size.longest_edge;
              }
              if (shortest_edge !== void 0 || longest_edge !== void 0) {
                const shortResizeFactor = shortest_edge === void 0 ? 1 : Math.max(shortest_edge / srcWidth, shortest_edge / srcHeight);
                const newWidth = srcWidth * shortResizeFactor;
                const newHeight = srcHeight * shortResizeFactor;
                const longResizeFactor = longest_edge === void 0 ? 1 : Math.min(longest_edge / newWidth, longest_edge / newHeight);
                let finalWidth = Math.floor(Number((newWidth * longResizeFactor).toFixed(2)));
                let finalHeight = Math.floor(Number((newHeight * longResizeFactor).toFixed(2)));
                if (this.size_divisibility !== void 0) {
                  [finalWidth, finalHeight] = enforce_size_divisibility([finalWidth, finalHeight], this.size_divisibility);
                }
                return [finalWidth, finalHeight];
              } else if (size !== void 0 && size.width !== void 0 && size.height !== void 0) {
                let newWidth = size.width;
                let newHeight = size.height;
                if (this.config.keep_aspect_ratio && this.config.ensure_multiple_of) {
                  let scale_height = newHeight / srcHeight;
                  let scale_width = newWidth / srcWidth;
                  if (Math.abs(1 - scale_width) < Math.abs(1 - scale_height)) {
                    scale_height = scale_width;
                  } else {
                    scale_width = scale_height;
                  }
                  newHeight = constraint_to_multiple_of(scale_height * srcHeight, this.config.ensure_multiple_of);
                  newWidth = constraint_to_multiple_of(scale_width * srcWidth, this.config.ensure_multiple_of);
                }
                return [newWidth, newHeight];
              } else if (this.size_divisibility !== void 0) {
                return enforce_size_divisibility([srcWidth, srcHeight], this.size_divisibility);
              } else if (this.min_pixels !== void 0 && this.max_pixels !== void 0) {
                const factor = this.config.patch_size * this.config.merge_size;
                return smart_resize(srcHeight, srcWidth, factor, this.min_pixels, this.max_pixels);
              } else {
                throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(size)}`);
              }
            }
            /**
             * Resizes the image.
             * @param {RawImage} image The image to resize.
             * @returns {Promise<RawImage>} The resized image.
             */
            async resize(image) {
              const [newWidth, newHeight] = this.get_resize_output_image_size(image, this.size);
              return await image.resize(newWidth, newHeight, {
                // @ts-expect-error TS2322
                resample: this.resample
              });
            }
            /**
             * @typedef {object} PreprocessedImage
             * @property {HeightWidth} original_size The original size of the image.
             * @property {HeightWidth} reshaped_input_size The reshaped input size of the image.
             * @property {Tensor} pixel_values The pixel values of the preprocessed image.
             */
            /**
             * Preprocesses the given image.
             *
             * @param {RawImage} image The image to preprocess.
             * @param {Object} overrides The overrides for the preprocessing options.
             * @returns {Promise<PreprocessedImage>} The preprocessed image.
             */
            async preprocess(image, {
              do_normalize = null,
              do_pad = null,
              do_convert_rgb = null,
              do_convert_grayscale = null,
              do_flip_channel_order = null
            } = {}) {
              if (this.do_crop_margin) {
                image = await this.crop_margin(image);
              }
              const [srcWidth, srcHeight] = image.size;
              if (do_convert_rgb ?? this.do_convert_rgb) {
                image = image.rgb();
              } else if (do_convert_grayscale) {
                image = image.grayscale();
              }
              if (this.do_resize) {
                image = await this.resize(image);
              }
              if (this.do_thumbnail) {
                image = await this.thumbnail(image, this.size, this.resample);
              }
              if (this.do_center_crop) {
                let crop_width;
                let crop_height;
                if (Number.isInteger(this.crop_size)) {
                  crop_width = this.crop_size;
                  crop_height = this.crop_size;
                } else {
                  crop_width = this.crop_size.width;
                  crop_height = this.crop_size.height;
                }
                image = await image.center_crop(crop_width, crop_height);
              }
              const reshaped_input_size = [image.height, image.width];
              let pixelData = Float32Array.from(image.data);
              let imgDims = [image.height, image.width, image.channels];
              if (this.do_rescale) {
                this.rescale(pixelData);
              }
              if (do_normalize ?? this.do_normalize) {
                let image_mean = this.image_mean;
                if (!Array.isArray(this.image_mean)) {
                  image_mean = new Array(image.channels).fill(image_mean);
                }
                let image_std = this.image_std;
                if (!Array.isArray(this.image_std)) {
                  image_std = new Array(image.channels).fill(image_mean);
                }
                if (image_mean.length !== image.channels || image_std.length !== image.channels) {
                  throw new Error(`When set to arrays, the length of \`image_mean\` (${image_mean.length}) and \`image_std\` (${image_std.length}) must match the number of channels in the image (${image.channels}).`);
                }
                for (let i = 0; i < pixelData.length; i += image.channels) {
                  for (let j = 0; j < image.channels; ++j) {
                    pixelData[i + j] = (pixelData[i + j] - image_mean[j]) / image_std[j];
                  }
                }
              }
              if (do_pad ?? this.do_pad) {
                if (this.pad_size) {
                  const padded = this.pad_image(pixelData, [image.height, image.width, image.channels], this.pad_size);
                  [pixelData, imgDims] = padded;
                } else if (this.size_divisibility) {
                  const [paddedWidth, paddedHeight] = enforce_size_divisibility([imgDims[1], imgDims[0]], this.size_divisibility);
                  [pixelData, imgDims] = this.pad_image(pixelData, imgDims, { width: paddedWidth, height: paddedHeight });
                }
              }
              if (do_flip_channel_order ?? this.do_flip_channel_order) {
                if (imgDims[2] !== 3) {
                  throw new Error("Flipping channel order is only supported for RGB images.");
                }
                for (let i = 0; i < pixelData.length; i += 3) {
                  const temp = pixelData[i];
                  pixelData[i] = pixelData[i + 2];
                  pixelData[i + 2] = temp;
                }
              }
              const pixel_values = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor("float32", pixelData, imgDims).permute(2, 0, 1);
              return {
                original_size: [srcHeight, srcWidth],
                reshaped_input_size,
                pixel_values
              };
            }
            /**
             * Calls the feature extraction process on an array of images,
             * preprocesses each image, and concatenates the resulting
             * features into a single Tensor.
             * @param {RawImage[]} images The image(s) to extract features from.
             * @param {...any} args Additional arguments.
             * @returns {Promise<ImageProcessorResult>} An object containing the concatenated pixel values (and other metadata) of the preprocessed images.
             */
            async _call(images, ...args) {
              if (!Array.isArray(images)) {
                images = [images];
              }
              const imageData = await Promise.all(images.map((x2) => this.preprocess(x2)));
              const pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.stack)(imageData.map((x2) => x2.pixel_values), 0);
              return {
                pixel_values,
                // Original sizes of images
                original_sizes: imageData.map((x2) => x2.original_size),
                // Reshaped sizes of images, before padding or cropping
                reshaped_input_sizes: imageData.map((x2) => x2.reshaped_input_size)
              };
            }
            /**
             * Instantiate one of the processor classes of the library from a pretrained model.
             * 
             * The processor class to instantiate is selected based on the `image_processor_type` (or `feature_extractor_type`; legacy)
             * property of the config object (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)
             * 
             * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:
             * - A string, the *model id* of a pretrained processor hosted inside a model repo on huggingface.co.
             *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a
             *   user or organization name, like `dbmdz/bert-base-german-cased`.
             * - A path to a *directory* containing processor files, e.g., `./my_model_directory/`.
             * @param {import('../utils/hub.js').PretrainedOptions} options Additional options for loading the processor.
             * 
             * @returns {Promise<ImageProcessor>} A new instance of the Processor class.
             */
            static async from_pretrained(pretrained_model_name_or_path, options) {
              const preprocessorConfig = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelJSON)(pretrained_model_name_or_path, _utils_constants_js__WEBPACK_IMPORTED_MODULE_6__.IMAGE_PROCESSOR_NAME, true, options);
              return new this(preprocessorConfig);
            }
          }
        }
      ),
      /***/
      "./src/base/processing_utils.js": (
        /*!**************************************!*\
          !*** ./src/base/processing_utils.js ***!
          \**************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Processor: () => (
              /* binding */
              Processor
            )
            /* harmony export */
          });
          var _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../utils/constants.js */
            "./src/utils/constants.js"
          );
          var _utils_generic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../utils/generic.js */
            "./src/utils/generic.js"
          );
          var _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../utils/hub.js */
            "./src/utils/hub.js"
          );
          class Processor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_1__.Callable {
            /**
             * Creates a new Processor with the given components
             * @param {Object} config 
             * @param {Record<string, Object>} components 
             */
            constructor(config, components) {
              super();
              this.config = config;
              this.components = components;
            }
            /**
             * @returns {import('./image_processors_utils.js').ImageProcessor|undefined} The image processor of the processor, if it exists.
             */
            get image_processor() {
              return this.components.image_processor;
            }
            /**
             * @returns {PreTrainedTokenizer|undefined} The tokenizer of the processor, if it exists.
             */
            get tokenizer() {
              return this.components.tokenizer;
            }
            /**
             * @returns {import('./feature_extraction_utils.js').FeatureExtractor|undefined} The feature extractor of the processor, if it exists.
             */
            get feature_extractor() {
              return this.components.feature_extractor;
            }
            /**
             * @param {Parameters<PreTrainedTokenizer['apply_chat_template']>[0]} messages
             * @param {Parameters<PreTrainedTokenizer['apply_chat_template']>[1]} options
             * @returns {ReturnType<PreTrainedTokenizer['apply_chat_template']>}
             */
            apply_chat_template(messages, options = {}) {
              if (!this.tokenizer) {
                throw new Error("Unable to apply chat template without a tokenizer.");
              }
              return this.tokenizer.apply_chat_template(messages, {
                tokenize: false,
                // default to false
                ...options
              });
            }
            /**
             * @param {Parameters<PreTrainedTokenizer['batch_decode']>} args
             * @returns {ReturnType<PreTrainedTokenizer['batch_decode']>}
             */
            batch_decode(...args) {
              if (!this.tokenizer) {
                throw new Error("Unable to decode without a tokenizer.");
              }
              return this.tokenizer.batch_decode(...args);
            }
            /**
             * @param {Parameters<PreTrainedTokenizer['decode']>} args
             * @returns {ReturnType<PreTrainedTokenizer['decode']>}
             */
            decode(...args) {
              if (!this.tokenizer) {
                throw new Error("Unable to decode without a tokenizer.");
              }
              return this.tokenizer.decode(...args);
            }
            /**
             * Calls the feature_extractor function with the given input.
             * @param {any} input The input to extract features from.
             * @param {...any} args Additional arguments.
             * @returns {Promise<any>} A Promise that resolves with the extracted features.
             */
            async _call(input, ...args) {
              for (const item of [this.image_processor, this.feature_extractor, this.tokenizer]) {
                if (item) {
                  return item(input, ...args);
                }
              }
              throw new Error("No image processor, feature extractor, or tokenizer found.");
            }
            /**
             * Instantiate one of the processor classes of the library from a pretrained model.
             * 
             * The processor class to instantiate is selected based on the `image_processor_type` (or `feature_extractor_type`; legacy)
             * property of the config object (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)
             * 
             * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:
             * - A string, the *model id* of a pretrained processor hosted inside a model repo on huggingface.co.
             *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a
             *   user or organization name, like `dbmdz/bert-base-german-cased`.
             * - A path to a *directory* containing processor files, e.g., `./my_model_directory/`.
             * @param {PretrainedProcessorOptions} options Additional options for loading the processor.
             * 
             * @returns {Promise<Processor>} A new instance of the Processor class.
             */
            static async from_pretrained(pretrained_model_name_or_path, options) {
              const [config, components] = await Promise.all([
                // TODO:
                this.uses_processor_config ? (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__.getModelJSON)(pretrained_model_name_or_path, _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.PROCESSOR_NAME, true, options) : {},
                Promise.all(
                  this.classes.filter((cls) => cls in this).map(async (cls) => {
                    const component = await this[cls].from_pretrained(pretrained_model_name_or_path, options);
                    return [cls.replace(/_class$/, ""), component];
                  })
                ).then(Object.fromEntries)
              ]);
              return new this(config, components);
            }
          }
          __publicField(Processor, "classes", [
            "image_processor_class",
            "tokenizer_class",
            "feature_extractor_class"
          ]);
          __publicField(Processor, "uses_processor_config", false);
        }
      ),
      /***/
      "./src/configs.js": (
        /*!************************!*\
          !*** ./src/configs.js ***!
          \************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            AutoConfig: () => (
              /* binding */
              AutoConfig
            ),
            /* harmony export */
            PretrainedConfig: () => (
              /* binding */
              PretrainedConfig
            ),
            /* harmony export */
            getKeyValueShapes: () => (
              /* binding */
              getKeyValueShapes
            )
            /* harmony export */
          });
          var _utils_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ./utils/core.js */
            "./src/utils/core.js"
          );
          var _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ./utils/hub.js */
            "./src/utils/hub.js"
          );
          async function loadConfig(pretrained_model_name_or_path, options) {
            return await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__.getModelJSON)(pretrained_model_name_or_path, "config.json", true, options);
          }
          function getNormalizedConfig(config) {
            const mapping = {};
            let init_normalized_config = {};
            switch (config.model_type) {
              case "llava":
              case "paligemma":
              case "gemma3":
              case "florence2":
              case "llava_onevision":
              case "idefics3":
              case "ultravox":
              case "smolvlm":
                init_normalized_config = getNormalizedConfig(config.text_config);
                break;
              case "moondream1":
                init_normalized_config = getNormalizedConfig(config.phi_config);
                break;
              case "musicgen":
                init_normalized_config = getNormalizedConfig(config.decoder);
                break;
              case "multi_modality":
                init_normalized_config = getNormalizedConfig(config.language_config);
                break;
              case "gpt2":
              case "gptj":
              case "jais":
              case "codegen":
              case "gpt_bigcode":
                mapping["num_heads"] = "n_head";
                mapping["num_layers"] = "n_layer";
                mapping["hidden_size"] = "n_embd";
                break;
              case "gpt_neox":
              case "stablelm":
              case "opt":
              case "falcon":
                mapping["num_heads"] = "num_attention_heads";
                mapping["num_layers"] = "num_hidden_layers";
                mapping["hidden_size"] = "hidden_size";
                break;
              case "llama":
              case "olmo":
              case "olmo2":
              case "mobilellm":
              case "granite":
              case "cohere":
              case "mistral":
              case "starcoder2":
              case "qwen2":
              case "qwen2_vl":
              case "phi":
              case "phi3":
              case "phi3_v":
                mapping["num_heads"] = "num_key_value_heads";
                mapping["num_layers"] = "num_hidden_layers";
                mapping["hidden_size"] = "hidden_size";
                mapping["num_attention_heads"] = "num_attention_heads";
                break;
              case "qwen3":
              case "gemma":
              case "gemma2":
              case "gemma3_text":
              case "glm":
              case "helium":
                mapping["num_heads"] = "num_key_value_heads";
                mapping["num_layers"] = "num_hidden_layers";
                mapping["dim_kv"] = "head_dim";
                break;
              case "openelm":
                mapping["num_heads"] = "num_kv_heads";
                mapping["num_layers"] = "num_transformer_layers";
                mapping["dim_kv"] = "head_dim";
                break;
              case "gpt_neo":
              case "donut-swin":
                mapping["num_heads"] = "num_heads";
                mapping["num_layers"] = "num_layers";
                mapping["hidden_size"] = "hidden_size";
                break;
              case "bloom":
                mapping["num_heads"] = "n_head";
                mapping["num_layers"] = "n_layer";
                mapping["hidden_size"] = "hidden_size";
                break;
              case "mpt":
                mapping["num_heads"] = "n_heads";
                mapping["num_layers"] = "n_layers";
                mapping["hidden_size"] = "d_model";
                break;
              case "exaone":
                mapping["num_heads"] = "num_key_value_heads";
                mapping["num_layers"] = "num_layers";
                mapping["dim_kv"] = "head_dim";
                mapping["num_attention_heads"] = "num_attention_heads";
                break;
              case "t5":
              case "mt5":
              case "longt5":
                mapping["num_decoder_layers"] = "num_decoder_layers";
                mapping["num_decoder_heads"] = "num_heads";
                mapping["decoder_dim_kv"] = "d_kv";
                mapping["num_encoder_layers"] = "num_layers";
                mapping["num_encoder_heads"] = "num_heads";
                mapping["encoder_dim_kv"] = "d_kv";
                break;
              case "bart":
              case "mbart":
              case "marian":
              case "whisper":
              case "lite-whisper":
              case "m2m_100":
              case "blenderbot":
              case "blenderbot-small":
              case "florence2_language":
                mapping["num_decoder_layers"] = "decoder_layers";
                mapping["num_decoder_heads"] = "decoder_attention_heads";
                mapping["decoder_hidden_size"] = "d_model";
                mapping["num_encoder_layers"] = "encoder_layers";
                mapping["num_encoder_heads"] = "encoder_attention_heads";
                mapping["encoder_hidden_size"] = "d_model";
                break;
              case "speecht5":
                mapping["num_decoder_layers"] = "decoder_layers";
                mapping["num_decoder_heads"] = "decoder_attention_heads";
                mapping["decoder_hidden_size"] = "hidden_size";
                mapping["num_encoder_layers"] = "encoder_layers";
                mapping["num_encoder_heads"] = "encoder_attention_heads";
                mapping["encoder_hidden_size"] = "hidden_size";
                break;
              case "trocr":
                mapping["num_encoder_layers"] = mapping["num_decoder_layers"] = "decoder_layers";
                mapping["num_encoder_heads"] = mapping["num_decoder_heads"] = "decoder_attention_heads";
                mapping["encoder_hidden_size"] = mapping["decoder_hidden_size"] = "d_model";
                break;
              case "musicgen_decoder":
                mapping["num_encoder_layers"] = mapping["num_decoder_layers"] = "num_hidden_layers";
                mapping["num_encoder_heads"] = mapping["num_decoder_heads"] = "num_attention_heads";
                mapping["encoder_hidden_size"] = mapping["decoder_hidden_size"] = "hidden_size";
                break;
              case "moonshine":
                mapping["num_decoder_layers"] = "decoder_num_hidden_layers";
                mapping["num_decoder_heads"] = "decoder_num_key_value_heads";
                mapping["num_encoder_layers"] = "encoder_num_hidden_layers";
                mapping["num_encoder_heads"] = "encoder_num_key_value_heads";
                mapping["encoder_hidden_size"] = mapping["decoder_hidden_size"] = "hidden_size";
                break;
              case "vision-encoder-decoder":
                const decoderConfig = getNormalizedConfig(config.decoder);
                const add_encoder_pkv = "num_decoder_layers" in decoderConfig;
                const result = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_0__.pick)(config, ["model_type", "is_encoder_decoder"]);
                if (add_encoder_pkv) {
                  result.num_decoder_layers = decoderConfig.num_decoder_layers;
                  result.num_decoder_heads = decoderConfig.num_decoder_heads;
                  result.decoder_hidden_size = decoderConfig.decoder_hidden_size;
                  result.num_encoder_layers = decoderConfig.num_encoder_layers;
                  result.num_encoder_heads = decoderConfig.num_encoder_heads;
                  result.encoder_hidden_size = decoderConfig.encoder_hidden_size;
                } else {
                  result.num_layers = decoderConfig.num_layers;
                  result.num_heads = decoderConfig.num_heads;
                  result.hidden_size = decoderConfig.hidden_size;
                }
                return result;
            }
            const normalized_config = {
              ...init_normalized_config,
              ...(0, _utils_core_js__WEBPACK_IMPORTED_MODULE_0__.pick)(config, ["model_type", "multi_query", "is_encoder_decoder"])
            };
            for (const key in mapping) {
              normalized_config[key] = config[mapping[key]];
            }
            return normalized_config;
          }
          function getKeyValueShapes(config, {
            prefix = "past_key_values",
            batch_size = 1
          } = {}) {
            const decoderFeeds = {};
            const normalized_config = config.normalized_config;
            if (normalized_config.is_encoder_decoder && ("num_encoder_heads" in normalized_config && "num_decoder_heads" in normalized_config)) {
              const encoder_dim_kv = normalized_config.encoder_dim_kv ?? normalized_config.encoder_hidden_size / normalized_config.num_encoder_heads;
              const decoder_dim_kv = normalized_config.decoder_dim_kv ?? normalized_config.decoder_hidden_size / normalized_config.num_decoder_heads;
              const encoder_dims = [batch_size, normalized_config.num_encoder_heads, 0, encoder_dim_kv];
              const decoder_dims = [batch_size, normalized_config.num_decoder_heads, 0, decoder_dim_kv];
              for (let i = 0; i < normalized_config.num_decoder_layers; ++i) {
                decoderFeeds[`${prefix}.${i}.encoder.key`] = encoder_dims;
                decoderFeeds[`${prefix}.${i}.encoder.value`] = encoder_dims;
                decoderFeeds[`${prefix}.${i}.decoder.key`] = decoder_dims;
                decoderFeeds[`${prefix}.${i}.decoder.value`] = decoder_dims;
              }
            } else {
              const num_heads = normalized_config.num_heads;
              const num_layers = normalized_config.num_layers;
              const dim_kv = normalized_config.dim_kv ?? normalized_config.hidden_size / (normalized_config.num_attention_heads ?? num_heads);
              if (normalized_config.model_type === "falcon") {
                const dims = [batch_size * num_heads, 0, dim_kv];
                for (let i = 0; i < num_layers; ++i) {
                  decoderFeeds[`${prefix}.${i}.key`] = dims;
                  decoderFeeds[`${prefix}.${i}.value`] = dims;
                }
              } else if (normalized_config.multi_query) {
                const dims = [batch_size * num_heads, 0, 2 * dim_kv];
                for (let i = 0; i < num_layers; ++i) {
                  decoderFeeds[`${prefix}.${i}.key_value`] = dims;
                }
              } else if (normalized_config.model_type === "bloom") {
                const keyDims = [batch_size * num_heads, dim_kv, 0];
                const valueDims = [batch_size * num_heads, 0, dim_kv];
                for (let i = 0; i < num_layers; ++i) {
                  decoderFeeds[`${prefix}.${i}.key`] = keyDims;
                  decoderFeeds[`${prefix}.${i}.value`] = valueDims;
                }
              } else if (normalized_config.model_type === "openelm") {
                for (let i = 0; i < num_layers; ++i) {
                  const dims = [batch_size, num_heads[i], 0, dim_kv];
                  decoderFeeds[`${prefix}.${i}.key`] = dims;
                  decoderFeeds[`${prefix}.${i}.value`] = dims;
                }
              } else {
                const dims = [batch_size, num_heads, 0, dim_kv];
                for (let i = 0; i < num_layers; ++i) {
                  decoderFeeds[`${prefix}.${i}.key`] = dims;
                  decoderFeeds[`${prefix}.${i}.value`] = dims;
                }
              }
            }
            return decoderFeeds;
          }
          class PretrainedConfig {
            /**
             * Create a new PreTrainedTokenizer instance.
             * @param {Object} configJSON The JSON of the config.
             */
            constructor(configJSON) {
              // NOTE: Typo in original
              /** @type {string|null} */
              __publicField(this, "model_type", null);
              /** @type {boolean} */
              __publicField(this, "is_encoder_decoder", false);
              /** @type {number} */
              __publicField(this, "max_position_embeddings");
              /** @type {TransformersJSConfig} */
              __publicField(this, "transformers.js_config");
              Object.assign(this, configJSON);
              this.normalized_config = getNormalizedConfig(this);
            }
            /**
             * Loads a pre-trained config from the given `pretrained_model_name_or_path`. 
             * 
             * @param {string} pretrained_model_name_or_path The path to the pre-trained config.
             * @param {PretrainedOptions} options Additional options for loading the config.
             * @throws {Error} Throws an error if the config.json is not found in the `pretrained_model_name_or_path`.
             * 
             * @returns {Promise<PretrainedConfig>} A new instance of the `PretrainedConfig` class.
             */
            static async from_pretrained(pretrained_model_name_or_path, {
              progress_callback = null,
              config = null,
              cache_dir = null,
              local_files_only = false,
              revision = "main"
            } = {}) {
              if (config && !(config instanceof PretrainedConfig)) {
                config = new PretrainedConfig(config);
              }
              const data = config ?? await loadConfig(pretrained_model_name_or_path, {
                progress_callback,
                config,
                cache_dir,
                local_files_only,
                revision
              });
              return new this(data);
            }
          }
          class AutoConfig {
            /** @type {typeof PretrainedConfig.from_pretrained} */
            static async from_pretrained(...args) {
              return PretrainedConfig.from_pretrained(...args);
            }
          }
        }
      ),
      /***/
      "./src/env.js": (
        /*!********************!*\
          !*** ./src/env.js ***!
          \********************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            apis: () => (
              /* binding */
              apis
            ),
            /* harmony export */
            env: () => (
              /* binding */
              env4
            )
            /* harmony export */
          });
          var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! fs */
            "fs"
          );
          var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! path */
            "path"
          );
          var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! url */
            "url"
          );
          const VERSION = "3.5.2";
          const IS_BROWSER_ENV = typeof window !== "undefined" && typeof window.document !== "undefined";
          const IS_WEBWORKER_ENV = typeof self !== "undefined" && self.constructor?.name === "DedicatedWorkerGlobalScope";
          const IS_WEB_CACHE_AVAILABLE = typeof self !== "undefined" && "caches" in self;
          const IS_WEBGPU_AVAILABLE = typeof navigator !== "undefined" && "gpu" in navigator;
          const IS_WEBNN_AVAILABLE = typeof navigator !== "undefined" && "ml" in navigator;
          const IS_PROCESS_AVAILABLE = typeof process !== "undefined";
          const IS_NODE_ENV = IS_PROCESS_AVAILABLE && process?.release?.name === "node";
          const IS_FS_AVAILABLE = !isEmpty(fs__WEBPACK_IMPORTED_MODULE_0__["default"]);
          const IS_PATH_AVAILABLE = !isEmpty(path__WEBPACK_IMPORTED_MODULE_1__["default"]);
          const apis = Object.freeze({
            /** Whether we are running in a browser environment (and not a web worker) */
            IS_BROWSER_ENV,
            /** Whether we are running in a web worker environment */
            IS_WEBWORKER_ENV,
            /** Whether the Cache API is available */
            IS_WEB_CACHE_AVAILABLE,
            /** Whether the WebGPU API is available */
            IS_WEBGPU_AVAILABLE,
            /** Whether the WebNN API is available */
            IS_WEBNN_AVAILABLE,
            /** Whether the Node.js process API is available */
            IS_PROCESS_AVAILABLE,
            /** Whether we are running in a Node.js environment */
            IS_NODE_ENV,
            /** Whether the filesystem API is available */
            IS_FS_AVAILABLE,
            /** Whether the path API is available */
            IS_PATH_AVAILABLE
          });
          const RUNNING_LOCALLY = IS_FS_AVAILABLE && IS_PATH_AVAILABLE;
          let dirname__ = "./";
          if (RUNNING_LOCALLY) {
            const _import_meta_url = Object(import_meta).url;
            if (_import_meta_url) {
              dirname__ = path__WEBPACK_IMPORTED_MODULE_1__["default"].dirname(path__WEBPACK_IMPORTED_MODULE_1__["default"].dirname(url__WEBPACK_IMPORTED_MODULE_2__["default"].fileURLToPath(_import_meta_url)));
            } else if (typeof __dirname !== "undefined") {
              dirname__ = path__WEBPACK_IMPORTED_MODULE_1__["default"].dirname(__dirname);
            }
          }
          const DEFAULT_CACHE_DIR = RUNNING_LOCALLY ? path__WEBPACK_IMPORTED_MODULE_1__["default"].join(dirname__, "/.cache/") : null;
          const DEFAULT_LOCAL_MODEL_PATH = "/models/";
          const localModelPath = RUNNING_LOCALLY ? path__WEBPACK_IMPORTED_MODULE_1__["default"].join(dirname__, DEFAULT_LOCAL_MODEL_PATH) : DEFAULT_LOCAL_MODEL_PATH;
          const env4 = {
            version: VERSION,
            /////////////////// Backends settings ///////////////////
            // NOTE: These will be populated later by the backends themselves.
            backends: {
              // onnxruntime-web/onnxruntime-node
              onnx: {}
            },
            /////////////////// Model settings ///////////////////
            allowRemoteModels: true,
            remoteHost: "https://huggingface.co/",
            remotePathTemplate: "{model}/resolve/{revision}/",
            allowLocalModels: !(IS_BROWSER_ENV || IS_WEBWORKER_ENV),
            localModelPath,
            useFS: IS_FS_AVAILABLE,
            /////////////////// Cache settings ///////////////////
            useBrowserCache: IS_WEB_CACHE_AVAILABLE,
            useFSCache: IS_FS_AVAILABLE,
            cacheDir: DEFAULT_CACHE_DIR,
            useCustomCache: false,
            customCache: null
            //////////////////////////////////////////////////////
          };
          function isEmpty(obj) {
            return Object.keys(obj).length === 0;
          }
        }
      ),
      /***/
      "./src/generation/configuration_utils.js": (
        /*!***********************************************!*\
          !*** ./src/generation/configuration_utils.js ***!
          \***********************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            GenerationConfig: () => (
              /* binding */
              GenerationConfig
            )
            /* harmony export */
          });
          var _utils_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../utils/core.js */
            "./src/utils/core.js"
          );
          class GenerationConfig {
            /**
             * 
             * @param {GenerationConfig|import('../configs.js').PretrainedConfig} config 
             */
            constructor(config) {
              // Parameters that control the length of the output
              /**
               * The maximum length the generated tokens can have.
               * Corresponds to the length of the input prompt + `max_new_tokens`.
               * Its effect is overridden by `max_new_tokens`, if also set.
               * @type {number}
               * @default 20
               */
              __publicField(this, "max_length", 20);
              /**
               * The maximum numbers of tokens to generate, ignoring the number of tokens in the prompt.
               * @type {number}
               * @default null
               */
              __publicField(this, "max_new_tokens", null);
              /**
               * The minimum length of the sequence to be generated.
               * Corresponds to the length of the input prompt + `min_new_tokens`.
               * Its effect is overridden by `min_new_tokens`, if also set.
               * @type {number}
               * @default 0
               */
              __publicField(this, "min_length", 0);
              /**
               * The minimum numbers of tokens to generate, ignoring the number of tokens in the prompt.
               * @type {number}
               * @default null
               */
              __publicField(this, "min_new_tokens", null);
              /**
               * Controls the stopping condition for beam-based methods, like beam-search. It accepts the following values:
               * - `true`, where the generation stops as soon as there are `num_beams` complete candidates;
               * - `false`, where an heuristic is applied and the generation stops when is it very unlikely to find better candidates;
               * - `"never"`, where the beam search procedure only stops when there cannot be better candidates (canonical beam search algorithm).
               * @type {boolean|"never"}
               * @default false
               */
              __publicField(this, "early_stopping", false);
              /**
               * The maximum amount of time you allow the computation to run for in seconds.
               * Generation will still finish the current pass after allocated time has been passed.
               * @type {number}
               * @default null
               */
              __publicField(this, "max_time", null);
              // Parameters that control the generation strategy used
              /**
               * Whether or not to use sampling; use greedy decoding otherwise.
               * @type {boolean}
               * @default false
               */
              __publicField(this, "do_sample", false);
              /**
               * Number of beams for beam search. 1 means no beam search.
               * @type {number}
               * @default 1
               */
              __publicField(this, "num_beams", 1);
              /**
               * Number of groups to divide `num_beams` into in order to ensure diversity among different groups of beams.
               * See [this paper](https://huggingface.co/papers/1610.02424) for more details.
               * @type {number}
               * @default 1
               */
              __publicField(this, "num_beam_groups", 1);
              /**
               * The values balance the model confidence and the degeneration penalty in contrastive search decoding.
               * @type {number}
               * @default null
               */
              __publicField(this, "penalty_alpha", null);
              /**
               * Whether or not the model should use the past last key/values attentions (if applicable to the model) to speed up decoding.
               * @type {boolean}
               * @default true
               */
              __publicField(this, "use_cache", true);
              // Parameters for manipulation of the model output logits
              /**
               * The value used to modulate the next token probabilities.
               * @type {number}
               * @default 1.0
               */
              __publicField(this, "temperature", 1);
              /**
               * The number of highest probability vocabulary tokens to keep for top-k-filtering.
               * @type {number}
               * @default 50
               */
              __publicField(this, "top_k", 50);
              /**
               * If set to float < 1, only the smallest set of most probable tokens with probabilities that add up to `top_p` or higher are kept for generation.
               * @type {number}
               * @default 1.0
               */
              __publicField(this, "top_p", 1);
              /**
               * Local typicality measures how similar the conditional probability of predicting a target token next is to the expected conditional probability of predicting a random token next, given the partial text already generated.
               * If set to float < 1, the smallest set of the most locally typical tokens with probabilities that add up to `typical_p` or higher are kept for generation.
               * See [this paper](https://huggingface.co/papers/2202.00666) for more details.
               * @type {number}
               * @default 1.0
               */
              __publicField(this, "typical_p", 1);
              /**
               * If set to float strictly between 0 and 1, only tokens with a conditional probability greater than `epsilon_cutoff` will be sampled.
               * In the paper, suggested values range from 3e-4 to 9e-4, depending on the size of the model.
               * See [Truncation Sampling as Language Model Desmoothing](https://huggingface.co/papers/2210.15191) for more details.
               * @type {number}
               * @default 0.0
               */
              __publicField(this, "epsilon_cutoff", 0);
              /**
               * Eta sampling is a hybrid of locally typical sampling and epsilon sampling.
               * If set to float strictly between 0 and 1, a token is only considered if it is greater than either `eta_cutoff` or `sqrt(eta_cutoff) * exp(-entropy(softmax(next_token_logits)))`.
               * The latter term is intuitively the expected next token probability, scaled by `sqrt(eta_cutoff)`. In the paper, suggested values range from 3e-4 to 2e-3, depending on the size of the model.
               * See [Truncation Sampling as Language Model Desmoothing](https://huggingface.co/papers/2210.15191) for more details.
               * @type {number}
               * @default 0.0
               */
              __publicField(this, "eta_cutoff", 0);
              /**
               * This value is subtracted from a beam's score if it generates a token same as any beam from other group at a particular time.
               * Note that `diversity_penalty` is only effective if `group beam search` is enabled.
               * @type {number}
               * @default 0.0
               */
              __publicField(this, "diversity_penalty", 0);
              /**
               * The parameter for repetition penalty. 1.0 means no penalty.
               * See [this paper](https://huggingface.co/papers/1909.05858) for more details.
               * @type {number}
               * @default 1.0
               */
              __publicField(this, "repetition_penalty", 1);
              /**
               * The paramater for encoder_repetition_penalty.
               * An exponential penalty on sequences that are not in the original input.
               * 1.0 means no penalty.
               * @type {number}
               * @default 1.0
               */
              __publicField(this, "encoder_repetition_penalty", 1);
              /**
               * Exponential penalty to the length that is used with beam-based generation.
               * It is applied as an exponent to the sequence length, which in turn is used to divide the score of the sequence.
               * Since the score is the log likelihood of the sequence (i.e. negative), `length_penalty` > 0.0 promotes longer sequences, while `length_penalty` < 0.0 encourages shorter sequences.
               * @type {number}
               * @default 1.0
               */
              __publicField(this, "length_penalty", 1);
              /**
               * If set to int > 0, all ngrams of that size can only occur once.
               * @type {number}
               * @default 0
               */
              __publicField(this, "no_repeat_ngram_size", 0);
              /**
               * List of token ids that are not allowed to be generated.
               * In order to get the token ids of the words that should not appear in the generated text, use
               * `tokenizer(bad_words, { add_prefix_space: true, add_special_tokens: false }).input_ids`.
               * @type {number[][]}
               * @default null
               */
              __publicField(this, "bad_words_ids", null);
              /**
               * List of token ids that must be generated.
               * If given a `number[][]`, this is treated as a simple list of words that must be included, the opposite to `bad_words_ids`.
               * If given `number[][][]`, this triggers a [disjunctive constraint](https://github.com/huggingface/transformers/issues/14081), where one can allow different forms of each word.
               * @type {number[][]|number[][][]}
               * @default null
               */
              __publicField(this, "force_words_ids", null);
              /**
               * Whether to renormalize the logits after applying all the logits processors or warpers (including the custom ones).
               * It's highly recommended to set this flag to `true` as the search algorithms suppose the score logits are normalized but some logit processors or warpers break the normalization.
               * @type {boolean}
               * @default false
               */
              __publicField(this, "renormalize_logits", false);
              /**
               * Custom constraints that can be added to the generation to ensure that the output will contain the use of certain tokens as defined by `Constraint` objects, in the most sensible way possible.
               * @type {Object[]}
               * @default null
               */
              __publicField(this, "constraints", null);
              /**
               * The id of the token to force as the first generated token after the `decoder_start_token_id`.
               * Useful for multilingual models like mBART where the first generated token needs to be the target language token.
               * @type {number}
               * @default null
               */
              __publicField(this, "forced_bos_token_id", null);
              /**
               * The id of the token to force as the last generated token when `max_length` is reached.
               * Optionally, use a list to set multiple *end-of-sequence* tokens.
               * @type {number|number[]}
               * @default null
               */
              __publicField(this, "forced_eos_token_id", null);
              /**
               * Whether to remove possible *nan* and *inf* outputs of the model to prevent the generation method to crash. Note that using `remove_invalid_values` can slow down generation.
               * @type {boolean}
               */
              __publicField(this, "remove_invalid_values", false);
              /**
               * This Tuple adds an exponentially increasing length penalty, after a certain amount of tokens have been generated.
               * The tuple shall consist of: `(start_index, decay_factor)` where `start_index` indicates where penalty starts and `decay_factor` represents the factor of exponential decay.
               * @type {[number, number]}
               * @default null
               */
              __publicField(this, "exponential_decay_length_penalty", null);
              /**
               * A list of tokens that will be suppressed at generation.
               * The `SuppressTokens` logit processor will set their log probs to `-inf` so that they are not sampled.
               * @type {number[]}
               * @default null
               */
              __publicField(this, "suppress_tokens", null);
              /**
               * A streamer that will be used to stream the generation.
               * @type {import('./streamers.js').TextStreamer}
               * @default null
               */
              __publicField(this, "streamer", null);
              /**
               * A list of tokens that will be suppressed at the beginning of the generation.
               * The `SuppressBeginTokens` logit processor will set their log probs to `-inf` so that they are not sampled.
               * @type {number[]}
               * @default null
               */
              __publicField(this, "begin_suppress_tokens", null);
              /**
               * A list of pairs of integers which indicates a mapping from generation indices to token indices that will be forced before sampling.
               * For example, `[[1, 123]]` means the second generated token will always be a token of index 123.
               * @type {[number, number][]}
               * @default null
               */
              __publicField(this, "forced_decoder_ids", null);
              /**
               * The guidance scale for classifier free guidance (CFG). CFG is enabled by setting `guidance_scale > 1`.
               * Higher guidance scale encourages the model to generate samples that are more closely linked to the input
               * prompt, usually at the expense of poorer quality.
               * @type {number}
               * @default null
               */
              __publicField(this, "guidance_scale", null);
              // Parameters that define the output variables of `generate`
              /**
               * The number of independently computed returned sequences for each element in the batch.
               * @type {number}
               * @default 1
               */
              __publicField(this, "num_return_sequences", 1);
              /**
               * Whether or not to return the attentions tensors of all attention layers.
               * See `attentions` under returned tensors for more details.
               * @type {boolean}
               * @default false
               */
              __publicField(this, "output_attentions", false);
              /**
               * Whether or not to return the hidden states of all layers.
               * See `hidden_states` under returned tensors for more details.
               * @type {boolean}
               * @default false
               */
              __publicField(this, "output_hidden_states", false);
              /**
               * Whether or not to return the prediction scores.
               * See `scores` under returned tensors for more details.
               * @type {boolean}
               * @default false
               */
              __publicField(this, "output_scores", false);
              /**
               * Whether or not to return a `ModelOutput` instead of a plain tuple.
               * @type {boolean}
               * @default false
               */
              __publicField(this, "return_dict_in_generate", false);
              // Special tokens that can be used at generation time
              /**
               * The id of the *padding* token.
               * @type {number}
               * @default null
               */
              __publicField(this, "pad_token_id", null);
              /**
               * The id of the *beginning-of-sequence* token.
               * @type {number}
               * @default null
               */
              __publicField(this, "bos_token_id", null);
              /**
               * The id of the *end-of-sequence* token.
               * Optionally, use a list to set multiple *end-of-sequence* tokens.
               * @type {number|number[]}
               * @default null
               */
              __publicField(this, "eos_token_id", null);
              // Generation parameters exclusive to encoder-decoder models
              /**
               * If set to int > 0, all ngrams of that size that occur in the `encoder_input_ids` cannot occur in the `decoder_input_ids`.
               * @type {number}
               * @default 0
               */
              __publicField(this, "encoder_no_repeat_ngram_size", 0);
              /**
               * If an encoder-decoder model starts decoding with a different token than *bos*, the id of that token.
               * @type {number}
               * @default null
               */
              __publicField(this, "decoder_start_token_id", null);
              // Wild card
              /**
               * Additional generation kwargs will be forwarded to the `generate` function of the model.
               * Kwargs that are not present in `generate`'s signature will be used in the model forward pass.
               * @type {Object}
               * @default {}
               */
              __publicField(this, "generation_kwargs", {});
              Object.assign(this, (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_0__.pick)(config, Object.getOwnPropertyNames(this)));
            }
          }
        }
      ),
      /***/
      "./src/generation/logits_process.js": (
        /*!******************************************!*\
          !*** ./src/generation/logits_process.js ***!
          \******************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            ClassifierFreeGuidanceLogitsProcessor: () => (
              /* binding */
              ClassifierFreeGuidanceLogitsProcessor
            ),
            /* harmony export */
            ForcedBOSTokenLogitsProcessor: () => (
              /* binding */
              ForcedBOSTokenLogitsProcessor
            ),
            /* harmony export */
            ForcedEOSTokenLogitsProcessor: () => (
              /* binding */
              ForcedEOSTokenLogitsProcessor
            ),
            /* harmony export */
            LogitsProcessor: () => (
              /* binding */
              LogitsProcessor
            ),
            /* harmony export */
            LogitsProcessorList: () => (
              /* binding */
              LogitsProcessorList
            ),
            /* harmony export */
            LogitsWarper: () => (
              /* binding */
              LogitsWarper
            ),
            /* harmony export */
            MinLengthLogitsProcessor: () => (
              /* binding */
              MinLengthLogitsProcessor
            ),
            /* harmony export */
            MinNewTokensLengthLogitsProcessor: () => (
              /* binding */
              MinNewTokensLengthLogitsProcessor
            ),
            /* harmony export */
            NoBadWordsLogitsProcessor: () => (
              /* binding */
              NoBadWordsLogitsProcessor
            ),
            /* harmony export */
            NoRepeatNGramLogitsProcessor: () => (
              /* binding */
              NoRepeatNGramLogitsProcessor
            ),
            /* harmony export */
            RepetitionPenaltyLogitsProcessor: () => (
              /* binding */
              RepetitionPenaltyLogitsProcessor
            ),
            /* harmony export */
            SuppressTokensAtBeginLogitsProcessor: () => (
              /* binding */
              SuppressTokensAtBeginLogitsProcessor
            ),
            /* harmony export */
            TemperatureLogitsWarper: () => (
              /* binding */
              TemperatureLogitsWarper
            ),
            /* harmony export */
            TopKLogitsWarper: () => (
              /* binding */
              TopKLogitsWarper
            ),
            /* harmony export */
            TopPLogitsWarper: () => (
              /* binding */
              TopPLogitsWarper
            ),
            /* harmony export */
            WhisperTimeStampLogitsProcessor: () => (
              /* binding */
              WhisperTimeStampLogitsProcessor
            )
            /* harmony export */
          });
          var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../utils/generic.js */
            "./src/utils/generic.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../utils/maths.js */
            "./src/utils/maths.js"
          );
          class LogitsProcessor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
             * Apply the processor to the input logits.
             *
             * @abstract
             * @param {bigint[][]} input_ids The input ids.
             * @param {Tensor} logits The logits to process.
             * @throws {Error} Throws an error if `_call` is not implemented in the subclass.
             */
            _call(input_ids, logits) {
              throw Error("`_call` should be implemented in a subclass");
            }
          }
          class LogitsWarper extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
             * Apply the processor to the input logits.
             *
             * @abstract
             * @param {bigint[][]} input_ids The input ids.
             * @param {Tensor} logits The logits to process.
             * @throws {Error} Throws an error if `_call` is not implemented in the subclass.
             */
            _call(input_ids, logits) {
              throw Error("`_call` should be implemented in a subclass");
            }
          }
          class LogitsProcessorList extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
             * Constructs a new instance of `LogitsProcessorList`.
             */
            constructor() {
              super();
              this.processors = [];
            }
            /**
             * Adds a new logits processor to the list.
             *
             * @param {LogitsProcessor} item The logits processor function to add.
             */
            push(item) {
              this.processors.push(item);
            }
            /**
             * Adds multiple logits processors to the list.
             *
             * @param {LogitsProcessor[]} items The logits processor functions to add.
             */
            extend(items) {
              this.processors.push(...items);
            }
            /**
             * Applies all logits processors in the list to a batch of logits, modifying them in-place.
             *
             * @param {bigint[][]} input_ids The input IDs for the language model.
             * @param {Tensor} logits
             */
            _call(input_ids, logits) {
              let toReturn = logits;
              for (const processor of this.processors) {
                toReturn = processor(input_ids, toReturn);
              }
              return toReturn;
            }
            [Symbol.iterator]() {
              return this.processors.values();
            }
          }
          class ForcedBOSTokenLogitsProcessor extends LogitsProcessor {
            /**
             * Create a ForcedBOSTokenLogitsProcessor.
             * @param {number} bos_token_id The ID of the beginning-of-sequence token to be forced.
             */
            constructor(bos_token_id) {
              super();
              this.bos_token_id = bos_token_id;
            }
            /**
             * Apply the BOS token forcing to the logits.
             * @param {bigint[][]} input_ids The input IDs.
             * @param {Tensor} logits The logits.
             * @returns {Tensor} The logits with BOS token forcing.
             */
            _call(input_ids, logits) {
              for (let i = 0; i < input_ids.length; ++i) {
                if (input_ids[i].length === 1) {
                  const batch_logits_data = (
                    /** @type {Float32Array} */
                    logits[i].data
                  );
                  batch_logits_data.fill(-Infinity);
                  batch_logits_data[this.bos_token_id] = 0;
                }
              }
              return logits;
            }
          }
          class ForcedEOSTokenLogitsProcessor extends LogitsProcessor {
            /**
             * Create a ForcedEOSTokenLogitsProcessor.
             * @param {number} max_length The maximum length of the sequence to be generated.
             * @param {number|number[]} eos_token_id The id(s) of the *end-of-sequence* token.
             */
            constructor(max_length, eos_token_id) {
              super();
              this.max_length = max_length;
              this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];
            }
            /**
             * Apply the processor to input_ids and logits.
             * 
             * @param {bigint[][]} input_ids The input ids.
             * @param {Tensor} logits The logits tensor.
             */
            _call(input_ids, logits) {
              for (let i = 0; i < input_ids.length; ++i) {
                if (input_ids[i].length === this.max_length - 1) {
                  const batch_logits_data = (
                    /** @type {Float32Array} */
                    logits[i].data
                  );
                  batch_logits_data.fill(-Infinity);
                  for (const eos_token of this.eos_token_id) {
                    batch_logits_data[eos_token] = 0;
                  }
                }
              }
              return logits;
            }
          }
          class SuppressTokensAtBeginLogitsProcessor extends LogitsProcessor {
            /**
             * Create a SuppressTokensAtBeginLogitsProcessor.
             * @param {number[]} begin_suppress_tokens The IDs of the tokens to suppress.
             * @param {number} begin_index The number of tokens to generate before suppressing tokens.
             */
            constructor(begin_suppress_tokens, begin_index) {
              super();
              this.begin_suppress_tokens = begin_suppress_tokens;
              this.begin_index = begin_index;
            }
            /**
             * Apply the BOS token forcing to the logits.
             * @param {bigint[][]} input_ids The input IDs.
             * @param {Tensor} logits The logits.
             * @returns {Tensor} The logits with BOS token forcing.
             */
            _call(input_ids, logits) {
              for (let i = 0; i < input_ids.length; ++i) {
                if (input_ids[i].length === this.begin_index) {
                  const batch_logits_data = (
                    /** @type {Float32Array} */
                    logits[i].data
                  );
                  for (const token_id of this.begin_suppress_tokens) {
                    batch_logits_data[token_id] = -Infinity;
                  }
                }
              }
              return logits;
            }
          }
          class WhisperTimeStampLogitsProcessor extends LogitsProcessor {
            /**
             * Constructs a new WhisperTimeStampLogitsProcessor.
             * @param {import('../models/whisper/generation_whisper.js').WhisperGenerationConfig} generate_config The config object passed to the `generate()` method of a transformer model.
             * @param {number[]} init_tokens The initial tokens of the input sequence.
             */
            constructor(generate_config, init_tokens) {
              super();
              this.eos_token_id = Array.isArray(generate_config.eos_token_id) ? generate_config.eos_token_id[0] : generate_config.eos_token_id;
              this.no_timestamps_token_id = generate_config.no_timestamps_token_id;
              this.timestamp_begin = this.no_timestamps_token_id + 1;
              this.begin_index = init_tokens.length;
              if (init_tokens.at(-1) === this.no_timestamps_token_id) {
                this.begin_index -= 1;
              }
              this.max_initial_timestamp_index = generate_config.max_initial_timestamp_index;
            }
            /**
             * Modify the logits to handle timestamp tokens.
             * @param {bigint[][]} input_ids The input sequence of tokens.
             * @param {Tensor} logits The logits output by the model.
             * @returns {Tensor} The modified logits.
             */
            _call(input_ids, logits) {
              for (let i = 0; i < input_ids.length; ++i) {
                const batch_logits_data = (
                  /** @type {Float32Array} */
                  logits[i].data
                );
                batch_logits_data[this.no_timestamps_token_id] = -Infinity;
                if (input_ids[i].length === this.begin_index - 1) {
                  batch_logits_data.fill(-Infinity);
                  batch_logits_data[this.timestamp_begin] = 0;
                  continue;
                }
                const seq = input_ids[i].slice(this.begin_index);
                const last_was_timestamp = seq.length >= 1 && seq[seq.length - 1] >= this.timestamp_begin;
                const penultimate_was_timestamp = seq.length < 2 || seq[seq.length - 2] >= this.timestamp_begin;
                if (last_was_timestamp) {
                  if (penultimate_was_timestamp) {
                    batch_logits_data.subarray(this.timestamp_begin).fill(-Infinity);
                  } else {
                    batch_logits_data.subarray(0, this.eos_token_id).fill(-Infinity);
                  }
                }
                if (input_ids[i].length === this.begin_index && this.max_initial_timestamp_index !== null) {
                  const last_allowed = this.timestamp_begin + this.max_initial_timestamp_index;
                  batch_logits_data.subarray(last_allowed + 1).fill(-Infinity);
                }
                const logprobs = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.log_softmax)(batch_logits_data);
                const timestamp_logprob = Math.log(logprobs.subarray(this.timestamp_begin).map(Math.exp).reduce((a, b) => a + b));
                const max_text_token_logprob = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(logprobs.subarray(0, this.timestamp_begin))[0];
                if (timestamp_logprob > max_text_token_logprob) {
                  batch_logits_data.subarray(0, this.timestamp_begin).fill(-Infinity);
                }
              }
              return logits;
            }
          }
          class NoRepeatNGramLogitsProcessor extends LogitsProcessor {
            /**
             * Create a NoRepeatNGramLogitsProcessor.
             * @param {number} no_repeat_ngram_size The no-repeat-ngram size. All ngrams of this size can only occur once.
             */
            constructor(no_repeat_ngram_size) {
              super();
              this.no_repeat_ngram_size = no_repeat_ngram_size;
            }
            /**
             * Generate n-grams from a sequence of token ids.
             * @param {bigint[]} prevInputIds List of previous input ids
             * @returns {Map<string, number[]>} Map of generated n-grams
             */
            getNgrams(prevInputIds) {
              const curLen = prevInputIds.length;
              const ngrams = [];
              for (let j = 0; j < curLen + 1 - this.no_repeat_ngram_size; ++j) {
                const ngram = [];
                for (let k = 0; k < this.no_repeat_ngram_size; ++k) {
                  ngram.push(prevInputIds[j + k]);
                }
                ngrams.push(ngram.map(Number));
              }
              const generatedNgram = /* @__PURE__ */ new Map();
              for (const ngram of ngrams) {
                const prevNgram = ngram.slice(0, ngram.length - 1);
                const prevNgramKey = JSON.stringify(prevNgram);
                const prevNgramValue = generatedNgram.get(prevNgramKey) ?? [];
                prevNgramValue.push(ngram[ngram.length - 1]);
                generatedNgram.set(prevNgramKey, prevNgramValue);
              }
              return generatedNgram;
            }
            /**
             * Generate n-grams from a sequence of token ids.
             * @param {Map<string, number[]>} bannedNgrams Map of banned n-grams
             * @param {bigint[]} prevInputIds List of previous input ids
             * @returns {number[]} Map of generated n-grams
             */
            getGeneratedNgrams(bannedNgrams, prevInputIds) {
              const ngramIdx = prevInputIds.slice(prevInputIds.length + 1 - this.no_repeat_ngram_size, prevInputIds.length);
              const banned = bannedNgrams.get(JSON.stringify(ngramIdx.map(Number))) ?? [];
              return banned;
            }
            /**
             * Calculate banned n-gram tokens
             * @param {bigint[]} prevInputIds List of previous input ids
             * @returns {number[]} Map of generated n-grams
             */
            calcBannedNgramTokens(prevInputIds) {
              const bannedTokens = [];
              if (prevInputIds.length + 1 < this.no_repeat_ngram_size) {
                return bannedTokens;
              } else {
                const generatedNgrams = this.getNgrams(prevInputIds);
                const bannedTokens2 = this.getGeneratedNgrams(generatedNgrams, prevInputIds);
                return bannedTokens2;
              }
            }
            /**
             * Apply the no-repeat-ngram processor to the logits.
             * @param {bigint[][]} input_ids The input IDs.
             * @param {Tensor} logits The logits.
             * @returns {Tensor} The logits with no-repeat-ngram processing.
             */
            _call(input_ids, logits) {
              for (let i = 0; i < input_ids.length; ++i) {
                const batch_logits_data = (
                  /** @type {Float32Array} */
                  logits[i].data
                );
                const bannedTokens = this.calcBannedNgramTokens(input_ids[i]);
                for (const token of bannedTokens) {
                  batch_logits_data[token] = -Infinity;
                }
              }
              return logits;
            }
          }
          class RepetitionPenaltyLogitsProcessor extends LogitsProcessor {
            /**
             * Create a RepetitionPenaltyLogitsProcessor.
             * @param {number} penalty The parameter for repetition penalty.
             * - 1.0 means no penalty. Above 1.0 penalizes previously generated tokens.
             * - Between 0.0 and 1.0 rewards previously generated tokens.
             */
            constructor(penalty) {
              super();
              this.penalty = penalty;
            }
            /**
             * Apply the repetition penalty to the logits.
             * @param {bigint[][]} input_ids The input IDs.
             * @param {Tensor} logits The logits.
             * @returns {Tensor} The logits with repetition penalty processing.
             */
            _call(input_ids, logits) {
              for (let i = 0; i < input_ids.length; ++i) {
                const batch_logits_data = (
                  /** @type {Float32Array} */
                  logits[i].data
                );
                for (const input_id of new Set(input_ids[i])) {
                  const token = Number(input_id);
                  if (batch_logits_data[token] < 0) {
                    batch_logits_data[token] *= this.penalty;
                  } else {
                    batch_logits_data[token] /= this.penalty;
                  }
                }
              }
              return logits;
            }
          }
          class MinLengthLogitsProcessor extends LogitsProcessor {
            /**
             * Create a MinLengthLogitsProcessor.
             * @param {number} min_length The minimum length below which the score of `eos_token_id` is set to negative infinity.
             * @param {number|number[]} eos_token_id The ID/IDs of the end-of-sequence token.
             */
            constructor(min_length, eos_token_id) {
              super();
              this.min_length = min_length;
              this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];
            }
            /**
             * Apply logit processor.
             * @param {bigint[][]} input_ids The input IDs.
             * @param {Tensor} logits The logits.
             * @returns {Tensor} The processed logits.
             */
            _call(input_ids, logits) {
              for (let i = 0; i < input_ids.length; ++i) {
                if (input_ids[i].length < this.min_length) {
                  const batch_logits_data = (
                    /** @type {Float32Array} */
                    logits[i].data
                  );
                  for (const eos_token of this.eos_token_id) {
                    batch_logits_data[eos_token] = -Infinity;
                  }
                }
              }
              return logits;
            }
          }
          class MinNewTokensLengthLogitsProcessor extends LogitsProcessor {
            /**
             * Create a MinNewTokensLengthLogitsProcessor.
             * @param {number} prompt_length_to_skip The input tokens length.
             * @param {number} min_new_tokens The minimum *new* tokens length below which the score of `eos_token_id` is set to negative infinity.
             * @param {number|number[]} eos_token_id The ID/IDs of the end-of-sequence token.
             */
            constructor(prompt_length_to_skip, min_new_tokens, eos_token_id) {
              super();
              this.prompt_length_to_skip = prompt_length_to_skip;
              this.min_new_tokens = min_new_tokens;
              this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];
            }
            /**
             * Apply logit processor.
             * @param {bigint[][]} input_ids The input IDs.
             * @param {Tensor} logits The logits.
             * @returns {Tensor} The processed logits.
             */
            _call(input_ids, logits) {
              for (let i = 0; i < input_ids.length; ++i) {
                const new_tokens_length = input_ids[i].length - this.prompt_length_to_skip;
                if (new_tokens_length < this.min_new_tokens) {
                  const batch_logits_data = (
                    /** @type {Float32Array} */
                    logits[i].data
                  );
                  for (const eos_token of this.eos_token_id) {
                    batch_logits_data[eos_token] = -Infinity;
                  }
                }
              }
              return logits;
            }
          }
          class NoBadWordsLogitsProcessor extends LogitsProcessor {
            /**
             * Create a `NoBadWordsLogitsProcessor`.
             * @param {number[][]} bad_words_ids List of list of token ids that are not allowed to be generated.
             * @param {number|number[]} eos_token_id The id of the *end-of-sequence* token. Optionally, use a list to set multiple *end-of-sequence* tokens.
             */
            constructor(bad_words_ids, eos_token_id) {
              super();
              this.bad_words_ids = bad_words_ids;
              this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];
            }
            /**
             * Apply logit processor.
             * @param {bigint[][]} input_ids The input IDs.
             * @param {Tensor} logits The logits.
             * @returns {Tensor} The processed logits.
             */
            _call(input_ids, logits) {
              for (let i = 0; i < input_ids.length; ++i) {
                const batch_logits_data = (
                  /** @type {Float32Array} */
                  logits[i].data
                );
                const ids = input_ids[i];
                for (const bad_word_ids of this.bad_words_ids) {
                  if (ids.length < bad_word_ids.length - 1)
                    continue;
                  let mark = true;
                  for (let j = 1; j <= bad_word_ids.length - 1; ++j) {
                    if (bad_word_ids.at(-j - 1) != ids.at(-j)) {
                      mark = false;
                      break;
                    }
                  }
                  if (mark) {
                    batch_logits_data[bad_word_ids.at(-1)] = -Infinity;
                  }
                }
              }
              return logits;
            }
          }
          class ClassifierFreeGuidanceLogitsProcessor extends LogitsProcessor {
            /**
             * Create a `ClassifierFreeGuidanceLogitsProcessor`.
             * @param {number} guidance_scale The guidance scale for classifier free guidance (CFG). CFG is enabled by setting `guidance_scale > 1`.
             * Higher guidance scale encourages the model to generate samples that are more closely linked to the input
             * prompt, usually at the expense of poorer quality.
             */
            constructor(guidance_scale) {
              super();
              if (guidance_scale <= 1) {
                throw new Error(
                  `Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${guidance_scale}.`
                );
              }
              this.guidance_scale = guidance_scale;
            }
            /**
             * Apply logit processor.
             * @param {bigint[][]} input_ids The input IDs.
             * @param {Tensor} logits The logits.
             * @returns {Tensor} The processed logits.
             */
            _call(input_ids, logits) {
              if (logits.dims[0] !== 2 * input_ids.length) {
                throw new Error(
                  `Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${logits.dims[0]} for the logits and ${input_ids.length} for the input ids.`
                );
              }
              const unguided_bsz = input_ids.length;
              const cond_logits = logits.slice([0, unguided_bsz], null);
              const uncond_logits = logits.slice([unguided_bsz, logits.dims[0]], null);
              for (let i = 0; i < uncond_logits.data.length; ++i) {
                uncond_logits.data[i] += (cond_logits.data[i] - uncond_logits.data[i]) * this.guidance_scale;
              }
              return uncond_logits;
            }
          }
          class TemperatureLogitsWarper extends LogitsWarper {
            /**
             * Create a `TemperatureLogitsWarper`.
             * @param {number} temperature Strictly positive float value used to modulate the logits distribution.
             * A value smaller than `1` decreases randomness (and vice versa), with `0` being equivalent to shifting
             * all probability mass to the most likely token.
             */
            constructor(temperature) {
              super();
              if (typeof temperature !== "number" || temperature <= 0) {
                let errorMessage = `\`temperature\` (=${temperature}) must be a strictly positive float, otherwise your next token scores will be invalid.`;
                if (temperature === 0) {
                  errorMessage += " If you're looking for greedy decoding strategies, set `do_sample=false`.";
                }
              }
              this.temperature = temperature;
            }
            /**
             * Apply logit warper.
             * @param {bigint[][]} input_ids The input IDs.
             * @param {Tensor} logits The logits.
             * @returns {Tensor} The processed logits.
             */
            _call(input_ids, logits) {
              const batch_logits_data = (
                /** @type {Float32Array} */
                logits.data
              );
              for (let i = 0; i < batch_logits_data.length; ++i) {
                batch_logits_data[i] /= this.temperature;
              }
              return logits;
            }
          }
          class TopPLogitsWarper extends LogitsWarper {
            /**
             * Create a `TopPLogitsWarper`.
             * @param {number} top_p If set to < 1, only the smallest set of most probable tokens with
             * probabilities that add up to `top_p` or higher are kept for generation.
             * @param {Object} options Additional options for the top-p sampling.
             * @param {number} [options.filter_value=-Infinity] All filtered values will be set to this float value.
             * @param {number} [options.min_tokens_to_keep=1] Minimum number of tokens that cannot be filtered.
             */
            constructor(top_p, {
              filter_value = -Infinity,
              min_tokens_to_keep = 1
            } = {}) {
              super();
              if (top_p < 0 || top_p > 1) {
                throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${top_p}`);
              }
              if (!Number.isInteger(min_tokens_to_keep) || min_tokens_to_keep < 1) {
                throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${min_tokens_to_keep}`);
              }
              this.top_p = top_p;
              this.filter_value = filter_value;
              this.min_tokens_to_keep = min_tokens_to_keep;
            }
          }
          class TopKLogitsWarper extends LogitsWarper {
            /**
             * Create a `TopKLogitsWarper`.
             * @param {number} top_k If set to > 0, only the top `top_k` tokens are kept for generation.
             * @param {Object} options Additional options for the top-k sampling.
             * @param {number} [options.filter_value=-Infinity] All filtered values will be set to this float value.
             * @param {number} [options.min_tokens_to_keep=1] Minimum number of tokens that cannot be filtered.
             */
            constructor(top_k, {
              filter_value = -Infinity,
              min_tokens_to_keep = 1
            } = {}) {
              super();
              if (!Number.isInteger(top_k) || top_k < 0) {
                throw new Error(`\`top_k\` must be a positive integer, but is ${top_k}`);
              }
              this.top_k = Math.max(top_k, min_tokens_to_keep);
              this.filter_value = filter_value;
            }
          }
        }
      ),
      /***/
      "./src/generation/logits_sampler.js": (
        /*!******************************************!*\
          !*** ./src/generation/logits_sampler.js ***!
          \******************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            LogitsSampler: () => (
              /* binding */
              LogitsSampler
            )
            /* harmony export */
          });
          var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../utils/generic.js */
            "./src/utils/generic.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../utils/maths.js */
            "./src/utils/maths.js"
          );
          var _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../generation/configuration_utils.js */
            "./src/generation/configuration_utils.js"
          );
          class LogitsSampler extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
             * Creates a new Sampler object with the specified generation config.
             * @param {GenerationConfig} generation_config The generation config.
             */
            constructor(generation_config) {
              super();
              this.generation_config = generation_config;
            }
            /**
             * Executes the sampler, using the specified logits.
             * @param {Tensor} logits
             * @returns {Promise<[bigint, number][]>}
             */
            async _call(logits) {
              return this.sample(logits);
            }
            /**
             * Abstract method for sampling the logits.
             * @param {Tensor} logits
             * @throws {Error} If not implemented in subclass.
             * @returns {Promise<[bigint, number][]>}
             */
            async sample(logits) {
              throw Error("sample should be implemented in subclasses.");
            }
            /**
             * Returns the specified logits as an array, with temperature applied.
             * @param {Tensor} logits
             * @param {number} index
             * @returns {Float32Array}
             */
            getLogits(logits, index) {
              let vocabSize = logits.dims.at(-1);
              let logs = (
                /** @type {Float32Array} */
                logits.data
              );
              if (index === -1) {
                logs = logs.slice(-vocabSize);
              } else {
                let startIndex = index * vocabSize;
                logs = logs.slice(startIndex, startIndex + vocabSize);
              }
              return logs;
            }
            /**
             * Selects an item randomly based on the specified probabilities.
             * @param {import("../transformers.js").DataArray} probabilities An array of probabilities to use for selection.
             * @returns {number} The index of the selected item.
             */
            randomSelect(probabilities) {
              let sumProbabilities = 0;
              for (let i = 0; i < probabilities.length; ++i) {
                sumProbabilities += probabilities[i];
              }
              let r = Math.random() * sumProbabilities;
              for (let i = 0; i < probabilities.length; ++i) {
                r -= probabilities[i];
                if (r <= 0) {
                  return i;
                }
              }
              return 0;
            }
            /**
             * Returns a Sampler object based on the specified options.
             * @param {GenerationConfig} generation_config An object containing options for the sampler.
             * @returns {LogitsSampler} A Sampler object.
             */
            static getSampler(generation_config) {
              if (generation_config.do_sample) {
                return new MultinomialSampler(generation_config);
              } else if (generation_config.num_beams > 1) {
                return new BeamSearchSampler(generation_config);
              } else {
                if (generation_config.num_return_sequences > 1) {
                  throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${generation_config.num_return_sequences}.`);
                }
                return new GreedySampler(generation_config);
              }
            }
          }
          class GreedySampler extends LogitsSampler {
            /**
             * Sample the maximum probability of a given logits tensor.
             * @param {Tensor} logits
             * @returns {Promise<[bigint, number][]>} An array with a single tuple, containing the index of the maximum value and a meaningless score (since this is a greedy search).
             */
            async sample(logits) {
              const argmax = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(logits.data)[1];
              return [
                [BigInt(argmax), 0]
              ];
            }
          }
          class MultinomialSampler extends LogitsSampler {
            /**
             * Sample from the logits.
             * @param {Tensor} logits
             * @returns {Promise<[bigint, number][]>}
             */
            async sample(logits) {
              let k = logits.dims.at(-1);
              if (this.generation_config.top_k > 0) {
                k = Math.min(this.generation_config.top_k, k);
              }
              const [v, i] = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.topk)(logits, k);
              const probabilities = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.softmax)(
                /** @type {Float32Array} */
                v.data
              );
              return Array.from({ length: this.generation_config.num_beams }, () => {
                const sampledIndex = this.randomSelect(probabilities);
                return [
                  i.data[sampledIndex],
                  // token id
                  Math.log(probabilities[sampledIndex])
                  // score
                ];
              });
            }
          }
          class BeamSearchSampler extends LogitsSampler {
            /**
             * Sample from the logits.
             * @param {Tensor} logits
             * @returns {Promise<[bigint, number][]>}
             */
            async sample(logits) {
              let k = logits.dims.at(-1);
              if (this.generation_config.top_k > 0) {
                k = Math.min(this.generation_config.top_k, k);
              }
              const [v, i] = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.topk)(logits, k);
              const probabilities = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.softmax)(
                /** @type {Float32Array} */
                v.data
              );
              return Array.from({ length: this.generation_config.num_beams }, (_2, x2) => {
                return [
                  i.data[x2],
                  // token id
                  Math.log(probabilities[x2])
                  // score
                ];
              });
            }
          }
        }
      ),
      /***/
      "./src/generation/stopping_criteria.js": (
        /*!*********************************************!*\
          !*** ./src/generation/stopping_criteria.js ***!
          \*********************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            EosTokenCriteria: () => (
              /* binding */
              EosTokenCriteria
            ),
            /* harmony export */
            InterruptableStoppingCriteria: () => (
              /* binding */
              InterruptableStoppingCriteria
            ),
            /* harmony export */
            MaxLengthCriteria: () => (
              /* binding */
              MaxLengthCriteria
            ),
            /* harmony export */
            StoppingCriteria: () => (
              /* binding */
              StoppingCriteria
            ),
            /* harmony export */
            StoppingCriteriaList: () => (
              /* binding */
              StoppingCriteriaList
            )
            /* harmony export */
          });
          var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../utils/generic.js */
            "./src/utils/generic.js"
          );
          class StoppingCriteria extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
             * 
             * @param {number[][]} input_ids (`number[][]` of shape `(batch_size, sequence_length)`):
             * Indices of input sequence tokens in the vocabulary.
             * @param {number[][]} scores scores (`number[][]` of shape `(batch_size, config.vocab_size)`):
             * Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
             * or scores for each vocabulary token after SoftMax.
             * @returns {boolean[]} A list of booleans indicating whether each sequence should be stopped.
             */
            _call(input_ids, scores) {
              throw Error("StoppingCriteria needs to be subclassed");
            }
          }
          class StoppingCriteriaList extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
             * Constructs a new instance of `StoppingCriteriaList`.
             */
            constructor() {
              super();
              this.criteria = [];
            }
            /**
             * Adds a new stopping criterion to the list.
             *
             * @param {StoppingCriteria} item The stopping criterion to add.
             */
            push(item) {
              this.criteria.push(item);
            }
            /**
             * Adds multiple stopping criteria to the list.
             *
             * @param {StoppingCriteria|StoppingCriteriaList|StoppingCriteria[]} items The stopping criteria to add.
             */
            extend(items) {
              if (items instanceof StoppingCriteriaList) {
                items = items.criteria;
              } else if (items instanceof StoppingCriteria) {
                items = [items];
              }
              this.criteria.push(...items);
            }
            _call(input_ids, scores) {
              const is_done = new Array(input_ids.length).fill(false);
              for (const criterion of this.criteria) {
                const criterion_done = criterion(input_ids, scores);
                for (let i = 0; i < is_done.length; ++i) {
                  is_done[i] || (is_done[i] = criterion_done[i]);
                }
              }
              return is_done;
            }
            [Symbol.iterator]() {
              return this.criteria.values();
            }
          }
          class MaxLengthCriteria extends StoppingCriteria {
            /**
             * 
             * @param {number} max_length The maximum length that the output sequence can have in number of tokens.
             * @param {number} [max_position_embeddings=null] The maximum model length, as defined by the model's `config.max_position_embeddings` attribute.
             */
            constructor(max_length, max_position_embeddings = null) {
              super();
              this.max_length = max_length;
              this.max_position_embeddings = max_position_embeddings;
            }
            _call(input_ids) {
              return input_ids.map((ids) => ids.length >= this.max_length);
            }
          }
          class EosTokenCriteria extends StoppingCriteria {
            /**
             * 
             * @param {number|number[]} eos_token_id The id of the *end-of-sequence* token.
             * Optionally, use a list to set multiple *end-of-sequence* tokens.
             */
            constructor(eos_token_id) {
              super();
              if (!Array.isArray(eos_token_id)) {
                eos_token_id = [eos_token_id];
              }
              this.eos_token_id = eos_token_id;
            }
            /**
             * 
             * @param {number[][]} input_ids 
             * @param {number[][]} scores 
             * @returns {boolean[]}
             */
            _call(input_ids, scores) {
              return input_ids.map((ids) => {
                const last = ids.at(-1);
                return this.eos_token_id.some((eos_id) => last == eos_id);
              });
            }
          }
          class InterruptableStoppingCriteria extends StoppingCriteria {
            constructor() {
              super();
              this.interrupted = false;
            }
            interrupt() {
              this.interrupted = true;
            }
            reset() {
              this.interrupted = false;
            }
            _call(input_ids, scores) {
              return new Array(input_ids.length).fill(this.interrupted);
            }
          }
        }
      ),
      /***/
      "./src/generation/streamers.js": (
        /*!*************************************!*\
          !*** ./src/generation/streamers.js ***!
          \*************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            BaseStreamer: () => (
              /* binding */
              BaseStreamer
            ),
            /* harmony export */
            TextStreamer: () => (
              /* binding */
              TextStreamer
            ),
            /* harmony export */
            WhisperTextStreamer: () => (
              /* binding */
              WhisperTextStreamer
            )
            /* harmony export */
          });
          var _utils_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../utils/core.js */
            "./src/utils/core.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../env.js */
            "./src/env.js"
          );
          class BaseStreamer {
            /**
             * Function that is called by `.generate()` to push new tokens
             * @param {bigint[][]} value 
             */
            put(value) {
              throw Error("Not implemented");
            }
            /**
             * Function that is called by `.generate()` to signal the end of generation
             */
            end() {
              throw Error("Not implemented");
            }
          }
          const stdout_write = _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_PROCESS_AVAILABLE ? (x2) => process.stdout.write(x2) : (x2) => console.log(x2);
          class TextStreamer extends BaseStreamer {
            /**
             * 
             * @param {import('../tokenizers.js').PreTrainedTokenizer} tokenizer
             * @param {Object} options
             * @param {boolean} [options.skip_prompt=false] Whether to skip the prompt tokens
             * @param {boolean} [options.skip_special_tokens=true] Whether to skip special tokens when decoding
             * @param {function(string): void} [options.callback_function=null] Function to call when a piece of text is ready to display
             * @param {function(bigint[]): void} [options.token_callback_function=null] Function to call when a new token is generated
             * @param {Object} [options.decode_kwargs={}] Additional keyword arguments to pass to the tokenizer's decode method
             */
            constructor(tokenizer, {
              skip_prompt = false,
              callback_function = null,
              token_callback_function = null,
              skip_special_tokens = true,
              decode_kwargs = {},
              ...kwargs
            } = {}) {
              super();
              this.tokenizer = tokenizer;
              this.skip_prompt = skip_prompt;
              this.callback_function = callback_function ?? stdout_write;
              this.token_callback_function = token_callback_function;
              this.decode_kwargs = { skip_special_tokens, ...decode_kwargs, ...kwargs };
              this.token_cache = [];
              this.print_len = 0;
              this.next_tokens_are_prompt = true;
            }
            /**
             * Receives tokens, decodes them, and prints them to stdout as soon as they form entire words.
             * @param {bigint[][]} value 
             */
            put(value) {
              if (value.length > 1) {
                throw Error("TextStreamer only supports batch size of 1");
              }
              const is_prompt = this.next_tokens_are_prompt;
              if (is_prompt) {
                this.next_tokens_are_prompt = false;
                if (this.skip_prompt)
                  return;
              }
              const tokens = value[0];
              this.token_callback_function?.(tokens);
              this.token_cache = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(this.token_cache, tokens);
              const text = this.tokenizer.decode(this.token_cache, this.decode_kwargs);
              let printable_text;
              if (is_prompt || text.endsWith("\n")) {
                printable_text = text.slice(this.print_len);
                this.token_cache = [];
                this.print_len = 0;
              } else if (text.length > 0 && (0, _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__.is_chinese_char)(text.charCodeAt(text.length - 1))) {
                printable_text = text.slice(this.print_len);
                this.print_len += printable_text.length;
              } else {
                printable_text = text.slice(this.print_len, text.lastIndexOf(" ") + 1);
                this.print_len += printable_text.length;
              }
              this.on_finalized_text(printable_text, false);
            }
            /**
             * Flushes any remaining cache and prints a newline to stdout.
             */
            end() {
              let printable_text;
              if (this.token_cache.length > 0) {
                const text = this.tokenizer.decode(this.token_cache, this.decode_kwargs);
                printable_text = text.slice(this.print_len);
                this.token_cache = [];
                this.print_len = 0;
              } else {
                printable_text = "";
              }
              this.next_tokens_are_prompt = true;
              this.on_finalized_text(printable_text, true);
            }
            /**
             * Prints the new text to stdout. If the stream is ending, also prints a newline.
             * @param {string} text 
             * @param {boolean} stream_end 
             */
            on_finalized_text(text, stream_end) {
              if (text.length > 0) {
                this.callback_function?.(text);
              }
              if (stream_end && this.callback_function === stdout_write && _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_PROCESS_AVAILABLE) {
                this.callback_function?.("\n");
              }
            }
          }
          class WhisperTextStreamer extends TextStreamer {
            /**
             * @param {import('../tokenizers.js').WhisperTokenizer} tokenizer
             * @param {Object} options
             * @param {boolean} [options.skip_prompt=false] Whether to skip the prompt tokens
             * @param {function(string): void} [options.callback_function=null] Function to call when a piece of text is ready to display
             * @param {function(bigint[]): void} [options.token_callback_function=null] Function to call when a new token is generated
             * @param {function(number): void} [options.on_chunk_start=null] Function to call when a new chunk starts
             * @param {function(number): void} [options.on_chunk_end=null] Function to call when a chunk ends
             * @param {function(): void} [options.on_finalize=null] Function to call when the stream is finalized
             * @param {number} [options.time_precision=0.02] Precision of the timestamps
             * @param {boolean} [options.skip_special_tokens=true] Whether to skip special tokens when decoding
             * @param {Object} [options.decode_kwargs={}] Additional keyword arguments to pass to the tokenizer's decode method
             */
            constructor(tokenizer, {
              skip_prompt = false,
              callback_function = null,
              token_callback_function = null,
              on_chunk_start = null,
              on_chunk_end = null,
              on_finalize = null,
              time_precision = 0.02,
              skip_special_tokens = true,
              decode_kwargs = {}
            } = {}) {
              super(tokenizer, {
                skip_prompt,
                skip_special_tokens,
                callback_function,
                token_callback_function,
                decode_kwargs
              });
              this.timestamp_begin = tokenizer.timestamp_begin;
              this.on_chunk_start = on_chunk_start;
              this.on_chunk_end = on_chunk_end;
              this.on_finalize = on_finalize;
              this.time_precision = time_precision;
              this.waiting_for_timestamp = false;
            }
            /**
             * @param {bigint[][]} value 
             */
            put(value) {
              if (value.length > 1) {
                throw Error("WhisperTextStreamer only supports batch size of 1");
              }
              const tokens = value[0];
              if (tokens.length === 1) {
                const offset = Number(tokens[0]) - this.timestamp_begin;
                if (offset >= 0) {
                  const time = offset * this.time_precision;
                  if (this.waiting_for_timestamp) {
                    this.on_chunk_end?.(time);
                  } else {
                    this.on_chunk_start?.(time);
                  }
                  this.waiting_for_timestamp = !this.waiting_for_timestamp;
                  this.token_callback_function?.(tokens);
                  return;
                }
              }
              return super.put(value);
            }
            end() {
              super.end();
              this.on_finalize?.();
            }
          }
        }
      ),
      /***/
      "./src/models.js": (
        /*!***********************!*\
          !*** ./src/models.js ***!
          \***********************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            ASTForAudioClassification: () => (
              /* binding */
              ASTForAudioClassification
            ),
            /* harmony export */
            ASTModel: () => (
              /* binding */
              ASTModel
            ),
            /* harmony export */
            ASTPreTrainedModel: () => (
              /* binding */
              ASTPreTrainedModel
            ),
            /* harmony export */
            AlbertForMaskedLM: () => (
              /* binding */
              AlbertForMaskedLM
            ),
            /* harmony export */
            AlbertForQuestionAnswering: () => (
              /* binding */
              AlbertForQuestionAnswering
            ),
            /* harmony export */
            AlbertForSequenceClassification: () => (
              /* binding */
              AlbertForSequenceClassification
            ),
            /* harmony export */
            AlbertModel: () => (
              /* binding */
              AlbertModel
            ),
            /* harmony export */
            AlbertPreTrainedModel: () => (
              /* binding */
              AlbertPreTrainedModel
            ),
            /* harmony export */
            AutoModel: () => (
              /* binding */
              AutoModel
            ),
            /* harmony export */
            AutoModelForAudioClassification: () => (
              /* binding */
              AutoModelForAudioClassification
            ),
            /* harmony export */
            AutoModelForAudioFrameClassification: () => (
              /* binding */
              AutoModelForAudioFrameClassification
            ),
            /* harmony export */
            AutoModelForAudioTextToText: () => (
              /* binding */
              AutoModelForAudioTextToText
            ),
            /* harmony export */
            AutoModelForCTC: () => (
              /* binding */
              AutoModelForCTC
            ),
            /* harmony export */
            AutoModelForCausalLM: () => (
              /* binding */
              AutoModelForCausalLM
            ),
            /* harmony export */
            AutoModelForDepthEstimation: () => (
              /* binding */
              AutoModelForDepthEstimation
            ),
            /* harmony export */
            AutoModelForDocumentQuestionAnswering: () => (
              /* binding */
              AutoModelForDocumentQuestionAnswering
            ),
            /* harmony export */
            AutoModelForImageClassification: () => (
              /* binding */
              AutoModelForImageClassification
            ),
            /* harmony export */
            AutoModelForImageFeatureExtraction: () => (
              /* binding */
              AutoModelForImageFeatureExtraction
            ),
            /* harmony export */
            AutoModelForImageMatting: () => (
              /* binding */
              AutoModelForImageMatting
            ),
            /* harmony export */
            AutoModelForImageSegmentation: () => (
              /* binding */
              AutoModelForImageSegmentation
            ),
            /* harmony export */
            AutoModelForImageTextToText: () => (
              /* binding */
              AutoModelForImageTextToText
            ),
            /* harmony export */
            AutoModelForImageToImage: () => (
              /* binding */
              AutoModelForImageToImage
            ),
            /* harmony export */
            AutoModelForMaskGeneration: () => (
              /* binding */
              AutoModelForMaskGeneration
            ),
            /* harmony export */
            AutoModelForMaskedLM: () => (
              /* binding */
              AutoModelForMaskedLM
            ),
            /* harmony export */
            AutoModelForNormalEstimation: () => (
              /* binding */
              AutoModelForNormalEstimation
            ),
            /* harmony export */
            AutoModelForObjectDetection: () => (
              /* binding */
              AutoModelForObjectDetection
            ),
            /* harmony export */
            AutoModelForPoseEstimation: () => (
              /* binding */
              AutoModelForPoseEstimation
            ),
            /* harmony export */
            AutoModelForQuestionAnswering: () => (
              /* binding */
              AutoModelForQuestionAnswering
            ),
            /* harmony export */
            AutoModelForSemanticSegmentation: () => (
              /* binding */
              AutoModelForSemanticSegmentation
            ),
            /* harmony export */
            AutoModelForSeq2SeqLM: () => (
              /* binding */
              AutoModelForSeq2SeqLM
            ),
            /* harmony export */
            AutoModelForSequenceClassification: () => (
              /* binding */
              AutoModelForSequenceClassification
            ),
            /* harmony export */
            AutoModelForSpeechSeq2Seq: () => (
              /* binding */
              AutoModelForSpeechSeq2Seq
            ),
            /* harmony export */
            AutoModelForTextToSpectrogram: () => (
              /* binding */
              AutoModelForTextToSpectrogram
            ),
            /* harmony export */
            AutoModelForTextToWaveform: () => (
              /* binding */
              AutoModelForTextToWaveform
            ),
            /* harmony export */
            AutoModelForTokenClassification: () => (
              /* binding */
              AutoModelForTokenClassification
            ),
            /* harmony export */
            AutoModelForUniversalSegmentation: () => (
              /* binding */
              AutoModelForUniversalSegmentation
            ),
            /* harmony export */
            AutoModelForVision2Seq: () => (
              /* binding */
              AutoModelForVision2Seq
            ),
            /* harmony export */
            AutoModelForXVector: () => (
              /* binding */
              AutoModelForXVector
            ),
            /* harmony export */
            AutoModelForZeroShotObjectDetection: () => (
              /* binding */
              AutoModelForZeroShotObjectDetection
            ),
            /* harmony export */
            BartForConditionalGeneration: () => (
              /* binding */
              BartForConditionalGeneration
            ),
            /* harmony export */
            BartForSequenceClassification: () => (
              /* binding */
              BartForSequenceClassification
            ),
            /* harmony export */
            BartModel: () => (
              /* binding */
              BartModel
            ),
            /* harmony export */
            BartPretrainedModel: () => (
              /* binding */
              BartPretrainedModel
            ),
            /* harmony export */
            BaseModelOutput: () => (
              /* binding */
              BaseModelOutput
            ),
            /* harmony export */
            BeitForImageClassification: () => (
              /* binding */
              BeitForImageClassification
            ),
            /* harmony export */
            BeitModel: () => (
              /* binding */
              BeitModel
            ),
            /* harmony export */
            BeitPreTrainedModel: () => (
              /* binding */
              BeitPreTrainedModel
            ),
            /* harmony export */
            BertForMaskedLM: () => (
              /* binding */
              BertForMaskedLM
            ),
            /* harmony export */
            BertForQuestionAnswering: () => (
              /* binding */
              BertForQuestionAnswering
            ),
            /* harmony export */
            BertForSequenceClassification: () => (
              /* binding */
              BertForSequenceClassification
            ),
            /* harmony export */
            BertForTokenClassification: () => (
              /* binding */
              BertForTokenClassification
            ),
            /* harmony export */
            BertModel: () => (
              /* binding */
              BertModel
            ),
            /* harmony export */
            BertPreTrainedModel: () => (
              /* binding */
              BertPreTrainedModel
            ),
            /* harmony export */
            BlenderbotForConditionalGeneration: () => (
              /* binding */
              BlenderbotForConditionalGeneration
            ),
            /* harmony export */
            BlenderbotModel: () => (
              /* binding */
              BlenderbotModel
            ),
            /* harmony export */
            BlenderbotPreTrainedModel: () => (
              /* binding */
              BlenderbotPreTrainedModel
            ),
            /* harmony export */
            BlenderbotSmallForConditionalGeneration: () => (
              /* binding */
              BlenderbotSmallForConditionalGeneration
            ),
            /* harmony export */
            BlenderbotSmallModel: () => (
              /* binding */
              BlenderbotSmallModel
            ),
            /* harmony export */
            BlenderbotSmallPreTrainedModel: () => (
              /* binding */
              BlenderbotSmallPreTrainedModel
            ),
            /* harmony export */
            BloomForCausalLM: () => (
              /* binding */
              BloomForCausalLM
            ),
            /* harmony export */
            BloomModel: () => (
              /* binding */
              BloomModel
            ),
            /* harmony export */
            BloomPreTrainedModel: () => (
              /* binding */
              BloomPreTrainedModel
            ),
            /* harmony export */
            CLIPModel: () => (
              /* binding */
              CLIPModel
            ),
            /* harmony export */
            CLIPPreTrainedModel: () => (
              /* binding */
              CLIPPreTrainedModel
            ),
            /* harmony export */
            CLIPSegForImageSegmentation: () => (
              /* binding */
              CLIPSegForImageSegmentation
            ),
            /* harmony export */
            CLIPSegModel: () => (
              /* binding */
              CLIPSegModel
            ),
            /* harmony export */
            CLIPSegPreTrainedModel: () => (
              /* binding */
              CLIPSegPreTrainedModel
            ),
            /* harmony export */
            CLIPTextModel: () => (
              /* binding */
              CLIPTextModel
            ),
            /* harmony export */
            CLIPTextModelWithProjection: () => (
              /* binding */
              CLIPTextModelWithProjection
            ),
            /* harmony export */
            CLIPVisionModel: () => (
              /* binding */
              CLIPVisionModel
            ),
            /* harmony export */
            CLIPVisionModelWithProjection: () => (
              /* binding */
              CLIPVisionModelWithProjection
            ),
            /* harmony export */
            CamembertForMaskedLM: () => (
              /* binding */
              CamembertForMaskedLM
            ),
            /* harmony export */
            CamembertForQuestionAnswering: () => (
              /* binding */
              CamembertForQuestionAnswering
            ),
            /* harmony export */
            CamembertForSequenceClassification: () => (
              /* binding */
              CamembertForSequenceClassification
            ),
            /* harmony export */
            CamembertForTokenClassification: () => (
              /* binding */
              CamembertForTokenClassification
            ),
            /* harmony export */
            CamembertModel: () => (
              /* binding */
              CamembertModel
            ),
            /* harmony export */
            CamembertPreTrainedModel: () => (
              /* binding */
              CamembertPreTrainedModel
            ),
            /* harmony export */
            CausalLMOutput: () => (
              /* binding */
              CausalLMOutput
            ),
            /* harmony export */
            CausalLMOutputWithPast: () => (
              /* binding */
              CausalLMOutputWithPast
            ),
            /* harmony export */
            ChineseCLIPModel: () => (
              /* binding */
              ChineseCLIPModel
            ),
            /* harmony export */
            ChineseCLIPPreTrainedModel: () => (
              /* binding */
              ChineseCLIPPreTrainedModel
            ),
            /* harmony export */
            ClapAudioModelWithProjection: () => (
              /* binding */
              ClapAudioModelWithProjection
            ),
            /* harmony export */
            ClapModel: () => (
              /* binding */
              ClapModel
            ),
            /* harmony export */
            ClapPreTrainedModel: () => (
              /* binding */
              ClapPreTrainedModel
            ),
            /* harmony export */
            ClapTextModelWithProjection: () => (
              /* binding */
              ClapTextModelWithProjection
            ),
            /* harmony export */
            CodeGenForCausalLM: () => (
              /* binding */
              CodeGenForCausalLM
            ),
            /* harmony export */
            CodeGenModel: () => (
              /* binding */
              CodeGenModel
            ),
            /* harmony export */
            CodeGenPreTrainedModel: () => (
              /* binding */
              CodeGenPreTrainedModel
            ),
            /* harmony export */
            CohereForCausalLM: () => (
              /* binding */
              CohereForCausalLM
            ),
            /* harmony export */
            CohereModel: () => (
              /* binding */
              CohereModel
            ),
            /* harmony export */
            CoherePreTrainedModel: () => (
              /* binding */
              CoherePreTrainedModel
            ),
            /* harmony export */
            ConvBertForMaskedLM: () => (
              /* binding */
              ConvBertForMaskedLM
            ),
            /* harmony export */
            ConvBertForQuestionAnswering: () => (
              /* binding */
              ConvBertForQuestionAnswering
            ),
            /* harmony export */
            ConvBertForSequenceClassification: () => (
              /* binding */
              ConvBertForSequenceClassification
            ),
            /* harmony export */
            ConvBertForTokenClassification: () => (
              /* binding */
              ConvBertForTokenClassification
            ),
            /* harmony export */
            ConvBertModel: () => (
              /* binding */
              ConvBertModel
            ),
            /* harmony export */
            ConvBertPreTrainedModel: () => (
              /* binding */
              ConvBertPreTrainedModel
            ),
            /* harmony export */
            ConvNextForImageClassification: () => (
              /* binding */
              ConvNextForImageClassification
            ),
            /* harmony export */
            ConvNextModel: () => (
              /* binding */
              ConvNextModel
            ),
            /* harmony export */
            ConvNextPreTrainedModel: () => (
              /* binding */
              ConvNextPreTrainedModel
            ),
            /* harmony export */
            ConvNextV2ForImageClassification: () => (
              /* binding */
              ConvNextV2ForImageClassification
            ),
            /* harmony export */
            ConvNextV2Model: () => (
              /* binding */
              ConvNextV2Model
            ),
            /* harmony export */
            ConvNextV2PreTrainedModel: () => (
              /* binding */
              ConvNextV2PreTrainedModel
            ),
            /* harmony export */
            DFineForObjectDetection: () => (
              /* binding */
              DFineForObjectDetection
            ),
            /* harmony export */
            DFineModel: () => (
              /* binding */
              DFineModel
            ),
            /* harmony export */
            DFinePreTrainedModel: () => (
              /* binding */
              DFinePreTrainedModel
            ),
            /* harmony export */
            DPTForDepthEstimation: () => (
              /* binding */
              DPTForDepthEstimation
            ),
            /* harmony export */
            DPTModel: () => (
              /* binding */
              DPTModel
            ),
            /* harmony export */
            DPTPreTrainedModel: () => (
              /* binding */
              DPTPreTrainedModel
            ),
            /* harmony export */
            DacDecoderModel: () => (
              /* binding */
              DacDecoderModel
            ),
            /* harmony export */
            DacDecoderOutput: () => (
              /* binding */
              DacDecoderOutput
            ),
            /* harmony export */
            DacEncoderModel: () => (
              /* binding */
              DacEncoderModel
            ),
            /* harmony export */
            DacEncoderOutput: () => (
              /* binding */
              DacEncoderOutput
            ),
            /* harmony export */
            DacModel: () => (
              /* binding */
              DacModel
            ),
            /* harmony export */
            DacPreTrainedModel: () => (
              /* binding */
              DacPreTrainedModel
            ),
            /* harmony export */
            DebertaForMaskedLM: () => (
              /* binding */
              DebertaForMaskedLM
            ),
            /* harmony export */
            DebertaForQuestionAnswering: () => (
              /* binding */
              DebertaForQuestionAnswering
            ),
            /* harmony export */
            DebertaForSequenceClassification: () => (
              /* binding */
              DebertaForSequenceClassification
            ),
            /* harmony export */
            DebertaForTokenClassification: () => (
              /* binding */
              DebertaForTokenClassification
            ),
            /* harmony export */
            DebertaModel: () => (
              /* binding */
              DebertaModel
            ),
            /* harmony export */
            DebertaPreTrainedModel: () => (
              /* binding */
              DebertaPreTrainedModel
            ),
            /* harmony export */
            DebertaV2ForMaskedLM: () => (
              /* binding */
              DebertaV2ForMaskedLM
            ),
            /* harmony export */
            DebertaV2ForQuestionAnswering: () => (
              /* binding */
              DebertaV2ForQuestionAnswering
            ),
            /* harmony export */
            DebertaV2ForSequenceClassification: () => (
              /* binding */
              DebertaV2ForSequenceClassification
            ),
            /* harmony export */
            DebertaV2ForTokenClassification: () => (
              /* binding */
              DebertaV2ForTokenClassification
            ),
            /* harmony export */
            DebertaV2Model: () => (
              /* binding */
              DebertaV2Model
            ),
            /* harmony export */
            DebertaV2PreTrainedModel: () => (
              /* binding */
              DebertaV2PreTrainedModel
            ),
            /* harmony export */
            DecisionTransformerModel: () => (
              /* binding */
              DecisionTransformerModel
            ),
            /* harmony export */
            DecisionTransformerPreTrainedModel: () => (
              /* binding */
              DecisionTransformerPreTrainedModel
            ),
            /* harmony export */
            DeiTForImageClassification: () => (
              /* binding */
              DeiTForImageClassification
            ),
            /* harmony export */
            DeiTModel: () => (
              /* binding */
              DeiTModel
            ),
            /* harmony export */
            DeiTPreTrainedModel: () => (
              /* binding */
              DeiTPreTrainedModel
            ),
            /* harmony export */
            DepthAnythingForDepthEstimation: () => (
              /* binding */
              DepthAnythingForDepthEstimation
            ),
            /* harmony export */
            DepthAnythingPreTrainedModel: () => (
              /* binding */
              DepthAnythingPreTrainedModel
            ),
            /* harmony export */
            DepthProForDepthEstimation: () => (
              /* binding */
              DepthProForDepthEstimation
            ),
            /* harmony export */
            DepthProPreTrainedModel: () => (
              /* binding */
              DepthProPreTrainedModel
            ),
            /* harmony export */
            DetrForObjectDetection: () => (
              /* binding */
              DetrForObjectDetection
            ),
            /* harmony export */
            DetrForSegmentation: () => (
              /* binding */
              DetrForSegmentation
            ),
            /* harmony export */
            DetrModel: () => (
              /* binding */
              DetrModel
            ),
            /* harmony export */
            DetrObjectDetectionOutput: () => (
              /* binding */
              DetrObjectDetectionOutput
            ),
            /* harmony export */
            DetrPreTrainedModel: () => (
              /* binding */
              DetrPreTrainedModel
            ),
            /* harmony export */
            DetrSegmentationOutput: () => (
              /* binding */
              DetrSegmentationOutput
            ),
            /* harmony export */
            Dinov2ForImageClassification: () => (
              /* binding */
              Dinov2ForImageClassification
            ),
            /* harmony export */
            Dinov2Model: () => (
              /* binding */
              Dinov2Model
            ),
            /* harmony export */
            Dinov2PreTrainedModel: () => (
              /* binding */
              Dinov2PreTrainedModel
            ),
            /* harmony export */
            Dinov2WithRegistersForImageClassification: () => (
              /* binding */
              Dinov2WithRegistersForImageClassification
            ),
            /* harmony export */
            Dinov2WithRegistersModel: () => (
              /* binding */
              Dinov2WithRegistersModel
            ),
            /* harmony export */
            Dinov2WithRegistersPreTrainedModel: () => (
              /* binding */
              Dinov2WithRegistersPreTrainedModel
            ),
            /* harmony export */
            DistilBertForMaskedLM: () => (
              /* binding */
              DistilBertForMaskedLM
            ),
            /* harmony export */
            DistilBertForQuestionAnswering: () => (
              /* binding */
              DistilBertForQuestionAnswering
            ),
            /* harmony export */
            DistilBertForSequenceClassification: () => (
              /* binding */
              DistilBertForSequenceClassification
            ),
            /* harmony export */
            DistilBertForTokenClassification: () => (
              /* binding */
              DistilBertForTokenClassification
            ),
            /* harmony export */
            DistilBertModel: () => (
              /* binding */
              DistilBertModel
            ),
            /* harmony export */
            DistilBertPreTrainedModel: () => (
              /* binding */
              DistilBertPreTrainedModel
            ),
            /* harmony export */
            DonutSwinModel: () => (
              /* binding */
              DonutSwinModel
            ),
            /* harmony export */
            DonutSwinPreTrainedModel: () => (
              /* binding */
              DonutSwinPreTrainedModel
            ),
            /* harmony export */
            EfficientNetForImageClassification: () => (
              /* binding */
              EfficientNetForImageClassification
            ),
            /* harmony export */
            EfficientNetModel: () => (
              /* binding */
              EfficientNetModel
            ),
            /* harmony export */
            EfficientNetPreTrainedModel: () => (
              /* binding */
              EfficientNetPreTrainedModel
            ),
            /* harmony export */
            ElectraForMaskedLM: () => (
              /* binding */
              ElectraForMaskedLM
            ),
            /* harmony export */
            ElectraForQuestionAnswering: () => (
              /* binding */
              ElectraForQuestionAnswering
            ),
            /* harmony export */
            ElectraForSequenceClassification: () => (
              /* binding */
              ElectraForSequenceClassification
            ),
            /* harmony export */
            ElectraForTokenClassification: () => (
              /* binding */
              ElectraForTokenClassification
            ),
            /* harmony export */
            ElectraModel: () => (
              /* binding */
              ElectraModel
            ),
            /* harmony export */
            ElectraPreTrainedModel: () => (
              /* binding */
              ElectraPreTrainedModel
            ),
            /* harmony export */
            EsmForMaskedLM: () => (
              /* binding */
              EsmForMaskedLM
            ),
            /* harmony export */
            EsmForSequenceClassification: () => (
              /* binding */
              EsmForSequenceClassification
            ),
            /* harmony export */
            EsmForTokenClassification: () => (
              /* binding */
              EsmForTokenClassification
            ),
            /* harmony export */
            EsmModel: () => (
              /* binding */
              EsmModel
            ),
            /* harmony export */
            EsmPreTrainedModel: () => (
              /* binding */
              EsmPreTrainedModel
            ),
            /* harmony export */
            ExaoneForCausalLM: () => (
              /* binding */
              ExaoneForCausalLM
            ),
            /* harmony export */
            ExaoneModel: () => (
              /* binding */
              ExaoneModel
            ),
            /* harmony export */
            ExaonePreTrainedModel: () => (
              /* binding */
              ExaonePreTrainedModel
            ),
            /* harmony export */
            FalconForCausalLM: () => (
              /* binding */
              FalconForCausalLM
            ),
            /* harmony export */
            FalconModel: () => (
              /* binding */
              FalconModel
            ),
            /* harmony export */
            FalconPreTrainedModel: () => (
              /* binding */
              FalconPreTrainedModel
            ),
            /* harmony export */
            FastViTForImageClassification: () => (
              /* binding */
              FastViTForImageClassification
            ),
            /* harmony export */
            FastViTModel: () => (
              /* binding */
              FastViTModel
            ),
            /* harmony export */
            FastViTPreTrainedModel: () => (
              /* binding */
              FastViTPreTrainedModel
            ),
            /* harmony export */
            Florence2ForConditionalGeneration: () => (
              /* binding */
              Florence2ForConditionalGeneration
            ),
            /* harmony export */
            Florence2PreTrainedModel: () => (
              /* binding */
              Florence2PreTrainedModel
            ),
            /* harmony export */
            GLPNForDepthEstimation: () => (
              /* binding */
              GLPNForDepthEstimation
            ),
            /* harmony export */
            GLPNModel: () => (
              /* binding */
              GLPNModel
            ),
            /* harmony export */
            GLPNPreTrainedModel: () => (
              /* binding */
              GLPNPreTrainedModel
            ),
            /* harmony export */
            GPT2LMHeadModel: () => (
              /* binding */
              GPT2LMHeadModel
            ),
            /* harmony export */
            GPT2Model: () => (
              /* binding */
              GPT2Model
            ),
            /* harmony export */
            GPT2PreTrainedModel: () => (
              /* binding */
              GPT2PreTrainedModel
            ),
            /* harmony export */
            GPTBigCodeForCausalLM: () => (
              /* binding */
              GPTBigCodeForCausalLM
            ),
            /* harmony export */
            GPTBigCodeModel: () => (
              /* binding */
              GPTBigCodeModel
            ),
            /* harmony export */
            GPTBigCodePreTrainedModel: () => (
              /* binding */
              GPTBigCodePreTrainedModel
            ),
            /* harmony export */
            GPTJForCausalLM: () => (
              /* binding */
              GPTJForCausalLM
            ),
            /* harmony export */
            GPTJModel: () => (
              /* binding */
              GPTJModel
            ),
            /* harmony export */
            GPTJPreTrainedModel: () => (
              /* binding */
              GPTJPreTrainedModel
            ),
            /* harmony export */
            GPTNeoForCausalLM: () => (
              /* binding */
              GPTNeoForCausalLM
            ),
            /* harmony export */
            GPTNeoModel: () => (
              /* binding */
              GPTNeoModel
            ),
            /* harmony export */
            GPTNeoPreTrainedModel: () => (
              /* binding */
              GPTNeoPreTrainedModel
            ),
            /* harmony export */
            GPTNeoXForCausalLM: () => (
              /* binding */
              GPTNeoXForCausalLM
            ),
            /* harmony export */
            GPTNeoXModel: () => (
              /* binding */
              GPTNeoXModel
            ),
            /* harmony export */
            GPTNeoXPreTrainedModel: () => (
              /* binding */
              GPTNeoXPreTrainedModel
            ),
            /* harmony export */
            Gemma2ForCausalLM: () => (
              /* binding */
              Gemma2ForCausalLM
            ),
            /* harmony export */
            Gemma2Model: () => (
              /* binding */
              Gemma2Model
            ),
            /* harmony export */
            Gemma2PreTrainedModel: () => (
              /* binding */
              Gemma2PreTrainedModel
            ),
            /* harmony export */
            Gemma3ForCausalLM: () => (
              /* binding */
              Gemma3ForCausalLM
            ),
            /* harmony export */
            Gemma3Model: () => (
              /* binding */
              Gemma3Model
            ),
            /* harmony export */
            Gemma3PreTrainedModel: () => (
              /* binding */
              Gemma3PreTrainedModel
            ),
            /* harmony export */
            GemmaForCausalLM: () => (
              /* binding */
              GemmaForCausalLM
            ),
            /* harmony export */
            GemmaModel: () => (
              /* binding */
              GemmaModel
            ),
            /* harmony export */
            GemmaPreTrainedModel: () => (
              /* binding */
              GemmaPreTrainedModel
            ),
            /* harmony export */
            GlmForCausalLM: () => (
              /* binding */
              GlmForCausalLM
            ),
            /* harmony export */
            GlmModel: () => (
              /* binding */
              GlmModel
            ),
            /* harmony export */
            GlmPreTrainedModel: () => (
              /* binding */
              GlmPreTrainedModel
            ),
            /* harmony export */
            GraniteForCausalLM: () => (
              /* binding */
              GraniteForCausalLM
            ),
            /* harmony export */
            GraniteModel: () => (
              /* binding */
              GraniteModel
            ),
            /* harmony export */
            GranitePreTrainedModel: () => (
              /* binding */
              GranitePreTrainedModel
            ),
            /* harmony export */
            GroundingDinoForObjectDetection: () => (
              /* binding */
              GroundingDinoForObjectDetection
            ),
            /* harmony export */
            GroundingDinoPreTrainedModel: () => (
              /* binding */
              GroundingDinoPreTrainedModel
            ),
            /* harmony export */
            GroupViTModel: () => (
              /* binding */
              GroupViTModel
            ),
            /* harmony export */
            GroupViTPreTrainedModel: () => (
              /* binding */
              GroupViTPreTrainedModel
            ),
            /* harmony export */
            HeliumForCausalLM: () => (
              /* binding */
              HeliumForCausalLM
            ),
            /* harmony export */
            HeliumModel: () => (
              /* binding */
              HeliumModel
            ),
            /* harmony export */
            HeliumPreTrainedModel: () => (
              /* binding */
              HeliumPreTrainedModel
            ),
            /* harmony export */
            HieraForImageClassification: () => (
              /* binding */
              HieraForImageClassification
            ),
            /* harmony export */
            HieraModel: () => (
              /* binding */
              HieraModel
            ),
            /* harmony export */
            HieraPreTrainedModel: () => (
              /* binding */
              HieraPreTrainedModel
            ),
            /* harmony export */
            HubertForCTC: () => (
              /* binding */
              HubertForCTC
            ),
            /* harmony export */
            HubertForSequenceClassification: () => (
              /* binding */
              HubertForSequenceClassification
            ),
            /* harmony export */
            HubertModel: () => (
              /* binding */
              HubertModel
            ),
            /* harmony export */
            HubertPreTrainedModel: () => (
              /* binding */
              HubertPreTrainedModel
            ),
            /* harmony export */
            IJepaForImageClassification: () => (
              /* binding */
              IJepaForImageClassification
            ),
            /* harmony export */
            IJepaModel: () => (
              /* binding */
              IJepaModel
            ),
            /* harmony export */
            IJepaPreTrainedModel: () => (
              /* binding */
              IJepaPreTrainedModel
            ),
            /* harmony export */
            Idefics3ForConditionalGeneration: () => (
              /* binding */
              Idefics3ForConditionalGeneration
            ),
            /* harmony export */
            Idefics3PreTrainedModel: () => (
              /* binding */
              Idefics3PreTrainedModel
            ),
            /* harmony export */
            ImageMattingOutput: () => (
              /* binding */
              ImageMattingOutput
            ),
            /* harmony export */
            JAISLMHeadModel: () => (
              /* binding */
              JAISLMHeadModel
            ),
            /* harmony export */
            JAISModel: () => (
              /* binding */
              JAISModel
            ),
            /* harmony export */
            JAISPreTrainedModel: () => (
              /* binding */
              JAISPreTrainedModel
            ),
            /* harmony export */
            JinaCLIPModel: () => (
              /* binding */
              JinaCLIPModel
            ),
            /* harmony export */
            JinaCLIPPreTrainedModel: () => (
              /* binding */
              JinaCLIPPreTrainedModel
            ),
            /* harmony export */
            JinaCLIPTextModel: () => (
              /* binding */
              JinaCLIPTextModel
            ),
            /* harmony export */
            JinaCLIPVisionModel: () => (
              /* binding */
              JinaCLIPVisionModel
            ),
            /* harmony export */
            LiteWhisperForConditionalGeneration: () => (
              /* binding */
              LiteWhisperForConditionalGeneration
            ),
            /* harmony export */
            LlamaForCausalLM: () => (
              /* binding */
              LlamaForCausalLM
            ),
            /* harmony export */
            LlamaModel: () => (
              /* binding */
              LlamaModel
            ),
            /* harmony export */
            LlamaPreTrainedModel: () => (
              /* binding */
              LlamaPreTrainedModel
            ),
            /* harmony export */
            LlavaForConditionalGeneration: () => (
              /* binding */
              LlavaForConditionalGeneration
            ),
            /* harmony export */
            LlavaOnevisionForConditionalGeneration: () => (
              /* binding */
              LlavaOnevisionForConditionalGeneration
            ),
            /* harmony export */
            LlavaPreTrainedModel: () => (
              /* binding */
              LlavaPreTrainedModel
            ),
            /* harmony export */
            LongT5ForConditionalGeneration: () => (
              /* binding */
              LongT5ForConditionalGeneration
            ),
            /* harmony export */
            LongT5Model: () => (
              /* binding */
              LongT5Model
            ),
            /* harmony export */
            LongT5PreTrainedModel: () => (
              /* binding */
              LongT5PreTrainedModel
            ),
            /* harmony export */
            M2M100ForConditionalGeneration: () => (
              /* binding */
              M2M100ForConditionalGeneration
            ),
            /* harmony export */
            M2M100Model: () => (
              /* binding */
              M2M100Model
            ),
            /* harmony export */
            M2M100PreTrainedModel: () => (
              /* binding */
              M2M100PreTrainedModel
            ),
            /* harmony export */
            MBartForCausalLM: () => (
              /* binding */
              MBartForCausalLM
            ),
            /* harmony export */
            MBartForConditionalGeneration: () => (
              /* binding */
              MBartForConditionalGeneration
            ),
            /* harmony export */
            MBartForSequenceClassification: () => (
              /* binding */
              MBartForSequenceClassification
            ),
            /* harmony export */
            MBartModel: () => (
              /* binding */
              MBartModel
            ),
            /* harmony export */
            MBartPreTrainedModel: () => (
              /* binding */
              MBartPreTrainedModel
            ),
            /* harmony export */
            MPNetForMaskedLM: () => (
              /* binding */
              MPNetForMaskedLM
            ),
            /* harmony export */
            MPNetForQuestionAnswering: () => (
              /* binding */
              MPNetForQuestionAnswering
            ),
            /* harmony export */
            MPNetForSequenceClassification: () => (
              /* binding */
              MPNetForSequenceClassification
            ),
            /* harmony export */
            MPNetForTokenClassification: () => (
              /* binding */
              MPNetForTokenClassification
            ),
            /* harmony export */
            MPNetModel: () => (
              /* binding */
              MPNetModel
            ),
            /* harmony export */
            MPNetPreTrainedModel: () => (
              /* binding */
              MPNetPreTrainedModel
            ),
            /* harmony export */
            MT5ForConditionalGeneration: () => (
              /* binding */
              MT5ForConditionalGeneration
            ),
            /* harmony export */
            MT5Model: () => (
              /* binding */
              MT5Model
            ),
            /* harmony export */
            MT5PreTrainedModel: () => (
              /* binding */
              MT5PreTrainedModel
            ),
            /* harmony export */
            MarianMTModel: () => (
              /* binding */
              MarianMTModel
            ),
            /* harmony export */
            MarianModel: () => (
              /* binding */
              MarianModel
            ),
            /* harmony export */
            MarianPreTrainedModel: () => (
              /* binding */
              MarianPreTrainedModel
            ),
            /* harmony export */
            MaskFormerForInstanceSegmentation: () => (
              /* binding */
              MaskFormerForInstanceSegmentation
            ),
            /* harmony export */
            MaskFormerModel: () => (
              /* binding */
              MaskFormerModel
            ),
            /* harmony export */
            MaskFormerPreTrainedModel: () => (
              /* binding */
              MaskFormerPreTrainedModel
            ),
            /* harmony export */
            MaskedLMOutput: () => (
              /* binding */
              MaskedLMOutput
            ),
            /* harmony export */
            Metric3DForDepthEstimation: () => (
              /* binding */
              Metric3DForDepthEstimation
            ),
            /* harmony export */
            Metric3DPreTrainedModel: () => (
              /* binding */
              Metric3DPreTrainedModel
            ),
            /* harmony export */
            Metric3Dv2ForDepthEstimation: () => (
              /* binding */
              Metric3Dv2ForDepthEstimation
            ),
            /* harmony export */
            Metric3Dv2PreTrainedModel: () => (
              /* binding */
              Metric3Dv2PreTrainedModel
            ),
            /* harmony export */
            MgpstrForSceneTextRecognition: () => (
              /* binding */
              MgpstrForSceneTextRecognition
            ),
            /* harmony export */
            MgpstrModelOutput: () => (
              /* binding */
              MgpstrModelOutput
            ),
            /* harmony export */
            MgpstrPreTrainedModel: () => (
              /* binding */
              MgpstrPreTrainedModel
            ),
            /* harmony export */
            MimiDecoderModel: () => (
              /* binding */
              MimiDecoderModel
            ),
            /* harmony export */
            MimiDecoderOutput: () => (
              /* binding */
              MimiDecoderOutput
            ),
            /* harmony export */
            MimiEncoderModel: () => (
              /* binding */
              MimiEncoderModel
            ),
            /* harmony export */
            MimiEncoderOutput: () => (
              /* binding */
              MimiEncoderOutput
            ),
            /* harmony export */
            MimiModel: () => (
              /* binding */
              MimiModel
            ),
            /* harmony export */
            MimiPreTrainedModel: () => (
              /* binding */
              MimiPreTrainedModel
            ),
            /* harmony export */
            MistralForCausalLM: () => (
              /* binding */
              MistralForCausalLM
            ),
            /* harmony export */
            MistralModel: () => (
              /* binding */
              MistralModel
            ),
            /* harmony export */
            MistralPreTrainedModel: () => (
              /* binding */
              MistralPreTrainedModel
            ),
            /* harmony export */
            MobileBertForMaskedLM: () => (
              /* binding */
              MobileBertForMaskedLM
            ),
            /* harmony export */
            MobileBertForQuestionAnswering: () => (
              /* binding */
              MobileBertForQuestionAnswering
            ),
            /* harmony export */
            MobileBertForSequenceClassification: () => (
              /* binding */
              MobileBertForSequenceClassification
            ),
            /* harmony export */
            MobileBertModel: () => (
              /* binding */
              MobileBertModel
            ),
            /* harmony export */
            MobileBertPreTrainedModel: () => (
              /* binding */
              MobileBertPreTrainedModel
            ),
            /* harmony export */
            MobileLLMForCausalLM: () => (
              /* binding */
              MobileLLMForCausalLM
            ),
            /* harmony export */
            MobileLLMModel: () => (
              /* binding */
              MobileLLMModel
            ),
            /* harmony export */
            MobileLLMPreTrainedModel: () => (
              /* binding */
              MobileLLMPreTrainedModel
            ),
            /* harmony export */
            MobileNetV1ForImageClassification: () => (
              /* binding */
              MobileNetV1ForImageClassification
            ),
            /* harmony export */
            MobileNetV1ForSemanticSegmentation: () => (
              /* binding */
              MobileNetV1ForSemanticSegmentation
            ),
            /* harmony export */
            MobileNetV1Model: () => (
              /* binding */
              MobileNetV1Model
            ),
            /* harmony export */
            MobileNetV1PreTrainedModel: () => (
              /* binding */
              MobileNetV1PreTrainedModel
            ),
            /* harmony export */
            MobileNetV2ForImageClassification: () => (
              /* binding */
              MobileNetV2ForImageClassification
            ),
            /* harmony export */
            MobileNetV2ForSemanticSegmentation: () => (
              /* binding */
              MobileNetV2ForSemanticSegmentation
            ),
            /* harmony export */
            MobileNetV2Model: () => (
              /* binding */
              MobileNetV2Model
            ),
            /* harmony export */
            MobileNetV2PreTrainedModel: () => (
              /* binding */
              MobileNetV2PreTrainedModel
            ),
            /* harmony export */
            MobileNetV3ForImageClassification: () => (
              /* binding */
              MobileNetV3ForImageClassification
            ),
            /* harmony export */
            MobileNetV3ForSemanticSegmentation: () => (
              /* binding */
              MobileNetV3ForSemanticSegmentation
            ),
            /* harmony export */
            MobileNetV3Model: () => (
              /* binding */
              MobileNetV3Model
            ),
            /* harmony export */
            MobileNetV3PreTrainedModel: () => (
              /* binding */
              MobileNetV3PreTrainedModel
            ),
            /* harmony export */
            MobileNetV4ForImageClassification: () => (
              /* binding */
              MobileNetV4ForImageClassification
            ),
            /* harmony export */
            MobileNetV4ForSemanticSegmentation: () => (
              /* binding */
              MobileNetV4ForSemanticSegmentation
            ),
            /* harmony export */
            MobileNetV4Model: () => (
              /* binding */
              MobileNetV4Model
            ),
            /* harmony export */
            MobileNetV4PreTrainedModel: () => (
              /* binding */
              MobileNetV4PreTrainedModel
            ),
            /* harmony export */
            MobileViTForImageClassification: () => (
              /* binding */
              MobileViTForImageClassification
            ),
            /* harmony export */
            MobileViTModel: () => (
              /* binding */
              MobileViTModel
            ),
            /* harmony export */
            MobileViTPreTrainedModel: () => (
              /* binding */
              MobileViTPreTrainedModel
            ),
            /* harmony export */
            MobileViTV2ForImageClassification: () => (
              /* binding */
              MobileViTV2ForImageClassification
            ),
            /* harmony export */
            MobileViTV2Model: () => (
              /* binding */
              MobileViTV2Model
            ),
            /* harmony export */
            MobileViTV2PreTrainedModel: () => (
              /* binding */
              MobileViTV2PreTrainedModel
            ),
            /* harmony export */
            ModelOutput: () => (
              /* binding */
              ModelOutput
            ),
            /* harmony export */
            ModernBertForMaskedLM: () => (
              /* binding */
              ModernBertForMaskedLM
            ),
            /* harmony export */
            ModernBertForSequenceClassification: () => (
              /* binding */
              ModernBertForSequenceClassification
            ),
            /* harmony export */
            ModernBertForTokenClassification: () => (
              /* binding */
              ModernBertForTokenClassification
            ),
            /* harmony export */
            ModernBertModel: () => (
              /* binding */
              ModernBertModel
            ),
            /* harmony export */
            ModernBertPreTrainedModel: () => (
              /* binding */
              ModernBertPreTrainedModel
            ),
            /* harmony export */
            Moondream1ForConditionalGeneration: () => (
              /* binding */
              Moondream1ForConditionalGeneration
            ),
            /* harmony export */
            MoonshineForConditionalGeneration: () => (
              /* binding */
              MoonshineForConditionalGeneration
            ),
            /* harmony export */
            MoonshineModel: () => (
              /* binding */
              MoonshineModel
            ),
            /* harmony export */
            MoonshinePreTrainedModel: () => (
              /* binding */
              MoonshinePreTrainedModel
            ),
            /* harmony export */
            MptForCausalLM: () => (
              /* binding */
              MptForCausalLM
            ),
            /* harmony export */
            MptModel: () => (
              /* binding */
              MptModel
            ),
            /* harmony export */
            MptPreTrainedModel: () => (
              /* binding */
              MptPreTrainedModel
            ),
            /* harmony export */
            MultiModalityCausalLM: () => (
              /* binding */
              MultiModalityCausalLM
            ),
            /* harmony export */
            MultiModalityPreTrainedModel: () => (
              /* binding */
              MultiModalityPreTrainedModel
            ),
            /* harmony export */
            MusicgenForCausalLM: () => (
              /* binding */
              MusicgenForCausalLM
            ),
            /* harmony export */
            MusicgenForConditionalGeneration: () => (
              /* binding */
              MusicgenForConditionalGeneration
            ),
            /* harmony export */
            MusicgenModel: () => (
              /* binding */
              MusicgenModel
            ),
            /* harmony export */
            MusicgenPreTrainedModel: () => (
              /* binding */
              MusicgenPreTrainedModel
            ),
            /* harmony export */
            NomicBertModel: () => (
              /* binding */
              NomicBertModel
            ),
            /* harmony export */
            NomicBertPreTrainedModel: () => (
              /* binding */
              NomicBertPreTrainedModel
            ),
            /* harmony export */
            OPTForCausalLM: () => (
              /* binding */
              OPTForCausalLM
            ),
            /* harmony export */
            OPTModel: () => (
              /* binding */
              OPTModel
            ),
            /* harmony export */
            OPTPreTrainedModel: () => (
              /* binding */
              OPTPreTrainedModel
            ),
            /* harmony export */
            Olmo2ForCausalLM: () => (
              /* binding */
              Olmo2ForCausalLM
            ),
            /* harmony export */
            Olmo2Model: () => (
              /* binding */
              Olmo2Model
            ),
            /* harmony export */
            Olmo2PreTrainedModel: () => (
              /* binding */
              Olmo2PreTrainedModel
            ),
            /* harmony export */
            OlmoForCausalLM: () => (
              /* binding */
              OlmoForCausalLM
            ),
            /* harmony export */
            OlmoModel: () => (
              /* binding */
              OlmoModel
            ),
            /* harmony export */
            OlmoPreTrainedModel: () => (
              /* binding */
              OlmoPreTrainedModel
            ),
            /* harmony export */
            OpenELMForCausalLM: () => (
              /* binding */
              OpenELMForCausalLM
            ),
            /* harmony export */
            OpenELMModel: () => (
              /* binding */
              OpenELMModel
            ),
            /* harmony export */
            OpenELMPreTrainedModel: () => (
              /* binding */
              OpenELMPreTrainedModel
            ),
            /* harmony export */
            OwlViTForObjectDetection: () => (
              /* binding */
              OwlViTForObjectDetection
            ),
            /* harmony export */
            OwlViTModel: () => (
              /* binding */
              OwlViTModel
            ),
            /* harmony export */
            OwlViTPreTrainedModel: () => (
              /* binding */
              OwlViTPreTrainedModel
            ),
            /* harmony export */
            Owlv2ForObjectDetection: () => (
              /* binding */
              Owlv2ForObjectDetection
            ),
            /* harmony export */
            Owlv2Model: () => (
              /* binding */
              Owlv2Model
            ),
            /* harmony export */
            Owlv2PreTrainedModel: () => (
              /* binding */
              Owlv2PreTrainedModel
            ),
            /* harmony export */
            PaliGemmaForConditionalGeneration: () => (
              /* binding */
              PaliGemmaForConditionalGeneration
            ),
            /* harmony export */
            PaliGemmaPreTrainedModel: () => (
              /* binding */
              PaliGemmaPreTrainedModel
            ),
            /* harmony export */
            PatchTSMixerForPrediction: () => (
              /* binding */
              PatchTSMixerForPrediction
            ),
            /* harmony export */
            PatchTSMixerModel: () => (
              /* binding */
              PatchTSMixerModel
            ),
            /* harmony export */
            PatchTSMixerPreTrainedModel: () => (
              /* binding */
              PatchTSMixerPreTrainedModel
            ),
            /* harmony export */
            PatchTSTForPrediction: () => (
              /* binding */
              PatchTSTForPrediction
            ),
            /* harmony export */
            PatchTSTModel: () => (
              /* binding */
              PatchTSTModel
            ),
            /* harmony export */
            PatchTSTPreTrainedModel: () => (
              /* binding */
              PatchTSTPreTrainedModel
            ),
            /* harmony export */
            Phi3ForCausalLM: () => (
              /* binding */
              Phi3ForCausalLM
            ),
            /* harmony export */
            Phi3Model: () => (
              /* binding */
              Phi3Model
            ),
            /* harmony export */
            Phi3PreTrainedModel: () => (
              /* binding */
              Phi3PreTrainedModel
            ),
            /* harmony export */
            Phi3VForCausalLM: () => (
              /* binding */
              Phi3VForCausalLM
            ),
            /* harmony export */
            Phi3VPreTrainedModel: () => (
              /* binding */
              Phi3VPreTrainedModel
            ),
            /* harmony export */
            PhiForCausalLM: () => (
              /* binding */
              PhiForCausalLM
            ),
            /* harmony export */
            PhiModel: () => (
              /* binding */
              PhiModel
            ),
            /* harmony export */
            PhiPreTrainedModel: () => (
              /* binding */
              PhiPreTrainedModel
            ),
            /* harmony export */
            PreTrainedModel: () => (
              /* binding */
              PreTrainedModel
            ),
            /* harmony export */
            PretrainedMixin: () => (
              /* binding */
              PretrainedMixin
            ),
            /* harmony export */
            PvtForImageClassification: () => (
              /* binding */
              PvtForImageClassification
            ),
            /* harmony export */
            PvtModel: () => (
              /* binding */
              PvtModel
            ),
            /* harmony export */
            PvtPreTrainedModel: () => (
              /* binding */
              PvtPreTrainedModel
            ),
            /* harmony export */
            PyAnnoteForAudioFrameClassification: () => (
              /* binding */
              PyAnnoteForAudioFrameClassification
            ),
            /* harmony export */
            PyAnnoteModel: () => (
              /* binding */
              PyAnnoteModel
            ),
            /* harmony export */
            PyAnnotePreTrainedModel: () => (
              /* binding */
              PyAnnotePreTrainedModel
            ),
            /* harmony export */
            QuestionAnsweringModelOutput: () => (
              /* binding */
              QuestionAnsweringModelOutput
            ),
            /* harmony export */
            Qwen2ForCausalLM: () => (
              /* binding */
              Qwen2ForCausalLM
            ),
            /* harmony export */
            Qwen2Model: () => (
              /* binding */
              Qwen2Model
            ),
            /* harmony export */
            Qwen2PreTrainedModel: () => (
              /* binding */
              Qwen2PreTrainedModel
            ),
            /* harmony export */
            Qwen2VLForConditionalGeneration: () => (
              /* binding */
              Qwen2VLForConditionalGeneration
            ),
            /* harmony export */
            Qwen2VLPreTrainedModel: () => (
              /* binding */
              Qwen2VLPreTrainedModel
            ),
            /* harmony export */
            Qwen3ForCausalLM: () => (
              /* binding */
              Qwen3ForCausalLM
            ),
            /* harmony export */
            Qwen3Model: () => (
              /* binding */
              Qwen3Model
            ),
            /* harmony export */
            Qwen3PreTrainedModel: () => (
              /* binding */
              Qwen3PreTrainedModel
            ),
            /* harmony export */
            RFDetrForObjectDetection: () => (
              /* binding */
              RFDetrForObjectDetection
            ),
            /* harmony export */
            RFDetrModel: () => (
              /* binding */
              RFDetrModel
            ),
            /* harmony export */
            RFDetrObjectDetectionOutput: () => (
              /* binding */
              RFDetrObjectDetectionOutput
            ),
            /* harmony export */
            RFDetrPreTrainedModel: () => (
              /* binding */
              RFDetrPreTrainedModel
            ),
            /* harmony export */
            RTDetrForObjectDetection: () => (
              /* binding */
              RTDetrForObjectDetection
            ),
            /* harmony export */
            RTDetrModel: () => (
              /* binding */
              RTDetrModel
            ),
            /* harmony export */
            RTDetrObjectDetectionOutput: () => (
              /* binding */
              RTDetrObjectDetectionOutput
            ),
            /* harmony export */
            RTDetrPreTrainedModel: () => (
              /* binding */
              RTDetrPreTrainedModel
            ),
            /* harmony export */
            RTDetrV2ForObjectDetection: () => (
              /* binding */
              RTDetrV2ForObjectDetection
            ),
            /* harmony export */
            RTDetrV2Model: () => (
              /* binding */
              RTDetrV2Model
            ),
            /* harmony export */
            RTDetrV2ObjectDetectionOutput: () => (
              /* binding */
              RTDetrV2ObjectDetectionOutput
            ),
            /* harmony export */
            RTDetrV2PreTrainedModel: () => (
              /* binding */
              RTDetrV2PreTrainedModel
            ),
            /* harmony export */
            ResNetForImageClassification: () => (
              /* binding */
              ResNetForImageClassification
            ),
            /* harmony export */
            ResNetModel: () => (
              /* binding */
              ResNetModel
            ),
            /* harmony export */
            ResNetPreTrainedModel: () => (
              /* binding */
              ResNetPreTrainedModel
            ),
            /* harmony export */
            RoFormerForMaskedLM: () => (
              /* binding */
              RoFormerForMaskedLM
            ),
            /* harmony export */
            RoFormerForQuestionAnswering: () => (
              /* binding */
              RoFormerForQuestionAnswering
            ),
            /* harmony export */
            RoFormerForSequenceClassification: () => (
              /* binding */
              RoFormerForSequenceClassification
            ),
            /* harmony export */
            RoFormerForTokenClassification: () => (
              /* binding */
              RoFormerForTokenClassification
            ),
            /* harmony export */
            RoFormerModel: () => (
              /* binding */
              RoFormerModel
            ),
            /* harmony export */
            RoFormerPreTrainedModel: () => (
              /* binding */
              RoFormerPreTrainedModel
            ),
            /* harmony export */
            RobertaForMaskedLM: () => (
              /* binding */
              RobertaForMaskedLM
            ),
            /* harmony export */
            RobertaForQuestionAnswering: () => (
              /* binding */
              RobertaForQuestionAnswering
            ),
            /* harmony export */
            RobertaForSequenceClassification: () => (
              /* binding */
              RobertaForSequenceClassification
            ),
            /* harmony export */
            RobertaForTokenClassification: () => (
              /* binding */
              RobertaForTokenClassification
            ),
            /* harmony export */
            RobertaModel: () => (
              /* binding */
              RobertaModel
            ),
            /* harmony export */
            RobertaPreTrainedModel: () => (
              /* binding */
              RobertaPreTrainedModel
            ),
            /* harmony export */
            SamImageSegmentationOutput: () => (
              /* binding */
              SamImageSegmentationOutput
            ),
            /* harmony export */
            SamModel: () => (
              /* binding */
              SamModel
            ),
            /* harmony export */
            SamPreTrainedModel: () => (
              /* binding */
              SamPreTrainedModel
            ),
            /* harmony export */
            SapiensForDepthEstimation: () => (
              /* binding */
              SapiensForDepthEstimation
            ),
            /* harmony export */
            SapiensForNormalEstimation: () => (
              /* binding */
              SapiensForNormalEstimation
            ),
            /* harmony export */
            SapiensForSemanticSegmentation: () => (
              /* binding */
              SapiensForSemanticSegmentation
            ),
            /* harmony export */
            SapiensPreTrainedModel: () => (
              /* binding */
              SapiensPreTrainedModel
            ),
            /* harmony export */
            SegformerForImageClassification: () => (
              /* binding */
              SegformerForImageClassification
            ),
            /* harmony export */
            SegformerForSemanticSegmentation: () => (
              /* binding */
              SegformerForSemanticSegmentation
            ),
            /* harmony export */
            SegformerModel: () => (
              /* binding */
              SegformerModel
            ),
            /* harmony export */
            SegformerPreTrainedModel: () => (
              /* binding */
              SegformerPreTrainedModel
            ),
            /* harmony export */
            Seq2SeqLMOutput: () => (
              /* binding */
              Seq2SeqLMOutput
            ),
            /* harmony export */
            SequenceClassifierOutput: () => (
              /* binding */
              SequenceClassifierOutput
            ),
            /* harmony export */
            SiglipModel: () => (
              /* binding */
              SiglipModel
            ),
            /* harmony export */
            SiglipPreTrainedModel: () => (
              /* binding */
              SiglipPreTrainedModel
            ),
            /* harmony export */
            SiglipTextModel: () => (
              /* binding */
              SiglipTextModel
            ),
            /* harmony export */
            SiglipVisionModel: () => (
              /* binding */
              SiglipVisionModel
            ),
            /* harmony export */
            SmolVLMForConditionalGeneration: () => (
              /* binding */
              SmolVLMForConditionalGeneration
            ),
            /* harmony export */
            SnacDecoderModel: () => (
              /* binding */
              SnacDecoderModel
            ),
            /* harmony export */
            SnacEncoderModel: () => (
              /* binding */
              SnacEncoderModel
            ),
            /* harmony export */
            SnacModel: () => (
              /* binding */
              SnacModel
            ),
            /* harmony export */
            SnacPreTrainedModel: () => (
              /* binding */
              SnacPreTrainedModel
            ),
            /* harmony export */
            SpeechT5ForSpeechToText: () => (
              /* binding */
              SpeechT5ForSpeechToText
            ),
            /* harmony export */
            SpeechT5ForTextToSpeech: () => (
              /* binding */
              SpeechT5ForTextToSpeech
            ),
            /* harmony export */
            SpeechT5HifiGan: () => (
              /* binding */
              SpeechT5HifiGan
            ),
            /* harmony export */
            SpeechT5Model: () => (
              /* binding */
              SpeechT5Model
            ),
            /* harmony export */
            SpeechT5PreTrainedModel: () => (
              /* binding */
              SpeechT5PreTrainedModel
            ),
            /* harmony export */
            SqueezeBertForMaskedLM: () => (
              /* binding */
              SqueezeBertForMaskedLM
            ),
            /* harmony export */
            SqueezeBertForQuestionAnswering: () => (
              /* binding */
              SqueezeBertForQuestionAnswering
            ),
            /* harmony export */
            SqueezeBertForSequenceClassification: () => (
              /* binding */
              SqueezeBertForSequenceClassification
            ),
            /* harmony export */
            SqueezeBertModel: () => (
              /* binding */
              SqueezeBertModel
            ),
            /* harmony export */
            SqueezeBertPreTrainedModel: () => (
              /* binding */
              SqueezeBertPreTrainedModel
            ),
            /* harmony export */
            StableLmForCausalLM: () => (
              /* binding */
              StableLmForCausalLM
            ),
            /* harmony export */
            StableLmModel: () => (
              /* binding */
              StableLmModel
            ),
            /* harmony export */
            StableLmPreTrainedModel: () => (
              /* binding */
              StableLmPreTrainedModel
            ),
            /* harmony export */
            Starcoder2ForCausalLM: () => (
              /* binding */
              Starcoder2ForCausalLM
            ),
            /* harmony export */
            Starcoder2Model: () => (
              /* binding */
              Starcoder2Model
            ),
            /* harmony export */
            Starcoder2PreTrainedModel: () => (
              /* binding */
              Starcoder2PreTrainedModel
            ),
            /* harmony export */
            StyleTextToSpeech2Model: () => (
              /* binding */
              StyleTextToSpeech2Model
            ),
            /* harmony export */
            StyleTextToSpeech2PreTrainedModel: () => (
              /* binding */
              StyleTextToSpeech2PreTrainedModel
            ),
            /* harmony export */
            Swin2SRForImageSuperResolution: () => (
              /* binding */
              Swin2SRForImageSuperResolution
            ),
            /* harmony export */
            Swin2SRModel: () => (
              /* binding */
              Swin2SRModel
            ),
            /* harmony export */
            Swin2SRPreTrainedModel: () => (
              /* binding */
              Swin2SRPreTrainedModel
            ),
            /* harmony export */
            SwinForImageClassification: () => (
              /* binding */
              SwinForImageClassification
            ),
            /* harmony export */
            SwinForSemanticSegmentation: () => (
              /* binding */
              SwinForSemanticSegmentation
            ),
            /* harmony export */
            SwinModel: () => (
              /* binding */
              SwinModel
            ),
            /* harmony export */
            SwinPreTrainedModel: () => (
              /* binding */
              SwinPreTrainedModel
            ),
            /* harmony export */
            T5ForConditionalGeneration: () => (
              /* binding */
              T5ForConditionalGeneration
            ),
            /* harmony export */
            T5Model: () => (
              /* binding */
              T5Model
            ),
            /* harmony export */
            T5PreTrainedModel: () => (
              /* binding */
              T5PreTrainedModel
            ),
            /* harmony export */
            TableTransformerForObjectDetection: () => (
              /* binding */
              TableTransformerForObjectDetection
            ),
            /* harmony export */
            TableTransformerModel: () => (
              /* binding */
              TableTransformerModel
            ),
            /* harmony export */
            TableTransformerObjectDetectionOutput: () => (
              /* binding */
              TableTransformerObjectDetectionOutput
            ),
            /* harmony export */
            TableTransformerPreTrainedModel: () => (
              /* binding */
              TableTransformerPreTrainedModel
            ),
            /* harmony export */
            TokenClassifierOutput: () => (
              /* binding */
              TokenClassifierOutput
            ),
            /* harmony export */
            TrOCRForCausalLM: () => (
              /* binding */
              TrOCRForCausalLM
            ),
            /* harmony export */
            TrOCRPreTrainedModel: () => (
              /* binding */
              TrOCRPreTrainedModel
            ),
            /* harmony export */
            UltravoxModel: () => (
              /* binding */
              UltravoxModel
            ),
            /* harmony export */
            UltravoxPreTrainedModel: () => (
              /* binding */
              UltravoxPreTrainedModel
            ),
            /* harmony export */
            UniSpeechForCTC: () => (
              /* binding */
              UniSpeechForCTC
            ),
            /* harmony export */
            UniSpeechForSequenceClassification: () => (
              /* binding */
              UniSpeechForSequenceClassification
            ),
            /* harmony export */
            UniSpeechModel: () => (
              /* binding */
              UniSpeechModel
            ),
            /* harmony export */
            UniSpeechPreTrainedModel: () => (
              /* binding */
              UniSpeechPreTrainedModel
            ),
            /* harmony export */
            UniSpeechSatForAudioFrameClassification: () => (
              /* binding */
              UniSpeechSatForAudioFrameClassification
            ),
            /* harmony export */
            UniSpeechSatForCTC: () => (
              /* binding */
              UniSpeechSatForCTC
            ),
            /* harmony export */
            UniSpeechSatForSequenceClassification: () => (
              /* binding */
              UniSpeechSatForSequenceClassification
            ),
            /* harmony export */
            UniSpeechSatModel: () => (
              /* binding */
              UniSpeechSatModel
            ),
            /* harmony export */
            UniSpeechSatPreTrainedModel: () => (
              /* binding */
              UniSpeechSatPreTrainedModel
            ),
            /* harmony export */
            ViTForImageClassification: () => (
              /* binding */
              ViTForImageClassification
            ),
            /* harmony export */
            ViTMAEModel: () => (
              /* binding */
              ViTMAEModel
            ),
            /* harmony export */
            ViTMAEPreTrainedModel: () => (
              /* binding */
              ViTMAEPreTrainedModel
            ),
            /* harmony export */
            ViTMSNForImageClassification: () => (
              /* binding */
              ViTMSNForImageClassification
            ),
            /* harmony export */
            ViTMSNModel: () => (
              /* binding */
              ViTMSNModel
            ),
            /* harmony export */
            ViTMSNPreTrainedModel: () => (
              /* binding */
              ViTMSNPreTrainedModel
            ),
            /* harmony export */
            ViTModel: () => (
              /* binding */
              ViTModel
            ),
            /* harmony export */
            ViTPreTrainedModel: () => (
              /* binding */
              ViTPreTrainedModel
            ),
            /* harmony export */
            VisionEncoderDecoderModel: () => (
              /* binding */
              VisionEncoderDecoderModel
            ),
            /* harmony export */
            VitMatteForImageMatting: () => (
              /* binding */
              VitMatteForImageMatting
            ),
            /* harmony export */
            VitMattePreTrainedModel: () => (
              /* binding */
              VitMattePreTrainedModel
            ),
            /* harmony export */
            VitPoseForPoseEstimation: () => (
              /* binding */
              VitPoseForPoseEstimation
            ),
            /* harmony export */
            VitPosePreTrainedModel: () => (
              /* binding */
              VitPosePreTrainedModel
            ),
            /* harmony export */
            VitsModel: () => (
              /* binding */
              VitsModel
            ),
            /* harmony export */
            VitsModelOutput: () => (
              /* binding */
              VitsModelOutput
            ),
            /* harmony export */
            VitsPreTrainedModel: () => (
              /* binding */
              VitsPreTrainedModel
            ),
            /* harmony export */
            Wav2Vec2BertForCTC: () => (
              /* binding */
              Wav2Vec2BertForCTC
            ),
            /* harmony export */
            Wav2Vec2BertForSequenceClassification: () => (
              /* binding */
              Wav2Vec2BertForSequenceClassification
            ),
            /* harmony export */
            Wav2Vec2BertModel: () => (
              /* binding */
              Wav2Vec2BertModel
            ),
            /* harmony export */
            Wav2Vec2BertPreTrainedModel: () => (
              /* binding */
              Wav2Vec2BertPreTrainedModel
            ),
            /* harmony export */
            Wav2Vec2ForAudioFrameClassification: () => (
              /* binding */
              Wav2Vec2ForAudioFrameClassification
            ),
            /* harmony export */
            Wav2Vec2ForCTC: () => (
              /* binding */
              Wav2Vec2ForCTC
            ),
            /* harmony export */
            Wav2Vec2ForSequenceClassification: () => (
              /* binding */
              Wav2Vec2ForSequenceClassification
            ),
            /* harmony export */
            Wav2Vec2Model: () => (
              /* binding */
              Wav2Vec2Model
            ),
            /* harmony export */
            Wav2Vec2PreTrainedModel: () => (
              /* binding */
              Wav2Vec2PreTrainedModel
            ),
            /* harmony export */
            WavLMForAudioFrameClassification: () => (
              /* binding */
              WavLMForAudioFrameClassification
            ),
            /* harmony export */
            WavLMForCTC: () => (
              /* binding */
              WavLMForCTC
            ),
            /* harmony export */
            WavLMForSequenceClassification: () => (
              /* binding */
              WavLMForSequenceClassification
            ),
            /* harmony export */
            WavLMForXVector: () => (
              /* binding */
              WavLMForXVector
            ),
            /* harmony export */
            WavLMModel: () => (
              /* binding */
              WavLMModel
            ),
            /* harmony export */
            WavLMPreTrainedModel: () => (
              /* binding */
              WavLMPreTrainedModel
            ),
            /* harmony export */
            WeSpeakerResNetModel: () => (
              /* binding */
              WeSpeakerResNetModel
            ),
            /* harmony export */
            WeSpeakerResNetPreTrainedModel: () => (
              /* binding */
              WeSpeakerResNetPreTrainedModel
            ),
            /* harmony export */
            WhisperForConditionalGeneration: () => (
              /* binding */
              WhisperForConditionalGeneration
            ),
            /* harmony export */
            WhisperModel: () => (
              /* binding */
              WhisperModel
            ),
            /* harmony export */
            WhisperPreTrainedModel: () => (
              /* binding */
              WhisperPreTrainedModel
            ),
            /* harmony export */
            XLMForQuestionAnswering: () => (
              /* binding */
              XLMForQuestionAnswering
            ),
            /* harmony export */
            XLMForSequenceClassification: () => (
              /* binding */
              XLMForSequenceClassification
            ),
            /* harmony export */
            XLMForTokenClassification: () => (
              /* binding */
              XLMForTokenClassification
            ),
            /* harmony export */
            XLMModel: () => (
              /* binding */
              XLMModel
            ),
            /* harmony export */
            XLMPreTrainedModel: () => (
              /* binding */
              XLMPreTrainedModel
            ),
            /* harmony export */
            XLMRobertaForMaskedLM: () => (
              /* binding */
              XLMRobertaForMaskedLM
            ),
            /* harmony export */
            XLMRobertaForQuestionAnswering: () => (
              /* binding */
              XLMRobertaForQuestionAnswering
            ),
            /* harmony export */
            XLMRobertaForSequenceClassification: () => (
              /* binding */
              XLMRobertaForSequenceClassification
            ),
            /* harmony export */
            XLMRobertaForTokenClassification: () => (
              /* binding */
              XLMRobertaForTokenClassification
            ),
            /* harmony export */
            XLMRobertaModel: () => (
              /* binding */
              XLMRobertaModel
            ),
            /* harmony export */
            XLMRobertaPreTrainedModel: () => (
              /* binding */
              XLMRobertaPreTrainedModel
            ),
            /* harmony export */
            XLMWithLMHeadModel: () => (
              /* binding */
              XLMWithLMHeadModel
            ),
            /* harmony export */
            XVectorOutput: () => (
              /* binding */
              XVectorOutput
            ),
            /* harmony export */
            YolosForObjectDetection: () => (
              /* binding */
              YolosForObjectDetection
            ),
            /* harmony export */
            YolosModel: () => (
              /* binding */
              YolosModel
            ),
            /* harmony export */
            YolosObjectDetectionOutput: () => (
              /* binding */
              YolosObjectDetectionOutput
            ),
            /* harmony export */
            YolosPreTrainedModel: () => (
              /* binding */
              YolosPreTrainedModel
            )
            /* harmony export */
          });
          var _configs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ./configs.js */
            "./src/configs.js"
          );
          var _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ./backends/onnx.js */
            "./src/backends/onnx.js"
          );
          var _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ./utils/dtypes.js */
            "./src/utils/dtypes.js"
          );
          var _utils_generic_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ./utils/generic.js */
            "./src/utils/generic.js"
          );
          var _utils_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
            /*! ./utils/core.js */
            "./src/utils/core.js"
          );
          var _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
            /*! ./utils/hub.js */
            "./src/utils/hub.js"
          );
          var _utils_constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
            /*! ./utils/constants.js */
            "./src/utils/constants.js"
          );
          var _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
            /*! ./generation/logits_process.js */
            "./src/generation/logits_process.js"
          );
          var _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
            /*! ./generation/configuration_utils.js */
            "./src/generation/configuration_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
            /*! ./utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_image_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
            /*! ./utils/image.js */
            "./src/utils/image.js"
          );
          var _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(
            /*! ./utils/maths.js */
            "./src/utils/maths.js"
          );
          var _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
            /*! ./generation/stopping_criteria.js */
            "./src/generation/stopping_criteria.js"
          );
          var _generation_logits_sampler_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(
            /*! ./generation/logits_sampler.js */
            "./src/generation/logits_sampler.js"
          );
          var _env_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(
            /*! ./env.js */
            "./src/env.js"
          );
          var _models_whisper_generation_whisper_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(
            /*! ./models/whisper/generation_whisper.js */
            "./src/models/whisper/generation_whisper.js"
          );
          var _models_whisper_common_whisper_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__2(
            /*! ./models/whisper/common_whisper.js */
            "./src/models/whisper/common_whisper.js"
          );
          const MODEL_TYPES = {
            EncoderOnly: 0,
            EncoderDecoder: 1,
            Seq2Seq: 2,
            Vision2Seq: 3,
            DecoderOnly: 4,
            MaskGeneration: 5,
            ImageTextToText: 6,
            Musicgen: 7,
            MultiModality: 8,
            Phi3V: 9,
            AudioTextToText: 10,
            AutoEncoder: 11
          };
          const MODEL_TYPE_MAPPING = /* @__PURE__ */ new Map();
          const MODEL_NAME_TO_CLASS_MAPPING = /* @__PURE__ */ new Map();
          const MODEL_CLASS_TO_NAME_MAPPING = /* @__PURE__ */ new Map();
          async function getSession(pretrained_model_name_or_path, fileName, options) {
            let custom_config = options.config?.["transformers.js_config"] ?? {};
            let device = options.device ?? custom_config.device;
            if (device && typeof device !== "string") {
              if (device.hasOwnProperty(fileName)) {
                device = device[fileName];
              } else {
                console.warn(`device not specified for "${fileName}". Using the default device.`);
                device = null;
              }
            }
            const selectedDevice = (
              /** @type {import("./utils/devices.js").DeviceType} */
              device ?? (_env_js__WEBPACK_IMPORTED_MODULE_14__.apis.IS_NODE_ENV ? "cpu" : "wasm")
            );
            const executionProviders = (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.deviceToExecutionProviders)(selectedDevice);
            const device_config = custom_config.device_config ?? {};
            if (device_config.hasOwnProperty(selectedDevice)) {
              custom_config = {
                ...custom_config,
                ...device_config[selectedDevice]
              };
            }
            let dtype = options.dtype ?? custom_config.dtype;
            if (typeof dtype !== "string") {
              if (dtype && dtype.hasOwnProperty(fileName)) {
                dtype = dtype[fileName];
              } else {
                dtype = _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DEVICE_DTYPE_MAPPING[selectedDevice] ?? _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.fp32;
                console.warn(`dtype not specified for "${fileName}". Using the default dtype (${dtype}) for this device (${selectedDevice}).`);
              }
            }
            if (dtype === _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.auto) {
              let config_dtype = custom_config.dtype;
              if (typeof config_dtype !== "string") {
                config_dtype = config_dtype?.[fileName];
              }
              if (config_dtype && config_dtype !== _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.auto && _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.hasOwnProperty(config_dtype)) {
                dtype = config_dtype;
              } else {
                dtype = _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DEVICE_DTYPE_MAPPING[selectedDevice] ?? _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.fp32;
              }
            }
            const selectedDtype = (
              /** @type {import("./utils/dtypes.js").DataType} */
              dtype
            );
            if (!_utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(selectedDtype)) {
              throw new Error(`Invalid dtype: ${selectedDtype}. Should be one of: ${Object.keys(_utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES).join(", ")}`);
            } else if (selectedDtype === _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.fp16 && selectedDevice === "webgpu" && !await (0, _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.isWebGpuFp16Supported)()) {
              throw new Error(`The device (${selectedDevice}) does not support fp16.`);
            }
            const kv_cache_dtype_config = custom_config.kv_cache_dtype;
            const kv_cache_dtype = kv_cache_dtype_config ? typeof kv_cache_dtype_config === "string" ? kv_cache_dtype_config : kv_cache_dtype_config[selectedDtype] ?? "float32" : void 0;
            if (kv_cache_dtype && !["float32", "float16"].includes(kv_cache_dtype)) {
              throw new Error(`Invalid kv_cache_dtype: ${kv_cache_dtype}. Should be one of: float32, float16`);
            }
            const session_config = {
              dtype: selectedDtype,
              kv_cache_dtype,
              device: selectedDevice
            };
            const suffix = _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DTYPE_SUFFIX_MAPPING[selectedDtype];
            const baseName = `${fileName}${suffix}.onnx`;
            const modelFileName = `${options.subfolder ?? ""}/${baseName}`;
            const session_options = { ...options.session_options };
            session_options.executionProviders ?? (session_options.executionProviders = executionProviders);
            const free_dimension_overrides = custom_config.free_dimension_overrides;
            if (free_dimension_overrides) {
              session_options.freeDimensionOverrides ?? (session_options.freeDimensionOverrides = free_dimension_overrides);
            } else if (selectedDevice.startsWith("webnn") && !session_options.freeDimensionOverrides) {
              console.warn(
                `WebNN does not currently support dynamic shapes and requires 'free_dimension_overrides' to be set in config.json, preferably as a field within config["transformers.js_config"]["device_config"]["${selectedDevice}"]. When 'free_dimension_overrides' is not set, you may experience significant performance degradation.`
              );
            }
            const return_path = _env_js__WEBPACK_IMPORTED_MODULE_14__.apis.IS_NODE_ENV && _env_js__WEBPACK_IMPORTED_MODULE_14__.env.useFSCache;
            const bufferOrPathPromise = (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelFile)(pretrained_model_name_or_path, modelFileName, true, options, return_path);
            const use_external_data_format = options.use_external_data_format ?? custom_config.use_external_data_format;
            let externalDataPromises = [];
            if (use_external_data_format) {
              let external_data_format;
              if (typeof use_external_data_format === "object") {
                if (use_external_data_format.hasOwnProperty(baseName)) {
                  external_data_format = use_external_data_format[baseName];
                } else if (use_external_data_format.hasOwnProperty(fileName)) {
                  external_data_format = use_external_data_format[fileName];
                } else {
                  external_data_format = false;
                }
              } else {
                external_data_format = use_external_data_format;
              }
              const num_chunks = +external_data_format;
              if (num_chunks > _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.MAX_EXTERNAL_DATA_CHUNKS) {
                throw new Error(`The number of external data chunks (${num_chunks}) exceeds the maximum allowed value (${_utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.MAX_EXTERNAL_DATA_CHUNKS}).`);
              }
              for (let i = 0; i < num_chunks; ++i) {
                const path = `${baseName}_data${i === 0 ? "" : "_" + i}`;
                const fullPath = `${options.subfolder ?? ""}/${path}`;
                externalDataPromises.push(new Promise(async (resolve, reject) => {
                  const data = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelFile)(pretrained_model_name_or_path, fullPath, true, options, return_path);
                  resolve(data instanceof Uint8Array ? { path, data } : path);
                }));
              }
            } else if (session_options.externalData !== void 0) {
              externalDataPromises = session_options.externalData.map(async (ext) => {
                if (typeof ext.data === "string") {
                  const ext_buffer = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelFile)(pretrained_model_name_or_path, ext.data, true, options);
                  return { ...ext, data: ext_buffer };
                }
                return ext;
              });
            }
            if (externalDataPromises.length > 0) {
              const externalData = await Promise.all(externalDataPromises);
              if (!_env_js__WEBPACK_IMPORTED_MODULE_14__.apis.IS_NODE_ENV) {
                session_options.externalData = externalData;
              }
            }
            if (selectedDevice === "webgpu") {
              const shapes = (0, _configs_js__WEBPACK_IMPORTED_MODULE_0__.getKeyValueShapes)(options.config, {
                prefix: "present"
              });
              if (Object.keys(shapes).length > 0 && !(0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.isONNXProxy)()) {
                const preferredOutputLocation = {};
                for (const key in shapes) {
                  preferredOutputLocation[key] = "gpu-buffer";
                }
                session_options.preferredOutputLocation = preferredOutputLocation;
              }
            }
            const buffer_or_path = await bufferOrPathPromise;
            return { buffer_or_path, session_options, session_config };
          }
          async function constructSessions(pretrained_model_name_or_path, names, options) {
            return Object.fromEntries(await Promise.all(
              Object.keys(names).map(async (name) => {
                const { buffer_or_path, session_options, session_config } = await getSession(pretrained_model_name_or_path, names[name], options);
                const session = await (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.createInferenceSession)(buffer_or_path, session_options, session_config);
                return [name, session];
              })
            ));
          }
          async function getOptionalConfigs(pretrained_model_name_or_path, names, options) {
            return Object.fromEntries(await Promise.all(
              Object.keys(names).map(async (name) => {
                const config = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelJSON)(pretrained_model_name_or_path, names[name], false, options);
                return [name, config];
              })
            ));
          }
          function validateInputs(session, inputs) {
            const checkedInputs = /* @__PURE__ */ Object.create(null);
            const missingInputs = [];
            for (const inputName of session.inputNames) {
              const tensor = inputs[inputName];
              if (!(tensor instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor)) {
                missingInputs.push(inputName);
                continue;
              }
              checkedInputs[inputName] = (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.isONNXProxy)() ? tensor.clone() : tensor;
            }
            if (missingInputs.length > 0) {
              throw new Error(
                `An error occurred during model execution: "Missing the following inputs: ${missingInputs.join(", ")}.`
              );
            }
            const numInputsProvided = Object.keys(inputs).length;
            const numInputsNeeded = session.inputNames.length;
            if (numInputsProvided > numInputsNeeded) {
              let ignored = Object.keys(inputs).filter((inputName) => !session.inputNames.includes(inputName));
              console.warn(`WARNING: Too many inputs were provided (${numInputsProvided} > ${numInputsNeeded}). The following inputs will be ignored: "${ignored.join(", ")}".`);
            }
            return checkedInputs;
          }
          let webInferenceChain = Promise.resolve();
          async function sessionRun(session, inputs) {
            const checkedInputs = validateInputs(session, inputs);
            try {
              const ortFeed = Object.fromEntries(Object.entries(checkedInputs).map(([k, v]) => [k, v.ort_tensor]));
              const run = () => session.run(ortFeed);
              const output = await (_env_js__WEBPACK_IMPORTED_MODULE_14__.apis.IS_BROWSER_ENV || _env_js__WEBPACK_IMPORTED_MODULE_14__.apis.IS_WEBWORKER_ENV ? webInferenceChain = webInferenceChain.then(run) : run());
              return replaceTensors(output);
            } catch (e) {
              const formatted = Object.fromEntries(Object.entries(checkedInputs).map(([k, tensor]) => {
                const unpacked = {
                  type: tensor.type,
                  dims: tensor.dims,
                  location: tensor.location
                };
                if (unpacked.location !== "gpu-buffer") {
                  unpacked.data = tensor.data;
                }
                return [k, unpacked];
              }));
              console.error(`An error occurred during model execution: "${e}".`);
              console.error("Inputs given to model:", formatted);
              throw e;
            }
          }
          function replaceTensors(obj) {
            for (let prop in obj) {
              if ((0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.isONNXTensor)(obj[prop])) {
                obj[prop] = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(obj[prop]);
              } else if (typeof obj[prop] === "object") {
                replaceTensors(obj[prop]);
              }
            }
            return obj;
          }
          function toI64Tensor(items) {
            if (items instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor) {
              return items;
            }
            if (items.length === 0) {
              throw Error("items must be non-empty");
            }
            if (Array.isArray(items[0])) {
              if (items.some((x2) => x2.length !== items[0].length)) {
                throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");
              }
              return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
                "int64",
                BigInt64Array.from(items.flat().map((x2) => BigInt(x2))),
                [items.length, items[0].length]
              );
            } else {
              return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
                "int64",
                BigInt64Array.from(items.map((x2) => BigInt(x2))),
                [1, items.length]
              );
            }
          }
          function boolTensor(value) {
            return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("bool", [value], [1]);
          }
          async function seq2seqForward(self2, model_inputs) {
            let { encoder_outputs, input_ids, decoder_input_ids, ...other_decoder_inputs } = model_inputs;
            if (!encoder_outputs) {
              const encoder_inputs = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(model_inputs, self2.sessions["model"].inputNames);
              encoder_outputs = (await encoderForward(self2, encoder_inputs)).last_hidden_state;
            }
            other_decoder_inputs.input_ids = decoder_input_ids;
            other_decoder_inputs.encoder_hidden_states = encoder_outputs;
            if (self2.sessions["decoder_model_merged"].inputNames.includes("encoder_attention_mask")) {
              other_decoder_inputs.encoder_attention_mask = model_inputs.attention_mask;
            }
            const decoderResults = await decoderForward(self2, other_decoder_inputs, true);
            return decoderResults;
          }
          async function encoderForward(self2, model_inputs) {
            const session = self2.sessions["model"];
            const encoderFeeds = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(model_inputs, session.inputNames);
            if (session.inputNames.includes("inputs_embeds") && !encoderFeeds.inputs_embeds) {
              if (!model_inputs.input_ids) {
                throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");
              }
              encoderFeeds.inputs_embeds = await self2.encode_text({ input_ids: model_inputs.input_ids });
            }
            if (session.inputNames.includes("token_type_ids") && !encoderFeeds.token_type_ids) {
              if (!encoderFeeds.input_ids) {
                throw new Error("Both `input_ids` and `token_type_ids` are missing in the model inputs.");
              }
              encoderFeeds.token_type_ids = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.zeros_like)(encoderFeeds.input_ids);
            }
            if (session.inputNames.includes("pixel_mask") && !encoderFeeds.pixel_mask) {
              if (!encoderFeeds.pixel_values) {
                throw new Error("Both `pixel_values` and `pixel_mask` are missing in the model inputs.");
              }
              const dims = encoderFeeds.pixel_values.dims;
              encoderFeeds.pixel_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([dims[0], dims[2], dims[3]]);
            }
            return await sessionRun(session, encoderFeeds);
          }
          async function autoEncoderForward(self2, model_inputs) {
            const encoded = await self2.encode(model_inputs);
            const decoded = await self2.decode(encoded);
            return decoded;
          }
          async function decoderForward(self2, model_inputs, is_encoder_decoder = false) {
            const session = self2.sessions[is_encoder_decoder ? "decoder_model_merged" : "model"];
            const { past_key_values, ...new_model_inputs } = model_inputs;
            if (session.inputNames.includes("use_cache_branch")) {
              new_model_inputs.use_cache_branch = boolTensor(!!past_key_values);
            }
            if (session.inputNames.includes("position_ids") && new_model_inputs.attention_mask && !new_model_inputs.position_ids) {
              const start_index = ["paligemma", "gemma3_text", "gemma3"].includes(self2.config.model_type) ? 1 : 0;
              new_model_inputs.position_ids = createPositionIds(new_model_inputs, past_key_values, start_index);
            }
            self2.addPastKeyValues(new_model_inputs, past_key_values);
            const fixed = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(new_model_inputs, session.inputNames);
            return await sessionRun(session, fixed);
          }
          function default_merge_input_ids_with_features({
            modality_token_id,
            inputs_embeds,
            modality_features,
            input_ids,
            attention_mask
          }) {
            const token_positions = input_ids.tolist().map(
              (ids) => ids.reduce((acc, x2, idx) => {
                if (x2 == modality_token_id)
                  acc.push(idx);
                return acc;
              }, [])
            );
            const n_tokens = token_positions.reduce((acc, x2) => acc + x2.length, 0);
            const n_features = modality_features.dims[0];
            if (n_tokens !== n_features) {
              throw new Error(`Number of tokens and features do not match: tokens: ${n_tokens}, features ${n_features}`);
            }
            let img = 0;
            for (let i = 0; i < token_positions.length; ++i) {
              const tokens = token_positions[i];
              const embeds = inputs_embeds[i];
              for (let j = 0; j < tokens.length; ++j) {
                embeds[tokens[j]].data.set(modality_features[img++].data);
              }
            }
            return { inputs_embeds, attention_mask };
          }
          function default_merge_input_ids_with_image_features({
            image_token_id,
            inputs_embeds,
            image_features,
            input_ids,
            attention_mask
          }) {
            return default_merge_input_ids_with_features({
              modality_token_id: image_token_id,
              inputs_embeds,
              modality_features: image_features,
              input_ids,
              attention_mask
            });
          }
          function default_merge_input_ids_with_audio_features({
            audio_token_id,
            inputs_embeds,
            audio_features,
            input_ids,
            attention_mask
          }) {
            return default_merge_input_ids_with_features({
              modality_token_id: audio_token_id,
              inputs_embeds,
              modality_features: audio_features,
              input_ids,
              attention_mask
            });
          }
          async function genericTextToTextForward(self2, {
            // Generic parameters:
            encode_function,
            merge_function,
            modality_input_name,
            modality_output_name,
            // Produced by the tokenizer/processor:
            input_ids = null,
            attention_mask = null,
            // Used during generation:
            position_ids = null,
            inputs_embeds = null,
            past_key_values = null,
            // Generic generation parameters
            generation_config = null,
            logits_processor = null,
            // Additional parameters
            ...kwargs
          }) {
            const modality_values = kwargs[modality_input_name];
            if (!inputs_embeds) {
              inputs_embeds = await self2.encode_text({ input_ids, ...kwargs });
              if (modality_values && input_ids.dims[1] !== 1) {
                const modality_features = await encode_function({
                  // Pass the modality values under its expected key.
                  // The caller knows whether this is audio or image.
                  [modality_input_name]: modality_values,
                  ...kwargs
                });
                ({ inputs_embeds, attention_mask } = merge_function({
                  [modality_output_name]: modality_features,
                  inputs_embeds,
                  input_ids,
                  attention_mask
                }));
              } else if (past_key_values && modality_values && input_ids.dims[1] === 1) {
                const target_length = input_ids.dims[1];
                const past_length = Object.values(past_key_values)[0].dims.at(-2);
                attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                  (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([input_ids.dims[0], past_length]),
                  attention_mask.slice(null, [attention_mask.dims[1] - target_length, attention_mask.dims[1]])
                ], 1);
              }
            }
            if (!position_ids) {
              if (self2.config.model_type === "qwen2_vl") {
                const { image_grid_thw, video_grid_thw } = kwargs;
                [position_ids] = self2.get_rope_index(input_ids, image_grid_thw, video_grid_thw, attention_mask);
              }
            }
            const outputs = await decoderForward(self2, {
              inputs_embeds,
              past_key_values,
              attention_mask,
              position_ids,
              generation_config,
              logits_processor
            }, true);
            return outputs;
          }
          async function audioTextToTextForward(self2, params) {
            return await genericTextToTextForward(self2, {
              ...params,
              modality_input_name: "audio_values",
              modality_output_name: "audio_features",
              encode_function: self2.encode_audio.bind(self2),
              merge_function: self2._merge_input_ids_with_audio_features.bind(self2)
            });
          }
          async function imageTextToTextForward(self2, params) {
            return await genericTextToTextForward(self2, {
              ...params,
              modality_input_name: "pixel_values",
              modality_output_name: "image_features",
              encode_function: self2.encode_image.bind(self2),
              merge_function: self2._merge_input_ids_with_image_features.bind(self2)
            });
          }
          function cumsum_masked_fill(attention_mask, start_index = 0) {
            const [bz, seq_len] = attention_mask.dims;
            const attn_mask_data = attention_mask.data;
            const data = new BigInt64Array(attn_mask_data.length);
            for (let i = 0; i < bz; ++i) {
              const start = i * seq_len;
              let sum = BigInt(start_index);
              for (let j = 0; j < seq_len; ++j) {
                const index = start + j;
                if (attn_mask_data[index] === 0n) {
                  data[index] = BigInt(1);
                } else {
                  data[index] = sum;
                  sum += attn_mask_data[index];
                }
              }
            }
            return { data, dims: attention_mask.dims };
          }
          function createPositionIds(model_inputs, past_key_values = null, start_index = 0) {
            const { input_ids, inputs_embeds, attention_mask } = model_inputs;
            const { data, dims } = cumsum_masked_fill(attention_mask, start_index);
            let position_ids = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("int64", data, dims);
            if (past_key_values) {
              const offset = -(input_ids ?? inputs_embeds).dims.at(1);
              position_ids = position_ids.slice(null, [offset, null]);
            }
            return position_ids;
          }
          function decoder_prepare_inputs_for_generation(self2, input_ids, model_inputs, generation_config) {
            if (model_inputs.past_key_values) {
              const past_length = Object.values(model_inputs.past_key_values)[0].dims.at(-2);
              const { input_ids: input_ids2, attention_mask } = model_inputs;
              if (attention_mask && attention_mask.dims[1] > input_ids2.dims[1]) {
              } else if (past_length < input_ids2.dims[1]) {
                model_inputs.input_ids = input_ids2.slice(null, [past_length, null]);
              } else {
                if (
                  // NOTE: Only used by VLMs (!= so that null matches undefined)
                  self2.config.image_token_index != null && // Equivalent to `self.config.image_token_index in input_ids` (== so that int matches bigint)
                  input_ids2.data.some((x2) => x2 == self2.config.image_token_index)
                ) {
                  const num_image_tokens = self2.config.num_image_tokens;
                  if (!num_image_tokens) {
                    throw new Error("`num_image_tokens` is missing in the model configuration.");
                  }
                  const num_new_tokens = input_ids2.dims[1] - (past_length - num_image_tokens);
                  model_inputs.input_ids = input_ids2.slice(null, [-num_new_tokens, null]);
                  model_inputs.attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([1, past_length + num_new_tokens]);
                }
              }
            }
            return model_inputs;
          }
          function encoder_decoder_prepare_inputs_for_generation(self2, input_ids, model_inputs, generation_config) {
            if (model_inputs.past_key_values) {
              input_ids = input_ids.map((x2) => [x2.at(-1)]);
            }
            return {
              ...model_inputs,
              decoder_input_ids: toI64Tensor(input_ids)
            };
          }
          function multimodal_text_to_text_prepare_inputs_for_generation(self2, ...args) {
            if (self2.config.is_encoder_decoder) {
              return encoder_decoder_prepare_inputs_for_generation(self2, ...args);
            } else {
              return decoder_prepare_inputs_for_generation(self2, ...args);
            }
          }
          function multimodality_prepare_inputs_for_generation(self2, input_ids, model_inputs, generation_config) {
            const has_past_key_values = !!model_inputs.past_key_values;
            if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {
              if (has_past_key_values) {
                model_inputs.input_ids = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                  model_inputs.input_ids,
                  model_inputs.input_ids
                ], 0);
              } else {
                model_inputs.input_ids = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                  model_inputs.input_ids,
                  (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.full_like)(model_inputs.input_ids, BigInt(generation_config.pad_token_id))
                ], 0);
                model_inputs.attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                  model_inputs.attention_mask,
                  (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.full_like)(model_inputs.attention_mask, 0n)
                ], 0);
              }
            }
            if (has_past_key_values || !model_inputs.pixel_values) {
              model_inputs.pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.full)([0, 0, 3, 384, 384], 1);
            }
            if (has_past_key_values) {
              const num_img_tokens = 0;
              const num_text_tokens = 1;
              const has_image = num_img_tokens > 0 ? 1 : 0;
              const batch_size = 1;
              model_inputs.images_seq_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
                "bool",
                new Array(num_img_tokens + num_text_tokens).fill(true).fill(false, 0, num_text_tokens),
                [batch_size, num_img_tokens + num_text_tokens]
              );
              model_inputs.images_emb_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
                "bool",
                new Array(num_img_tokens).fill(!!has_image),
                [batch_size, 1, num_img_tokens]
              );
            }
            return model_inputs;
          }
          class PreTrainedModel extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_3__.Callable {
            /**
             * Creates a new instance of the `PreTrainedModel` class.
             * @param {import('./configs.js').PretrainedConfig} config The model configuration.
             * @param {Record<string, any>} sessions The inference sessions for the model.
             * @param {Record<string, Object>} configs Additional configuration files (e.g., generation_config.json).
             */
            constructor(config, sessions, configs) {
              super();
              __publicField(this, "main_input_name", "input_ids");
              __publicField(this, "forward_params", ["input_ids", "attention_mask"]);
              this.config = config;
              this.sessions = sessions;
              this.configs = configs;
              const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor);
              const modelType = MODEL_TYPE_MAPPING.get(modelName);
              this.can_generate = false;
              this._forward = null;
              this._prepare_inputs_for_generation = null;
              switch (modelType) {
                case MODEL_TYPES.DecoderOnly:
                  this.can_generate = true;
                  this._forward = decoderForward;
                  this._prepare_inputs_for_generation = decoder_prepare_inputs_for_generation;
                  break;
                case MODEL_TYPES.Seq2Seq:
                case MODEL_TYPES.Vision2Seq:
                case MODEL_TYPES.Musicgen:
                  this.can_generate = true;
                  this._forward = seq2seqForward;
                  this._prepare_inputs_for_generation = encoder_decoder_prepare_inputs_for_generation;
                  break;
                case MODEL_TYPES.EncoderDecoder:
                  this._forward = seq2seqForward;
                  break;
                case MODEL_TYPES.ImageTextToText:
                  this.can_generate = true;
                  this._forward = imageTextToTextForward;
                  this._prepare_inputs_for_generation = multimodal_text_to_text_prepare_inputs_for_generation;
                  break;
                case MODEL_TYPES.AudioTextToText:
                  this.can_generate = true;
                  this._forward = audioTextToTextForward;
                  this._prepare_inputs_for_generation = multimodal_text_to_text_prepare_inputs_for_generation;
                  break;
                case MODEL_TYPES.Phi3V:
                  this.can_generate = true;
                  this._prepare_inputs_for_generation = multimodal_text_to_text_prepare_inputs_for_generation;
                  break;
                case MODEL_TYPES.MultiModality:
                  this.can_generate = true;
                  this._prepare_inputs_for_generation = multimodality_prepare_inputs_for_generation;
                  break;
                case MODEL_TYPES.AutoEncoder:
                  this._forward = autoEncoderForward;
                  break;
                default:
                  this._forward = encoderForward;
                  break;
              }
              if (this.can_generate) {
                this.forward_params.push("past_key_values");
              }
              this.custom_config = this.config["transformers.js_config"] ?? {};
            }
            /**
            * Disposes of all the ONNX sessions that were created during inference.
            * @returns {Promise<unknown[]>} An array of promises, one for each ONNX session that is being disposed.
            * @todo Use https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry
            */
            async dispose() {
              const promises = [];
              for (const session of Object.values(this.sessions)) {
                if (session?.handler?.dispose) {
                  promises.push(session.handler.dispose());
                }
              }
              return await Promise.all(promises);
            }
            /**
             * Instantiate one of the model classes of the library from a pretrained model.
             * 
             * The model class to instantiate is selected based on the `model_type` property of the config object
             * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)
             * 
             * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:
             * - A string, the *model id* of a pretrained model hosted inside a model repo on huggingface.co.
             *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a
             *   user or organization name, like `dbmdz/bert-base-german-cased`.
             * - A path to a *directory* containing model weights, e.g., `./my_model_directory/`.
             * @param {import('./utils/hub.js').PretrainedModelOptions} options Additional options for loading the model.
             * 
             * @returns {Promise<PreTrainedModel>} A new instance of the `PreTrainedModel` class.
             */
            static async from_pretrained(pretrained_model_name_or_path, {
              progress_callback = null,
              config = null,
              cache_dir = null,
              local_files_only = false,
              revision = "main",
              model_file_name = null,
              subfolder = "onnx",
              device = null,
              dtype = null,
              use_external_data_format = null,
              session_options = {}
            } = {}) {
              let options = {
                progress_callback,
                config,
                cache_dir,
                local_files_only,
                revision,
                model_file_name,
                subfolder,
                device,
                dtype,
                use_external_data_format,
                session_options
              };
              const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this);
              const modelType = MODEL_TYPE_MAPPING.get(modelName);
              config = options.config = await _configs_js__WEBPACK_IMPORTED_MODULE_0__.AutoConfig.from_pretrained(pretrained_model_name_or_path, options);
              let info;
              if (modelType === MODEL_TYPES.DecoderOnly) {
                info = await Promise.all([
                  constructSessions(pretrained_model_name_or_path, {
                    model: options.model_file_name ?? "model"
                  }, options),
                  getOptionalConfigs(pretrained_model_name_or_path, {
                    generation_config: "generation_config.json"
                  }, options)
                ]);
              } else if (modelType === MODEL_TYPES.Seq2Seq || modelType === MODEL_TYPES.Vision2Seq) {
                info = await Promise.all([
                  constructSessions(pretrained_model_name_or_path, {
                    model: "encoder_model",
                    decoder_model_merged: "decoder_model_merged"
                  }, options),
                  getOptionalConfigs(pretrained_model_name_or_path, {
                    generation_config: "generation_config.json"
                  }, options)
                ]);
              } else if (modelType === MODEL_TYPES.MaskGeneration) {
                info = await Promise.all([
                  constructSessions(pretrained_model_name_or_path, {
                    model: "vision_encoder",
                    prompt_encoder_mask_decoder: "prompt_encoder_mask_decoder"
                  }, options)
                ]);
              } else if (modelType === MODEL_TYPES.EncoderDecoder) {
                info = await Promise.all([
                  constructSessions(pretrained_model_name_or_path, {
                    model: "encoder_model",
                    decoder_model_merged: "decoder_model_merged"
                  }, options)
                ]);
              } else if (modelType === MODEL_TYPES.ImageTextToText) {
                const sessions = {
                  embed_tokens: "embed_tokens",
                  vision_encoder: "vision_encoder",
                  decoder_model_merged: "decoder_model_merged"
                };
                if (config.is_encoder_decoder) {
                  sessions["model"] = "encoder_model";
                }
                info = await Promise.all([
                  constructSessions(pretrained_model_name_or_path, sessions, options),
                  getOptionalConfigs(pretrained_model_name_or_path, {
                    generation_config: "generation_config.json"
                  }, options)
                ]);
              } else if (modelType === MODEL_TYPES.AudioTextToText) {
                const sessions = {
                  embed_tokens: "embed_tokens",
                  audio_encoder: "audio_encoder",
                  decoder_model_merged: "decoder_model_merged"
                };
                info = await Promise.all([
                  constructSessions(pretrained_model_name_or_path, sessions, options),
                  getOptionalConfigs(pretrained_model_name_or_path, {
                    generation_config: "generation_config.json"
                  }, options)
                ]);
              } else if (modelType === MODEL_TYPES.Musicgen) {
                info = await Promise.all([
                  constructSessions(pretrained_model_name_or_path, {
                    model: "text_encoder",
                    decoder_model_merged: "decoder_model_merged",
                    encodec_decode: "encodec_decode"
                  }, options),
                  getOptionalConfigs(pretrained_model_name_or_path, {
                    generation_config: "generation_config.json"
                  }, options)
                ]);
              } else if (modelType === MODEL_TYPES.MultiModality) {
                info = await Promise.all([
                  constructSessions(pretrained_model_name_or_path, {
                    prepare_inputs_embeds: "prepare_inputs_embeds",
                    model: "language_model",
                    lm_head: "lm_head",
                    gen_head: "gen_head",
                    gen_img_embeds: "gen_img_embeds",
                    image_decode: "image_decode"
                  }, options),
                  getOptionalConfigs(pretrained_model_name_or_path, {
                    generation_config: "generation_config.json"
                  }, options)
                ]);
              } else if (modelType === MODEL_TYPES.Phi3V) {
                info = await Promise.all([
                  constructSessions(pretrained_model_name_or_path, {
                    prepare_inputs_embeds: "prepare_inputs_embeds",
                    model: "model",
                    vision_encoder: "vision_encoder"
                  }, options),
                  getOptionalConfigs(pretrained_model_name_or_path, {
                    generation_config: "generation_config.json"
                  }, options)
                ]);
              } else if (modelType === MODEL_TYPES.AutoEncoder) {
                info = await Promise.all([
                  constructSessions(pretrained_model_name_or_path, {
                    encoder_model: "encoder_model",
                    decoder_model: "decoder_model"
                  }, options)
                ]);
              } else {
                if (modelType !== MODEL_TYPES.EncoderOnly) {
                  const type = modelName ?? config?.model_type;
                  if (type !== "custom") {
                    console.warn(`Model type for '${type}' not found, assuming encoder-only architecture. Please report this at ${_utils_constants_js__WEBPACK_IMPORTED_MODULE_6__.GITHUB_ISSUE_URL}.`);
                  }
                }
                info = await Promise.all([
                  constructSessions(pretrained_model_name_or_path, {
                    model: options.model_file_name ?? "model"
                  }, options)
                ]);
              }
              return new this(config, ...info);
            }
            /**
             * Runs the model with the provided inputs
             * @param {Object} model_inputs Object containing input tensors
             * @returns {Promise<Object>} Object containing output tensors
             */
            async _call(model_inputs) {
              return await this.forward(model_inputs);
            }
            /**
             * Forward method for a pretrained model. If not overridden by a subclass, the correct forward method
             * will be chosen based on the model type.
             * @param {Object} model_inputs The input data to the model in the format specified in the ONNX model.
             * @returns {Promise<Object>} The output data from the model in the format specified in the ONNX model.
             * @throws {Error} This method must be implemented in subclasses.
             */
            async forward(model_inputs) {
              return await this._forward(this, model_inputs);
            }
            /**
             * Get the model's generation config, if it exists.
             * @returns {GenerationConfig|null} The model's generation config if it exists, otherwise `null`.
             */
            get generation_config() {
              return this.configs?.generation_config ?? null;
            }
            /**
             * This function returns a [`LogitsProcessorList`] list object that contains all relevant [`LogitsWarper`]
             * instances used for multinomial sampling.
             * @param {GenerationConfig} generation_config The generation config.
             * @returns {LogitsProcessorList} generation_config 
             */
            _get_logits_warper(generation_config) {
              const warpers = new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.LogitsProcessorList();
              if (generation_config.temperature !== null && generation_config.temperature !== 1) {
                warpers.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.TemperatureLogitsWarper(generation_config.temperature));
              }
              if (generation_config.top_k !== null && generation_config.top_k !== 0) {
                warpers.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.TopKLogitsWarper(generation_config.top_k));
              }
              if (generation_config.top_p !== null && generation_config.top_p < 1) {
                warpers.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.TopPLogitsWarper(generation_config.top_p));
              }
              return warpers;
            }
            /**
             * @param {GenerationConfig} generation_config 
             * @param {number} input_ids_seq_length The starting sequence length for the input ids.
             * @returns {LogitsProcessorList}
             * @private
             */
            _get_logits_processor(generation_config, input_ids_seq_length, logits_processor = null) {
              const processors = new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.LogitsProcessorList();
              if (generation_config.repetition_penalty !== null && generation_config.repetition_penalty !== 1) {
                processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.RepetitionPenaltyLogitsProcessor(generation_config.repetition_penalty));
              }
              if (generation_config.no_repeat_ngram_size !== null && generation_config.no_repeat_ngram_size > 0) {
                processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.NoRepeatNGramLogitsProcessor(generation_config.no_repeat_ngram_size));
              }
              if (generation_config.bad_words_ids !== null) {
                processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.NoBadWordsLogitsProcessor(generation_config.bad_words_ids, generation_config.eos_token_id));
              }
              if (generation_config.min_length !== null && generation_config.eos_token_id !== null && generation_config.min_length > 0) {
                processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.MinLengthLogitsProcessor(generation_config.min_length, generation_config.eos_token_id));
              }
              if (generation_config.min_new_tokens !== null && generation_config.eos_token_id !== null && generation_config.min_new_tokens > 0) {
                processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.MinNewTokensLengthLogitsProcessor(
                  input_ids_seq_length,
                  generation_config.min_new_tokens,
                  generation_config.eos_token_id
                ));
              }
              if (generation_config.forced_bos_token_id !== null) {
                processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.ForcedBOSTokenLogitsProcessor(generation_config.forced_bos_token_id));
              }
              if (generation_config.forced_eos_token_id !== null) {
                processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.ForcedEOSTokenLogitsProcessor(
                  generation_config.max_length,
                  generation_config.forced_eos_token_id
                ));
              }
              if (generation_config.begin_suppress_tokens !== null) {
                const begin_index = input_ids_seq_length > 1 || generation_config.forced_bos_token_id === null ? input_ids_seq_length : input_ids_seq_length + 1;
                processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.SuppressTokensAtBeginLogitsProcessor(generation_config.begin_suppress_tokens, begin_index));
              }
              if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {
                processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.ClassifierFreeGuidanceLogitsProcessor(generation_config.guidance_scale));
              }
              if (logits_processor !== null) {
                processors.extend(logits_processor);
              }
              return processors;
            }
            /**
             * This function merges multiple generation configs together to form a final generation config to be used by the model for text generation.
             * It first creates an empty `GenerationConfig` object, then it applies the model's own `generation_config` property to it. Finally, if a `generation_config` object was passed in the arguments, it overwrites the corresponding properties in the final config with those of the passed config object.
             * @param {GenerationConfig|null} generation_config A `GenerationConfig` object containing generation parameters.
             * @param {Object} kwargs Additional generation parameters to be used in place of those in the `generation_config` object.
             * @returns {GenerationConfig} The final generation config object to be used by the model for text generation.
             */
            _prepare_generation_config(generation_config, kwargs, cls = _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_8__.GenerationConfig) {
              const config = { ...this.config };
              for (const key of ["decoder", "generator", "text_config"]) {
                if (key in config) {
                  Object.assign(config, config[key]);
                }
              }
              const gen_config = new cls(config);
              Object.assign(gen_config, this.generation_config ?? {});
              if (generation_config) {
                Object.assign(gen_config, generation_config);
              }
              if (kwargs) {
                Object.assign(gen_config, (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(kwargs, Object.getOwnPropertyNames(gen_config)));
              }
              return gen_config;
            }
            /**
             * 
             * @param {GenerationConfig} generation_config 
             * @param {StoppingCriteriaList} [stopping_criteria=null] 
             */
            _get_stopping_criteria(generation_config, stopping_criteria = null) {
              const criteria = new _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_12__.StoppingCriteriaList();
              if (generation_config.max_length !== null) {
                criteria.push(new _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_12__.MaxLengthCriteria(
                  generation_config.max_length,
                  this.config.max_position_embeddings ?? null
                ));
              }
              if (generation_config.eos_token_id !== null) {
                criteria.push(new _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_12__.EosTokenCriteria(generation_config.eos_token_id));
              }
              if (stopping_criteria) {
                criteria.extend(stopping_criteria);
              }
              return criteria;
            }
            /**
             * Confirms that the model class is compatible with generation.
             * If not, raises an exception that points to the right class to use.
             */
            _validate_model_class() {
              if (!this.can_generate) {
                const generate_compatible_mappings = [
                  MODEL_FOR_CAUSAL_LM_MAPPING_NAMES,
                  // MODEL_FOR_CAUSAL_IMAGE_MODELING_MAPPING, // TODO
                  MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES,
                  MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES,
                  MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES
                ];
                const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor);
                const generate_compatible_classes = /* @__PURE__ */ new Set();
                const modelType = this.config.model_type;
                for (const model_mapping of generate_compatible_mappings) {
                  const supported_models = model_mapping.get(modelType);
                  if (supported_models) {
                    generate_compatible_classes.add(supported_models[0]);
                  }
                }
                let errorMessage = `The current model class (${modelName}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;
                if (generate_compatible_classes.size > 0) {
                  errorMessage += ` Please use the following class instead: ${[...generate_compatible_classes].join(", ")}`;
                }
                throw Error(errorMessage);
              }
            }
            prepare_inputs_for_generation(...args) {
              return this._prepare_inputs_for_generation(this, ...args);
            }
            /**
             * 
             * @param {Object} inputs
             * @param {bigint[][]} inputs.generated_input_ids
             * @param {Object} inputs.outputs
             * @param {Object} inputs.model_inputs
             * @param {boolean} inputs.is_encoder_decoder
             * @returns {Object} The updated model inputs for the next generation iteration.
             */
            _update_model_kwargs_for_generation({ generated_input_ids, outputs, model_inputs, is_encoder_decoder }) {
              model_inputs["past_key_values"] = this.getPastKeyValues(outputs, model_inputs.past_key_values);
              model_inputs["input_ids"] = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("int64", generated_input_ids.flat(), [generated_input_ids.length, 1]);
              if (!is_encoder_decoder) {
                model_inputs.attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)(
                  [
                    model_inputs.attention_mask,
                    (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([model_inputs.attention_mask.dims[0], 1])
                  ],
                  1
                );
              } else if ("decoder_attention_mask" in model_inputs) {
              }
              model_inputs["position_ids"] = null;
              return model_inputs;
            }
            /**
             * This function extracts the model-specific `inputs` for generation.
             * @param {Object} params
             * @param {Tensor} [params.inputs=null]
             * @param {number} [params.bos_token_id=null]
             * @param {Record<string, Tensor|number[]>} [params.model_kwargs]
             * @returns {{inputs_tensor: Tensor, model_inputs: Record<string, Tensor>, model_input_name: string}} The model-specific inputs for generation.
             */
            _prepare_model_inputs({ inputs, bos_token_id, model_kwargs }) {
              const model_inputs = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(model_kwargs, this.forward_params);
              const input_name = this.main_input_name;
              if (input_name in model_inputs) {
                if (inputs) {
                  throw new Error(
                    "`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=..."
                  );
                }
              } else {
                model_inputs[input_name] = inputs;
              }
              const inputs_tensor = model_inputs[input_name];
              return { inputs_tensor, model_inputs, model_input_name: input_name };
            }
            async _prepare_encoder_decoder_kwargs_for_generation({ inputs_tensor, model_inputs, model_input_name, generation_config }) {
              if (this.sessions["model"].inputNames.includes("inputs_embeds") && !model_inputs.inputs_embeds && "_prepare_inputs_embeds" in this) {
                const { input_ids, pixel_values, attention_mask, ...kwargs } = model_inputs;
                const prepared_inputs = await this._prepare_inputs_embeds(model_inputs);
                model_inputs = {
                  ...kwargs,
                  ...(0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(prepared_inputs, ["inputs_embeds", "attention_mask"])
                };
              }
              let { last_hidden_state } = await encoderForward(this, model_inputs);
              if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {
                last_hidden_state = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                  last_hidden_state,
                  (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.full_like)(last_hidden_state, 0)
                ], 0);
                if ("attention_mask" in model_inputs) {
                  model_inputs["attention_mask"] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                    model_inputs["attention_mask"],
                    (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.zeros_like)(model_inputs["attention_mask"])
                  ], 0);
                }
              } else if (model_inputs.decoder_input_ids) {
                const decoder_input_ids_batch_size = toI64Tensor(model_inputs.decoder_input_ids).dims[0];
                if (decoder_input_ids_batch_size !== last_hidden_state.dims[0]) {
                  if (last_hidden_state.dims[0] !== 1) {
                    throw new Error(
                      `The encoder outputs have a different batch size (${last_hidden_state.dims[0]}) than the decoder inputs (${decoder_input_ids_batch_size}).`
                    );
                  }
                  last_hidden_state = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)(Array.from({ length: decoder_input_ids_batch_size }, () => last_hidden_state), 0);
                }
              }
              model_inputs["encoder_outputs"] = last_hidden_state;
              return model_inputs;
            }
            /**
             * Prepares `decoder_input_ids` for generation with encoder-decoder models
             * @param {*} param0 
             */
            _prepare_decoder_input_ids_for_generation({ batch_size, model_input_name, model_kwargs, decoder_start_token_id, bos_token_id, generation_config }) {
              let { decoder_input_ids, ...model_inputs } = model_kwargs;
              if (!(decoder_input_ids instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor)) {
                if (!decoder_input_ids) {
                  decoder_start_token_id ?? (decoder_start_token_id = bos_token_id);
                  if (this.config.model_type === "musicgen") {
                    decoder_input_ids = Array.from({
                      // @ts-expect-error TS2339
                      length: batch_size * this.config.decoder.num_codebooks
                    }, () => [decoder_start_token_id]);
                  } else if (Array.isArray(decoder_start_token_id)) {
                    if (decoder_start_token_id.length !== batch_size) {
                      throw new Error(
                        `\`decoder_start_token_id\` expcted to have length ${batch_size} but got ${decoder_start_token_id.length}`
                      );
                    }
                    decoder_input_ids = decoder_start_token_id;
                  } else {
                    decoder_input_ids = Array.from({
                      length: batch_size
                    }, () => [decoder_start_token_id]);
                  }
                } else if (!Array.isArray(decoder_input_ids[0])) {
                  decoder_input_ids = Array.from({
                    length: batch_size
                  }, () => decoder_input_ids);
                }
                decoder_input_ids = toI64Tensor(decoder_input_ids);
              }
              model_kwargs["decoder_attention_mask"] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones_like)(decoder_input_ids);
              return { input_ids: decoder_input_ids, model_inputs };
            }
            /**
             * Generates sequences of token ids for models with a language modeling head.
             * @param {import('./generation/parameters.js').GenerationFunctionParameters} options
             * @returns {Promise<ModelOutput|Tensor>} The output of the model, which can contain the generated token ids, attentions, and scores.
             */
            async generate({
              inputs = null,
              generation_config = null,
              logits_processor = null,
              stopping_criteria = null,
              streamer = null,
              // inputs_attention_mask = null,
              ...kwargs
            }) {
              this._validate_model_class();
              generation_config = this._prepare_generation_config(generation_config, kwargs);
              let { inputs_tensor, model_inputs, model_input_name } = this._prepare_model_inputs({
                inputs,
                model_kwargs: kwargs
              });
              const is_encoder_decoder = this.config.is_encoder_decoder;
              if (!is_encoder_decoder) {
              } else if (!("encoder_outputs" in model_inputs)) {
                model_inputs = await this._prepare_encoder_decoder_kwargs_for_generation(
                  { inputs_tensor, model_inputs, model_input_name, generation_config }
                );
              }
              let input_ids;
              if (is_encoder_decoder) {
                ({ input_ids, model_inputs } = this._prepare_decoder_input_ids_for_generation({
                  batch_size: model_inputs[model_input_name].dims.at(0),
                  model_input_name,
                  model_kwargs: model_inputs,
                  decoder_start_token_id: generation_config.decoder_start_token_id,
                  bos_token_id: generation_config.bos_token_id,
                  generation_config
                }));
              } else {
                input_ids = model_inputs[model_input_name];
              }
              let input_ids_length = input_ids.dims.at(-1);
              if (generation_config.max_new_tokens !== null) {
                generation_config.max_length = input_ids_length + generation_config.max_new_tokens;
              }
              const prepared_logits_processor = this._get_logits_processor(
                generation_config,
                input_ids_length,
                logits_processor
              );
              const prepared_stopping_criteria = this._get_stopping_criteria(
                generation_config,
                stopping_criteria
              );
              const numInputs = model_inputs[model_input_name].dims.at(0);
              const sampler = _generation_logits_sampler_js__WEBPACK_IMPORTED_MODULE_13__.LogitsSampler.getSampler(generation_config);
              const scores = new Array(numInputs).fill(0);
              const all_input_ids = input_ids.tolist();
              if (streamer) {
                streamer.put(all_input_ids);
              }
              let outputs;
              let attentions = {};
              while (true) {
                model_inputs = this.prepare_inputs_for_generation(all_input_ids, model_inputs, generation_config);
                outputs = await this.forward(model_inputs);
                if (generation_config.output_attentions && generation_config.return_dict_in_generate) {
                  const token_attentions = this.getAttentions(outputs);
                  for (const key in token_attentions) {
                    if (!(key in attentions)) {
                      attentions[key] = [];
                    }
                    attentions[key].push(token_attentions[key]);
                  }
                }
                const logits = outputs.logits.slice(null, -1, null);
                const next_tokens_scores = prepared_logits_processor(all_input_ids, logits);
                const generated_input_ids = [];
                for (let batch_idx = 0; batch_idx < next_tokens_scores.dims.at(0); ++batch_idx) {
                  const logs = next_tokens_scores[batch_idx];
                  const sampledTokens = await sampler(logs);
                  for (const [newTokenId, logProb] of sampledTokens) {
                    const bigint = BigInt(newTokenId);
                    scores[batch_idx] += logProb;
                    all_input_ids[batch_idx].push(bigint);
                    generated_input_ids.push([bigint]);
                    break;
                  }
                }
                if (streamer) {
                  streamer.put(generated_input_ids);
                }
                const stop = prepared_stopping_criteria(all_input_ids);
                if (stop.every((x2) => x2)) {
                  break;
                }
                model_inputs = this._update_model_kwargs_for_generation({
                  generated_input_ids,
                  outputs,
                  model_inputs,
                  is_encoder_decoder
                });
              }
              if (streamer) {
                streamer.end();
              }
              const past_key_values = this.getPastKeyValues(outputs, model_inputs.past_key_values, true);
              const sequences = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("int64", all_input_ids.flat(), [all_input_ids.length, all_input_ids[0].length]);
              if (generation_config.return_dict_in_generate) {
                return {
                  sequences,
                  past_key_values,
                  ...attentions
                  // TODO:
                  // scores,
                  // logits,
                };
              } else {
                for (const tensor of Object.values(outputs)) {
                  if (tensor.location === "gpu-buffer") {
                    tensor.dispose();
                  }
                }
                return sequences;
              }
            }
            /**
             * Returns an object containing past key values from the given decoder results object.
             *
             * @param {Object} decoderResults The decoder results object.
             * @param {Object} pastKeyValues The previous past key values.
             * @returns {Object} An object containing past key values.
             */
            getPastKeyValues(decoderResults, pastKeyValues, disposeEncoderPKVs = false) {
              const pkvs = /* @__PURE__ */ Object.create(null);
              for (const name in decoderResults) {
                if (name.startsWith("present")) {
                  const newName = name.replace("present", "past_key_values");
                  const is_encoder_pkv = name.includes("encoder");
                  if (is_encoder_pkv && pastKeyValues) {
                    pkvs[newName] = pastKeyValues[newName];
                  } else {
                    pkvs[newName] = decoderResults[name];
                  }
                  if (pastKeyValues && (!is_encoder_pkv || disposeEncoderPKVs)) {
                    const t = pastKeyValues[newName];
                    if (t.location === "gpu-buffer") {
                      t.dispose();
                    }
                  }
                }
              }
              return pkvs;
            }
            /**
             * Returns an object containing attentions from the given model output object.
             *
             * @param {Object} model_output The output of the model.
             * @returns {{cross_attentions?: Tensor[]}} An object containing attentions.
             */
            getAttentions(model_output) {
              const attentions = {};
              for (const attnName of ["cross_attentions", "encoder_attentions", "decoder_attentions"]) {
                for (const name in model_output) {
                  if (name.startsWith(attnName)) {
                    if (!(attnName in attentions)) {
                      attentions[attnName] = [];
                    }
                    attentions[attnName].push(model_output[name]);
                  }
                }
              }
              return attentions;
            }
            /**
             * Adds past key values to the decoder feeds object. If pastKeyValues is null, creates new tensors for past key values.
             *
             * @param {Object} decoderFeeds The decoder feeds object to add past key values to.
             * @param {Object} pastKeyValues An object containing past key values.
             */
            addPastKeyValues(decoderFeeds, pastKeyValues) {
              if (pastKeyValues) {
                Object.assign(decoderFeeds, pastKeyValues);
              } else {
                const session = this.sessions["decoder_model_merged"] ?? this.sessions["model"];
                const dtype = session?.config?.kv_cache_dtype ?? "float32";
                const empty = dtype === "float16" ? new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.DataTypeMap.float16() : [];
                const batch_size = (decoderFeeds[this.main_input_name] ?? decoderFeeds.attention_mask)?.dims?.[0] ?? 1;
                const shapes = (0, _configs_js__WEBPACK_IMPORTED_MODULE_0__.getKeyValueShapes)(this.config, { batch_size });
                for (const name in shapes) {
                  decoderFeeds[name] = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(dtype, empty, shapes[name]);
                }
              }
            }
            async encode_image({ pixel_values }) {
              const features = (await sessionRun(this.sessions["vision_encoder"], { pixel_values })).image_features;
              if (!this.config.num_image_tokens) {
                console.warn(
                  `The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${features.dims[1]}).`
                );
                this.config.num_image_tokens = features.dims[1];
              }
              return features;
            }
            async encode_text({ input_ids }) {
              return (await sessionRun(this.sessions["embed_tokens"], { input_ids })).inputs_embeds;
            }
            async encode_audio({ audio_values }) {
              return (await sessionRun(this.sessions["audio_encoder"], { audio_values })).audio_features;
            }
          }
          class ModelOutput {
          }
          class BaseModelOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.last_hidden_state Sequence of hidden-states at the output of the last layer of the model.
             * @param {Tensor} [output.hidden_states] Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.
             * @param {Tensor} [output.attentions] Attentions weights after the attention softmax, used to compute the weighted average in the self-attention heads.
             */
            constructor({ last_hidden_state, hidden_states = null, attentions = null }) {
              super();
              this.last_hidden_state = last_hidden_state;
              this.hidden_states = hidden_states;
              this.attentions = attentions;
            }
          }
          class BertPreTrainedModel extends PreTrainedModel {
          }
          class BertModel extends BertPreTrainedModel {
          }
          class BertForMaskedLM extends BertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class BertForSequenceClassification extends BertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class BertForTokenClassification extends BertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class BertForQuestionAnswering extends BertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class ModernBertPreTrainedModel extends PreTrainedModel {
          }
          class ModernBertModel extends ModernBertPreTrainedModel {
          }
          class ModernBertForMaskedLM extends ModernBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class ModernBertForSequenceClassification extends ModernBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class ModernBertForTokenClassification extends ModernBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class NomicBertPreTrainedModel extends PreTrainedModel {
          }
          class NomicBertModel extends NomicBertPreTrainedModel {
          }
          class RoFormerPreTrainedModel extends PreTrainedModel {
          }
          class RoFormerModel extends RoFormerPreTrainedModel {
          }
          class RoFormerForMaskedLM extends RoFormerPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class RoFormerForSequenceClassification extends RoFormerPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class RoFormerForTokenClassification extends RoFormerPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class RoFormerForQuestionAnswering extends RoFormerPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class ConvBertPreTrainedModel extends PreTrainedModel {
          }
          class ConvBertModel extends ConvBertPreTrainedModel {
          }
          class ConvBertForMaskedLM extends ConvBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class ConvBertForSequenceClassification extends ConvBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class ConvBertForTokenClassification extends ConvBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class ConvBertForQuestionAnswering extends ConvBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class ElectraPreTrainedModel extends PreTrainedModel {
          }
          class ElectraModel extends ElectraPreTrainedModel {
          }
          class ElectraForMaskedLM extends ElectraPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class ElectraForSequenceClassification extends ElectraPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class ElectraForTokenClassification extends ElectraPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class ElectraForQuestionAnswering extends ElectraPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class CamembertPreTrainedModel extends PreTrainedModel {
          }
          class CamembertModel extends CamembertPreTrainedModel {
          }
          class CamembertForMaskedLM extends CamembertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class CamembertForSequenceClassification extends CamembertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class CamembertForTokenClassification extends CamembertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class CamembertForQuestionAnswering extends CamembertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class DebertaPreTrainedModel extends PreTrainedModel {
          }
          class DebertaModel extends DebertaPreTrainedModel {
          }
          class DebertaForMaskedLM extends DebertaPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class DebertaForSequenceClassification extends DebertaPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class DebertaForTokenClassification extends DebertaPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class DebertaForQuestionAnswering extends DebertaPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class DebertaV2PreTrainedModel extends PreTrainedModel {
          }
          class DebertaV2Model extends DebertaV2PreTrainedModel {
          }
          class DebertaV2ForMaskedLM extends DebertaV2PreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class DebertaV2ForSequenceClassification extends DebertaV2PreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class DebertaV2ForTokenClassification extends DebertaV2PreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class DebertaV2ForQuestionAnswering extends DebertaV2PreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class DistilBertPreTrainedModel extends PreTrainedModel {
          }
          class DistilBertModel extends DistilBertPreTrainedModel {
          }
          class DistilBertForSequenceClassification extends DistilBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class DistilBertForTokenClassification extends DistilBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class DistilBertForQuestionAnswering extends DistilBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class DistilBertForMaskedLM extends DistilBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} returned object
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class EsmPreTrainedModel extends PreTrainedModel {
          }
          class EsmModel extends EsmPreTrainedModel {
          }
          class EsmForMaskedLM extends EsmPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class EsmForSequenceClassification extends EsmPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class EsmForTokenClassification extends EsmPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class MobileBertPreTrainedModel extends PreTrainedModel {
          }
          class MobileBertModel extends MobileBertPreTrainedModel {
          }
          class MobileBertForMaskedLM extends MobileBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} returned object
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class MobileBertForSequenceClassification extends MobileBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} returned object
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class MobileBertForQuestionAnswering extends MobileBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} returned object
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class MPNetPreTrainedModel extends PreTrainedModel {
          }
          class MPNetModel extends MPNetPreTrainedModel {
          }
          class MPNetForMaskedLM extends MPNetPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class MPNetForSequenceClassification extends MPNetPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class MPNetForTokenClassification extends MPNetPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class MPNetForQuestionAnswering extends MPNetPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class SqueezeBertPreTrainedModel extends PreTrainedModel {
          }
          class SqueezeBertModel extends SqueezeBertPreTrainedModel {
          }
          class SqueezeBertForMaskedLM extends SqueezeBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} returned object
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class SqueezeBertForSequenceClassification extends SqueezeBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} returned object
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class SqueezeBertForQuestionAnswering extends SqueezeBertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} returned object
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class AlbertPreTrainedModel extends PreTrainedModel {
          }
          class AlbertModel extends AlbertPreTrainedModel {
          }
          class AlbertForSequenceClassification extends AlbertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} returned object
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class AlbertForQuestionAnswering extends AlbertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} returned object
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class AlbertForMaskedLM extends AlbertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} returned object
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class T5PreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "forward_params", [
                "input_ids",
                "attention_mask",
                "encoder_outputs",
                "decoder_input_ids",
                "decoder_attention_mask",
                "past_key_values"
              ]);
            }
          }
          ;
          class T5Model extends T5PreTrainedModel {
          }
          class T5ForConditionalGeneration extends T5PreTrainedModel {
          }
          class LongT5PreTrainedModel extends PreTrainedModel {
          }
          ;
          class LongT5Model extends LongT5PreTrainedModel {
          }
          class LongT5ForConditionalGeneration extends LongT5PreTrainedModel {
          }
          class MT5PreTrainedModel extends PreTrainedModel {
          }
          ;
          class MT5Model extends MT5PreTrainedModel {
          }
          class MT5ForConditionalGeneration extends MT5PreTrainedModel {
          }
          class BartPretrainedModel extends PreTrainedModel {
          }
          ;
          class BartModel extends BartPretrainedModel {
          }
          class BartForConditionalGeneration extends BartPretrainedModel {
          }
          class BartForSequenceClassification extends BartPretrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class MBartPreTrainedModel extends PreTrainedModel {
          }
          ;
          class MBartModel extends MBartPreTrainedModel {
          }
          class MBartForConditionalGeneration extends MBartPreTrainedModel {
          }
          class MBartForSequenceClassification extends MBartPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class MBartForCausalLM extends MBartPreTrainedModel {
          }
          class BlenderbotPreTrainedModel extends PreTrainedModel {
          }
          ;
          class BlenderbotModel extends BlenderbotPreTrainedModel {
          }
          class BlenderbotForConditionalGeneration extends BlenderbotPreTrainedModel {
          }
          class BlenderbotSmallPreTrainedModel extends PreTrainedModel {
          }
          ;
          class BlenderbotSmallModel extends BlenderbotSmallPreTrainedModel {
          }
          class BlenderbotSmallForConditionalGeneration extends BlenderbotSmallPreTrainedModel {
          }
          class RobertaPreTrainedModel extends PreTrainedModel {
          }
          class RobertaModel extends RobertaPreTrainedModel {
          }
          class RobertaForMaskedLM extends RobertaPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} returned object
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class RobertaForSequenceClassification extends RobertaPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} returned object
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class RobertaForTokenClassification extends RobertaPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class RobertaForQuestionAnswering extends RobertaPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} returned object
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class XLMPreTrainedModel extends PreTrainedModel {
          }
          class XLMModel extends XLMPreTrainedModel {
          }
          class XLMWithLMHeadModel extends XLMPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} returned object
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class XLMForSequenceClassification extends XLMPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} returned object
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class XLMForTokenClassification extends XLMPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class XLMForQuestionAnswering extends XLMPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} returned object
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class XLMRobertaPreTrainedModel extends PreTrainedModel {
          }
          class XLMRobertaModel extends XLMRobertaPreTrainedModel {
          }
          class XLMRobertaForMaskedLM extends XLMRobertaPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<MaskedLMOutput>} returned object
             */
            async _call(model_inputs) {
              return new MaskedLMOutput(await super._call(model_inputs));
            }
          }
          class XLMRobertaForSequenceClassification extends XLMRobertaPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} returned object
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class XLMRobertaForTokenClassification extends XLMRobertaPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class XLMRobertaForQuestionAnswering extends XLMRobertaPreTrainedModel {
            /**
             * Calls the model on new inputs.
             *
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<QuestionAnsweringModelOutput>} returned object
             */
            async _call(model_inputs) {
              return new QuestionAnsweringModelOutput(await super._call(model_inputs));
            }
          }
          class ASTPreTrainedModel extends PreTrainedModel {
          }
          ;
          class ASTModel extends ASTPreTrainedModel {
          }
          class ASTForAudioClassification extends ASTPreTrainedModel {
          }
          class WhisperPreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "requires_attention_mask", false);
              __publicField(this, "main_input_name", "input_features");
              __publicField(this, "forward_params", [
                "input_features",
                "attention_mask",
                "decoder_input_ids",
                "decoder_attention_mask",
                "past_key_values"
              ]);
            }
          }
          ;
          class WhisperModel extends WhisperPreTrainedModel {
          }
          class WhisperForConditionalGeneration extends WhisperPreTrainedModel {
            _prepare_generation_config(generation_config, kwargs) {
              return (
                /** @type {WhisperGenerationConfig} */
                super._prepare_generation_config(generation_config, kwargs, _models_whisper_generation_whisper_js__WEBPACK_IMPORTED_MODULE_15__.WhisperGenerationConfig)
              );
            }
            /**
             * 
             * @param {WhisperGenerationConfig} generation_config 
             */
            _retrieve_init_tokens(generation_config) {
              const init_tokens = [generation_config.decoder_start_token_id];
              let language = generation_config.language;
              const task = generation_config.task;
              if (generation_config.is_multilingual) {
                if (!language) {
                  console.warn("No language specified - defaulting to English (en).");
                  language = "en";
                }
                const language_code = (0, _models_whisper_common_whisper_js__WEBPACK_IMPORTED_MODULE_16__.whisper_language_to_code)(language);
                const language_token = `<|${language_code}|>`;
                init_tokens.push(generation_config.lang_to_id[language_token]);
                init_tokens.push(generation_config.task_to_id[task ?? "transcribe"]);
              } else if (language || task) {
                throw new Error(
                  "Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config."
                );
              }
              if (!generation_config.return_timestamps && generation_config.no_timestamps_token_id && init_tokens.at(-1) !== generation_config.no_timestamps_token_id) {
                init_tokens.push(generation_config.no_timestamps_token_id);
              } else if (generation_config.return_timestamps && init_tokens.at(-1) === generation_config.no_timestamps_token_id) {
                console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`.");
                init_tokens.pop();
              }
              return init_tokens.filter((token) => token != null);
            }
            /**
             * Transcribes or translates log-mel input features to a sequence of auto-regressively generated token ids.
             * @param {import('./models/whisper/generation_whisper.js').WhisperGenerationFunctionParameters} options
             * @returns {Promise<ModelOutput|Tensor>} The output of the model, which can contain the generated token ids, attentions, and scores.
             */
            async generate({
              inputs = null,
              generation_config = null,
              logits_processor = null,
              stopping_criteria = null,
              // Whisper-specific options (passed to kwargs)
              // prompt_ids = null,
              // language = null,
              // task = null,
              ...kwargs
            }) {
              generation_config = this._prepare_generation_config(generation_config, kwargs);
              const init_tokens = kwargs.decoder_input_ids ?? this._retrieve_init_tokens(generation_config);
              if (generation_config.return_timestamps) {
                logits_processor ?? (logits_processor = new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.LogitsProcessorList());
                logits_processor.push(
                  new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.WhisperTimeStampLogitsProcessor(generation_config, init_tokens)
                );
              }
              if (generation_config.begin_suppress_tokens) {
                logits_processor ?? (logits_processor = new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.LogitsProcessorList());
                logits_processor.push(
                  new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.SuppressTokensAtBeginLogitsProcessor(generation_config.begin_suppress_tokens, init_tokens.length)
                );
              }
              if (generation_config.return_token_timestamps) {
                if (!generation_config.alignment_heads) {
                  throw new Error(
                    "Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config."
                  );
                }
                if (generation_config.task === "translate") {
                  console.warn("Token-level timestamps may not be reliable for task 'translate'.");
                }
                generation_config.output_attentions = true;
                generation_config.return_dict_in_generate = true;
              }
              const outputs = await super.generate({
                inputs,
                generation_config,
                logits_processor,
                decoder_input_ids: init_tokens,
                ...kwargs
              });
              if (generation_config.return_token_timestamps) {
                outputs["token_timestamps"] = this._extract_token_timestamps(
                  // @ts-expect-error TS2345
                  outputs,
                  generation_config.alignment_heads,
                  generation_config.num_frames
                );
              }
              return outputs;
            }
            /**
             * Calculates token-level timestamps using the encoder-decoder cross-attentions and
             * dynamic time-warping (DTW) to map each output token to a position in the input audio.
             * If `num_frames` is specified, the encoder-decoder cross-attentions will be cropped before applying DTW.
             * @param {Object} generate_outputs Outputs generated by the model
             * @param {Tensor[][]} generate_outputs.cross_attentions The cross attentions output by the model
             * @param {Tensor} generate_outputs.sequences The sequences output by the model
             * @param {number[][]} alignment_heads Alignment heads of the model
             * @param {number} [num_frames=null] Number of frames in the input audio.
             * @param {number} [time_precision=0.02] Precision of the timestamps in seconds
             * @returns {Tensor} tensor containing the timestamps in seconds for each predicted token
             */
            _extract_token_timestamps(generate_outputs, alignment_heads, num_frames = null, time_precision = 0.02) {
              if (!generate_outputs.cross_attentions) {
                throw new Error(
                  "Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`."
                );
              }
              if (num_frames == null) {
                console.warn(
                  "`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds)."
                );
              }
              let median_filter_width = this.config.median_filter_width;
              if (median_filter_width === void 0) {
                console.warn("Model config has no `median_filter_width`, using default value of 7.");
                median_filter_width = 7;
              }
              const batch = generate_outputs.cross_attentions;
              const cross_attentions = Array.from(
                { length: this.config.decoder_layers },
                // Concatenate the cross attentions for each layer across sequence length dimension.
                (_2, i) => (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)(batch.map((x2) => x2[i]), 2)
              );
              const weights = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.stack)(alignment_heads.map(([l, h2]) => {
                if (l >= cross_attentions.length) {
                  throw new Error(`Layer index ${l} is out of bounds for cross attentions (length ${cross_attentions.length}).`);
                }
                return num_frames ? cross_attentions[l].slice(null, h2, null, [0, num_frames]) : cross_attentions[l].slice(null, h2);
              })).transpose(1, 0, 2, 3);
              const [std, calculatedMean] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.std_mean)(weights, -2, 0, true);
              const smoothedWeights = weights.clone();
              for (let a = 0; a < smoothedWeights.dims[0]; ++a) {
                const aTensor = smoothedWeights[a];
                for (let b = 0; b < aTensor.dims[0]; ++b) {
                  const bTensor = aTensor[b];
                  const stdTensorData = std[a][b][0].data;
                  const meanTensorData = calculatedMean[a][b][0].data;
                  for (let c = 0; c < bTensor.dims[0]; ++c) {
                    let cTensorData = bTensor[c].data;
                    for (let d = 0; d < cTensorData.length; ++d) {
                      cTensorData[d] = (cTensorData[d] - meanTensorData[d]) / stdTensorData[d];
                    }
                    cTensorData.set((0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__.medianFilter)(cTensorData, median_filter_width));
                  }
                }
              }
              const batchedMatrices = [(0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.mean)(smoothedWeights, 1)];
              const timestampsShape = generate_outputs.sequences.dims;
              const timestamps = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
                "float32",
                new Float32Array(timestampsShape[0] * timestampsShape[1]),
                timestampsShape
              );
              for (let batch_idx = 0; batch_idx < timestampsShape[0]; ++batch_idx) {
                const matrix = batchedMatrices[batch_idx].neg().squeeze_(0);
                const [text_indices, time_indices] = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__.dynamic_time_warping)(matrix.tolist());
                const diffs = Array.from({ length: text_indices.length - 1 }, (v, i) => text_indices[i + 1] - text_indices[i]);
                const jumps = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.mergeArrays)([1], diffs).map((x2) => !!x2);
                const jump_times = [];
                for (let i = 0; i < jumps.length; ++i) {
                  if (jumps[i]) {
                    jump_times.push(time_indices[i] * time_precision);
                  }
                }
                timestamps[batch_idx].data.set(jump_times, 1);
              }
              return timestamps;
            }
          }
          class LiteWhisperForConditionalGeneration extends WhisperForConditionalGeneration {
          }
          class MoonshinePreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "requires_attention_mask", false);
              __publicField(this, "main_input_name", "input_values");
              __publicField(this, "forward_params", [
                "input_values",
                "decoder_input_ids",
                "past_key_values"
              ]);
            }
          }
          ;
          class MoonshineModel extends MoonshinePreTrainedModel {
          }
          class MoonshineForConditionalGeneration extends MoonshinePreTrainedModel {
          }
          class VisionEncoderDecoderModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "main_input_name", "pixel_values");
              __publicField(this, "forward_params", [
                // Encoder inputs
                "pixel_values",
                // Decoder inpputs
                "decoder_input_ids",
                "encoder_hidden_states",
                "past_key_values"
              ]);
            }
          }
          class LlavaPreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "forward_params", [
                "input_ids",
                "attention_mask",
                "pixel_values",
                "position_ids",
                "past_key_values"
              ]);
            }
          }
          class LlavaForConditionalGeneration extends LlavaPreTrainedModel {
            _merge_input_ids_with_image_features({
              inputs_embeds,
              image_features,
              input_ids,
              attention_mask
            }) {
              const image_token_index = this.config.image_token_index;
              const idsList = input_ids.tolist();
              const indexOfImage = idsList.map((x2) => x2.findIndex((x3) => x3 == image_token_index));
              const noImages = indexOfImage.every((x2) => x2 === -1);
              const allImages = indexOfImage.every((x2) => x2 !== -1);
              if (!noImages && !allImages) {
                throw new Error("Every input should contain either 0 or 1 image token.");
              }
              if (noImages) {
                return {
                  inputs_embeds,
                  attention_mask
                };
              }
              const stacked = [];
              const stacked_attention_mask = [];
              for (let i = 0; i < indexOfImage.length; ++i) {
                const index = indexOfImage[i];
                const e = inputs_embeds[i];
                const im = image_features[i];
                const am = attention_mask[i];
                stacked.push(
                  (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                    e.slice([0, index]),
                    im,
                    e.slice([index + 1, e.dims[0]])
                  ], 0)
                );
                stacked_attention_mask.push(
                  (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                    am.slice([0, index]),
                    (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([im.dims[0]]),
                    am.slice([index + 1, am.dims[0]])
                  ], 0)
                );
              }
              return {
                inputs_embeds: (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.stack)(stacked, 0),
                attention_mask: (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.stack)(stacked_attention_mask, 0)
              };
            }
          }
          class LlavaOnevisionForConditionalGeneration extends LlavaForConditionalGeneration {
          }
          class Moondream1ForConditionalGeneration extends LlavaForConditionalGeneration {
          }
          class Florence2PreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "forward_params", [
                // Encoder inputs
                "input_ids",
                "inputs_embeds",
                "attention_mask",
                "pixel_values",
                // Decoder inputs
                "encoder_outputs",
                "decoder_input_ids",
                "decoder_inputs_embeds",
                "decoder_attention_mask",
                "past_key_values"
              ]);
              __publicField(this, "main_input_name", "inputs_embeds");
            }
          }
          class Florence2ForConditionalGeneration extends Florence2PreTrainedModel {
            _merge_input_ids_with_image_features({
              inputs_embeds,
              image_features,
              input_ids,
              attention_mask
            }) {
              return {
                inputs_embeds: (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                  image_features,
                  // image embeds
                  inputs_embeds
                  // task prefix embeds
                ], 1),
                attention_mask: (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                  (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)(image_features.dims.slice(0, 2)),
                  // image attention mask
                  attention_mask
                  // task prefix attention mask
                ], 1)
              };
            }
            async _prepare_inputs_embeds({ input_ids, pixel_values, inputs_embeds, attention_mask }) {
              if (!input_ids && !pixel_values) {
                throw new Error("Either `input_ids` or `pixel_values` should be provided.");
              }
              let text_features, image_features;
              if (input_ids) {
                text_features = await this.encode_text({ input_ids });
              }
              if (pixel_values) {
                image_features = await this.encode_image({ pixel_values });
              }
              if (text_features && image_features) {
                ({ inputs_embeds, attention_mask } = this._merge_input_ids_with_image_features({
                  inputs_embeds: text_features,
                  image_features,
                  input_ids,
                  attention_mask
                }));
              } else {
                inputs_embeds = text_features || image_features;
              }
              return { inputs_embeds, attention_mask };
            }
            async forward({
              input_ids,
              pixel_values,
              attention_mask,
              decoder_input_ids,
              decoder_attention_mask,
              encoder_outputs,
              past_key_values,
              inputs_embeds,
              decoder_inputs_embeds
            }) {
              if (!inputs_embeds) {
                ({ inputs_embeds, attention_mask } = await this._prepare_inputs_embeds({ input_ids, pixel_values, inputs_embeds, attention_mask }));
              }
              if (!encoder_outputs) {
                let { last_hidden_state } = await encoderForward(this, { inputs_embeds, attention_mask });
                encoder_outputs = last_hidden_state;
              }
              if (!decoder_inputs_embeds) {
                if (!decoder_input_ids) {
                  throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");
                }
                decoder_inputs_embeds = await this.encode_text({ input_ids: decoder_input_ids });
              }
              const decoderFeeds = {
                inputs_embeds: decoder_inputs_embeds,
                attention_mask: decoder_attention_mask,
                encoder_attention_mask: attention_mask,
                encoder_hidden_states: encoder_outputs,
                past_key_values
              };
              const decoder_outputs = await decoderForward(this, decoderFeeds, true);
              return decoder_outputs;
            }
          }
          class PaliGemmaPreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "forward_params", [
                "input_ids",
                // 'inputs_embeds',
                "attention_mask",
                "pixel_values",
                "position_ids",
                "past_key_values"
              ]);
            }
          }
          class PaliGemmaForConditionalGeneration extends PaliGemmaPreTrainedModel {
            _merge_input_ids_with_image_features(kwargs) {
              const vision_hidden_size = kwargs.image_features.dims.at(-1);
              const reshaped_image_hidden_states = kwargs.image_features.view(-1, vision_hidden_size);
              return default_merge_input_ids_with_image_features({
                // @ts-ignore
                image_token_id: this.config.image_token_index,
                ...kwargs,
                image_features: reshaped_image_hidden_states
              });
            }
          }
          class Idefics3PreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "forward_params", [
                "input_ids",
                "attention_mask",
                "pixel_values",
                "pixel_attention_mask",
                "position_ids",
                "past_key_values"
              ]);
            }
          }
          class Idefics3ForConditionalGeneration extends Idefics3PreTrainedModel {
            async encode_image({ pixel_values, pixel_attention_mask }) {
              const features = (await sessionRun(this.sessions["vision_encoder"], { pixel_values, pixel_attention_mask })).image_features;
              return features;
            }
            _merge_input_ids_with_image_features(kwargs) {
              const vision_hidden_size = kwargs.image_features.dims.at(-1);
              const reshaped_image_hidden_states = kwargs.image_features.view(-1, vision_hidden_size);
              return default_merge_input_ids_with_image_features({
                // @ts-ignore
                image_token_id: this.config.image_token_id,
                ...kwargs,
                image_features: reshaped_image_hidden_states
              });
            }
          }
          class SmolVLMForConditionalGeneration extends Idefics3ForConditionalGeneration {
          }
          class Phi3VPreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "forward_params", [
                "input_ids",
                "inputs_embeds",
                "attention_mask",
                "position_ids",
                "pixel_values",
                "image_sizes",
                "past_key_values"
              ]);
            }
          }
          class Phi3VForCausalLM extends Phi3VPreTrainedModel {
            async forward({
              // Produced by the tokenizer/processor:
              input_ids = null,
              attention_mask = null,
              pixel_values = null,
              image_sizes = null,
              // Used during generation:
              position_ids = null,
              inputs_embeds = null,
              past_key_values = null,
              // Generic generation parameters
              generation_config = null,
              logits_processor = null,
              // TODO: needed?
              ...kwargs
            }) {
              if (!inputs_embeds) {
                let image_features;
                if (pixel_values && input_ids.dims[1] !== 1) {
                  if (!image_sizes) {
                    throw new Error("`image_sizes` must be provided when `pixel_values` is provided.");
                  }
                  ({ image_features } = await sessionRun(this.sessions["vision_encoder"], {
                    pixel_values,
                    image_sizes
                  }));
                } else {
                  const hidden_size = this.config.normalized_config.hidden_size;
                  image_features = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
                    "float32",
                    [],
                    [0, hidden_size]
                  );
                }
                ({ inputs_embeds } = await sessionRun(this.sessions["prepare_inputs_embeds"], {
                  input_ids,
                  image_features
                }));
              }
              const outputs = await decoderForward(this, {
                inputs_embeds,
                past_key_values,
                attention_mask,
                position_ids,
                generation_config,
                logits_processor
              }, false);
              return outputs;
            }
          }
          class CLIPPreTrainedModel extends PreTrainedModel {
          }
          class CLIPModel extends CLIPPreTrainedModel {
          }
          class CLIPTextModel extends CLIPPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "text_model"
              });
            }
          }
          class CLIPTextModelWithProjection extends CLIPPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "text_model"
              });
            }
          }
          class CLIPVisionModel extends CLIPPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "vision_model"
              });
            }
          }
          class CLIPVisionModelWithProjection extends CLIPPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "vision_model"
              });
            }
          }
          class SiglipPreTrainedModel extends PreTrainedModel {
          }
          class SiglipModel extends SiglipPreTrainedModel {
          }
          class SiglipTextModel extends SiglipPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "text_model"
              });
            }
          }
          class SiglipVisionModel extends CLIPPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "vision_model"
              });
            }
          }
          class ChineseCLIPPreTrainedModel extends PreTrainedModel {
          }
          class ChineseCLIPModel extends ChineseCLIPPreTrainedModel {
          }
          class JinaCLIPPreTrainedModel extends PreTrainedModel {
          }
          class JinaCLIPModel extends JinaCLIPPreTrainedModel {
            async forward(model_inputs) {
              const missing_text_inputs = !model_inputs.input_ids;
              const missing_image_inputs = !model_inputs.pixel_values;
              if (missing_text_inputs && missing_image_inputs) {
                throw new Error("Either `input_ids` or `pixel_values` should be provided.");
              }
              if (missing_text_inputs) {
                model_inputs.input_ids = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([model_inputs.pixel_values.dims[0], 1]);
              }
              if (missing_image_inputs) {
                const { image_size } = this.config.vision_config;
                model_inputs.pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.full)([0, 3, image_size, image_size], 0);
              }
              const { text_embeddings, image_embeddings, l2norm_text_embeddings, l2norm_image_embeddings } = await super.forward(model_inputs);
              const result = {};
              if (!missing_text_inputs) {
                result.text_embeddings = text_embeddings;
                result.l2norm_text_embeddings = l2norm_text_embeddings;
              }
              if (!missing_image_inputs) {
                result.image_embeddings = image_embeddings;
                result.l2norm_image_embeddings = l2norm_image_embeddings;
              }
              return result;
            }
          }
          class JinaCLIPTextModel extends JinaCLIPPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "text_model"
              });
            }
          }
          class JinaCLIPVisionModel extends JinaCLIPPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "vision_model"
              });
            }
          }
          class CLIPSegPreTrainedModel extends PreTrainedModel {
          }
          class CLIPSegModel extends CLIPSegPreTrainedModel {
          }
          class CLIPSegForImageSegmentation extends CLIPSegPreTrainedModel {
          }
          class GPT2PreTrainedModel extends PreTrainedModel {
          }
          class GPT2Model extends GPT2PreTrainedModel {
          }
          class GPT2LMHeadModel extends GPT2PreTrainedModel {
          }
          class JAISPreTrainedModel extends PreTrainedModel {
          }
          class JAISModel extends JAISPreTrainedModel {
          }
          class JAISLMHeadModel extends JAISPreTrainedModel {
          }
          class GPTNeoPreTrainedModel extends PreTrainedModel {
          }
          class GPTNeoModel extends GPTNeoPreTrainedModel {
          }
          class GPTNeoForCausalLM extends GPTNeoPreTrainedModel {
          }
          class GPTNeoXPreTrainedModel extends PreTrainedModel {
          }
          class GPTNeoXModel extends GPTNeoXPreTrainedModel {
          }
          class GPTNeoXForCausalLM extends GPTNeoXPreTrainedModel {
          }
          class GPTJPreTrainedModel extends PreTrainedModel {
          }
          class GPTJModel extends GPTJPreTrainedModel {
          }
          class GPTJForCausalLM extends GPTJPreTrainedModel {
          }
          class GPTBigCodePreTrainedModel extends PreTrainedModel {
          }
          class GPTBigCodeModel extends GPTBigCodePreTrainedModel {
          }
          class GPTBigCodeForCausalLM extends GPTBigCodePreTrainedModel {
          }
          class CodeGenPreTrainedModel extends PreTrainedModel {
          }
          class CodeGenModel extends CodeGenPreTrainedModel {
          }
          class CodeGenForCausalLM extends CodeGenPreTrainedModel {
          }
          class LlamaPreTrainedModel extends PreTrainedModel {
          }
          class LlamaModel extends LlamaPreTrainedModel {
          }
          class LlamaForCausalLM extends LlamaPreTrainedModel {
          }
          class HeliumPreTrainedModel extends PreTrainedModel {
          }
          class HeliumModel extends HeliumPreTrainedModel {
          }
          class HeliumForCausalLM extends HeliumPreTrainedModel {
          }
          class GlmPreTrainedModel extends PreTrainedModel {
          }
          class GlmModel extends GlmPreTrainedModel {
          }
          class GlmForCausalLM extends GlmPreTrainedModel {
          }
          class ExaonePreTrainedModel extends PreTrainedModel {
          }
          class ExaoneModel extends ExaonePreTrainedModel {
          }
          class ExaoneForCausalLM extends ExaonePreTrainedModel {
          }
          class MobileLLMPreTrainedModel extends PreTrainedModel {
          }
          class MobileLLMModel extends MobileLLMPreTrainedModel {
          }
          class MobileLLMForCausalLM extends MobileLLMPreTrainedModel {
          }
          class OlmoPreTrainedModel extends PreTrainedModel {
          }
          class OlmoModel extends OlmoPreTrainedModel {
          }
          class OlmoForCausalLM extends OlmoPreTrainedModel {
          }
          class Olmo2PreTrainedModel extends PreTrainedModel {
          }
          class Olmo2Model extends Olmo2PreTrainedModel {
          }
          class Olmo2ForCausalLM extends Olmo2PreTrainedModel {
          }
          class GranitePreTrainedModel extends PreTrainedModel {
          }
          class GraniteModel extends GranitePreTrainedModel {
          }
          class GraniteForCausalLM extends GranitePreTrainedModel {
          }
          class CoherePreTrainedModel extends PreTrainedModel {
          }
          class CohereModel extends CoherePreTrainedModel {
          }
          class CohereForCausalLM extends CoherePreTrainedModel {
          }
          class GemmaPreTrainedModel extends PreTrainedModel {
          }
          class GemmaModel extends GemmaPreTrainedModel {
          }
          class GemmaForCausalLM extends GemmaPreTrainedModel {
          }
          class Gemma2PreTrainedModel extends PreTrainedModel {
          }
          class Gemma2Model extends Gemma2PreTrainedModel {
          }
          class Gemma2ForCausalLM extends Gemma2PreTrainedModel {
          }
          class Gemma3PreTrainedModel extends PreTrainedModel {
          }
          class Gemma3Model extends Gemma3PreTrainedModel {
          }
          class Gemma3ForCausalLM extends Gemma3PreTrainedModel {
          }
          class OpenELMPreTrainedModel extends PreTrainedModel {
          }
          class OpenELMModel extends OpenELMPreTrainedModel {
          }
          class OpenELMForCausalLM extends OpenELMPreTrainedModel {
          }
          class Qwen2PreTrainedModel extends PreTrainedModel {
          }
          class Qwen2Model extends Qwen2PreTrainedModel {
          }
          class Qwen2ForCausalLM extends Qwen2PreTrainedModel {
          }
          class Qwen3PreTrainedModel extends PreTrainedModel {
          }
          class Qwen3Model extends Qwen3PreTrainedModel {
          }
          class Qwen3ForCausalLM extends Qwen3PreTrainedModel {
          }
          class Qwen2VLPreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "forward_params", [
                // Text inputs
                "input_ids",
                "attention_mask",
                "position_ids",
                "past_key_values",
                // Vision inputs
                "pixel_values",
                "image_grid_thw"
              ]);
            }
          }
          class Qwen2VLForConditionalGeneration extends Qwen2VLPreTrainedModel {
            /**
             * Calculate the 3D rope index based on image and video's temporal, height and width in LLM.
             *
             * Explanation:
             *     Each embedding sequence contains vision embedding and text embedding or just contains text embedding.
             *
             *     For pure text embedding sequence, the rotary position embedding has no difference with mordern LLMs.
             *     Examples:
             *         input_ids: [T T T T T], here T is for text.
             *         temporal position_ids: [0, 1, 2, 3, 4]
             *         height position_ids: [0, 1, 2, 3, 4]
             *         width position_ids: [0, 1, 2, 3, 4]
             *
             *     For vision and text embedding sequence, we calculate 3D rotary position embedding for vision part
             *     and 1D rotary position embeddin for text part.
             *     Examples:
             *         Assume we have a video input with 3 temporal patches, 2 height patches and 2 width patches.
             *         input_ids: [V V V V V V V V V V V V T T T T T], here V is for vision.
             *         vision temporal position_ids: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2]
             *         vision height position_ids: [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]
             *         vision width position_ids: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
             *         text temporal position_ids: [3, 4, 5, 6, 7]
             *         text height position_ids: [3, 4, 5, 6, 7]
             *         text width position_ids: [3, 4, 5, 6, 7]
             *         Here we calculate the text start position_ids as the max vision position_ids plus 1.
             * 
             * @param {Tensor} input_ids Indices of input sequence tokens in the vocabulary. Tensor of shape `(batch_size, sequence_length)`.
             * @param {Tensor} image_grid_thw (Optional) The temporal, height and width of feature shape of each image in LLM. Tensor of shape `(num_images, 3)`.
             * @param {Tensor} video_grid_thw (Optional) The temporal, height and width of feature shape of each video in LLM. Tensor of shape `(num_videos, 3)`.
             * @param {Tensor} attention_mask (Optional) Mask to avoid performing attention on padding token indices. Tensor of shape `(batch_size, sequence_length)`. Mask values selected in `[0, 1]`:
             * - 1 for tokens that are **not masked**,
             * - 0 for tokens that are **masked**.
             * @returns {[Tensor, Tensor]} [position_ids, mrope_position_deltas] with:
             * - position_ids: Tensor of shape `(3, batch_size, sequence_length)`.
             * - mrope_position_deltas: Tensor of shape `(batch_size)`.
             */
            get_rope_index(input_ids, image_grid_thw, video_grid_thw, attention_mask) {
              const { vision_config, image_token_id, video_token_id, vision_start_token_id } = this.config;
              const spatial_merge_size = vision_config.spatial_merge_size ?? 2;
              const mrope_position_deltas = [];
              if (image_grid_thw || video_grid_thw) {
                let total_input_ids = input_ids.tolist();
                if (!attention_mask) {
                  attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones_like)(input_ids);
                }
                const attention_mask_list = attention_mask.tolist();
                const position_ids_list = Array.from({ length: 3 }, (_2) => Array.from({ length: input_ids.dims[0] }, (_3) => Array.from({ length: input_ids.dims[1] }, (_4) => 1)));
                const image_grid_thw_list = image_grid_thw ? image_grid_thw.tolist() : [];
                const video_grid_thw_list = video_grid_thw ? video_grid_thw.tolist() : [];
                let image_index = 0;
                let video_index = 0;
                for (let i = 0; i < total_input_ids.length; ++i) {
                  const ids = total_input_ids[i].filter((_2, j) => attention_mask_list[i][j] == 1);
                  const vision_start_indices = ids.reduce((acc, x2, idx) => {
                    if (x2 == vision_start_token_id)
                      acc.push(idx);
                    return acc;
                  }, []);
                  const vision_tokens = vision_start_indices.map((x2) => ids[x2 + 1]);
                  const image_nums = vision_tokens.filter((x2) => x2 == image_token_id).length;
                  const video_nums = vision_tokens.filter((x2) => x2 == video_token_id).length;
                  let llm_pos_ids_list = [];
                  let st = 0;
                  let remain_images = image_nums;
                  let remain_videos = video_nums;
                  for (let j = 0; j < vision_tokens.length; ++j) {
                    const next_image_token = ids.findIndex((x2, i2) => i2 > st && x2 == image_token_id);
                    const next_video_token = ids.findIndex((x2, i2) => i2 > st && x2 == video_token_id);
                    const ed_image = remain_images > 0 && next_image_token !== -1 ? next_image_token : ids.length + 1;
                    const ed_video = remain_videos > 0 && next_video_token !== -1 ? next_video_token : ids.length + 1;
                    let ed;
                    let t, h2, w2;
                    if (ed_image < ed_video) {
                      [t, h2, w2] = image_grid_thw_list[image_index];
                      ++image_index;
                      --remain_images;
                      ed = ed_image;
                    } else {
                      [t, h2, w2] = video_grid_thw_list[video_index];
                      ++video_index;
                      --remain_videos;
                      ed = ed_video;
                    }
                    const [llm_grid_t, llm_grid_h, llm_grid_w] = [
                      Number(t),
                      Math.floor(Number(h2) / spatial_merge_size),
                      Math.floor(Number(w2) / spatial_merge_size)
                    ];
                    const text_len = ed - st;
                    const st_idx = llm_pos_ids_list.length > 0 ? (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__.max)(llm_pos_ids_list.at(-1))[0] + 1 : 0;
                    llm_pos_ids_list.push(
                      Array.from({ length: 3 * text_len }, (_2, i2) => st_idx + i2 % text_len)
                    );
                    const offset = text_len + st_idx;
                    const grid_size = llm_grid_t * llm_grid_h * llm_grid_w;
                    const t_index = Array.from({ length: grid_size }, (_2, i2) => offset + Math.floor(i2 / (llm_grid_h * llm_grid_w)));
                    const h_index = Array.from({ length: grid_size }, (_2, i2) => offset + Math.floor(i2 / llm_grid_w) % llm_grid_h);
                    const w_index = Array.from({ length: grid_size }, (_2, i2) => offset + i2 % llm_grid_w);
                    llm_pos_ids_list.push([t_index, h_index, w_index].flat());
                    st = ed + grid_size;
                  }
                  if (st < ids.length) {
                    const st_idx = llm_pos_ids_list.length > 0 ? (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__.max)(llm_pos_ids_list.at(-1))[0] + 1 : 0;
                    const text_len = ids.length - st;
                    llm_pos_ids_list.push(
                      Array.from({ length: 3 * text_len }, (_2, i2) => st_idx + i2 % text_len)
                    );
                  }
                  const num_items = llm_pos_ids_list.reduce((acc, x2) => acc + x2.length, 0);
                  const llm_positions = new Array(num_items);
                  let index = 0;
                  for (let x2 = 0; x2 < 3; ++x2) {
                    for (let y2 = 0; y2 < llm_pos_ids_list.length; ++y2) {
                      const val = llm_pos_ids_list[y2];
                      const text_len = val.length / 3;
                      for (let z = x2 * text_len; z < (x2 + 1) * text_len; ++z) {
                        llm_positions[index++] = val[z];
                      }
                    }
                  }
                  let count = 0;
                  const attn_mask = attention_mask_list[i];
                  for (let y2 = 0; y2 < attn_mask.length; ++y2) {
                    if (attn_mask[y2] == 1) {
                      for (let x2 = 0; x2 < 3; ++x2) {
                        position_ids_list[x2][i][y2] = llm_positions[x2 * num_items / 3 + count];
                      }
                      ++count;
                    }
                  }
                  const max_llm_positions = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__.max)(llm_positions)[0];
                  mrope_position_deltas.push(max_llm_positions + 1 - total_input_ids[i].length);
                }
                return [
                  new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("int64", position_ids_list.flat(Infinity), [3, input_ids.dims[0], input_ids.dims[1]]),
                  new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("int64", mrope_position_deltas, [mrope_position_deltas.length, 1])
                ];
              } else {
                if (attention_mask) {
                  const { data, dims } = cumsum_masked_fill(attention_mask);
                  const position_ids = BigInt64Array.from(
                    { length: 3 * data.length },
                    (_2, i) => data[i % data.length]
                  );
                  const mrope_position_deltas2 = Array.from(
                    { length: dims[0] },
                    (_2, i) => (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_11__.max)(data.subarray(dims[1] * i, dims[1] * (i + 1)))[0] + 1n + BigInt(dims[1])
                  );
                  return [
                    new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("int64", position_ids, [3, ...dims]),
                    new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("int64", mrope_position_deltas2, [mrope_position_deltas2.length, 1])
                  ];
                } else {
                  const [batch_size, seq_length] = input_ids.dims;
                  const position_ids = BigInt64Array.from(
                    { length: 3 * batch_size * seq_length },
                    (_2, i) => BigInt(Math.floor(i % seq_length / batch_size))
                  );
                  return [
                    new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("int64", position_ids, [3, ...input_ids.dims]),
                    (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.zeros)([batch_size, 1])
                  ];
                }
              }
            }
            async encode_image({ pixel_values, image_grid_thw }) {
              const features = (await sessionRun(this.sessions["vision_encoder"], { pixel_values, grid_thw: image_grid_thw })).image_features;
              return features;
            }
            _merge_input_ids_with_image_features(kwargs) {
              return default_merge_input_ids_with_image_features({
                // @ts-ignore
                image_token_id: this.config.image_token_id,
                ...kwargs
              });
            }
            prepare_inputs_for_generation(input_ids, model_inputs, generation_config) {
              if (model_inputs.attention_mask && !model_inputs.position_ids) {
                if (!model_inputs.past_key_values) {
                  [model_inputs.position_ids, model_inputs.rope_deltas] = this.get_rope_index(
                    model_inputs.input_ids,
                    model_inputs.image_grid_thw,
                    model_inputs.video_grid_thw,
                    model_inputs.attention_mask
                  );
                } else {
                  model_inputs.pixel_values = null;
                  const delta = BigInt(Object.values(model_inputs.past_key_values)[0].dims.at(-2));
                  const rope_deltas_list = model_inputs.rope_deltas.map((x2) => delta + x2);
                  model_inputs.position_ids = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.stack)([rope_deltas_list, rope_deltas_list, rope_deltas_list], 0);
                }
              }
              return model_inputs;
            }
          }
          class PhiPreTrainedModel extends PreTrainedModel {
          }
          class PhiModel extends PhiPreTrainedModel {
          }
          class PhiForCausalLM extends PhiPreTrainedModel {
          }
          class Phi3PreTrainedModel extends PreTrainedModel {
          }
          class Phi3Model extends Phi3PreTrainedModel {
          }
          class Phi3ForCausalLM extends Phi3PreTrainedModel {
          }
          class BloomPreTrainedModel extends PreTrainedModel {
          }
          class BloomModel extends BloomPreTrainedModel {
          }
          class BloomForCausalLM extends BloomPreTrainedModel {
          }
          class MptPreTrainedModel extends PreTrainedModel {
          }
          class MptModel extends MptPreTrainedModel {
          }
          class MptForCausalLM extends MptPreTrainedModel {
          }
          class OPTPreTrainedModel extends PreTrainedModel {
          }
          class OPTModel extends OPTPreTrainedModel {
          }
          class OPTForCausalLM extends OPTPreTrainedModel {
          }
          class ViTPreTrainedModel extends PreTrainedModel {
          }
          class ViTModel extends ViTPreTrainedModel {
          }
          class ViTForImageClassification extends ViTPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class IJepaPreTrainedModel extends PreTrainedModel {
          }
          class IJepaModel extends IJepaPreTrainedModel {
          }
          class IJepaForImageClassification extends IJepaPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class VitPosePreTrainedModel extends PreTrainedModel {
          }
          class VitPoseForPoseEstimation extends VitPosePreTrainedModel {
          }
          class PvtPreTrainedModel extends PreTrainedModel {
          }
          class PvtModel extends PvtPreTrainedModel {
          }
          class PvtForImageClassification extends PvtPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class ViTMAEPreTrainedModel extends PreTrainedModel {
          }
          class ViTMAEModel extends ViTMAEPreTrainedModel {
          }
          class ViTMSNPreTrainedModel extends PreTrainedModel {
          }
          class ViTMSNModel extends ViTMSNPreTrainedModel {
          }
          class ViTMSNForImageClassification extends ViTMSNPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class GroupViTPreTrainedModel extends PreTrainedModel {
          }
          class GroupViTModel extends GroupViTPreTrainedModel {
          }
          class FastViTPreTrainedModel extends PreTrainedModel {
          }
          class FastViTModel extends FastViTPreTrainedModel {
          }
          class FastViTForImageClassification extends FastViTPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class VitMattePreTrainedModel extends PreTrainedModel {
          }
          class VitMatteForImageMatting extends VitMattePreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new ImageMattingOutput(await super._call(model_inputs));
            }
          }
          class MobileViTPreTrainedModel extends PreTrainedModel {
          }
          class MobileViTModel extends MobileViTPreTrainedModel {
          }
          class MobileViTForImageClassification extends MobileViTPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class MobileViTV2PreTrainedModel extends PreTrainedModel {
          }
          class MobileViTV2Model extends MobileViTV2PreTrainedModel {
          }
          class MobileViTV2ForImageClassification extends MobileViTV2PreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class OwlViTPreTrainedModel extends PreTrainedModel {
          }
          class OwlViTModel extends OwlViTPreTrainedModel {
          }
          class OwlViTForObjectDetection extends OwlViTPreTrainedModel {
          }
          class Owlv2PreTrainedModel extends PreTrainedModel {
          }
          class Owlv2Model extends Owlv2PreTrainedModel {
          }
          class Owlv2ForObjectDetection extends Owlv2PreTrainedModel {
          }
          class BeitPreTrainedModel extends PreTrainedModel {
          }
          class BeitModel extends BeitPreTrainedModel {
          }
          class BeitForImageClassification extends BeitPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class DetrPreTrainedModel extends PreTrainedModel {
          }
          class DetrModel extends DetrPreTrainedModel {
          }
          class DetrForObjectDetection extends DetrPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new DetrObjectDetectionOutput(await super._call(model_inputs));
            }
          }
          class DetrForSegmentation extends DetrPreTrainedModel {
            /**
             * Runs the model with the provided inputs
             * @param {Object} model_inputs Model inputs
             * @returns {Promise<DetrSegmentationOutput>} Object containing segmentation outputs
             */
            async _call(model_inputs) {
              return new DetrSegmentationOutput(await super._call(model_inputs));
            }
          }
          class DetrObjectDetectionOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.logits Classification logits (including no-object) for all queries.
             * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).
             * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).
             */
            constructor({ logits, pred_boxes }) {
              super();
              this.logits = logits;
              this.pred_boxes = pred_boxes;
            }
          }
          class DetrSegmentationOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.logits The output logits of the model.
             * @param {Tensor} output.pred_boxes Predicted boxes.
             * @param {Tensor} output.pred_masks Predicted masks.
             */
            constructor({ logits, pred_boxes, pred_masks }) {
              super();
              this.logits = logits;
              this.pred_boxes = pred_boxes;
              this.pred_masks = pred_masks;
            }
          }
          class RTDetrPreTrainedModel extends PreTrainedModel {
          }
          class RTDetrModel extends RTDetrPreTrainedModel {
          }
          class RTDetrForObjectDetection extends RTDetrPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new RTDetrObjectDetectionOutput(await super._call(model_inputs));
            }
          }
          class RTDetrObjectDetectionOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.logits Classification logits (including no-object) for all queries.
             * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).
             * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).
             */
            constructor({ logits, pred_boxes }) {
              super();
              this.logits = logits;
              this.pred_boxes = pred_boxes;
            }
          }
          class RTDetrV2PreTrainedModel extends PreTrainedModel {
          }
          class RTDetrV2Model extends RTDetrV2PreTrainedModel {
          }
          class RTDetrV2ForObjectDetection extends RTDetrV2PreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new RTDetrV2ObjectDetectionOutput(await super._call(model_inputs));
            }
          }
          class RTDetrV2ObjectDetectionOutput extends RTDetrObjectDetectionOutput {
          }
          class RFDetrPreTrainedModel extends PreTrainedModel {
          }
          class RFDetrModel extends RFDetrPreTrainedModel {
          }
          class RFDetrForObjectDetection extends RFDetrPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new RFDetrObjectDetectionOutput(await super._call(model_inputs));
            }
          }
          class RFDetrObjectDetectionOutput extends RTDetrObjectDetectionOutput {
          }
          class DFinePreTrainedModel extends PreTrainedModel {
          }
          class DFineModel extends DFinePreTrainedModel {
          }
          class DFineForObjectDetection extends DFinePreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new RTDetrObjectDetectionOutput(await super._call(model_inputs));
            }
          }
          class TableTransformerPreTrainedModel extends PreTrainedModel {
          }
          class TableTransformerModel extends TableTransformerPreTrainedModel {
          }
          class TableTransformerForObjectDetection extends TableTransformerPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new TableTransformerObjectDetectionOutput(await super._call(model_inputs));
            }
          }
          class TableTransformerObjectDetectionOutput extends DetrObjectDetectionOutput {
          }
          class DeiTPreTrainedModel extends PreTrainedModel {
          }
          class DeiTModel extends DeiTPreTrainedModel {
          }
          class DeiTForImageClassification extends DeiTPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class HieraPreTrainedModel extends PreTrainedModel {
          }
          class HieraModel extends HieraPreTrainedModel {
          }
          class HieraForImageClassification extends HieraPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class ResNetPreTrainedModel extends PreTrainedModel {
          }
          class ResNetModel extends ResNetPreTrainedModel {
          }
          class ResNetForImageClassification extends ResNetPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class SwinPreTrainedModel extends PreTrainedModel {
          }
          class SwinModel extends SwinPreTrainedModel {
          }
          class SwinForImageClassification extends SwinPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class SwinForSemanticSegmentation extends SwinPreTrainedModel {
          }
          class Swin2SRPreTrainedModel extends PreTrainedModel {
          }
          class Swin2SRModel extends Swin2SRPreTrainedModel {
          }
          class Swin2SRForImageSuperResolution extends Swin2SRPreTrainedModel {
          }
          class DPTPreTrainedModel extends PreTrainedModel {
          }
          class DPTModel extends DPTPreTrainedModel {
          }
          class DPTForDepthEstimation extends DPTPreTrainedModel {
          }
          class DepthAnythingPreTrainedModel extends PreTrainedModel {
          }
          class DepthAnythingForDepthEstimation extends DepthAnythingPreTrainedModel {
          }
          class SapiensPreTrainedModel extends PreTrainedModel {
          }
          class SapiensForSemanticSegmentation extends SapiensPreTrainedModel {
          }
          class SapiensForDepthEstimation extends SapiensPreTrainedModel {
          }
          class SapiensForNormalEstimation extends SapiensPreTrainedModel {
          }
          class DepthProPreTrainedModel extends PreTrainedModel {
          }
          class DepthProForDepthEstimation extends DepthProPreTrainedModel {
          }
          class Metric3DPreTrainedModel extends PreTrainedModel {
          }
          class Metric3DForDepthEstimation extends Metric3DPreTrainedModel {
          }
          class Metric3Dv2PreTrainedModel extends PreTrainedModel {
          }
          class Metric3Dv2ForDepthEstimation extends Metric3Dv2PreTrainedModel {
          }
          class MaskFormerPreTrainedModel extends PreTrainedModel {
          }
          class MaskFormerModel extends MaskFormerPreTrainedModel {
          }
          class MaskFormerForInstanceSegmentation extends MaskFormerPreTrainedModel {
          }
          class GLPNPreTrainedModel extends PreTrainedModel {
          }
          class GLPNModel extends GLPNPreTrainedModel {
          }
          class GLPNForDepthEstimation extends GLPNPreTrainedModel {
          }
          class DonutSwinPreTrainedModel extends PreTrainedModel {
          }
          class DonutSwinModel extends DonutSwinPreTrainedModel {
          }
          class ConvNextPreTrainedModel extends PreTrainedModel {
          }
          class ConvNextModel extends ConvNextPreTrainedModel {
          }
          class ConvNextForImageClassification extends ConvNextPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class ConvNextV2PreTrainedModel extends PreTrainedModel {
          }
          class ConvNextV2Model extends ConvNextV2PreTrainedModel {
          }
          class ConvNextV2ForImageClassification extends ConvNextV2PreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class Dinov2PreTrainedModel extends PreTrainedModel {
          }
          class Dinov2Model extends Dinov2PreTrainedModel {
          }
          class Dinov2ForImageClassification extends Dinov2PreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class Dinov2WithRegistersPreTrainedModel extends PreTrainedModel {
          }
          class Dinov2WithRegistersModel extends Dinov2WithRegistersPreTrainedModel {
          }
          class Dinov2WithRegistersForImageClassification extends Dinov2WithRegistersPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class GroundingDinoPreTrainedModel extends PreTrainedModel {
          }
          class GroundingDinoForObjectDetection extends GroundingDinoPreTrainedModel {
          }
          class YolosPreTrainedModel extends PreTrainedModel {
          }
          class YolosModel extends YolosPreTrainedModel {
          }
          class YolosForObjectDetection extends YolosPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new YolosObjectDetectionOutput(await super._call(model_inputs));
            }
          }
          class YolosObjectDetectionOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.logits Classification logits (including no-object) for all queries.
             * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).
             * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).
             */
            constructor({ logits, pred_boxes }) {
              super();
              this.logits = logits;
              this.pred_boxes = pred_boxes;
            }
          }
          class SamPreTrainedModel extends PreTrainedModel {
          }
          class SamModel extends SamPreTrainedModel {
            /**
             * Compute image embeddings and positional image embeddings, given the pixel values of an image.
             * @param {Object} model_inputs Object containing the model inputs.
             * @param {Tensor} model_inputs.pixel_values Pixel values obtained using a `SamProcessor`.
             * @returns {Promise<{ image_embeddings: Tensor, image_positional_embeddings: Tensor }>} The image embeddings and positional image embeddings.
             */
            async get_image_embeddings({ pixel_values }) {
              return await encoderForward(this, { pixel_values });
            }
            /**
             * @typedef {Object} SamModelInputs Object containing the model inputs.
             * @property {Tensor} pixel_values Pixel values as a Tensor with shape `(batch_size, num_channels, height, width)`.
             * These can be obtained using a `SamProcessor`.
             * @property {Tensor} [input_points] Input 2D spatial points with shape `(batch_size, num_points, 2)`.
             * This is used by the prompt encoder to encode the prompt.
             * @property {Tensor} [input_labels] Input labels for the points, as a Tensor of shape `(batch_size, point_batch_size, num_points)`.
             * This is used by the prompt encoder to encode the prompt. There are 4 types of labels:
             *  - `1`: the point is a point that contains the object of interest
             *  - `0`: the point is a point that does not contain the object of interest
             *  - `-1`: the point corresponds to the background
             *  - `-10`: the point is a padding point, thus should be ignored by the prompt encoder
             * @property {Tensor} [input_boxes] Input bounding boxes with shape `(batch_size, num_boxes, 4)`.
             * @property {Tensor} [image_embeddings] Image embeddings used by the mask decoder.
             * @property {Tensor} [image_positional_embeddings] Image positional embeddings used by the mask decoder.
             */
            /**
             * @param {SamModelInputs} model_inputs Object containing the model inputs.
             * @returns {Promise<Object>} The output of the model.
             */
            async forward(model_inputs) {
              if (!model_inputs.image_embeddings || !model_inputs.image_positional_embeddings) {
                model_inputs = {
                  ...model_inputs,
                  ...await this.get_image_embeddings(model_inputs)
                };
              }
              if (!model_inputs.input_labels && model_inputs.input_points) {
                const shape = model_inputs.input_points.dims.slice(0, -1);
                const numElements = shape.reduce((a, b) => a * b, 1);
                model_inputs.input_labels = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
                  "int64",
                  new BigInt64Array(numElements).fill(1n),
                  shape
                );
              }
              const decoder_inputs = {
                image_embeddings: model_inputs.image_embeddings,
                image_positional_embeddings: model_inputs.image_positional_embeddings
              };
              if (model_inputs.input_points) {
                decoder_inputs.input_points = model_inputs.input_points;
              }
              if (model_inputs.input_labels) {
                decoder_inputs.input_labels = model_inputs.input_labels;
              }
              if (model_inputs.input_boxes) {
                decoder_inputs.input_boxes = model_inputs.input_boxes;
              }
              return await sessionRun(this.sessions["prompt_encoder_mask_decoder"], decoder_inputs);
            }
            /**
             * Runs the model with the provided inputs
             * @param {Object} model_inputs Model inputs
             * @returns {Promise<SamImageSegmentationOutput>} Object containing segmentation outputs
             */
            async _call(model_inputs) {
              return new SamImageSegmentationOutput(await super._call(model_inputs));
            }
          }
          class SamImageSegmentationOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.iou_scores The output logits of the model.
             * @param {Tensor} output.pred_masks Predicted boxes.
             */
            constructor({ iou_scores, pred_masks }) {
              super();
              this.iou_scores = iou_scores;
              this.pred_masks = pred_masks;
            }
          }
          class MarianPreTrainedModel extends PreTrainedModel {
          }
          ;
          class MarianModel extends MarianPreTrainedModel {
          }
          class MarianMTModel extends MarianPreTrainedModel {
          }
          class M2M100PreTrainedModel extends PreTrainedModel {
          }
          ;
          class M2M100Model extends M2M100PreTrainedModel {
          }
          class M2M100ForConditionalGeneration extends M2M100PreTrainedModel {
          }
          class Wav2Vec2PreTrainedModel extends PreTrainedModel {
          }
          ;
          class Wav2Vec2Model extends Wav2Vec2PreTrainedModel {
          }
          class Wav2Vec2ForCTC extends Wav2Vec2PreTrainedModel {
            /**
             * @param {Object} model_inputs
             * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
             * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
             */
            async _call(model_inputs) {
              return new CausalLMOutput(await super._call(model_inputs));
            }
          }
          class Wav2Vec2ForSequenceClassification extends Wav2Vec2PreTrainedModel {
            /**
             * Calls the model on new inputs.
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class Wav2Vec2ForAudioFrameClassification extends Wav2Vec2PreTrainedModel {
            /**
             * Calls the model on new inputs.
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class PyAnnotePreTrainedModel extends PreTrainedModel {
          }
          ;
          class PyAnnoteModel extends PyAnnotePreTrainedModel {
          }
          class PyAnnoteForAudioFrameClassification extends PyAnnotePreTrainedModel {
            /**
             * Calls the model on new inputs.
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class WeSpeakerResNetPreTrainedModel extends PreTrainedModel {
          }
          ;
          class WeSpeakerResNetModel extends WeSpeakerResNetPreTrainedModel {
          }
          class UniSpeechPreTrainedModel extends PreTrainedModel {
          }
          ;
          class UniSpeechModel extends UniSpeechPreTrainedModel {
          }
          class UniSpeechForCTC extends UniSpeechPreTrainedModel {
            /**
             * @param {Object} model_inputs
             * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
             * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
             */
            async _call(model_inputs) {
              return new CausalLMOutput(await super._call(model_inputs));
            }
          }
          class UniSpeechForSequenceClassification extends UniSpeechPreTrainedModel {
            /**
             * Calls the model on new inputs.
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class UniSpeechSatPreTrainedModel extends PreTrainedModel {
          }
          ;
          class UniSpeechSatModel extends UniSpeechSatPreTrainedModel {
          }
          class UniSpeechSatForCTC extends UniSpeechSatPreTrainedModel {
            /**
             * @param {Object} model_inputs
             * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
             * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
             */
            async _call(model_inputs) {
              return new CausalLMOutput(await super._call(model_inputs));
            }
          }
          class UniSpeechSatForSequenceClassification extends UniSpeechSatPreTrainedModel {
            /**
             * Calls the model on new inputs.
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class UniSpeechSatForAudioFrameClassification extends UniSpeechSatPreTrainedModel {
            /**
             * Calls the model on new inputs.
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class Wav2Vec2BertPreTrainedModel extends PreTrainedModel {
          }
          ;
          class Wav2Vec2BertModel extends Wav2Vec2BertPreTrainedModel {
          }
          class Wav2Vec2BertForCTC extends Wav2Vec2BertPreTrainedModel {
            /**
             * @param {Object} model_inputs
             * @param {Tensor} model_inputs.input_features Float values of input mel-spectrogram.
             * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
             */
            async _call(model_inputs) {
              return new CausalLMOutput(await super._call(model_inputs));
            }
          }
          class Wav2Vec2BertForSequenceClassification extends Wav2Vec2BertPreTrainedModel {
            /**
             * Calls the model on new inputs.
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class HubertPreTrainedModel extends PreTrainedModel {
          }
          class HubertModel extends Wav2Vec2PreTrainedModel {
          }
          class HubertForCTC extends Wav2Vec2PreTrainedModel {
            /**
             * @param {Object} model_inputs
             * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
             * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
             */
            async _call(model_inputs) {
              return new CausalLMOutput(await super._call(model_inputs));
            }
          }
          class HubertForSequenceClassification extends Wav2Vec2PreTrainedModel {
            /**
             * Calls the model on new inputs.
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class WavLMPreTrainedModel extends PreTrainedModel {
          }
          ;
          class WavLMModel extends WavLMPreTrainedModel {
          }
          class WavLMForCTC extends WavLMPreTrainedModel {
            /**
             * @param {Object} model_inputs
             * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
             * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
             */
            async _call(model_inputs) {
              return new CausalLMOutput(await super._call(model_inputs));
            }
          }
          class WavLMForSequenceClassification extends WavLMPreTrainedModel {
            /**
             * Calls the model on new inputs.
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class WavLMForXVector extends WavLMPreTrainedModel {
            /**
             * Calls the model on new inputs.
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<XVectorOutput>} An object containing the model's output logits and speaker embeddings.
             */
            async _call(model_inputs) {
              return new XVectorOutput(await super._call(model_inputs));
            }
          }
          class WavLMForAudioFrameClassification extends WavLMPreTrainedModel {
            /**
             * Calls the model on new inputs.
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.
             */
            async _call(model_inputs) {
              return new TokenClassifierOutput(await super._call(model_inputs));
            }
          }
          class StyleTextToSpeech2PreTrainedModel extends PreTrainedModel {
          }
          class StyleTextToSpeech2Model extends StyleTextToSpeech2PreTrainedModel {
          }
          class SpeechT5PreTrainedModel extends PreTrainedModel {
          }
          ;
          class SpeechT5Model extends SpeechT5PreTrainedModel {
          }
          ;
          class SpeechT5ForSpeechToText extends SpeechT5PreTrainedModel {
          }
          class SpeechT5ForTextToSpeech extends SpeechT5PreTrainedModel {
            /**
             * @typedef {Object} SpeechOutput
             * @property {Tensor} [spectrogram] The predicted log-mel spectrogram of shape
             * `(output_sequence_length, config.num_mel_bins)`. Returned when no `vocoder` is provided
             * @property {Tensor} [waveform] The predicted waveform of shape `(num_frames,)`. Returned when a `vocoder` is provided.
             * @property {Tensor} [cross_attentions] The outputs of the decoder's cross-attention layers of shape
             * `(config.decoder_layers, config.decoder_attention_heads, output_sequence_length, input_sequence_length)`. returned when `output_cross_attentions` is `true`.
             */
            /**
             * Converts a sequence of input tokens into a sequence of mel spectrograms, which are subsequently turned into a speech waveform using a vocoder.
             * @param {Tensor} input_values Indices of input sequence tokens in the vocabulary.
             * @param {Tensor} speaker_embeddings Tensor containing the speaker embeddings.
             * @param {Object} options Optional parameters for generating speech.
             * @param {number} [options.threshold=0.5] The generated sequence ends when the predicted stop token probability exceeds this value.
             * @param {number} [options.minlenratio=0.0] Used to calculate the minimum required length for the output sequence.
             * @param {number} [options.maxlenratio=20.0] Used to calculate the maximum allowed length for the output sequence.
             * @param {Object} [options.vocoder=null] The vocoder that converts the mel spectrogram into a speech waveform. If `null`, the output is the mel spectrogram.
             * @param {boolean} [options.output_cross_attentions=false] Whether or not to return the attentions tensors of the decoder's cross-attention layers.
             * @returns {Promise<SpeechOutput>} A promise which resolves to an object containing the spectrogram, waveform, and cross-attention tensors.
             */
            async generate_speech(input_values, speaker_embeddings, {
              threshold = 0.5,
              minlenratio = 0,
              maxlenratio = 20,
              vocoder = null
              // output_cross_attentions = false, // TODO add
            } = {}) {
              const model_inputs = {
                input_ids: input_values
              };
              const { encoder_outputs, encoder_attention_mask } = await encoderForward(this, model_inputs);
              const r = encoder_outputs.dims[1] / this.config.reduction_factor;
              const maxlen = Math.floor(r * maxlenratio);
              const minlen = Math.floor(r * minlenratio);
              const num_mel_bins = this.config.num_mel_bins;
              let spectrogramParts = [];
              let past_key_values = null;
              let decoder_outputs = null;
              let idx = 0;
              while (true) {
                ++idx;
                const use_cache_branch = boolTensor(!!decoder_outputs);
                let output_sequence;
                if (decoder_outputs) {
                  output_sequence = decoder_outputs.output_sequence_out;
                } else {
                  output_sequence = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
                    "float32",
                    new Float32Array(num_mel_bins),
                    [1, 1, num_mel_bins]
                  );
                }
                let decoderFeeds = {
                  use_cache_branch,
                  output_sequence,
                  encoder_attention_mask,
                  speaker_embeddings,
                  encoder_hidden_states: encoder_outputs
                };
                this.addPastKeyValues(decoderFeeds, past_key_values);
                decoder_outputs = await sessionRun(this.sessions["decoder_model_merged"], decoderFeeds);
                past_key_values = this.getPastKeyValues(decoder_outputs, past_key_values);
                const { prob, spectrum } = decoder_outputs;
                spectrogramParts.push(spectrum);
                if (idx >= minlen && // Finished when stop token or maximum length is reached.
                (Array.from(prob.data).filter((p) => p >= threshold).length > 0 || idx >= maxlen)) {
                  break;
                }
              }
              const spectrogram = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)(spectrogramParts);
              const { waveform } = await sessionRun(vocoder.sessions["model"], { spectrogram });
              return {
                spectrogram,
                waveform
                // cross_attentions: null, // TODO add
              };
            }
          }
          class SpeechT5HifiGan extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "main_input_name", "spectrogram");
            }
          }
          class TrOCRPreTrainedModel extends PreTrainedModel {
          }
          class TrOCRForCausalLM extends TrOCRPreTrainedModel {
          }
          class MistralPreTrainedModel extends PreTrainedModel {
          }
          class MistralModel extends MistralPreTrainedModel {
          }
          class MistralForCausalLM extends MistralPreTrainedModel {
          }
          class Starcoder2PreTrainedModel extends PreTrainedModel {
          }
          class Starcoder2Model extends Starcoder2PreTrainedModel {
          }
          class Starcoder2ForCausalLM extends Starcoder2PreTrainedModel {
          }
          class FalconPreTrainedModel extends PreTrainedModel {
          }
          class FalconModel extends FalconPreTrainedModel {
          }
          class FalconForCausalLM extends FalconPreTrainedModel {
          }
          class ClapPreTrainedModel extends PreTrainedModel {
          }
          class ClapModel extends ClapPreTrainedModel {
          }
          class ClapTextModelWithProjection extends ClapPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "text_model"
              });
            }
          }
          class ClapAudioModelWithProjection extends ClapPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "audio_model"
              });
            }
          }
          class VitsPreTrainedModel extends PreTrainedModel {
          }
          class VitsModel extends VitsPreTrainedModel {
            /**
             * Calls the model on new inputs.
             * @param {Object} model_inputs The inputs to the model.
             * @returns {Promise<VitsModelOutput>} The outputs for the VITS model.
             */
            async _call(model_inputs) {
              return new VitsModelOutput(await super._call(model_inputs));
            }
          }
          class SegformerPreTrainedModel extends PreTrainedModel {
          }
          class SegformerModel extends SegformerPreTrainedModel {
          }
          class SegformerForImageClassification extends SegformerPreTrainedModel {
          }
          class SegformerForSemanticSegmentation extends SegformerPreTrainedModel {
          }
          class StableLmPreTrainedModel extends PreTrainedModel {
          }
          class StableLmModel extends StableLmPreTrainedModel {
          }
          class StableLmForCausalLM extends StableLmPreTrainedModel {
          }
          class EfficientNetPreTrainedModel extends PreTrainedModel {
          }
          class EfficientNetModel extends EfficientNetPreTrainedModel {
          }
          class EfficientNetForImageClassification extends EfficientNetPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class MusicgenPreTrainedModel extends PreTrainedModel {
          }
          class MusicgenModel extends MusicgenPreTrainedModel {
          }
          class MusicgenForCausalLM extends MusicgenPreTrainedModel {
          }
          class MusicgenForConditionalGeneration extends PreTrainedModel {
            constructor() {
              super(...arguments);
              // NOTE: not MusicgenPreTrainedModel
              __publicField(this, "forward_params", [
                "input_ids",
                "attention_mask",
                "encoder_outputs",
                "decoder_input_ids",
                "decoder_attention_mask",
                "past_key_values"
              ]);
            }
            /**
             * Apply the pattern mask to the final ids,
             * then revert the pattern delay mask by filtering the pad token id in a single step.
             * @param {Tensor} outputs The output tensor from the model.
             * @returns {Tensor} The filtered output tensor.
             */
            _apply_and_filter_by_delay_pattern_mask(outputs) {
              const [bs_x_codebooks, seqLength] = outputs.dims;
              const num_codebooks = this.config.decoder.num_codebooks;
              const upperBound = seqLength - num_codebooks;
              let newDataSize = 0;
              for (let i = 0; i < outputs.size; ++i) {
                if (outputs.data[i] === this.config.decoder.pad_token_id) {
                  continue;
                }
                const row = i % seqLength;
                const col = Math.floor(i / seqLength) % num_codebooks;
                const diff = row - col;
                if (diff > 0 && diff <= upperBound) {
                  outputs.data[newDataSize++] = outputs.data[i];
                }
              }
              const batch_size = Math.floor(bs_x_codebooks / num_codebooks);
              const inferred = newDataSize / (batch_size * num_codebooks);
              return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
                outputs.type,
                outputs.data.slice(0, newDataSize),
                [batch_size, num_codebooks, inferred]
              );
            }
            prepare_inputs_for_generation(input_ids, model_inputs, generation_config) {
              let clonedInputIds = structuredClone(input_ids);
              for (let i = 0; i < clonedInputIds.length; ++i) {
                for (let j = 0; j < clonedInputIds[i].length; ++j) {
                  if (i % this.config.decoder.num_codebooks >= j) {
                    clonedInputIds[i][j] = BigInt(this.config.decoder.pad_token_id);
                  }
                }
              }
              if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {
                clonedInputIds = clonedInputIds.concat(clonedInputIds);
              }
              const prepped = super.prepare_inputs_for_generation(clonedInputIds, model_inputs, generation_config);
              return prepped;
            }
            /**
             * Generates sequences of token ids for models with a language modeling head.
             * @param {import('./generation/parameters.js').GenerationFunctionParameters} options
             * @returns {Promise<ModelOutput|Tensor>} The output of the model, which can contain the generated token ids, attentions, and scores.
             */
            async generate(options) {
              const output_ids = await super.generate(options);
              const audio_codes = this._apply_and_filter_by_delay_pattern_mask(
                /** @type {Tensor} */
                output_ids
              ).unsqueeze_(0);
              const { audio_values } = await sessionRun(this.sessions["encodec_decode"], { audio_codes });
              return audio_values;
            }
          }
          class MobileNetV1PreTrainedModel extends PreTrainedModel {
          }
          class MobileNetV1Model extends MobileNetV1PreTrainedModel {
          }
          class MobileNetV1ForImageClassification extends MobileNetV1PreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class MobileNetV1ForSemanticSegmentation extends MobileNetV1PreTrainedModel {
          }
          class MobileNetV2PreTrainedModel extends PreTrainedModel {
          }
          class MobileNetV2Model extends MobileNetV2PreTrainedModel {
          }
          class MobileNetV2ForImageClassification extends MobileNetV2PreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class MobileNetV2ForSemanticSegmentation extends MobileNetV2PreTrainedModel {
          }
          class MobileNetV3PreTrainedModel extends PreTrainedModel {
          }
          class MobileNetV3Model extends MobileNetV3PreTrainedModel {
          }
          class MobileNetV3ForImageClassification extends MobileNetV3PreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class MobileNetV3ForSemanticSegmentation extends MobileNetV3PreTrainedModel {
          }
          class MobileNetV4PreTrainedModel extends PreTrainedModel {
          }
          class MobileNetV4Model extends MobileNetV4PreTrainedModel {
          }
          class MobileNetV4ForImageClassification extends MobileNetV4PreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new SequenceClassifierOutput(await super._call(model_inputs));
            }
          }
          class MobileNetV4ForSemanticSegmentation extends MobileNetV4PreTrainedModel {
          }
          class DecisionTransformerPreTrainedModel extends PreTrainedModel {
          }
          class DecisionTransformerModel extends DecisionTransformerPreTrainedModel {
          }
          class MultiModalityPreTrainedModel extends PreTrainedModel {
          }
          class MultiModalityCausalLM extends MultiModalityPreTrainedModel {
            /**
             * @param {ConstructorParameters<typeof MultiModalityPreTrainedModel>} args
             */
            constructor(...args) {
              super(...args);
              __publicField(this, "forward_params", [
                // prepare_inputs_embeds
                "input_ids",
                "pixel_values",
                "images_seq_mask",
                "images_emb_mask",
                // language_model
                "attention_mask",
                "position_ids",
                "past_key_values"
              ]);
              this._generation_mode = "text";
            }
            async forward(model_inputs) {
              const mode = this._generation_mode ?? "text";
              let output_1;
              if (mode === "text" || !model_inputs.past_key_values) {
                const session = this.sessions["prepare_inputs_embeds"];
                const prep_inputs = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(model_inputs, session.inputNames);
                output_1 = await sessionRun(session, prep_inputs);
              } else {
                const session = this.sessions["gen_img_embeds"];
                const prep_inputs = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)({
                  image_ids: model_inputs.input_ids
                }, session.inputNames);
                output_1 = await sessionRun(session, prep_inputs);
              }
              const input_2 = { ...model_inputs, ...output_1 };
              const output_2 = await decoderForward(this, input_2);
              const head = this.sessions[mode === "text" ? "lm_head" : "gen_head"];
              if (!head) {
                throw new Error(`Unable to find "${head}" generation head`);
              }
              const output_3 = await sessionRun(head, (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(output_2, head.inputNames));
              return {
                ...output_1,
                ...output_2,
                ...output_3
              };
            }
            /**
             * @param {import('./generation/parameters.js').GenerationFunctionParameters} options
             */
            async generate(options) {
              this._generation_mode = "text";
              return super.generate(options);
            }
            /**
             * @param {import('./generation/parameters.js').GenerationFunctionParameters} options
             */
            async generate_images(options) {
              this._generation_mode = "image";
              const start_num_tokens = (options.inputs ?? options[this.main_input_name]).dims[1];
              const all_tokens = await super.generate(options);
              const generated_tokens = (
                /** @type {Tensor} */
                all_tokens.slice(null, [start_num_tokens, null])
              );
              const image_decode = this.sessions["image_decode"];
              const { decoded_image } = await sessionRun(image_decode, {
                generated_tokens
              });
              const clamped = decoded_image.add_(1).mul_(255 / 2).clamp_(0, 255).to("uint8");
              const images = [];
              for (const tensor of clamped) {
                const img = _utils_image_js__WEBPACK_IMPORTED_MODULE_10__.RawImage.fromTensor(tensor);
                images.push(img);
              }
              return images;
            }
          }
          class MgpstrModelOutput extends ModelOutput {
            constructor({ char_logits, bpe_logits, wp_logits }) {
              super();
              this.char_logits = char_logits;
              this.bpe_logits = bpe_logits;
              this.wp_logits = wp_logits;
            }
            get logits() {
              return [this.char_logits, this.bpe_logits, this.wp_logits];
            }
          }
          class MgpstrPreTrainedModel extends PreTrainedModel {
          }
          class MgpstrForSceneTextRecognition extends MgpstrPreTrainedModel {
            /**
             * @param {any} model_inputs
             */
            async _call(model_inputs) {
              return new MgpstrModelOutput(await super._call(model_inputs));
            }
          }
          class PatchTSTPreTrainedModel extends PreTrainedModel {
          }
          class PatchTSTModel extends PatchTSTPreTrainedModel {
          }
          class PatchTSTForPrediction extends PatchTSTPreTrainedModel {
          }
          class PatchTSMixerPreTrainedModel extends PreTrainedModel {
          }
          class PatchTSMixerModel extends PatchTSMixerPreTrainedModel {
          }
          class PatchTSMixerForPrediction extends PatchTSMixerPreTrainedModel {
          }
          class UltravoxPreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "forward_params", [
                "input_ids",
                "attention_mask",
                "position_ids",
                "audio_values",
                "past_key_values"
              ]);
            }
          }
          class UltravoxModel extends UltravoxPreTrainedModel {
            _merge_input_ids_with_audio_features(kwargs) {
              const audio_hidden_size = kwargs.audio_features.dims.at(-1);
              const reshaped_audio_features = kwargs.audio_features.view(-1, audio_hidden_size);
              return default_merge_input_ids_with_audio_features({
                // @ts-ignore
                audio_token_id: this.config.ignore_index,
                ...kwargs,
                audio_features: reshaped_audio_features
              });
            }
          }
          class MimiPreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "main_input_name", "input_values");
              __publicField(this, "forward_params", ["input_values"]);
            }
          }
          class MimiEncoderOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.audio_codes Discrete code embeddings, of shape `(batch_size, num_quantizers, codes_length)`.
             */
            constructor({ audio_codes }) {
              super();
              this.audio_codes = audio_codes;
            }
          }
          class MimiDecoderOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.audio_values Decoded audio values, of shape `(batch_size, num_channels, sequence_length)`.
             */
            constructor({ audio_values }) {
              super();
              this.audio_values = audio_values;
            }
          }
          class MimiModel extends MimiPreTrainedModel {
            /**
             * Encodes the input audio waveform into discrete codes.
             * @param {Object} inputs Model inputs
             * @param {Tensor} [inputs.input_values] Float values of the input audio waveform, of shape `(batch_size, channels, sequence_length)`).
             * @returns {Promise<MimiEncoderOutput>} The output tensor of shape `(batch_size, num_codebooks, sequence_length)`.
             */
            async encode(inputs) {
              return new MimiEncoderOutput(await sessionRun(this.sessions["encoder_model"], inputs));
            }
            /**
             * Decodes the given frames into an output audio waveform.
             * @param {MimiEncoderOutput} inputs The encoded audio codes.
             * @returns {Promise<MimiDecoderOutput>} The output tensor of shape `(batch_size, num_channels, sequence_length)`.
             */
            async decode(inputs) {
              return new MimiDecoderOutput(await sessionRun(this.sessions["decoder_model"], inputs));
            }
          }
          class MimiEncoderModel extends MimiPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "encoder_model"
              });
            }
          }
          class MimiDecoderModel extends MimiPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "decoder_model"
              });
            }
          }
          class DacPreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "main_input_name", "input_values");
              __publicField(this, "forward_params", ["input_values"]);
            }
          }
          class DacEncoderOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.audio_codes Discrete code embeddings, of shape `(batch_size, num_quantizers, codes_length)`.
             */
            constructor({ audio_codes }) {
              super();
              this.audio_codes = audio_codes;
            }
          }
          class DacDecoderOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.audio_values Decoded audio values, of shape `(batch_size, num_channels, sequence_length)`.
             */
            constructor({ audio_values }) {
              super();
              this.audio_values = audio_values;
            }
          }
          class DacModel extends DacPreTrainedModel {
            /**
             * Encodes the input audio waveform into discrete codes.
             * @param {Object} inputs Model inputs
             * @param {Tensor} [inputs.input_values] Float values of the input audio waveform, of shape `(batch_size, channels, sequence_length)`).
             * @returns {Promise<DacEncoderOutput>} The output tensor of shape `(batch_size, num_codebooks, sequence_length)`.
             */
            async encode(inputs) {
              return new DacEncoderOutput(await sessionRun(this.sessions["encoder_model"], inputs));
            }
            /**
             * Decodes the given frames into an output audio waveform.
             * @param {DacEncoderOutput} inputs The encoded audio codes.
             * @returns {Promise<DacDecoderOutput>} The output tensor of shape `(batch_size, num_channels, sequence_length)`.
             */
            async decode(inputs) {
              return new DacDecoderOutput(await sessionRun(this.sessions["decoder_model"], inputs));
            }
          }
          class DacEncoderModel extends DacPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "encoder_model"
              });
            }
          }
          class DacDecoderModel extends DacPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "decoder_model"
              });
            }
          }
          class SnacPreTrainedModel extends PreTrainedModel {
            constructor() {
              super(...arguments);
              __publicField(this, "main_input_name", "input_values");
              __publicField(this, "forward_params", ["input_values"]);
            }
          }
          class SnacModel extends SnacPreTrainedModel {
            /**
             * Encodes the input audio waveform into discrete codes.
             * @param {Object} inputs Model inputs
             * @param {Tensor} [inputs.input_values] Float values of the input audio waveform, of shape `(batch_size, channels, sequence_length)`).
             * @returns {Promise<Record<string, Tensor>>} The output tensors of shape `(batch_size, num_codebooks, sequence_length)`.
             */
            async encode(inputs) {
              return await sessionRun(this.sessions["encoder_model"], inputs);
            }
            /**
             * Decodes the given frames into an output audio waveform.
             * @param {Record<string, Tensor>} inputs The encoded audio codes.
             * @returns {Promise<{audio_values: Tensor}>} The output tensor of shape `(batch_size, num_channels, sequence_length)`.
             */
            async decode(inputs) {
              return await sessionRun(this.sessions["decoder_model"], inputs);
            }
          }
          class SnacEncoderModel extends SnacPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "encoder_model"
              });
            }
          }
          class SnacDecoderModel extends SnacPreTrainedModel {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              return super.from_pretrained(pretrained_model_name_or_path, {
                ...options,
                // Update default model file name if not provided
                model_file_name: options.model_file_name ?? "decoder_model"
              });
            }
          }
          class PretrainedMixin {
            /** @type {typeof PreTrainedModel.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, {
              progress_callback = null,
              config = null,
              cache_dir = null,
              local_files_only = false,
              revision = "main",
              model_file_name = null,
              subfolder = "onnx",
              device = null,
              dtype = null,
              use_external_data_format = null,
              session_options = {}
            } = {}) {
              const options = {
                progress_callback,
                config,
                cache_dir,
                local_files_only,
                revision,
                model_file_name,
                subfolder,
                device,
                dtype,
                use_external_data_format,
                session_options
              };
              options.config = await _configs_js__WEBPACK_IMPORTED_MODULE_0__.AutoConfig.from_pretrained(pretrained_model_name_or_path, options);
              if (!this.MODEL_CLASS_MAPPINGS) {
                throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: " + this.name);
              }
              const model_type = options.config.model_type;
              for (const MODEL_CLASS_MAPPING of this.MODEL_CLASS_MAPPINGS) {
                let modelInfo = MODEL_CLASS_MAPPING.get(model_type);
                if (!modelInfo) {
                  for (const cls of MODEL_CLASS_MAPPING.values()) {
                    if (cls[0] === model_type) {
                      modelInfo = cls;
                      break;
                    }
                  }
                  if (!modelInfo)
                    continue;
                }
                return await modelInfo[1].from_pretrained(pretrained_model_name_or_path, options);
              }
              if (this.BASE_IF_FAIL) {
                if (!CUSTOM_ARCHITECTURES.has(model_type)) {
                  console.warn(`Unknown model class "${model_type}", attempting to construct from base class.`);
                }
                return await PreTrainedModel.from_pretrained(pretrained_model_name_or_path, options);
              } else {
                throw Error(`Unsupported model type: ${model_type}`);
              }
            }
          }
          /**
           * Mapping from model type to model class.
           * @type {Map<string, Object>[]}
           */
          __publicField(PretrainedMixin, "MODEL_CLASS_MAPPINGS", null);
          /**
           * Whether to attempt to instantiate the base class (`PretrainedModel`) if 
           * the model type is not found in the mapping.
           */
          __publicField(PretrainedMixin, "BASE_IF_FAIL", false);
          const MODEL_MAPPING_NAMES_ENCODER_ONLY = /* @__PURE__ */ new Map([
            ["bert", ["BertModel", BertModel]],
            ["modernbert", ["ModernBertModel", ModernBertModel]],
            ["nomic_bert", ["NomicBertModel", NomicBertModel]],
            ["roformer", ["RoFormerModel", RoFormerModel]],
            ["electra", ["ElectraModel", ElectraModel]],
            ["esm", ["EsmModel", EsmModel]],
            ["convbert", ["ConvBertModel", ConvBertModel]],
            ["camembert", ["CamembertModel", CamembertModel]],
            ["deberta", ["DebertaModel", DebertaModel]],
            ["deberta-v2", ["DebertaV2Model", DebertaV2Model]],
            ["mpnet", ["MPNetModel", MPNetModel]],
            ["albert", ["AlbertModel", AlbertModel]],
            ["distilbert", ["DistilBertModel", DistilBertModel]],
            ["roberta", ["RobertaModel", RobertaModel]],
            ["xlm", ["XLMModel", XLMModel]],
            ["xlm-roberta", ["XLMRobertaModel", XLMRobertaModel]],
            ["clap", ["ClapModel", ClapModel]],
            ["clip", ["CLIPModel", CLIPModel]],
            ["clipseg", ["CLIPSegModel", CLIPSegModel]],
            ["chinese_clip", ["ChineseCLIPModel", ChineseCLIPModel]],
            ["siglip", ["SiglipModel", SiglipModel]],
            ["jina_clip", ["JinaCLIPModel", JinaCLIPModel]],
            ["mobilebert", ["MobileBertModel", MobileBertModel]],
            ["squeezebert", ["SqueezeBertModel", SqueezeBertModel]],
            ["wav2vec2", ["Wav2Vec2Model", Wav2Vec2Model]],
            ["wav2vec2-bert", ["Wav2Vec2BertModel", Wav2Vec2BertModel]],
            ["unispeech", ["UniSpeechModel", UniSpeechModel]],
            ["unispeech-sat", ["UniSpeechSatModel", UniSpeechSatModel]],
            ["hubert", ["HubertModel", HubertModel]],
            ["wavlm", ["WavLMModel", WavLMModel]],
            ["audio-spectrogram-transformer", ["ASTModel", ASTModel]],
            ["vits", ["VitsModel", VitsModel]],
            ["pyannote", ["PyAnnoteModel", PyAnnoteModel]],
            ["wespeaker-resnet", ["WeSpeakerResNetModel", WeSpeakerResNetModel]],
            ["detr", ["DetrModel", DetrModel]],
            ["rt_detr", ["RTDetrModel", RTDetrModel]],
            ["rt_detr_v2", ["RTDetrV2Model", RTDetrV2Model]],
            ["rf_detr", ["RFDetrModel", RFDetrModel]],
            ["d_fine", ["DFineModel", DFineModel]],
            ["table-transformer", ["TableTransformerModel", TableTransformerModel]],
            ["vit", ["ViTModel", ViTModel]],
            ["ijepa", ["IJepaModel", IJepaModel]],
            ["pvt", ["PvtModel", PvtModel]],
            ["vit_msn", ["ViTMSNModel", ViTMSNModel]],
            ["vit_mae", ["ViTMAEModel", ViTMAEModel]],
            ["groupvit", ["GroupViTModel", GroupViTModel]],
            ["fastvit", ["FastViTModel", FastViTModel]],
            ["mobilevit", ["MobileViTModel", MobileViTModel]],
            ["mobilevitv2", ["MobileViTV2Model", MobileViTV2Model]],
            ["owlvit", ["OwlViTModel", OwlViTModel]],
            ["owlv2", ["Owlv2Model", Owlv2Model]],
            ["beit", ["BeitModel", BeitModel]],
            ["deit", ["DeiTModel", DeiTModel]],
            ["hiera", ["HieraModel", HieraModel]],
            ["convnext", ["ConvNextModel", ConvNextModel]],
            ["convnextv2", ["ConvNextV2Model", ConvNextV2Model]],
            ["dinov2", ["Dinov2Model", Dinov2Model]],
            ["dinov2_with_registers", ["Dinov2WithRegistersModel", Dinov2WithRegistersModel]],
            ["resnet", ["ResNetModel", ResNetModel]],
            ["swin", ["SwinModel", SwinModel]],
            ["swin2sr", ["Swin2SRModel", Swin2SRModel]],
            ["donut-swin", ["DonutSwinModel", DonutSwinModel]],
            ["yolos", ["YolosModel", YolosModel]],
            ["dpt", ["DPTModel", DPTModel]],
            ["glpn", ["GLPNModel", GLPNModel]],
            ["hifigan", ["SpeechT5HifiGan", SpeechT5HifiGan]],
            ["efficientnet", ["EfficientNetModel", EfficientNetModel]],
            ["decision_transformer", ["DecisionTransformerModel", DecisionTransformerModel]],
            ["patchtst", ["PatchTSTForPrediction", PatchTSTModel]],
            ["patchtsmixer", ["PatchTSMixerForPrediction", PatchTSMixerModel]],
            ["mobilenet_v1", ["MobileNetV1Model", MobileNetV1Model]],
            ["mobilenet_v2", ["MobileNetV2Model", MobileNetV2Model]],
            ["mobilenet_v3", ["MobileNetV3Model", MobileNetV3Model]],
            ["mobilenet_v4", ["MobileNetV4Model", MobileNetV4Model]],
            ["maskformer", ["MaskFormerModel", MaskFormerModel]],
            ["mgp-str", ["MgpstrForSceneTextRecognition", MgpstrForSceneTextRecognition]],
            ["style_text_to_speech_2", ["StyleTextToSpeech2Model", StyleTextToSpeech2Model]]
          ]);
          const MODEL_MAPPING_NAMES_ENCODER_DECODER = /* @__PURE__ */ new Map([
            ["t5", ["T5Model", T5Model]],
            ["longt5", ["LongT5Model", LongT5Model]],
            ["mt5", ["MT5Model", MT5Model]],
            ["bart", ["BartModel", BartModel]],
            ["mbart", ["MBartModel", MBartModel]],
            ["marian", ["MarianModel", MarianModel]],
            ["whisper", ["WhisperModel", WhisperModel]],
            ["m2m_100", ["M2M100Model", M2M100Model]],
            ["blenderbot", ["BlenderbotModel", BlenderbotModel]],
            ["blenderbot-small", ["BlenderbotSmallModel", BlenderbotSmallModel]]
          ]);
          const MODEL_MAPPING_NAMES_AUTO_ENCODER = /* @__PURE__ */ new Map([
            ["mimi", ["MimiModel", MimiModel]],
            ["dac", ["DacModel", DacModel]],
            ["snac", ["SnacModel", SnacModel]]
          ]);
          const MODEL_MAPPING_NAMES_DECODER_ONLY = /* @__PURE__ */ new Map([
            ["bloom", ["BloomModel", BloomModel]],
            ["jais", ["JAISModel", JAISModel]],
            ["gpt2", ["GPT2Model", GPT2Model]],
            ["gptj", ["GPTJModel", GPTJModel]],
            ["gpt_bigcode", ["GPTBigCodeModel", GPTBigCodeModel]],
            ["gpt_neo", ["GPTNeoModel", GPTNeoModel]],
            ["gpt_neox", ["GPTNeoXModel", GPTNeoXModel]],
            ["codegen", ["CodeGenModel", CodeGenModel]],
            ["llama", ["LlamaModel", LlamaModel]],
            ["exaone", ["ExaoneModel", ExaoneModel]],
            ["olmo", ["OlmoModel", OlmoModel]],
            ["olmo2", ["Olmo2Model", Olmo2Model]],
            ["mobilellm", ["MobileLLMModel", MobileLLMModel]],
            ["granite", ["GraniteModel", GraniteModel]],
            ["cohere", ["CohereModel", CohereModel]],
            ["gemma", ["GemmaModel", GemmaModel]],
            ["gemma2", ["Gemma2Model", Gemma2Model]],
            ["gemma3_text", ["Gemma3Model", Gemma3Model]],
            ["helium", ["HeliumModel", HeliumModel]],
            ["glm", ["GlmModel", GlmModel]],
            ["openelm", ["OpenELMModel", OpenELMModel]],
            ["qwen2", ["Qwen2Model", Qwen2Model]],
            ["qwen3", ["Qwen3Model", Qwen3Model]],
            ["phi", ["PhiModel", PhiModel]],
            ["phi3", ["Phi3Model", Phi3Model]],
            ["mpt", ["MptModel", MptModel]],
            ["opt", ["OPTModel", OPTModel]],
            ["mistral", ["MistralModel", MistralModel]],
            ["starcoder2", ["Starcoder2Model", Starcoder2Model]],
            ["falcon", ["FalconModel", FalconModel]],
            ["stablelm", ["StableLmModel", StableLmModel]]
          ]);
          const MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["speecht5", ["SpeechT5ForSpeechToText", SpeechT5ForSpeechToText]],
            ["whisper", ["WhisperForConditionalGeneration", WhisperForConditionalGeneration]],
            ["lite-whisper", ["LiteWhisperForConditionalGeneration", LiteWhisperForConditionalGeneration]],
            ["moonshine", ["MoonshineForConditionalGeneration", MoonshineForConditionalGeneration]]
          ]);
          const MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["speecht5", ["SpeechT5ForTextToSpeech", SpeechT5ForTextToSpeech]]
          ]);
          const MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["vits", ["VitsModel", VitsModel]],
            ["musicgen", ["MusicgenForConditionalGeneration", MusicgenForConditionalGeneration]]
          ]);
          const MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["bert", ["BertForSequenceClassification", BertForSequenceClassification]],
            ["modernbert", ["ModernBertForSequenceClassification", ModernBertForSequenceClassification]],
            ["roformer", ["RoFormerForSequenceClassification", RoFormerForSequenceClassification]],
            ["electra", ["ElectraForSequenceClassification", ElectraForSequenceClassification]],
            ["esm", ["EsmForSequenceClassification", EsmForSequenceClassification]],
            ["convbert", ["ConvBertForSequenceClassification", ConvBertForSequenceClassification]],
            ["camembert", ["CamembertForSequenceClassification", CamembertForSequenceClassification]],
            ["deberta", ["DebertaForSequenceClassification", DebertaForSequenceClassification]],
            ["deberta-v2", ["DebertaV2ForSequenceClassification", DebertaV2ForSequenceClassification]],
            ["mpnet", ["MPNetForSequenceClassification", MPNetForSequenceClassification]],
            ["albert", ["AlbertForSequenceClassification", AlbertForSequenceClassification]],
            ["distilbert", ["DistilBertForSequenceClassification", DistilBertForSequenceClassification]],
            ["roberta", ["RobertaForSequenceClassification", RobertaForSequenceClassification]],
            ["xlm", ["XLMForSequenceClassification", XLMForSequenceClassification]],
            ["xlm-roberta", ["XLMRobertaForSequenceClassification", XLMRobertaForSequenceClassification]],
            ["bart", ["BartForSequenceClassification", BartForSequenceClassification]],
            ["mbart", ["MBartForSequenceClassification", MBartForSequenceClassification]],
            ["mobilebert", ["MobileBertForSequenceClassification", MobileBertForSequenceClassification]],
            ["squeezebert", ["SqueezeBertForSequenceClassification", SqueezeBertForSequenceClassification]]
          ]);
          const MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["bert", ["BertForTokenClassification", BertForTokenClassification]],
            ["modernbert", ["ModernBertForTokenClassification", ModernBertForTokenClassification]],
            ["roformer", ["RoFormerForTokenClassification", RoFormerForTokenClassification]],
            ["electra", ["ElectraForTokenClassification", ElectraForTokenClassification]],
            ["esm", ["EsmForTokenClassification", EsmForTokenClassification]],
            ["convbert", ["ConvBertForTokenClassification", ConvBertForTokenClassification]],
            ["camembert", ["CamembertForTokenClassification", CamembertForTokenClassification]],
            ["deberta", ["DebertaForTokenClassification", DebertaForTokenClassification]],
            ["deberta-v2", ["DebertaV2ForTokenClassification", DebertaV2ForTokenClassification]],
            ["mpnet", ["MPNetForTokenClassification", MPNetForTokenClassification]],
            ["distilbert", ["DistilBertForTokenClassification", DistilBertForTokenClassification]],
            ["roberta", ["RobertaForTokenClassification", RobertaForTokenClassification]],
            ["xlm", ["XLMForTokenClassification", XLMForTokenClassification]],
            ["xlm-roberta", ["XLMRobertaForTokenClassification", XLMRobertaForTokenClassification]]
          ]);
          const MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["t5", ["T5ForConditionalGeneration", T5ForConditionalGeneration]],
            ["longt5", ["LongT5ForConditionalGeneration", LongT5ForConditionalGeneration]],
            ["mt5", ["MT5ForConditionalGeneration", MT5ForConditionalGeneration]],
            ["bart", ["BartForConditionalGeneration", BartForConditionalGeneration]],
            ["mbart", ["MBartForConditionalGeneration", MBartForConditionalGeneration]],
            ["marian", ["MarianMTModel", MarianMTModel]],
            ["m2m_100", ["M2M100ForConditionalGeneration", M2M100ForConditionalGeneration]],
            ["blenderbot", ["BlenderbotForConditionalGeneration", BlenderbotForConditionalGeneration]],
            ["blenderbot-small", ["BlenderbotSmallForConditionalGeneration", BlenderbotSmallForConditionalGeneration]]
          ]);
          const MODEL_FOR_CAUSAL_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["bloom", ["BloomForCausalLM", BloomForCausalLM]],
            ["gpt2", ["GPT2LMHeadModel", GPT2LMHeadModel]],
            ["jais", ["JAISLMHeadModel", JAISLMHeadModel]],
            ["gptj", ["GPTJForCausalLM", GPTJForCausalLM]],
            ["gpt_bigcode", ["GPTBigCodeForCausalLM", GPTBigCodeForCausalLM]],
            ["gpt_neo", ["GPTNeoForCausalLM", GPTNeoForCausalLM]],
            ["gpt_neox", ["GPTNeoXForCausalLM", GPTNeoXForCausalLM]],
            ["codegen", ["CodeGenForCausalLM", CodeGenForCausalLM]],
            ["llama", ["LlamaForCausalLM", LlamaForCausalLM]],
            ["exaone", ["ExaoneForCausalLM", ExaoneForCausalLM]],
            ["olmo", ["OlmoForCausalLM", OlmoForCausalLM]],
            ["olmo2", ["Olmo2ForCausalLM", Olmo2ForCausalLM]],
            ["mobilellm", ["MobileLLMForCausalLM", MobileLLMForCausalLM]],
            ["granite", ["GraniteForCausalLM", GraniteForCausalLM]],
            ["cohere", ["CohereForCausalLM", CohereForCausalLM]],
            ["gemma", ["GemmaForCausalLM", GemmaForCausalLM]],
            ["gemma2", ["Gemma2ForCausalLM", Gemma2ForCausalLM]],
            ["gemma3_text", ["Gemma3ForCausalLM", Gemma3ForCausalLM]],
            ["helium", ["HeliumForCausalLM", HeliumForCausalLM]],
            ["glm", ["GlmForCausalLM", GlmForCausalLM]],
            ["openelm", ["OpenELMForCausalLM", OpenELMForCausalLM]],
            ["qwen2", ["Qwen2ForCausalLM", Qwen2ForCausalLM]],
            ["qwen3", ["Qwen3ForCausalLM", Qwen3ForCausalLM]],
            ["phi", ["PhiForCausalLM", PhiForCausalLM]],
            ["phi3", ["Phi3ForCausalLM", Phi3ForCausalLM]],
            ["mpt", ["MptForCausalLM", MptForCausalLM]],
            ["opt", ["OPTForCausalLM", OPTForCausalLM]],
            ["mbart", ["MBartForCausalLM", MBartForCausalLM]],
            ["mistral", ["MistralForCausalLM", MistralForCausalLM]],
            ["starcoder2", ["Starcoder2ForCausalLM", Starcoder2ForCausalLM]],
            ["falcon", ["FalconForCausalLM", FalconForCausalLM]],
            ["trocr", ["TrOCRForCausalLM", TrOCRForCausalLM]],
            ["stablelm", ["StableLmForCausalLM", StableLmForCausalLM]],
            // Also image-text-to-text
            ["phi3_v", ["Phi3VForCausalLM", Phi3VForCausalLM]]
          ]);
          const MODEL_FOR_MULTIMODALITY_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["multi_modality", ["MultiModalityCausalLM", MultiModalityCausalLM]]
          ]);
          const MODEL_FOR_MASKED_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["bert", ["BertForMaskedLM", BertForMaskedLM]],
            ["modernbert", ["ModernBertForMaskedLM", ModernBertForMaskedLM]],
            ["roformer", ["RoFormerForMaskedLM", RoFormerForMaskedLM]],
            ["electra", ["ElectraForMaskedLM", ElectraForMaskedLM]],
            ["esm", ["EsmForMaskedLM", EsmForMaskedLM]],
            ["convbert", ["ConvBertForMaskedLM", ConvBertForMaskedLM]],
            ["camembert", ["CamembertForMaskedLM", CamembertForMaskedLM]],
            ["deberta", ["DebertaForMaskedLM", DebertaForMaskedLM]],
            ["deberta-v2", ["DebertaV2ForMaskedLM", DebertaV2ForMaskedLM]],
            ["mpnet", ["MPNetForMaskedLM", MPNetForMaskedLM]],
            ["albert", ["AlbertForMaskedLM", AlbertForMaskedLM]],
            ["distilbert", ["DistilBertForMaskedLM", DistilBertForMaskedLM]],
            ["roberta", ["RobertaForMaskedLM", RobertaForMaskedLM]],
            ["xlm", ["XLMWithLMHeadModel", XLMWithLMHeadModel]],
            ["xlm-roberta", ["XLMRobertaForMaskedLM", XLMRobertaForMaskedLM]],
            ["mobilebert", ["MobileBertForMaskedLM", MobileBertForMaskedLM]],
            ["squeezebert", ["SqueezeBertForMaskedLM", SqueezeBertForMaskedLM]]
          ]);
          const MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["bert", ["BertForQuestionAnswering", BertForQuestionAnswering]],
            ["roformer", ["RoFormerForQuestionAnswering", RoFormerForQuestionAnswering]],
            ["electra", ["ElectraForQuestionAnswering", ElectraForQuestionAnswering]],
            ["convbert", ["ConvBertForQuestionAnswering", ConvBertForQuestionAnswering]],
            ["camembert", ["CamembertForQuestionAnswering", CamembertForQuestionAnswering]],
            ["deberta", ["DebertaForQuestionAnswering", DebertaForQuestionAnswering]],
            ["deberta-v2", ["DebertaV2ForQuestionAnswering", DebertaV2ForQuestionAnswering]],
            ["mpnet", ["MPNetForQuestionAnswering", MPNetForQuestionAnswering]],
            ["albert", ["AlbertForQuestionAnswering", AlbertForQuestionAnswering]],
            ["distilbert", ["DistilBertForQuestionAnswering", DistilBertForQuestionAnswering]],
            ["roberta", ["RobertaForQuestionAnswering", RobertaForQuestionAnswering]],
            ["xlm", ["XLMForQuestionAnswering", XLMForQuestionAnswering]],
            ["xlm-roberta", ["XLMRobertaForQuestionAnswering", XLMRobertaForQuestionAnswering]],
            ["mobilebert", ["MobileBertForQuestionAnswering", MobileBertForQuestionAnswering]],
            ["squeezebert", ["SqueezeBertForQuestionAnswering", SqueezeBertForQuestionAnswering]]
          ]);
          const MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["vision-encoder-decoder", ["VisionEncoderDecoderModel", VisionEncoderDecoderModel]],
            ["idefics3", ["Idefics3ForConditionalGeneration", Idefics3ForConditionalGeneration]],
            ["smolvlm", ["SmolVLMForConditionalGeneration", SmolVLMForConditionalGeneration]]
          ]);
          const MODEL_FOR_IMAGE_TEXT_TO_TEXT_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["llava", ["LlavaForConditionalGeneration", LlavaForConditionalGeneration]],
            ["llava_onevision", ["LlavaOnevisionForConditionalGeneration", LlavaOnevisionForConditionalGeneration]],
            ["moondream1", ["Moondream1ForConditionalGeneration", Moondream1ForConditionalGeneration]],
            ["florence2", ["Florence2ForConditionalGeneration", Florence2ForConditionalGeneration]],
            ["qwen2-vl", ["Qwen2VLForConditionalGeneration", Qwen2VLForConditionalGeneration]],
            ["idefics3", ["Idefics3ForConditionalGeneration", Idefics3ForConditionalGeneration]],
            ["smolvlm", ["SmolVLMForConditionalGeneration", SmolVLMForConditionalGeneration]],
            ["paligemma", ["PaliGemmaForConditionalGeneration", PaliGemmaForConditionalGeneration]]
          ]);
          const MODEL_FOR_AUDIO_TEXT_TO_TEXT_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["ultravox", ["UltravoxModel", UltravoxModel]]
          ]);
          const MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["vision-encoder-decoder", ["VisionEncoderDecoderModel", VisionEncoderDecoderModel]]
          ]);
          const MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["vit", ["ViTForImageClassification", ViTForImageClassification]],
            ["ijepa", ["IJepaForImageClassification", IJepaForImageClassification]],
            ["pvt", ["PvtForImageClassification", PvtForImageClassification]],
            ["vit_msn", ["ViTMSNForImageClassification", ViTMSNForImageClassification]],
            ["fastvit", ["FastViTForImageClassification", FastViTForImageClassification]],
            ["mobilevit", ["MobileViTForImageClassification", MobileViTForImageClassification]],
            ["mobilevitv2", ["MobileViTV2ForImageClassification", MobileViTV2ForImageClassification]],
            ["beit", ["BeitForImageClassification", BeitForImageClassification]],
            ["deit", ["DeiTForImageClassification", DeiTForImageClassification]],
            ["hiera", ["HieraForImageClassification", HieraForImageClassification]],
            ["convnext", ["ConvNextForImageClassification", ConvNextForImageClassification]],
            ["convnextv2", ["ConvNextV2ForImageClassification", ConvNextV2ForImageClassification]],
            ["dinov2", ["Dinov2ForImageClassification", Dinov2ForImageClassification]],
            ["dinov2_with_registers", ["Dinov2WithRegistersForImageClassification", Dinov2WithRegistersForImageClassification]],
            ["resnet", ["ResNetForImageClassification", ResNetForImageClassification]],
            ["swin", ["SwinForImageClassification", SwinForImageClassification]],
            ["segformer", ["SegformerForImageClassification", SegformerForImageClassification]],
            ["efficientnet", ["EfficientNetForImageClassification", EfficientNetForImageClassification]],
            ["mobilenet_v1", ["MobileNetV1ForImageClassification", MobileNetV1ForImageClassification]],
            ["mobilenet_v2", ["MobileNetV2ForImageClassification", MobileNetV2ForImageClassification]],
            ["mobilenet_v3", ["MobileNetV3ForImageClassification", MobileNetV3ForImageClassification]],
            ["mobilenet_v4", ["MobileNetV4ForImageClassification", MobileNetV4ForImageClassification]]
          ]);
          const MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["detr", ["DetrForObjectDetection", DetrForObjectDetection]],
            ["rt_detr", ["RTDetrForObjectDetection", RTDetrForObjectDetection]],
            ["rt_detr_v2", ["RTDetrV2ForObjectDetection", RTDetrV2ForObjectDetection]],
            ["rf_detr", ["RFDetrForObjectDetection", RFDetrForObjectDetection]],
            ["d_fine", ["DFineForObjectDetection", DFineForObjectDetection]],
            ["table-transformer", ["TableTransformerForObjectDetection", TableTransformerForObjectDetection]],
            ["yolos", ["YolosForObjectDetection", YolosForObjectDetection]]
          ]);
          const MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["owlvit", ["OwlViTForObjectDetection", OwlViTForObjectDetection]],
            ["owlv2", ["Owlv2ForObjectDetection", Owlv2ForObjectDetection]],
            ["grounding-dino", ["GroundingDinoForObjectDetection", GroundingDinoForObjectDetection]]
          ]);
          const MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            // TODO: Do not add new models here
            ["detr", ["DetrForSegmentation", DetrForSegmentation]],
            ["clipseg", ["CLIPSegForImageSegmentation", CLIPSegForImageSegmentation]]
          ]);
          const MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["segformer", ["SegformerForSemanticSegmentation", SegformerForSemanticSegmentation]],
            ["sapiens", ["SapiensForSemanticSegmentation", SapiensForSemanticSegmentation]],
            ["swin", ["SwinForSemanticSegmentation", SwinForSemanticSegmentation]],
            ["mobilenet_v1", ["MobileNetV1ForSemanticSegmentation", MobileNetV1ForSemanticSegmentation]],
            ["mobilenet_v2", ["MobileNetV2ForSemanticSegmentation", MobileNetV2ForSemanticSegmentation]],
            ["mobilenet_v3", ["MobileNetV3ForSemanticSegmentation", MobileNetV3ForSemanticSegmentation]],
            ["mobilenet_v4", ["MobileNetV4ForSemanticSegmentation", MobileNetV4ForSemanticSegmentation]]
          ]);
          const MODEL_FOR_UNIVERSAL_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["detr", ["DetrForSegmentation", DetrForSegmentation]],
            ["maskformer", ["MaskFormerForInstanceSegmentation", MaskFormerForInstanceSegmentation]]
          ]);
          const MODEL_FOR_MASK_GENERATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["sam", ["SamModel", SamModel]]
          ]);
          const MODEL_FOR_CTC_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["wav2vec2", ["Wav2Vec2ForCTC", Wav2Vec2ForCTC]],
            ["wav2vec2-bert", ["Wav2Vec2BertForCTC", Wav2Vec2BertForCTC]],
            ["unispeech", ["UniSpeechForCTC", UniSpeechForCTC]],
            ["unispeech-sat", ["UniSpeechSatForCTC", UniSpeechSatForCTC]],
            ["wavlm", ["WavLMForCTC", WavLMForCTC]],
            ["hubert", ["HubertForCTC", HubertForCTC]]
          ]);
          const MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["wav2vec2", ["Wav2Vec2ForSequenceClassification", Wav2Vec2ForSequenceClassification]],
            ["wav2vec2-bert", ["Wav2Vec2BertForSequenceClassification", Wav2Vec2BertForSequenceClassification]],
            ["unispeech", ["UniSpeechForSequenceClassification", UniSpeechForSequenceClassification]],
            ["unispeech-sat", ["UniSpeechSatForSequenceClassification", UniSpeechSatForSequenceClassification]],
            ["wavlm", ["WavLMForSequenceClassification", WavLMForSequenceClassification]],
            ["hubert", ["HubertForSequenceClassification", HubertForSequenceClassification]],
            ["audio-spectrogram-transformer", ["ASTForAudioClassification", ASTForAudioClassification]]
          ]);
          const MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["wavlm", ["WavLMForXVector", WavLMForXVector]]
          ]);
          const MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["unispeech-sat", ["UniSpeechSatForAudioFrameClassification", UniSpeechSatForAudioFrameClassification]],
            ["wavlm", ["WavLMForAudioFrameClassification", WavLMForAudioFrameClassification]],
            ["wav2vec2", ["Wav2Vec2ForAudioFrameClassification", Wav2Vec2ForAudioFrameClassification]],
            ["pyannote", ["PyAnnoteForAudioFrameClassification", PyAnnoteForAudioFrameClassification]]
          ]);
          const MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["vitmatte", ["VitMatteForImageMatting", VitMatteForImageMatting]]
          ]);
          const MODEL_FOR_TIME_SERIES_PREDICTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["patchtst", ["PatchTSTForPrediction", PatchTSTForPrediction]],
            ["patchtsmixer", ["PatchTSMixerForPrediction", PatchTSMixerForPrediction]]
          ]);
          const MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["swin2sr", ["Swin2SRForImageSuperResolution", Swin2SRForImageSuperResolution]]
          ]);
          const MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["dpt", ["DPTForDepthEstimation", DPTForDepthEstimation]],
            ["depth_anything", ["DepthAnythingForDepthEstimation", DepthAnythingForDepthEstimation]],
            ["glpn", ["GLPNForDepthEstimation", GLPNForDepthEstimation]],
            ["sapiens", ["SapiensForDepthEstimation", SapiensForDepthEstimation]],
            ["depth_pro", ["DepthProForDepthEstimation", DepthProForDepthEstimation]],
            ["metric3d", ["Metric3DForDepthEstimation", Metric3DForDepthEstimation]],
            ["metric3dv2", ["Metric3Dv2ForDepthEstimation", Metric3Dv2ForDepthEstimation]]
          ]);
          const MODEL_FOR_NORMAL_ESTIMATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["sapiens", ["SapiensForNormalEstimation", SapiensForNormalEstimation]]
          ]);
          const MODEL_FOR_POSE_ESTIMATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["vitpose", ["VitPoseForPoseEstimation", VitPoseForPoseEstimation]]
          ]);
          const MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
            ["clip", ["CLIPVisionModelWithProjection", CLIPVisionModelWithProjection]],
            ["siglip", ["SiglipVisionModel", SiglipVisionModel]],
            ["jina_clip", ["JinaCLIPVisionModel", JinaCLIPVisionModel]]
          ]);
          const MODEL_CLASS_TYPE_MAPPING = [
            // MODEL_MAPPING_NAMES:
            [MODEL_MAPPING_NAMES_ENCODER_ONLY, MODEL_TYPES.EncoderOnly],
            [MODEL_MAPPING_NAMES_ENCODER_DECODER, MODEL_TYPES.EncoderDecoder],
            [MODEL_MAPPING_NAMES_DECODER_ONLY, MODEL_TYPES.DecoderOnly],
            [MODEL_MAPPING_NAMES_AUTO_ENCODER, MODEL_TYPES.AutoEncoder],
            [MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],
            [MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],
            [MODEL_FOR_CAUSAL_LM_MAPPING_NAMES, MODEL_TYPES.DecoderOnly],
            [MODEL_FOR_MULTIMODALITY_MAPPING_NAMES, MODEL_TYPES.MultiModality],
            [MODEL_FOR_MASKED_LM_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES, MODEL_TYPES.Vision2Seq],
            [MODEL_FOR_IMAGE_TEXT_TO_TEXT_MAPPING_NAMES, MODEL_TYPES.ImageTextToText],
            [MODEL_FOR_AUDIO_TEXT_TO_TEXT_MAPPING_NAMES, MODEL_TYPES.AudioTextToText],
            [MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_UNIVERSAL_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_TIME_SERIES_PREDICTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_NORMAL_ESTIMATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_POSE_ESTIMATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_MASK_GENERATION_MAPPING_NAMES, MODEL_TYPES.MaskGeneration],
            [MODEL_FOR_CTC_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],
            [MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            [MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
            // Custom:
            [MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly]
          ];
          for (const [mappings, type] of MODEL_CLASS_TYPE_MAPPING) {
            for (const [name, model] of mappings.values()) {
              MODEL_TYPE_MAPPING.set(name, type);
              MODEL_CLASS_TO_NAME_MAPPING.set(model, name);
              MODEL_NAME_TO_CLASS_MAPPING.set(name, model);
            }
          }
          const CUSTOM_MAPPING = [
            // OVERRIDE:
            // TODO: Refactor to allow class to specify model
            ["MusicgenForConditionalGeneration", MusicgenForConditionalGeneration, MODEL_TYPES.Musicgen],
            ["Phi3VForCausalLM", Phi3VForCausalLM, MODEL_TYPES.Phi3V],
            ["CLIPTextModelWithProjection", CLIPTextModelWithProjection, MODEL_TYPES.EncoderOnly],
            ["SiglipTextModel", SiglipTextModel, MODEL_TYPES.EncoderOnly],
            ["JinaCLIPTextModel", JinaCLIPTextModel, MODEL_TYPES.EncoderOnly],
            ["ClapTextModelWithProjection", ClapTextModelWithProjection, MODEL_TYPES.EncoderOnly],
            ["ClapAudioModelWithProjection", ClapAudioModelWithProjection, MODEL_TYPES.EncoderOnly],
            ["DacEncoderModel", DacEncoderModel, MODEL_TYPES.EncoderOnly],
            ["DacDecoderModel", DacDecoderModel, MODEL_TYPES.EncoderOnly],
            ["MimiEncoderModel", MimiEncoderModel, MODEL_TYPES.EncoderOnly],
            ["MimiDecoderModel", MimiDecoderModel, MODEL_TYPES.EncoderOnly],
            ["SnacEncoderModel", SnacEncoderModel, MODEL_TYPES.EncoderOnly],
            ["SnacDecoderModel", SnacDecoderModel, MODEL_TYPES.EncoderOnly]
          ];
          for (const [name, model, type] of CUSTOM_MAPPING) {
            MODEL_TYPE_MAPPING.set(name, type);
            MODEL_CLASS_TO_NAME_MAPPING.set(model, name);
            MODEL_NAME_TO_CLASS_MAPPING.set(name, model);
          }
          const CUSTOM_ARCHITECTURES = /* @__PURE__ */ new Map([
            ["modnet", MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES],
            ["birefnet", MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES],
            ["isnet", MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES],
            ["ben", MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES]
          ]);
          for (const [name, mapping] of CUSTOM_ARCHITECTURES.entries()) {
            mapping.set(name, ["PreTrainedModel", PreTrainedModel]);
            MODEL_TYPE_MAPPING.set(name, MODEL_TYPES.EncoderOnly);
            MODEL_CLASS_TO_NAME_MAPPING.set(PreTrainedModel, name);
            MODEL_NAME_TO_CLASS_MAPPING.set(name, PreTrainedModel);
          }
          class AutoModel extends PretrainedMixin {
          }
          /** @type {Map<string, Object>[]} */
          // @ts-ignore
          __publicField(AutoModel, "MODEL_CLASS_MAPPINGS", MODEL_CLASS_TYPE_MAPPING.map((x2) => x2[0]));
          __publicField(AutoModel, "BASE_IF_FAIL", true);
          class AutoModelForSequenceClassification extends PretrainedMixin {
          }
          __publicField(AutoModelForSequenceClassification, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES]);
          class AutoModelForTokenClassification extends PretrainedMixin {
          }
          __publicField(AutoModelForTokenClassification, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES]);
          class AutoModelForSeq2SeqLM extends PretrainedMixin {
          }
          __publicField(AutoModelForSeq2SeqLM, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES]);
          class AutoModelForSpeechSeq2Seq extends PretrainedMixin {
          }
          __publicField(AutoModelForSpeechSeq2Seq, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES]);
          class AutoModelForTextToSpectrogram extends PretrainedMixin {
          }
          __publicField(AutoModelForTextToSpectrogram, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES]);
          class AutoModelForTextToWaveform extends PretrainedMixin {
          }
          __publicField(AutoModelForTextToWaveform, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES]);
          class AutoModelForCausalLM extends PretrainedMixin {
          }
          __publicField(AutoModelForCausalLM, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_CAUSAL_LM_MAPPING_NAMES]);
          class AutoModelForMaskedLM extends PretrainedMixin {
          }
          __publicField(AutoModelForMaskedLM, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_MASKED_LM_MAPPING_NAMES]);
          class AutoModelForQuestionAnswering extends PretrainedMixin {
          }
          __publicField(AutoModelForQuestionAnswering, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES]);
          class AutoModelForVision2Seq extends PretrainedMixin {
          }
          __publicField(AutoModelForVision2Seq, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES]);
          class AutoModelForImageClassification extends PretrainedMixin {
          }
          __publicField(AutoModelForImageClassification, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES]);
          class AutoModelForImageSegmentation extends PretrainedMixin {
          }
          __publicField(AutoModelForImageSegmentation, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES]);
          class AutoModelForSemanticSegmentation extends PretrainedMixin {
          }
          __publicField(AutoModelForSemanticSegmentation, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES]);
          class AutoModelForUniversalSegmentation extends PretrainedMixin {
          }
          __publicField(AutoModelForUniversalSegmentation, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_UNIVERSAL_SEGMENTATION_MAPPING_NAMES]);
          class AutoModelForObjectDetection extends PretrainedMixin {
          }
          __publicField(AutoModelForObjectDetection, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES]);
          class AutoModelForZeroShotObjectDetection extends PretrainedMixin {
          }
          __publicField(AutoModelForZeroShotObjectDetection, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES]);
          class AutoModelForMaskGeneration extends PretrainedMixin {
          }
          __publicField(AutoModelForMaskGeneration, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_MASK_GENERATION_MAPPING_NAMES]);
          class AutoModelForCTC extends PretrainedMixin {
          }
          __publicField(AutoModelForCTC, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_CTC_MAPPING_NAMES]);
          class AutoModelForAudioClassification extends PretrainedMixin {
          }
          __publicField(AutoModelForAudioClassification, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES]);
          class AutoModelForXVector extends PretrainedMixin {
          }
          __publicField(AutoModelForXVector, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES]);
          class AutoModelForAudioFrameClassification extends PretrainedMixin {
          }
          __publicField(AutoModelForAudioFrameClassification, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES]);
          class AutoModelForDocumentQuestionAnswering extends PretrainedMixin {
          }
          __publicField(AutoModelForDocumentQuestionAnswering, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES]);
          class AutoModelForImageMatting extends PretrainedMixin {
          }
          __publicField(AutoModelForImageMatting, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES]);
          class AutoModelForImageToImage extends PretrainedMixin {
          }
          __publicField(AutoModelForImageToImage, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES]);
          class AutoModelForDepthEstimation extends PretrainedMixin {
          }
          __publicField(AutoModelForDepthEstimation, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES]);
          class AutoModelForNormalEstimation extends PretrainedMixin {
          }
          __publicField(AutoModelForNormalEstimation, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_NORMAL_ESTIMATION_MAPPING_NAMES]);
          class AutoModelForPoseEstimation extends PretrainedMixin {
          }
          __publicField(AutoModelForPoseEstimation, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_POSE_ESTIMATION_MAPPING_NAMES]);
          class AutoModelForImageFeatureExtraction extends PretrainedMixin {
          }
          __publicField(AutoModelForImageFeatureExtraction, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES]);
          class AutoModelForImageTextToText extends PretrainedMixin {
          }
          __publicField(AutoModelForImageTextToText, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_IMAGE_TEXT_TO_TEXT_MAPPING_NAMES]);
          class AutoModelForAudioTextToText extends PretrainedMixin {
          }
          __publicField(AutoModelForAudioTextToText, "MODEL_CLASS_MAPPINGS", [MODEL_FOR_AUDIO_TEXT_TO_TEXT_MAPPING_NAMES]);
          class Seq2SeqLMOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.logits The output logits of the model.
             * @param {Tensor} output.past_key_values An tensor of key/value pairs that represent the previous state of the model.
             * @param {Tensor} output.encoder_outputs The output of the encoder in a sequence-to-sequence model.
             * @param {Tensor} [output.decoder_attentions] Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the self-attention heads.
             * @param {Tensor} [output.cross_attentions] Attentions weights of the decoder's cross-attention layer, after the attention softmax, used to compute the weighted average in the cross-attention heads.
             */
            constructor({ logits, past_key_values, encoder_outputs, decoder_attentions = null, cross_attentions = null }) {
              super();
              this.logits = logits;
              this.past_key_values = past_key_values;
              this.encoder_outputs = encoder_outputs;
              this.decoder_attentions = decoder_attentions;
              this.cross_attentions = cross_attentions;
            }
          }
          class SequenceClassifierOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.logits classification (or regression if config.num_labels==1) scores (before SoftMax).
             * @param {Record<string, Tensor>} [output.attentions] Object of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.
             * Attentions weights after the attention softmax, used to compute the weighted average in the self-attention heads.
             */
            constructor({ logits, ...attentions }) {
              super();
              this.logits = logits;
              const attentions_list = Object.values(attentions);
              if (attentions_list.length > 0) {
                this.attentions = attentions_list;
              }
            }
          }
          class XVectorOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.logits Classification hidden states before AMSoftmax, of shape `(batch_size, config.xvector_output_dim)`.
             * @param {Tensor} output.embeddings Utterance embeddings used for vector similarity-based retrieval, of shape `(batch_size, config.xvector_output_dim)`.
             */
            constructor({ logits, embeddings }) {
              super();
              this.logits = logits;
              this.embeddings = embeddings;
            }
          }
          class TokenClassifierOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.logits Classification scores (before SoftMax).
             */
            constructor({ logits }) {
              super();
              this.logits = logits;
            }
          }
          class MaskedLMOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).
             */
            constructor({ logits }) {
              super();
              this.logits = logits;
            }
          }
          class QuestionAnsweringModelOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.start_logits Span-start scores (before SoftMax).
             * @param {Tensor} output.end_logits Span-end scores (before SoftMax).
             */
            constructor({ start_logits, end_logits }) {
              super();
              this.start_logits = start_logits;
              this.end_logits = end_logits;
            }
          }
          class CausalLMOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before softmax).
             */
            constructor({ logits }) {
              super();
              this.logits = logits;
            }
          }
          class CausalLMOutputWithPast extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before softmax).
             * @param {Tensor} output.past_key_values Contains pre-computed hidden-states (key and values in the self-attention blocks)
             * that can be used (see `past_key_values` input) to speed up sequential decoding.
             */
            constructor({ logits, past_key_values }) {
              super();
              this.logits = logits;
              this.past_key_values = past_key_values;
            }
          }
          class ImageMattingOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.alphas Estimated alpha values, of shape `(batch_size, num_channels, height, width)`.
             */
            constructor({ alphas }) {
              super();
              this.alphas = alphas;
            }
          }
          class VitsModelOutput extends ModelOutput {
            /**
             * @param {Object} output The output of the model.
             * @param {Tensor} output.waveform The final audio waveform predicted by the model, of shape `(batch_size, sequence_length)`.
             * @param {Tensor} output.spectrogram The log-mel spectrogram predicted at the output of the flow model.
             * This spectrogram is passed to the Hi-Fi GAN decoder model to obtain the final audio waveform.
             */
            constructor({ waveform, spectrogram }) {
              super();
              this.waveform = waveform;
              this.spectrogram = spectrogram;
            }
          }
        }
      ),
      /***/
      "./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js": (
        /*!******************************************************************************************************!*\
          !*** ./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js ***!
          \******************************************************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            ASTFeatureExtractor: () => (
              /* binding */
              ASTFeatureExtractor
            )
            /* harmony export */
          });
          var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/feature_extraction_utils.js */
            "./src/base/feature_extraction_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../utils/audio.js */
            "./src/utils/audio.js"
          );
          class ASTFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {
            constructor(config) {
              super(config);
              const sampling_rate = this.config.sampling_rate;
              const mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.mel_filter_bank)(
                257,
                // num_frequency_bins
                this.config.num_mel_bins,
                // num_mel_filters
                20,
                // min_frequency
                Math.floor(sampling_rate / 2),
                // max_frequency
                sampling_rate,
                // sampling_rate
                null,
                // norm
                "kaldi",
                // mel_scale
                true
                // triangularize_in_mel_space
              );
              this.mel_filters = mel_filters;
              this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.window_function)(400, "hann", {
                periodic: false
              });
              this.mean = this.config.mean;
              this.std = this.config.std;
            }
            /**
             * Computes the log-Mel spectrogram of the provided audio waveform.
             * @param {Float32Array|Float64Array} waveform The audio waveform to process.
             * @param {number} max_length The maximum number of frames to return.
             * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
             */
            async _extract_fbank_features(waveform, max_length) {
              return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.spectrogram)(
                waveform,
                this.window,
                // window
                400,
                // frame_length
                160,
                // hop_length
                {
                  fft_length: 512,
                  power: 2,
                  center: false,
                  preemphasis: 0.97,
                  mel_filters: this.mel_filters,
                  log_mel: "log",
                  mel_floor: 1192092955078125e-22,
                  remove_dc_offset: true,
                  // Custom
                  max_num_frames: max_length,
                  transpose: true
                }
              );
            }
            /**
             * Asynchronously extracts features from a given audio using the provided configuration.
             * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
             * @returns {Promise<{ input_values: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.
             */
            async _call(audio) {
              (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, "ASTFeatureExtractor");
              const features = await this._extract_fbank_features(audio, this.config.max_length);
              if (this.config.do_normalize) {
                const denom = this.std * 2;
                const features_data = features.data;
                for (let i = 0; i < features_data.length; ++i) {
                  features_data[i] = (features_data[i] - this.mean) / denom;
                }
              }
              return {
                input_values: features.unsqueeze_(0)
              };
            }
          }
        }
      ),
      /***/
      "./src/models/auto/feature_extraction_auto.js": (
        /*!****************************************************!*\
          !*** ./src/models/auto/feature_extraction_auto.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            AutoFeatureExtractor: () => (
              /* binding */
              AutoFeatureExtractor
            )
            /* harmony export */
          });
          var _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../utils/constants.js */
            "./src/utils/constants.js"
          );
          var _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/hub.js */
            "./src/utils/hub.js"
          );
          var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../base/feature_extraction_utils.js */
            "./src/base/feature_extraction_utils.js"
          );
          var _feature_extractors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../feature_extractors.js */
            "./src/models/feature_extractors.js"
          );
          class AutoFeatureExtractor {
            /** @type {typeof FeatureExtractor.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              const preprocessorConfig = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__.getModelJSON)(pretrained_model_name_or_path, _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.FEATURE_EXTRACTOR_NAME, true, options);
              const key = preprocessorConfig.feature_extractor_type;
              const feature_extractor_class = _feature_extractors_js__WEBPACK_IMPORTED_MODULE_3__[key];
              if (!feature_extractor_class) {
                throw new Error(`Unknown feature_extractor_type: '${key}'. Please report this at ${_utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.GITHUB_ISSUE_URL}.`);
              }
              return new feature_extractor_class(preprocessorConfig);
            }
          }
        }
      ),
      /***/
      "./src/models/auto/image_processing_auto.js": (
        /*!**************************************************!*\
          !*** ./src/models/auto/image_processing_auto.js ***!
          \**************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            AutoImageProcessor: () => (
              /* binding */
              AutoImageProcessor
            )
            /* harmony export */
          });
          var _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../utils/constants.js */
            "./src/utils/constants.js"
          );
          var _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/hub.js */
            "./src/utils/hub.js"
          );
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          var _image_processors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../image_processors.js */
            "./src/models/image_processors.js"
          );
          class AutoImageProcessor {
            /** @type {typeof ImageProcessor.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              const preprocessorConfig = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__.getModelJSON)(pretrained_model_name_or_path, _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.IMAGE_PROCESSOR_NAME, true, options);
              const key = preprocessorConfig.image_processor_type ?? preprocessorConfig.feature_extractor_type;
              let image_processor_class = _image_processors_js__WEBPACK_IMPORTED_MODULE_3__[key];
              if (!image_processor_class) {
                if (key !== void 0) {
                  console.warn(`Image processor type '${key}' not found, assuming base ImageProcessor. Please report this at ${_utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.GITHUB_ISSUE_URL}.`);
                }
                image_processor_class = _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_2__.ImageProcessor;
              }
              return new image_processor_class(preprocessorConfig);
            }
          }
        }
      ),
      /***/
      "./src/models/auto/processing_auto.js": (
        /*!********************************************!*\
          !*** ./src/models/auto/processing_auto.js ***!
          \********************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            AutoProcessor: () => (
              /* binding */
              AutoProcessor
            )
            /* harmony export */
          });
          var _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../utils/constants.js */
            "./src/utils/constants.js"
          );
          var _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/hub.js */
            "./src/utils/hub.js"
          );
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _processors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../processors.js */
            "./src/models/processors.js"
          );
          var _image_processors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
            /*! ../image_processors.js */
            "./src/models/image_processors.js"
          );
          var _feature_extractors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
            /*! ../feature_extractors.js */
            "./src/models/feature_extractors.js"
          );
          class AutoProcessor {
            /** @type {typeof Processor.from_pretrained} */
            static async from_pretrained(pretrained_model_name_or_path, options = {}) {
              const preprocessorConfig = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__.getModelJSON)(pretrained_model_name_or_path, _utils_constants_js__WEBPACK_IMPORTED_MODULE_0__.IMAGE_PROCESSOR_NAME, true, options);
              const { image_processor_type, feature_extractor_type, processor_class } = preprocessorConfig;
              if (processor_class && _processors_js__WEBPACK_IMPORTED_MODULE_3__[processor_class]) {
                return _processors_js__WEBPACK_IMPORTED_MODULE_3__[processor_class].from_pretrained(pretrained_model_name_or_path, options);
              }
              if (!image_processor_type && !feature_extractor_type) {
                throw new Error("No `image_processor_type` or `feature_extractor_type` found in the config.");
              }
              const components = {};
              if (image_processor_type) {
                const image_processor_class = _image_processors_js__WEBPACK_IMPORTED_MODULE_4__[image_processor_type];
                if (!image_processor_class) {
                  throw new Error(`Unknown image_processor_type: '${image_processor_type}'.`);
                }
                components.image_processor = new image_processor_class(preprocessorConfig);
              }
              if (feature_extractor_type) {
                const image_processor_class = _image_processors_js__WEBPACK_IMPORTED_MODULE_4__[feature_extractor_type];
                if (image_processor_class) {
                  components.image_processor = new image_processor_class(preprocessorConfig);
                } else {
                  const feature_extractor_class = _feature_extractors_js__WEBPACK_IMPORTED_MODULE_5__[feature_extractor_type];
                  if (!feature_extractor_class) {
                    throw new Error(`Unknown feature_extractor_type: '${feature_extractor_type}'.`);
                  }
                  components.feature_extractor = new feature_extractor_class(preprocessorConfig);
                }
              }
              const config = {};
              return new _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__.Processor(config, components);
            }
          }
        }
      ),
      /***/
      "./src/models/beit/image_processing_beit.js": (
        /*!**************************************************!*\
          !*** ./src/models/beit/image_processing_beit.js ***!
          \**************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            BeitFeatureExtractor: () => (
              /* binding */
              BeitFeatureExtractor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class BeitFeatureExtractor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/bit/image_processing_bit.js": (
        /*!************************************************!*\
          !*** ./src/models/bit/image_processing_bit.js ***!
          \************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            BitImageProcessor: () => (
              /* binding */
              BitImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class BitImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/chinese_clip/image_processing_chinese_clip.js": (
        /*!******************************************************************!*\
          !*** ./src/models/chinese_clip/image_processing_chinese_clip.js ***!
          \******************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            ChineseCLIPFeatureExtractor: () => (
              /* binding */
              ChineseCLIPFeatureExtractor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class ChineseCLIPFeatureExtractor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/clap/feature_extraction_clap.js": (
        /*!****************************************************!*\
          !*** ./src/models/clap/feature_extraction_clap.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            ClapFeatureExtractor: () => (
              /* binding */
              ClapFeatureExtractor
            )
            /* harmony export */
          });
          var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/feature_extraction_utils.js */
            "./src/base/feature_extraction_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../utils/audio.js */
            "./src/utils/audio.js"
          );
          class ClapFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {
            constructor(config) {
              super(config);
              this.mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.mel_filter_bank)(
                this.config.nb_frequency_bins,
                // num_frequency_bins
                this.config.feature_size,
                // num_mel_filters
                this.config.frequency_min,
                // min_frequency
                this.config.frequency_max,
                // max_frequency
                this.config.sampling_rate,
                // sampling_rate
                null,
                // norm
                "htk"
                // mel_scale
              );
              this.mel_filters_slaney = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.mel_filter_bank)(
                this.config.nb_frequency_bins,
                // num_frequency_bins
                this.config.feature_size,
                // num_mel_filters
                this.config.frequency_min,
                // min_frequency
                this.config.frequency_max,
                // max_frequency
                this.config.sampling_rate,
                // sampling_rate
                "slaney",
                // norm
                "slaney"
                // mel_scale
              );
              this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.window_function)(this.config.fft_window_size, "hann");
            }
            /**
             * Extracts the mel spectrogram and prepares it for the mode based on the `truncation` and `padding` arguments.
             * 
             * Four different path are possible:
             *   - `truncation="fusion"` and the length of the waveform is greater than the max length: the mel spectrogram
             *     will be computed on the entire audio. 3 random crops and a dowsampled version of the full mel spectrogram
             *     are then stacked together. They will later be used for `feature_fusion`.
             *   - `truncation="rand_trunc"` and the length of the waveform is smaller than the max length: the audio is
             *     padded based on `padding`.
             *   - `truncation="fusion"` and the length of the waveform is smaller than the max length: the audio is padded
             *     based on `padding`, and is repeated `4` times.
             *   - `truncation="rand_trunc"` and the length of the waveform is greater than the max length: the mel
             *     spectrogram will be computed on a random crop of the waveform.
             * 
             * @param {Float32Array|Float64Array} waveform The input waveform.
             * @param {number} max_length The maximum length of the waveform.
             * @param {string} truncation The truncation strategy to use.
             * @param {string} padding The padding strategy to use.
             * @returns {Promise<Tensor>} An object containing the mel spectrogram data as a Float32Array, its dimensions as an array of numbers, and a boolean indicating whether the waveform was longer than the max length.
             * @private
             */
            async _get_input_mel(waveform, max_length, truncation, padding) {
              let input_mel;
              let longer = false;
              const diff = waveform.length - max_length;
              if (diff > 0) {
                if (truncation === "rand_trunc") {
                  longer = true;
                  const idx = Math.floor(Math.random() * (diff + 1));
                  waveform = waveform.subarray(idx, idx + max_length);
                  input_mel = await this._extract_fbank_features(waveform, this.mel_filters_slaney, this.config.nb_max_samples);
                } else {
                  throw new Error(`Truncation strategy "${truncation}" not implemented`);
                }
              } else {
                if (diff < 0) {
                  let padded = new Float64Array(max_length);
                  padded.set(waveform);
                  if (padding === "repeat") {
                    for (let i = waveform.length; i < max_length; i += waveform.length) {
                      padded.set(waveform.subarray(0, Math.min(waveform.length, max_length - i)), i);
                    }
                  } else if (padding === "repeatpad") {
                    for (let i = waveform.length; i < -diff; i += waveform.length) {
                      padded.set(waveform, i);
                    }
                  }
                  waveform = padded;
                }
                if (truncation === "fusion") {
                  throw new Error(`Truncation strategy "${truncation}" not implemented`);
                }
                input_mel = await this._extract_fbank_features(waveform, this.mel_filters_slaney, this.config.nb_max_samples);
              }
              return input_mel.unsqueeze_(0);
            }
            /**
             * Compute the log-mel spectrogram of the provided `waveform` using the Hann window.
             * In CLAP, two different filter banks are used depending on the truncation pattern:
             *  - `self.mel_filters`: they correspond to the default parameters of `torchaudio` which can be obtained from
             *    calling `torchaudio.transforms.MelSpectrogram().mel_scale.fb`. These filters are used when `truncation`
             *    is set to `"fusion"`.
             *  - `self.mel_filteres_slaney` : they correspond to the default parameters of `librosa` which used
             *    `librosa.filters.mel` when computing the mel spectrogram. These filters were only used in the original
             *    implementation when the truncation mode is not `"fusion"`.
             * 
             * @param {Float32Array|Float64Array} waveform The audio waveform to process.
             * @param {number[][]} mel_filters The mel filters to use.
             * @param {number} [max_length=null] The maximum number of frames to return.
             * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
             */
            async _extract_fbank_features(waveform, mel_filters, max_length = null) {
              return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.spectrogram)(
                waveform,
                this.window,
                // window
                this.config.fft_window_size,
                // frame_length
                this.config.hop_length,
                // hop_length
                {
                  power: 2,
                  mel_filters,
                  log_mel: "dB",
                  // Custom
                  max_num_frames: max_length,
                  do_pad: false,
                  transpose: true
                }
              );
            }
            /**
             * Asynchronously extracts features from a given audio using the provided configuration.
             * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
             * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.
             */
            async _call(audio, {
              max_length = null
            } = {}) {
              (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, "ClapFeatureExtractor");
              const padded_inputs = await this._get_input_mel(
                audio,
                max_length ?? this.config.nb_max_samples,
                this.config.truncation,
                this.config.padding
              );
              return {
                input_features: padded_inputs.unsqueeze_(0)
              };
            }
          }
        }
      ),
      /***/
      "./src/models/clip/image_processing_clip.js": (
        /*!**************************************************!*\
          !*** ./src/models/clip/image_processing_clip.js ***!
          \**************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            CLIPFeatureExtractor: () => (
              /* binding */
              CLIPFeatureExtractor
            ),
            /* harmony export */
            CLIPImageProcessor: () => (
              /* binding */
              CLIPImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class CLIPImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
          class CLIPFeatureExtractor extends CLIPImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/convnext/image_processing_convnext.js": (
        /*!**********************************************************!*\
          !*** ./src/models/convnext/image_processing_convnext.js ***!
          \**********************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            ConvNextFeatureExtractor: () => (
              /* binding */
              ConvNextFeatureExtractor
            ),
            /* harmony export */
            ConvNextImageProcessor: () => (
              /* binding */
              ConvNextImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class ConvNextImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            constructor(config) {
              super(config);
              this.crop_pct = this.config.crop_pct ?? 224 / 256;
            }
            async resize(image) {
              const shortest_edge = this.size?.shortest_edge;
              if (shortest_edge === void 0) {
                throw new Error(`Size dictionary must contain 'shortest_edge' key.`);
              }
              if (shortest_edge < 384) {
                const resize_shortest_edge = Math.floor(shortest_edge / this.crop_pct);
                const [newWidth, newHeight] = this.get_resize_output_image_size(image, {
                  shortest_edge: resize_shortest_edge
                });
                image = await image.resize(newWidth, newHeight, {
                  resample: this.resample
                });
                image = await image.center_crop(shortest_edge, shortest_edge);
              } else {
                image = await image.resize(shortest_edge, shortest_edge, {
                  resample: this.resample
                });
              }
              return image;
            }
          }
          class ConvNextFeatureExtractor extends ConvNextImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/dac/feature_extraction_dac.js": (
        /*!**************************************************!*\
          !*** ./src/models/dac/feature_extraction_dac.js ***!
          \**************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            DacFeatureExtractor: () => (
              /* binding */
              DacFeatureExtractor
            )
            /* harmony export */
          });
          var _encodec_feature_extraction_encodec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../encodec/feature_extraction_encodec.js */
            "./src/models/encodec/feature_extraction_encodec.js"
          );
          class DacFeatureExtractor extends _encodec_feature_extraction_encodec_js__WEBPACK_IMPORTED_MODULE_0__.EncodecFeatureExtractor {
          }
        }
      ),
      /***/
      "./src/models/deit/image_processing_deit.js": (
        /*!**************************************************!*\
          !*** ./src/models/deit/image_processing_deit.js ***!
          \**************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            DeiTFeatureExtractor: () => (
              /* binding */
              DeiTFeatureExtractor
            ),
            /* harmony export */
            DeiTImageProcessor: () => (
              /* binding */
              DeiTImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class DeiTImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
          class DeiTFeatureExtractor extends DeiTImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/detr/image_processing_detr.js": (
        /*!**************************************************!*\
          !*** ./src/models/detr/image_processing_detr.js ***!
          \**************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            DetrFeatureExtractor: () => (
              /* binding */
              DetrFeatureExtractor
            ),
            /* harmony export */
            DetrImageProcessor: () => (
              /* binding */
              DetrImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          class DetrImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            /**
             * Calls the feature extraction process on an array of images, preprocesses
             * each image, and concatenates the resulting features into a single Tensor.
             * @param {import('../../utils/image.js').RawImage[]} images The image(s) to extract features from.
             * @returns {Promise<DetrFeatureExtractorResult>} An object containing the concatenated pixel values of the preprocessed images.
             */
            async _call(images) {
              const result = await super._call(images);
              const maskSize = [result.pixel_values.dims[0], 64, 64];
              const pixel_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.full)(maskSize, 1n);
              return { ...result, pixel_mask };
            }
            /** @type {typeof post_process_object_detection} */
            post_process_object_detection(...args) {
              return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_object_detection)(...args);
            }
            /** @type {typeof post_process_panoptic_segmentation} */
            post_process_panoptic_segmentation(...args) {
              return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_panoptic_segmentation)(...args);
            }
            /** @type {typeof post_process_instance_segmentation} */
            post_process_instance_segmentation(...args) {
              return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_instance_segmentation)(...args);
            }
          }
          class DetrFeatureExtractor extends DetrImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/donut/image_processing_donut.js": (
        /*!****************************************************!*\
          !*** ./src/models/donut/image_processing_donut.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            DonutFeatureExtractor: () => (
              /* binding */
              DonutFeatureExtractor
            ),
            /* harmony export */
            DonutImageProcessor: () => (
              /* binding */
              DonutImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class DonutImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            pad_image(pixelData, imgDims, padSize, options = {}) {
              const [imageHeight, imageWidth, imageChannels] = imgDims;
              let image_mean = this.image_mean;
              if (!Array.isArray(this.image_mean)) {
                image_mean = new Array(imageChannels).fill(image_mean);
              }
              let image_std = this.image_std;
              if (!Array.isArray(image_std)) {
                image_std = new Array(imageChannels).fill(image_mean);
              }
              const constant_values = image_mean.map((x2, i) => -x2 / image_std[i]);
              return super.pad_image(pixelData, imgDims, padSize, {
                center: true,
                // Since normalization is done after padding, we need to use certain constant values to ensure the same behaviour is observed.
                // For more information, see https://github.com/huggingface/transformers/blob/main/src/transformers/models/donut/image_processing_donut.py#L433-L451
                constant_values,
                ...options
              });
            }
          }
          class DonutFeatureExtractor extends DonutImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/dpt/image_processing_dpt.js": (
        /*!************************************************!*\
          !*** ./src/models/dpt/image_processing_dpt.js ***!
          \************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            DPTFeatureExtractor: () => (
              /* binding */
              DPTFeatureExtractor
            ),
            /* harmony export */
            DPTImageProcessor: () => (
              /* binding */
              DPTImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class DPTImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
          class DPTFeatureExtractor extends DPTImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/efficientnet/image_processing_efficientnet.js": (
        /*!******************************************************************!*\
          !*** ./src/models/efficientnet/image_processing_efficientnet.js ***!
          \******************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            EfficientNetImageProcessor: () => (
              /* binding */
              EfficientNetImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class EfficientNetImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            constructor(config) {
              super(config);
              this.include_top = this.config.include_top ?? true;
              if (this.include_top) {
                this.image_std = this.image_std.map((x2) => x2 * x2);
              }
            }
          }
        }
      ),
      /***/
      "./src/models/encodec/feature_extraction_encodec.js": (
        /*!**********************************************************!*\
          !*** ./src/models/encodec/feature_extraction_encodec.js ***!
          \**********************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            EncodecFeatureExtractor: () => (
              /* binding */
              EncodecFeatureExtractor
            )
            /* harmony export */
          });
          var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/feature_extraction_utils.js */
            "./src/base/feature_extraction_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          class EncodecFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {
            /**
             * Asynchronously extracts input values from a given audio using the provided configuration.
             * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
             * @returns {Promise<{ input_values: Tensor; }>} The extracted input values.
             */
            async _call(audio) {
              (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, "EncodecFeatureExtractor");
              if (audio instanceof Float64Array) {
                audio = new Float32Array(audio);
              }
              const num_channels = this.config.feature_size;
              if (audio.length % num_channels !== 0) {
                throw new Error(`The length of the audio data must be a multiple of the number of channels (${num_channels}).`);
              }
              const shape = [
                1,
                /* batch_size */
                num_channels,
                /* num_channels */
                audio.length / num_channels
                /* num_samples */
              ];
              return {
                input_values: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor("float32", audio, shape)
              };
            }
          }
        }
      ),
      /***/
      "./src/models/feature_extractors.js": (
        /*!******************************************!*\
          !*** ./src/models/feature_extractors.js ***!
          \******************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            ASTFeatureExtractor: () => (
              /* reexport safe */
              _audio_spectrogram_transformer_feature_extraction_audio_spectrogram_transformer_js__WEBPACK_IMPORTED_MODULE_0__.ASTFeatureExtractor
            ),
            /* harmony export */
            ClapFeatureExtractor: () => (
              /* reexport safe */
              _clap_feature_extraction_clap_js__WEBPACK_IMPORTED_MODULE_2__.ClapFeatureExtractor
            ),
            /* harmony export */
            DacFeatureExtractor: () => (
              /* reexport safe */
              _dac_feature_extraction_dac_js__WEBPACK_IMPORTED_MODULE_3__.DacFeatureExtractor
            ),
            /* harmony export */
            EncodecFeatureExtractor: () => (
              /* reexport safe */
              _encodec_feature_extraction_encodec_js__WEBPACK_IMPORTED_MODULE_1__.EncodecFeatureExtractor
            ),
            /* harmony export */
            ImageFeatureExtractor: () => (
              /* reexport safe */
              _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_12__.ImageProcessor
            ),
            /* harmony export */
            MoonshineFeatureExtractor: () => (
              /* reexport safe */
              _moonshine_feature_extraction_moonshine_js__WEBPACK_IMPORTED_MODULE_4__.MoonshineFeatureExtractor
            ),
            /* harmony export */
            PyAnnoteFeatureExtractor: () => (
              /* reexport safe */
              _pyannote_feature_extraction_pyannote_js__WEBPACK_IMPORTED_MODULE_5__.PyAnnoteFeatureExtractor
            ),
            /* harmony export */
            SeamlessM4TFeatureExtractor: () => (
              /* reexport safe */
              _seamless_m4t_feature_extraction_seamless_m4t_js__WEBPACK_IMPORTED_MODULE_6__.SeamlessM4TFeatureExtractor
            ),
            /* harmony export */
            SnacFeatureExtractor: () => (
              /* reexport safe */
              _snac_feature_extraction_snac_js__WEBPACK_IMPORTED_MODULE_7__.SnacFeatureExtractor
            ),
            /* harmony export */
            SpeechT5FeatureExtractor: () => (
              /* reexport safe */
              _speecht5_feature_extraction_speecht5_js__WEBPACK_IMPORTED_MODULE_8__.SpeechT5FeatureExtractor
            ),
            /* harmony export */
            Wav2Vec2FeatureExtractor: () => (
              /* reexport safe */
              _wav2vec2_feature_extraction_wav2vec2_js__WEBPACK_IMPORTED_MODULE_9__.Wav2Vec2FeatureExtractor
            ),
            /* harmony export */
            WeSpeakerFeatureExtractor: () => (
              /* reexport safe */
              _wespeaker_feature_extraction_wespeaker_js__WEBPACK_IMPORTED_MODULE_10__.WeSpeakerFeatureExtractor
            ),
            /* harmony export */
            WhisperFeatureExtractor: () => (
              /* reexport safe */
              _whisper_feature_extraction_whisper_js__WEBPACK_IMPORTED_MODULE_11__.WhisperFeatureExtractor
            )
            /* harmony export */
          });
          var _audio_spectrogram_transformer_feature_extraction_audio_spectrogram_transformer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ./audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js */
            "./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js"
          );
          var _encodec_feature_extraction_encodec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ./encodec/feature_extraction_encodec.js */
            "./src/models/encodec/feature_extraction_encodec.js"
          );
          var _clap_feature_extraction_clap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ./clap/feature_extraction_clap.js */
            "./src/models/clap/feature_extraction_clap.js"
          );
          var _dac_feature_extraction_dac_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ./dac/feature_extraction_dac.js */
            "./src/models/dac/feature_extraction_dac.js"
          );
          var _moonshine_feature_extraction_moonshine_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
            /*! ./moonshine/feature_extraction_moonshine.js */
            "./src/models/moonshine/feature_extraction_moonshine.js"
          );
          var _pyannote_feature_extraction_pyannote_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
            /*! ./pyannote/feature_extraction_pyannote.js */
            "./src/models/pyannote/feature_extraction_pyannote.js"
          );
          var _seamless_m4t_feature_extraction_seamless_m4t_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
            /*! ./seamless_m4t/feature_extraction_seamless_m4t.js */
            "./src/models/seamless_m4t/feature_extraction_seamless_m4t.js"
          );
          var _snac_feature_extraction_snac_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
            /*! ./snac/feature_extraction_snac.js */
            "./src/models/snac/feature_extraction_snac.js"
          );
          var _speecht5_feature_extraction_speecht5_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
            /*! ./speecht5/feature_extraction_speecht5.js */
            "./src/models/speecht5/feature_extraction_speecht5.js"
          );
          var _wav2vec2_feature_extraction_wav2vec2_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
            /*! ./wav2vec2/feature_extraction_wav2vec2.js */
            "./src/models/wav2vec2/feature_extraction_wav2vec2.js"
          );
          var _wespeaker_feature_extraction_wespeaker_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
            /*! ./wespeaker/feature_extraction_wespeaker.js */
            "./src/models/wespeaker/feature_extraction_wespeaker.js"
          );
          var _whisper_feature_extraction_whisper_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(
            /*! ./whisper/feature_extraction_whisper.js */
            "./src/models/whisper/feature_extraction_whisper.js"
          );
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
            /*! ../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
        }
      ),
      /***/
      "./src/models/florence2/processing_florence2.js": (
        /*!******************************************************!*\
          !*** ./src/models/florence2/processing_florence2.js ***!
          \******************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Florence2Processor: () => (
              /* binding */
              Florence2Processor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/image_processing_auto.js */
            "./src/models/auto/image_processing_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          class Florence2Processor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
            constructor(config, components) {
              super(config, components);
              const {
                // @ts-expect-error TS2339
                tasks_answer_post_processing_type,
                // @ts-expect-error TS2339
                task_prompts_without_inputs,
                // @ts-expect-error TS2339
                task_prompts_with_input
              } = this.image_processor.config;
              this.tasks_answer_post_processing_type = new Map(Object.entries(tasks_answer_post_processing_type ?? {}));
              this.task_prompts_without_inputs = new Map(Object.entries(task_prompts_without_inputs ?? {}));
              this.task_prompts_with_input = new Map(Object.entries(task_prompts_with_input ?? {}));
              this.regexes = {
                quad_boxes: /(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,
                bboxes: /([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm
              };
              this.size_per_bin = 1e3;
            }
            /**
             * Helper function to construct prompts from input texts
             * @param {string|string[]} text
             * @returns {string[]}
             */
            construct_prompts(text) {
              if (typeof text === "string") {
                text = [text];
              }
              const prompts = [];
              for (const t of text) {
                if (this.task_prompts_without_inputs.has(t)) {
                  prompts.push(this.task_prompts_without_inputs.get(t));
                } else {
                  for (const [task, prompt] of this.task_prompts_with_input) {
                    if (t.includes(task)) {
                      prompts.push(prompt.replaceAll("{input}", t).replaceAll(task, ""));
                      break;
                    }
                  }
                  if (prompts.length !== text.length) {
                    prompts.push(t);
                  }
                }
              }
              return prompts;
            }
            /**
             * Post-process the output of the model to each of the task outputs.
             * @param {string} text The text to post-process.
             * @param {string} task The task to post-process the text for.
             * @param {[number, number]} image_size The size of the image. height x width.
             */
            post_process_generation(text, task, image_size) {
              const task_answer_post_processing_type = this.tasks_answer_post_processing_type.get(task) ?? "pure_text";
              text = text.replaceAll("<s>", "").replaceAll("</s>", "");
              let final_answer;
              switch (task_answer_post_processing_type) {
                case "pure_text":
                  final_answer = text;
                  break;
                case "description_with_bboxes":
                case "bboxes":
                case "phrase_grounding":
                case "ocr":
                  const key = task_answer_post_processing_type === "ocr" ? "quad_boxes" : "bboxes";
                  const matches = text.matchAll(this.regexes[key]);
                  const labels = [];
                  const items = [];
                  for (const [_2, label, ...locations] of matches) {
                    labels.push(label ? label.trim() : labels.at(-1) ?? "");
                    items.push(
                      locations.map((x2, i) => (
                        // NOTE: Add 0.5 to use the center position of the bin as the coordinate.
                        (Number(x2) + 0.5) / this.size_per_bin * image_size[i % 2]
                      ))
                    );
                  }
                  final_answer = { labels, [key]: items };
                  break;
                default:
                  throw new Error(`Task "${task}" (of type "${task_answer_post_processing_type}") not yet implemented.`);
              }
              return { [task]: final_answer };
            }
            // NOTE: images and text are switched from the python version
            // `images` is required, `text` is optional
            async _call(images, text = null, kwargs = {}) {
              if (!images && !text) {
                throw new Error("Either text or images must be provided");
              }
              const image_inputs = await this.image_processor(images, kwargs);
              const text_inputs = text ? this.tokenizer(text, kwargs) : {};
              return {
                ...image_inputs,
                ...text_inputs
              };
            }
          }
          __publicField(Florence2Processor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);
          __publicField(Florence2Processor, "image_processor_class", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);
        }
      ),
      /***/
      "./src/models/glpn/image_processing_glpn.js": (
        /*!**************************************************!*\
          !*** ./src/models/glpn/image_processing_glpn.js ***!
          \**************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            GLPNFeatureExtractor: () => (
              /* binding */
              GLPNFeatureExtractor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class GLPNFeatureExtractor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/grounding_dino/image_processing_grounding_dino.js": (
        /*!**********************************************************************!*\
          !*** ./src/models/grounding_dino/image_processing_grounding_dino.js ***!
          \**********************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            GroundingDinoImageProcessor: () => (
              /* binding */
              GroundingDinoImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          class GroundingDinoImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            /**
             * Calls the feature extraction process on an array of images, preprocesses
             * each image, and concatenates the resulting features into a single Tensor.
             * @param {import('../../utils/image.js').RawImage[]} images The image(s) to extract features from.
             * @returns {Promise<GroundingDinoFeatureExtractorResult>} An object containing the concatenated pixel values of the preprocessed images.
             */
            async _call(images) {
              const result = await super._call(images);
              const dims = result.pixel_values.dims;
              const pixel_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.ones)([dims[0], dims[2], dims[3]]);
              return { ...result, pixel_mask };
            }
          }
        }
      ),
      /***/
      "./src/models/grounding_dino/processing_grounding_dino.js": (
        /*!****************************************************************!*\
          !*** ./src/models/grounding_dino/processing_grounding_dino.js ***!
          \****************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            GroundingDinoProcessor: () => (
              /* binding */
              GroundingDinoProcessor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/image_processing_auto.js */
            "./src/models/auto/image_processing_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          function get_phrases_from_posmap(posmaps, input_ids) {
            const left_idx = 0;
            const right_idx = posmaps.dims.at(-1) - 1;
            const posmaps_list = posmaps.tolist();
            posmaps_list.fill(false, 0, left_idx + 1);
            posmaps_list.fill(false, right_idx);
            const input_ids_list = input_ids.tolist();
            return posmaps_list.map((val, idx) => val ? idx : null).filter((idx) => idx !== null).map((i) => input_ids_list[i]);
          }
          class GroundingDinoProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
            /**
             * @typedef {import('../../utils/image.js').RawImage} RawImage
             */
            /**
             * 
             * @param {RawImage|RawImage[]|RawImage[][]} images  
             * @param {string|string[]} text 
             * @returns {Promise<any>}
             */
            async _call(images, text, options = {}) {
              const image_inputs = images ? await this.image_processor(images, options) : {};
              const text_inputs = text ? this.tokenizer(text, options) : {};
              return {
                ...text_inputs,
                ...image_inputs
              };
            }
            post_process_grounded_object_detection(outputs, input_ids, {
              box_threshold = 0.25,
              text_threshold = 0.25,
              target_sizes = null
            } = {}) {
              const { logits, pred_boxes } = outputs;
              const batch_size = logits.dims[0];
              if (target_sizes !== null && target_sizes.length !== batch_size) {
                throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
              }
              const num_queries = logits.dims.at(1);
              const probs = logits.sigmoid();
              const scores = probs.max(-1).tolist();
              const boxes = pred_boxes.tolist().map((batch) => batch.map((box) => (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_3__.center_to_corners_format)(box)));
              const results = [];
              for (let i = 0; i < batch_size; ++i) {
                const target_size = target_sizes !== null ? target_sizes[i] : null;
                if (target_size !== null) {
                  boxes[i] = boxes[i].map((box) => box.map((x2, j) => x2 * target_size[(j + 1) % 2]));
                }
                const batch_scores = scores[i];
                const final_scores = [];
                const final_phrases = [];
                const final_boxes = [];
                for (let j = 0; j < num_queries; ++j) {
                  const score = batch_scores[j];
                  if (score <= box_threshold) {
                    continue;
                  }
                  const box = boxes[i][j];
                  const prob = probs[i][j];
                  final_scores.push(score);
                  final_boxes.push(box);
                  const phrases = get_phrases_from_posmap(prob.gt(text_threshold), input_ids[i]);
                  final_phrases.push(phrases);
                }
                results.push({ scores: final_scores, boxes: final_boxes, labels: this.batch_decode(final_phrases) });
              }
              return results;
            }
          }
          __publicField(GroundingDinoProcessor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);
          __publicField(GroundingDinoProcessor, "image_processor_class", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);
        }
      ),
      /***/
      "./src/models/idefics3/image_processing_idefics3.js": (
        /*!**********************************************************!*\
          !*** ./src/models/idefics3/image_processing_idefics3.js ***!
          \**********************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Idefics3ImageProcessor: () => (
              /* binding */
              Idefics3ImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          class Idefics3ImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            constructor(config) {
              super(config);
              this.do_image_splitting = config.do_image_splitting ?? true;
              this.max_image_size = config.max_image_size;
            }
            /**
             * @typedef {import('../../utils/image.js').RawImage} RawImage
             * @typedef {import('../../utils/tensor.js').Tensor} Tensor
             */
            /**
             * Calculate size to resize images to, to be multiples of `vision_encoder_max_size` while preserving the aspect ratio.
             * @param {Tensor} pixel_values Tensor of the image to resize.
             * @param {number} vision_encoder_max_size Maximum size of the output image. If the image is larger than this size,
             * it will be split into patches of this size, and the original image will be concatenated with the patches, resized to max_size.
             */
            get_resize_for_vision_encoder(pixel_values, vision_encoder_max_size) {
              let [height, width] = pixel_values.dims.slice(-2);
              const aspect_ratio = width / height;
              if (width >= height) {
                width = Math.ceil(width / vision_encoder_max_size) * vision_encoder_max_size;
                height = Math.floor(width / aspect_ratio);
                height = Math.ceil(height / vision_encoder_max_size) * vision_encoder_max_size;
              } else {
                height = Math.ceil(height / vision_encoder_max_size) * vision_encoder_max_size;
                width = Math.floor(height * aspect_ratio);
                width = Math.ceil(width / vision_encoder_max_size) * vision_encoder_max_size;
              }
              return { height, width };
            }
            /** @param {RawImage|RawImage[]|RawImage[][]} images */
            async _call(images, {
              do_image_splitting = null,
              return_row_col_info = false
            } = {}) {
              let batched_2d_images;
              if (!Array.isArray(images)) {
                batched_2d_images = [[images]];
              } else {
                if (images.length === 0 || !images[0]) {
                  throw new Error("No images provided.");
                }
                if (!Array.isArray(images[0])) {
                  batched_2d_images = [
                    /** @type {RawImage[]} */
                    images
                  ];
                } else {
                  batched_2d_images = /** @type {RawImage[][]} */
                  images;
                }
              }
              let all_pixel_values = [];
              let images_list_rows = [];
              let images_list_cols = [];
              const original_sizes = [];
              const reshaped_input_sizes = [];
              for (const image_batch of batched_2d_images) {
                let images_list = await Promise.all(image_batch.map((x2) => this.preprocess(x2)));
                original_sizes.push(...images_list.map((x2) => x2.original_size));
                reshaped_input_sizes.push(...images_list.map((x2) => x2.reshaped_input_size));
                images_list.forEach((x2) => x2.pixel_values.unsqueeze_(0));
                const { longest_edge } = this.max_image_size;
                let images_tensor;
                if (do_image_splitting ?? this.do_image_splitting) {
                  let image_rows = new Array(images_list.length);
                  let image_cols = new Array(images_list.length);
                  images_tensor = await Promise.all(images_list.map(async (x2, i) => {
                    const new_size = this.get_resize_for_vision_encoder(x2.pixel_values, longest_edge);
                    const resized = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate_4d)(x2.pixel_values, {
                      size: [new_size.height, new_size.width]
                    });
                    const { frames, num_splits_h, num_splits_w } = await this.split_image(resized, this.max_image_size);
                    image_rows[i] = num_splits_h;
                    image_cols[i] = num_splits_w;
                    return (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)(frames, 0);
                  }));
                  images_list_rows.push(image_rows);
                  images_list_cols.push(image_cols);
                } else {
                  const size = [longest_edge, longest_edge];
                  images_tensor = await Promise.all(
                    images_list.map((x2) => (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate_4d)(x2.pixel_values, { size }))
                  );
                  images_list_rows.push(new Array(images_list.length).fill(0));
                  images_list_cols.push(new Array(images_list.length).fill(0));
                }
                all_pixel_values.push((0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)(images_tensor, 0));
              }
              const batch_size = all_pixel_values.length;
              const [n, c, h2, w2] = all_pixel_values[0].dims;
              let pixel_values;
              let pixel_attention_mask;
              if (batch_size === 1) {
                pixel_values = all_pixel_values[0].unsqueeze_(0);
                pixel_attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.full)([batch_size, n, h2, w2], true);
              } else {
                const max_num_patches = Math.max(...all_pixel_values.map((x2) => x2.dims.at(0)));
                pixel_attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.full)([batch_size, max_num_patches, h2, w2], true);
                const pixel_attention_mask_data = pixel_attention_mask.data;
                const pixel_attention_mask_stride = max_num_patches * h2 * w2;
                for (let i = 0; i < batch_size; ++i) {
                  const num_patches = all_pixel_values[i].dims[0];
                  if (num_patches < max_num_patches) {
                    all_pixel_values[i] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)([
                      all_pixel_values[i],
                      (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.full)([max_num_patches - num_patches, c, h2, w2], 0)
                    ], 0);
                    const start_offset = i * pixel_attention_mask_stride + num_patches * h2 * w2;
                    const end_offset = (i + 1) * pixel_attention_mask_stride;
                    pixel_attention_mask_data.fill(false, start_offset, end_offset);
                  }
                }
                pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.stack)(all_pixel_values, 0);
              }
              return {
                pixel_values,
                pixel_attention_mask,
                original_sizes,
                reshaped_input_sizes,
                ...return_row_col_info ? { rows: images_list_rows, cols: images_list_cols } : {}
              };
            }
            async split_image(pixel_values, { longest_edge }) {
              const max_height = longest_edge;
              const max_width = longest_edge;
              const frames = [];
              const [height, width] = pixel_values.dims.slice(-2);
              let num_splits_h = 0, num_splits_w = 0;
              if (height > max_height || width > max_width) {
                num_splits_h = Math.ceil(height / max_height);
                num_splits_w = Math.ceil(width / max_width);
                const optimal_height = Math.ceil(height / num_splits_h);
                const optimal_width = Math.ceil(width / num_splits_w);
                for (let r = 0; r < num_splits_h; ++r) {
                  for (let c = 0; c < num_splits_w; ++c) {
                    let start_x, start_y, end_x, end_y;
                    if (r === num_splits_h - 1) {
                      start_y = height - optimal_height;
                      end_y = height;
                    } else {
                      start_y = r * optimal_height;
                      end_y = (r + 1) * optimal_height;
                    }
                    if (c === num_splits_w - 1) {
                      start_x = width - optimal_width;
                      end_x = width;
                    } else {
                      start_x = c * optimal_width;
                      end_x = (c + 1) * optimal_width;
                    }
                    const starts = [start_y, start_x];
                    const ends = [end_y, end_x];
                    const patch = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.slice)(pixel_values, starts, ends, [2, 3]);
                    frames.push(patch);
                  }
                }
                const global_image_height = max_height;
                const global_image_width = max_width;
                if (height !== global_image_height || width !== global_image_width) {
                  pixel_values = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate_4d)(pixel_values, {
                    size: [global_image_height, global_image_width]
                  });
                }
              }
              frames.push(pixel_values);
              return { frames, num_splits_h, num_splits_w };
            }
          }
        }
      ),
      /***/
      "./src/models/idefics3/processing_idefics3.js": (
        /*!****************************************************!*\
          !*** ./src/models/idefics3/processing_idefics3.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Idefics3Processor: () => (
              /* binding */
              Idefics3Processor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/image_processing_auto.js */
            "./src/models/auto/image_processing_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _utils_image_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../../utils/image.js */
            "./src/utils/image.js"
          );
          var _utils_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
            /*! ../../utils/core.js */
            "./src/utils/core.js"
          );
          function _prompt_split_image(image_seq_len, image_rows, image_cols, fake_token_around_image, image_token, global_img_token) {
            let text_split_images = "";
            for (let n_h = 0; n_h < image_rows; ++n_h) {
              for (let n_w = 0; n_w < image_cols; ++n_w) {
                text_split_images += fake_token_around_image + `<row_${n_h + 1}_col_${n_w + 1}>` + image_token.repeat(image_seq_len);
              }
              text_split_images += "\n";
            }
            text_split_images += `
${fake_token_around_image}${global_img_token}` + image_token.repeat(image_seq_len) + `${fake_token_around_image}`;
            return text_split_images;
          }
          function _prompt_single_image(image_seq_len, fake_token_around_image, image_token, global_img_token) {
            return `${fake_token_around_image}${global_img_token}` + image_token.repeat(image_seq_len) + `${fake_token_around_image}`;
          }
          function get_image_prompt_string(image_rows, image_cols, image_seq_len, fake_token_around_image, image_token, global_img_token) {
            if (image_rows === 0 && image_cols === 0) {
              return _prompt_single_image(
                image_seq_len,
                fake_token_around_image,
                image_token,
                global_img_token
              );
            }
            return _prompt_split_image(
              image_seq_len,
              image_rows,
              image_cols,
              fake_token_around_image,
              image_token,
              global_img_token
            );
          }
          class Idefics3Processor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
            constructor() {
              super(...arguments);
              __publicField(this, "fake_image_token", "<fake_token_around_image>");
              __publicField(this, "image_token", "<image>");
              __publicField(this, "global_img_token", "<global-img>");
            }
            /**
             * 
             * @param {string|string[]} text 
             * @param {RawImage|RawImage[]|RawImage[][]} images  
             * @returns {Promise<any>}
             */
            async _call(text, images = null, options = {}) {
              options.return_row_col_info ?? (options.return_row_col_info = true);
              let image_inputs;
              if (images) {
                image_inputs = await this.image_processor(images, options);
              }
              if (!Array.isArray(text)) {
                text = [text];
              }
              const image_rows = image_inputs.rows ?? [new Array(text.length).fill(0)];
              const image_cols = image_inputs.cols ?? [new Array(text.length).fill(0)];
              const image_seq_len = this.config.image_seq_len;
              const n_images_in_text = [];
              const prompt_strings = [];
              for (let i = 0; i < text.length; ++i) {
                const sample = text[i];
                const sample_rows = image_rows[i];
                const sample_cols = image_cols[i];
                n_images_in_text.push((0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.count)(sample, this.image_token));
                const image_prompt_strings = sample_rows.map(
                  (n_rows, j) => get_image_prompt_string(
                    n_rows,
                    sample_cols[j],
                    image_seq_len,
                    this.fake_image_token,
                    this.image_token,
                    this.global_img_token
                  )
                );
                const split_sample = sample.split(this.image_token);
                if (split_sample.length === 0) {
                  throw new Error("The image token should be present in the text.");
                }
                let new_sample = split_sample[0];
                for (let j = 0; j < image_prompt_strings.length; ++j) {
                  new_sample += image_prompt_strings[j] + split_sample[j + 1];
                }
                prompt_strings.push(new_sample);
              }
              const text_inputs = this.tokenizer(prompt_strings);
              return {
                ...text_inputs,
                ...image_inputs
              };
            }
          }
          __publicField(Idefics3Processor, "image_processor_class", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);
          __publicField(Idefics3Processor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);
          __publicField(Idefics3Processor, "uses_processor_config", true);
        }
      ),
      /***/
      "./src/models/image_processors.js": (
        /*!****************************************!*\
          !*** ./src/models/image_processors.js ***!
          \****************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            BeitFeatureExtractor: () => (
              /* reexport safe */
              _beit_image_processing_beit_js__WEBPACK_IMPORTED_MODULE_0__.BeitFeatureExtractor
            ),
            /* harmony export */
            BitImageProcessor: () => (
              /* reexport safe */
              _bit_image_processing_bit_js__WEBPACK_IMPORTED_MODULE_1__.BitImageProcessor
            ),
            /* harmony export */
            CLIPFeatureExtractor: () => (
              /* reexport safe */
              _clip_image_processing_clip_js__WEBPACK_IMPORTED_MODULE_3__.CLIPFeatureExtractor
            ),
            /* harmony export */
            CLIPImageProcessor: () => (
              /* reexport safe */
              _clip_image_processing_clip_js__WEBPACK_IMPORTED_MODULE_3__.CLIPImageProcessor
            ),
            /* harmony export */
            ChineseCLIPFeatureExtractor: () => (
              /* reexport safe */
              _chinese_clip_image_processing_chinese_clip_js__WEBPACK_IMPORTED_MODULE_2__.ChineseCLIPFeatureExtractor
            ),
            /* harmony export */
            ConvNextFeatureExtractor: () => (
              /* reexport safe */
              _convnext_image_processing_convnext_js__WEBPACK_IMPORTED_MODULE_4__.ConvNextFeatureExtractor
            ),
            /* harmony export */
            ConvNextImageProcessor: () => (
              /* reexport safe */
              _convnext_image_processing_convnext_js__WEBPACK_IMPORTED_MODULE_4__.ConvNextImageProcessor
            ),
            /* harmony export */
            DPTFeatureExtractor: () => (
              /* reexport safe */
              _dpt_image_processing_dpt_js__WEBPACK_IMPORTED_MODULE_8__.DPTFeatureExtractor
            ),
            /* harmony export */
            DPTImageProcessor: () => (
              /* reexport safe */
              _dpt_image_processing_dpt_js__WEBPACK_IMPORTED_MODULE_8__.DPTImageProcessor
            ),
            /* harmony export */
            DeiTFeatureExtractor: () => (
              /* reexport safe */
              _deit_image_processing_deit_js__WEBPACK_IMPORTED_MODULE_5__.DeiTFeatureExtractor
            ),
            /* harmony export */
            DeiTImageProcessor: () => (
              /* reexport safe */
              _deit_image_processing_deit_js__WEBPACK_IMPORTED_MODULE_5__.DeiTImageProcessor
            ),
            /* harmony export */
            DetrFeatureExtractor: () => (
              /* reexport safe */
              _detr_image_processing_detr_js__WEBPACK_IMPORTED_MODULE_6__.DetrFeatureExtractor
            ),
            /* harmony export */
            DetrImageProcessor: () => (
              /* reexport safe */
              _detr_image_processing_detr_js__WEBPACK_IMPORTED_MODULE_6__.DetrImageProcessor
            ),
            /* harmony export */
            DonutFeatureExtractor: () => (
              /* reexport safe */
              _donut_image_processing_donut_js__WEBPACK_IMPORTED_MODULE_7__.DonutFeatureExtractor
            ),
            /* harmony export */
            DonutImageProcessor: () => (
              /* reexport safe */
              _donut_image_processing_donut_js__WEBPACK_IMPORTED_MODULE_7__.DonutImageProcessor
            ),
            /* harmony export */
            EfficientNetImageProcessor: () => (
              /* reexport safe */
              _efficientnet_image_processing_efficientnet_js__WEBPACK_IMPORTED_MODULE_9__.EfficientNetImageProcessor
            ),
            /* harmony export */
            GLPNFeatureExtractor: () => (
              /* reexport safe */
              _glpn_image_processing_glpn_js__WEBPACK_IMPORTED_MODULE_10__.GLPNFeatureExtractor
            ),
            /* harmony export */
            GroundingDinoImageProcessor: () => (
              /* reexport safe */
              _grounding_dino_image_processing_grounding_dino_js__WEBPACK_IMPORTED_MODULE_11__.GroundingDinoImageProcessor
            ),
            /* harmony export */
            Idefics3ImageProcessor: () => (
              /* reexport safe */
              _idefics3_image_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_12__.Idefics3ImageProcessor
            ),
            /* harmony export */
            JinaCLIPImageProcessor: () => (
              /* reexport safe */
              _jina_clip_image_processing_jina_clip_js__WEBPACK_IMPORTED_MODULE_14__.JinaCLIPImageProcessor
            ),
            /* harmony export */
            LlavaOnevisionImageProcessor: () => (
              /* reexport safe */
              _llava_onevision_image_processing_llava_onevision_js__WEBPACK_IMPORTED_MODULE_15__.LlavaOnevisionImageProcessor
            ),
            /* harmony export */
            Mask2FormerImageProcessor: () => (
              /* reexport safe */
              _mask2former_image_processing_mask2former_js__WEBPACK_IMPORTED_MODULE_16__.Mask2FormerImageProcessor
            ),
            /* harmony export */
            MaskFormerFeatureExtractor: () => (
              /* reexport safe */
              _maskformer_image_processing_maskformer_js__WEBPACK_IMPORTED_MODULE_17__.MaskFormerFeatureExtractor
            ),
            /* harmony export */
            MaskFormerImageProcessor: () => (
              /* reexport safe */
              _maskformer_image_processing_maskformer_js__WEBPACK_IMPORTED_MODULE_17__.MaskFormerImageProcessor
            ),
            /* harmony export */
            MobileNetV1FeatureExtractor: () => (
              /* reexport safe */
              _mobilenet_v1_image_processing_mobilenet_v1_js__WEBPACK_IMPORTED_MODULE_18__.MobileNetV1FeatureExtractor
            ),
            /* harmony export */
            MobileNetV1ImageProcessor: () => (
              /* reexport safe */
              _mobilenet_v1_image_processing_mobilenet_v1_js__WEBPACK_IMPORTED_MODULE_18__.MobileNetV1ImageProcessor
            ),
            /* harmony export */
            MobileNetV2FeatureExtractor: () => (
              /* reexport safe */
              _mobilenet_v2_image_processing_mobilenet_v2_js__WEBPACK_IMPORTED_MODULE_19__.MobileNetV2FeatureExtractor
            ),
            /* harmony export */
            MobileNetV2ImageProcessor: () => (
              /* reexport safe */
              _mobilenet_v2_image_processing_mobilenet_v2_js__WEBPACK_IMPORTED_MODULE_19__.MobileNetV2ImageProcessor
            ),
            /* harmony export */
            MobileNetV3FeatureExtractor: () => (
              /* reexport safe */
              _mobilenet_v3_image_processing_mobilenet_v3_js__WEBPACK_IMPORTED_MODULE_20__.MobileNetV3FeatureExtractor
            ),
            /* harmony export */
            MobileNetV3ImageProcessor: () => (
              /* reexport safe */
              _mobilenet_v3_image_processing_mobilenet_v3_js__WEBPACK_IMPORTED_MODULE_20__.MobileNetV3ImageProcessor
            ),
            /* harmony export */
            MobileNetV4FeatureExtractor: () => (
              /* reexport safe */
              _mobilenet_v4_image_processing_mobilenet_v4_js__WEBPACK_IMPORTED_MODULE_21__.MobileNetV4FeatureExtractor
            ),
            /* harmony export */
            MobileNetV4ImageProcessor: () => (
              /* reexport safe */
              _mobilenet_v4_image_processing_mobilenet_v4_js__WEBPACK_IMPORTED_MODULE_21__.MobileNetV4ImageProcessor
            ),
            /* harmony export */
            MobileViTFeatureExtractor: () => (
              /* reexport safe */
              _mobilevit_image_processing_mobilevit_js__WEBPACK_IMPORTED_MODULE_22__.MobileViTFeatureExtractor
            ),
            /* harmony export */
            MobileViTImageProcessor: () => (
              /* reexport safe */
              _mobilevit_image_processing_mobilevit_js__WEBPACK_IMPORTED_MODULE_22__.MobileViTImageProcessor
            ),
            /* harmony export */
            NougatImageProcessor: () => (
              /* reexport safe */
              _nougat_image_processing_nougat_js__WEBPACK_IMPORTED_MODULE_23__.NougatImageProcessor
            ),
            /* harmony export */
            OwlViTFeatureExtractor: () => (
              /* reexport safe */
              _owlvit_image_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_25__.OwlViTFeatureExtractor
            ),
            /* harmony export */
            OwlViTImageProcessor: () => (
              /* reexport safe */
              _owlvit_image_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_25__.OwlViTImageProcessor
            ),
            /* harmony export */
            Owlv2ImageProcessor: () => (
              /* reexport safe */
              _owlv2_image_processing_owlv2_js__WEBPACK_IMPORTED_MODULE_24__.Owlv2ImageProcessor
            ),
            /* harmony export */
            Phi3VImageProcessor: () => (
              /* reexport safe */
              _phi3_v_image_processing_phi3_v_js__WEBPACK_IMPORTED_MODULE_26__.Phi3VImageProcessor
            ),
            /* harmony export */
            PvtImageProcessor: () => (
              /* reexport safe */
              _pvt_image_processing_pvt_js__WEBPACK_IMPORTED_MODULE_27__.PvtImageProcessor
            ),
            /* harmony export */
            Qwen2VLImageProcessor: () => (
              /* reexport safe */
              _qwen2_vl_image_processing_qwen2_vl_js__WEBPACK_IMPORTED_MODULE_28__.Qwen2VLImageProcessor
            ),
            /* harmony export */
            RTDetrImageProcessor: () => (
              /* reexport safe */
              _rt_detr_image_processing_rt_detr_js__WEBPACK_IMPORTED_MODULE_29__.RTDetrImageProcessor
            ),
            /* harmony export */
            SamImageProcessor: () => (
              /* reexport safe */
              _sam_image_processing_sam_js__WEBPACK_IMPORTED_MODULE_30__.SamImageProcessor
            ),
            /* harmony export */
            SegformerFeatureExtractor: () => (
              /* reexport safe */
              _segformer_image_processing_segformer_js__WEBPACK_IMPORTED_MODULE_31__.SegformerFeatureExtractor
            ),
            /* harmony export */
            SegformerImageProcessor: () => (
              /* reexport safe */
              _segformer_image_processing_segformer_js__WEBPACK_IMPORTED_MODULE_31__.SegformerImageProcessor
            ),
            /* harmony export */
            SiglipImageProcessor: () => (
              /* reexport safe */
              _siglip_image_processing_siglip_js__WEBPACK_IMPORTED_MODULE_32__.SiglipImageProcessor
            ),
            /* harmony export */
            SmolVLMImageProcessor: () => (
              /* reexport safe */
              _smolvlm_image_processing_smolvlm_js__WEBPACK_IMPORTED_MODULE_33__.SmolVLMImageProcessor
            ),
            /* harmony export */
            Swin2SRImageProcessor: () => (
              /* reexport safe */
              _swin2sr_image_processing_swin2sr_js__WEBPACK_IMPORTED_MODULE_34__.Swin2SRImageProcessor
            ),
            /* harmony export */
            VLMImageProcessor: () => (
              /* reexport safe */
              _janus_image_processing_janus_js__WEBPACK_IMPORTED_MODULE_13__.VLMImageProcessor
            ),
            /* harmony export */
            ViTFeatureExtractor: () => (
              /* reexport safe */
              _vit_image_processing_vit_js__WEBPACK_IMPORTED_MODULE_35__.ViTFeatureExtractor
            ),
            /* harmony export */
            ViTImageProcessor: () => (
              /* reexport safe */
              _vit_image_processing_vit_js__WEBPACK_IMPORTED_MODULE_35__.ViTImageProcessor
            ),
            /* harmony export */
            VitMatteImageProcessor: () => (
              /* reexport safe */
              _vitmatte_image_processing_vitmatte_js__WEBPACK_IMPORTED_MODULE_36__.VitMatteImageProcessor
            ),
            /* harmony export */
            VitPoseImageProcessor: () => (
              /* reexport safe */
              _vitpose_image_processing_vitpose_js__WEBPACK_IMPORTED_MODULE_37__.VitPoseImageProcessor
            ),
            /* harmony export */
            YolosFeatureExtractor: () => (
              /* reexport safe */
              _yolos_image_processing_yolos_js__WEBPACK_IMPORTED_MODULE_38__.YolosFeatureExtractor
            ),
            /* harmony export */
            YolosImageProcessor: () => (
              /* reexport safe */
              _yolos_image_processing_yolos_js__WEBPACK_IMPORTED_MODULE_38__.YolosImageProcessor
            )
            /* harmony export */
          });
          var _beit_image_processing_beit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ./beit/image_processing_beit.js */
            "./src/models/beit/image_processing_beit.js"
          );
          var _bit_image_processing_bit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ./bit/image_processing_bit.js */
            "./src/models/bit/image_processing_bit.js"
          );
          var _chinese_clip_image_processing_chinese_clip_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ./chinese_clip/image_processing_chinese_clip.js */
            "./src/models/chinese_clip/image_processing_chinese_clip.js"
          );
          var _clip_image_processing_clip_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ./clip/image_processing_clip.js */
            "./src/models/clip/image_processing_clip.js"
          );
          var _convnext_image_processing_convnext_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
            /*! ./convnext/image_processing_convnext.js */
            "./src/models/convnext/image_processing_convnext.js"
          );
          var _deit_image_processing_deit_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
            /*! ./deit/image_processing_deit.js */
            "./src/models/deit/image_processing_deit.js"
          );
          var _detr_image_processing_detr_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
            /*! ./detr/image_processing_detr.js */
            "./src/models/detr/image_processing_detr.js"
          );
          var _donut_image_processing_donut_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
            /*! ./donut/image_processing_donut.js */
            "./src/models/donut/image_processing_donut.js"
          );
          var _dpt_image_processing_dpt_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
            /*! ./dpt/image_processing_dpt.js */
            "./src/models/dpt/image_processing_dpt.js"
          );
          var _efficientnet_image_processing_efficientnet_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
            /*! ./efficientnet/image_processing_efficientnet.js */
            "./src/models/efficientnet/image_processing_efficientnet.js"
          );
          var _glpn_image_processing_glpn_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
            /*! ./glpn/image_processing_glpn.js */
            "./src/models/glpn/image_processing_glpn.js"
          );
          var _grounding_dino_image_processing_grounding_dino_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(
            /*! ./grounding_dino/image_processing_grounding_dino.js */
            "./src/models/grounding_dino/image_processing_grounding_dino.js"
          );
          var _idefics3_image_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
            /*! ./idefics3/image_processing_idefics3.js */
            "./src/models/idefics3/image_processing_idefics3.js"
          );
          var _janus_image_processing_janus_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(
            /*! ./janus/image_processing_janus.js */
            "./src/models/janus/image_processing_janus.js"
          );
          var _jina_clip_image_processing_jina_clip_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(
            /*! ./jina_clip/image_processing_jina_clip.js */
            "./src/models/jina_clip/image_processing_jina_clip.js"
          );
          var _llava_onevision_image_processing_llava_onevision_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(
            /*! ./llava_onevision/image_processing_llava_onevision.js */
            "./src/models/llava_onevision/image_processing_llava_onevision.js"
          );
          var _mask2former_image_processing_mask2former_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__2(
            /*! ./mask2former/image_processing_mask2former.js */
            "./src/models/mask2former/image_processing_mask2former.js"
          );
          var _maskformer_image_processing_maskformer_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__2(
            /*! ./maskformer/image_processing_maskformer.js */
            "./src/models/maskformer/image_processing_maskformer.js"
          );
          var _mobilenet_v1_image_processing_mobilenet_v1_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__2(
            /*! ./mobilenet_v1/image_processing_mobilenet_v1.js */
            "./src/models/mobilenet_v1/image_processing_mobilenet_v1.js"
          );
          var _mobilenet_v2_image_processing_mobilenet_v2_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__2(
            /*! ./mobilenet_v2/image_processing_mobilenet_v2.js */
            "./src/models/mobilenet_v2/image_processing_mobilenet_v2.js"
          );
          var _mobilenet_v3_image_processing_mobilenet_v3_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__2(
            /*! ./mobilenet_v3/image_processing_mobilenet_v3.js */
            "./src/models/mobilenet_v3/image_processing_mobilenet_v3.js"
          );
          var _mobilenet_v4_image_processing_mobilenet_v4_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__2(
            /*! ./mobilenet_v4/image_processing_mobilenet_v4.js */
            "./src/models/mobilenet_v4/image_processing_mobilenet_v4.js"
          );
          var _mobilevit_image_processing_mobilevit_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__2(
            /*! ./mobilevit/image_processing_mobilevit.js */
            "./src/models/mobilevit/image_processing_mobilevit.js"
          );
          var _nougat_image_processing_nougat_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__2(
            /*! ./nougat/image_processing_nougat.js */
            "./src/models/nougat/image_processing_nougat.js"
          );
          var _owlv2_image_processing_owlv2_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__2(
            /*! ./owlv2/image_processing_owlv2.js */
            "./src/models/owlv2/image_processing_owlv2.js"
          );
          var _owlvit_image_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__2(
            /*! ./owlvit/image_processing_owlvit.js */
            "./src/models/owlvit/image_processing_owlvit.js"
          );
          var _phi3_v_image_processing_phi3_v_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__2(
            /*! ./phi3_v/image_processing_phi3_v.js */
            "./src/models/phi3_v/image_processing_phi3_v.js"
          );
          var _pvt_image_processing_pvt_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__2(
            /*! ./pvt/image_processing_pvt.js */
            "./src/models/pvt/image_processing_pvt.js"
          );
          var _qwen2_vl_image_processing_qwen2_vl_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__2(
            /*! ./qwen2_vl/image_processing_qwen2_vl.js */
            "./src/models/qwen2_vl/image_processing_qwen2_vl.js"
          );
          var _rt_detr_image_processing_rt_detr_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__2(
            /*! ./rt_detr/image_processing_rt_detr.js */
            "./src/models/rt_detr/image_processing_rt_detr.js"
          );
          var _sam_image_processing_sam_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__2(
            /*! ./sam/image_processing_sam.js */
            "./src/models/sam/image_processing_sam.js"
          );
          var _segformer_image_processing_segformer_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__2(
            /*! ./segformer/image_processing_segformer.js */
            "./src/models/segformer/image_processing_segformer.js"
          );
          var _siglip_image_processing_siglip_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__2(
            /*! ./siglip/image_processing_siglip.js */
            "./src/models/siglip/image_processing_siglip.js"
          );
          var _smolvlm_image_processing_smolvlm_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__2(
            /*! ./smolvlm/image_processing_smolvlm.js */
            "./src/models/smolvlm/image_processing_smolvlm.js"
          );
          var _swin2sr_image_processing_swin2sr_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__2(
            /*! ./swin2sr/image_processing_swin2sr.js */
            "./src/models/swin2sr/image_processing_swin2sr.js"
          );
          var _vit_image_processing_vit_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__2(
            /*! ./vit/image_processing_vit.js */
            "./src/models/vit/image_processing_vit.js"
          );
          var _vitmatte_image_processing_vitmatte_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__2(
            /*! ./vitmatte/image_processing_vitmatte.js */
            "./src/models/vitmatte/image_processing_vitmatte.js"
          );
          var _vitpose_image_processing_vitpose_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__2(
            /*! ./vitpose/image_processing_vitpose.js */
            "./src/models/vitpose/image_processing_vitpose.js"
          );
          var _yolos_image_processing_yolos_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__2(
            /*! ./yolos/image_processing_yolos.js */
            "./src/models/yolos/image_processing_yolos.js"
          );
        }
      ),
      /***/
      "./src/models/janus/image_processing_janus.js": (
        /*!****************************************************!*\
          !*** ./src/models/janus/image_processing_janus.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            VLMImageProcessor: () => (
              /* binding */
              VLMImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class VLMImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            constructor(config) {
              super({
                do_pad: true,
                pad_size: {
                  width: config.image_size,
                  height: config.image_size
                },
                ...config
              });
              this.constant_values = this.config.background_color.map((x2) => x2 * this.rescale_factor);
            }
            pad_image(pixelData, imgDims, padSize, options) {
              return super.pad_image(pixelData, imgDims, padSize, {
                constant_values: this.constant_values,
                center: true,
                ...options
              });
            }
          }
        }
      ),
      /***/
      "./src/models/janus/processing_janus.js": (
        /*!**********************************************!*\
          !*** ./src/models/janus/processing_janus.js ***!
          \**********************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            VLChatProcessor: () => (
              /* binding */
              VLChatProcessor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/image_processing_auto.js */
            "./src/models/auto/image_processing_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _utils_core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../../utils/core.js */
            "./src/utils/core.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_image_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
            /*! ../../utils/image.js */
            "./src/utils/image.js"
          );
          class VLChatProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
            constructor(config, components) {
              super(config, components);
              this.image_tag = this.config.image_tag;
              this.image_start_tag = this.config.image_start_tag;
              this.image_end_tag = this.config.image_end_tag;
              this.num_image_tokens = this.config.num_image_tokens;
            }
            /**
             * @typedef {Object} MultimodalMessageProperties Additional properties for multimodal messages.
             * @property {(RawImage | string | URL)[]} [images] The images in the message.
             * @typedef {(import('../../tokenizers.js').Message & MultimodalMessageProperties)[]} MultimodalConversation The conversation possibly containing multimodal inputs.
             */
            /**
             * @typedef {Object} VLCChatProcessorResult The processed input.
             * @property {Tensor} input_ids The input IDs.
             * @property {Tensor} attention_mask The attention mask.
             * @property {Tensor} images_seq_mask The image sequence mask.
             * @property {Tensor} images_emb_mask The image embedding mask.
             */
            /**
             * @param {MultimodalConversation} conversation The chat messages to process.
             * @param {Object} options Additional options for processing.
             * @param {RawImage|RawImage[]} [options.images] The images to process, if not set in the conversation.
             * @param {string} [options.chat_template="default"] The chat template to use.
             * @returns {Promise<VLCChatProcessorResult | VLCChatProcessorResult & import('../../base/image_processors_utils.js').ImageProcessorResult>} The processed input.
             */
            async _call(conversation, {
              images = null,
              chat_template = "default"
            } = {}) {
              if (!images) {
                images = await Promise.all(
                  conversation.filter((msg) => msg.images).flatMap((msg) => msg.images).map((img) => _utils_image_js__WEBPACK_IMPORTED_MODULE_5__.RawImage.read(img))
                );
              } else if (!Array.isArray(images)) {
                images = [images];
              }
              const tokenizer = this.tokenizer;
              const result = tokenizer.apply_chat_template(conversation, {
                tokenize: false,
                add_generation_prompt: true,
                chat_template
              });
              const encode = (text) => tokenizer.encode(text, { add_special_tokens: false });
              const parts = (
                /** @type {string} */
                result.split(this.image_tag)
              );
              const num_images = parts.length - 1;
              if (images.length !== num_images) {
                throw new Error(`Number of images provided (${images.length}) does not match number of "${this.image_tag}" image tags (${num_images})`);
              }
              const [
                image_placeholder_tag_id,
                image_start_tag_id,
                image_end_tag_id
              ] = tokenizer.model.convert_tokens_to_ids([
                this.image_tag,
                this.image_start_tag,
                this.image_end_tag
              ]);
              let input_ids = encode(parts[0]);
              let images_seq_mask = new Array(input_ids.length).fill(false);
              for (let i = 1; i < parts.length; ++i) {
                const placeholder_image_tokens = new Array(this.num_image_tokens).fill(image_placeholder_tag_id);
                const tokens = encode(parts[i]);
                input_ids = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_3__.mergeArrays)(
                  input_ids,
                  [image_start_tag_id],
                  placeholder_image_tokens,
                  [image_end_tag_id],
                  tokens
                );
                const image_mask = new Array(this.num_image_tokens).fill(true);
                images_seq_mask = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_3__.mergeArrays)(
                  images_seq_mask,
                  [false],
                  image_mask,
                  [false],
                  new Array(tokens.length).fill(false)
                );
              }
              const dims = [1, input_ids.length];
              const final = {
                input_ids: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor("int64", input_ids, dims),
                attention_mask: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor("int64", new Array(input_ids.length).fill(1), dims),
                images_seq_mask: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor("bool", images_seq_mask, dims),
                images_emb_mask: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(
                  "bool",
                  new Array(num_images * this.num_image_tokens).fill(true),
                  [1, num_images, this.num_image_tokens]
                )
              };
              if (images && images.length > 0) {
                const image_inputs = await this.image_processor(images);
                image_inputs.pixel_values.unsqueeze_(0);
                return { ...final, ...image_inputs };
              }
              return final;
            }
          }
          __publicField(VLChatProcessor, "image_processor_class", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);
          __publicField(VLChatProcessor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);
          __publicField(VLChatProcessor, "uses_processor_config", true);
        }
      ),
      /***/
      "./src/models/jina_clip/image_processing_jina_clip.js": (
        /*!************************************************************!*\
          !*** ./src/models/jina_clip/image_processing_jina_clip.js ***!
          \************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            JinaCLIPImageProcessor: () => (
              /* binding */
              JinaCLIPImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class JinaCLIPImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            constructor(config) {
              const { resize_mode, fill_color, interpolation, size, ...other } = config;
              const new_size = resize_mode === "squash" ? { width: size, height: size } : resize_mode === "shortest" ? { shortest_edge: size } : { longest_edge: size };
              const resample = interpolation === "bicubic" ? 3 : 2;
              super({
                ...other,
                size: new_size,
                resample,
                do_center_crop: true,
                crop_size: size,
                do_normalize: true
              });
            }
          }
        }
      ),
      /***/
      "./src/models/jina_clip/processing_jina_clip.js": (
        /*!******************************************************!*\
          !*** ./src/models/jina_clip/processing_jina_clip.js ***!
          \******************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            JinaCLIPProcessor: () => (
              /* binding */
              JinaCLIPProcessor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/image_processing_auto.js */
            "./src/models/auto/image_processing_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          class JinaCLIPProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
            async _call(text = null, images = null, kwargs = {}) {
              if (!text && !images) {
                throw new Error("Either text or images must be provided");
              }
              const text_inputs = text ? this.tokenizer(text, kwargs) : {};
              const image_inputs = images ? await this.image_processor(images, kwargs) : {};
              return {
                ...text_inputs,
                ...image_inputs
              };
            }
          }
          __publicField(JinaCLIPProcessor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);
          __publicField(JinaCLIPProcessor, "image_processor_class", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);
        }
      ),
      /***/
      "./src/models/llava_onevision/image_processing_llava_onevision.js": (
        /*!************************************************************************!*\
          !*** ./src/models/llava_onevision/image_processing_llava_onevision.js ***!
          \************************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            LlavaOnevisionImageProcessor: () => (
              /* binding */
              LlavaOnevisionImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class LlavaOnevisionImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/mask2former/image_processing_mask2former.js": (
        /*!****************************************************************!*\
          !*** ./src/models/mask2former/image_processing_mask2former.js ***!
          \****************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Mask2FormerImageProcessor: () => (
              /* binding */
              Mask2FormerImageProcessor
            )
            /* harmony export */
          });
          var _maskformer_image_processing_maskformer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../maskformer/image_processing_maskformer.js */
            "./src/models/maskformer/image_processing_maskformer.js"
          );
          class Mask2FormerImageProcessor extends _maskformer_image_processing_maskformer_js__WEBPACK_IMPORTED_MODULE_0__.MaskFormerImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/maskformer/image_processing_maskformer.js": (
        /*!**************************************************************!*\
          !*** ./src/models/maskformer/image_processing_maskformer.js ***!
          \**************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            MaskFormerFeatureExtractor: () => (
              /* binding */
              MaskFormerFeatureExtractor
            ),
            /* harmony export */
            MaskFormerImageProcessor: () => (
              /* binding */
              MaskFormerImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class MaskFormerImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            /** @type {typeof post_process_panoptic_segmentation} */
            post_process_panoptic_segmentation(...args) {
              return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_panoptic_segmentation)(...args);
            }
            /** @type {typeof post_process_instance_segmentation} */
            post_process_instance_segmentation(...args) {
              return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_instance_segmentation)(...args);
            }
          }
          class MaskFormerFeatureExtractor extends MaskFormerImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/mgp_str/processing_mgp_str.js": (
        /*!**************************************************!*\
          !*** ./src/models/mgp_str/processing_mgp_str.js ***!
          \**************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            MgpstrProcessor: () => (
              /* binding */
              MgpstrProcessor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/image_processing_auto.js */
            "./src/models/auto/image_processing_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../../utils/maths.js */
            "./src/utils/maths.js"
          );
          const DECODE_TYPE_MAPPING = {
            "char": ["char_decode", 1],
            "bpe": ["bpe_decode", 2],
            "wp": ["wp_decode", 102]
          };
          class MgpstrProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
            /**
             * @returns {import('../../tokenizers.js').MgpstrTokenizer} The character tokenizer.
             */
            get char_tokenizer() {
              return this.components.char_tokenizer;
            }
            /**
             * @returns {import('../../tokenizers.js').GPT2Tokenizer} The BPE tokenizer.
             */
            get bpe_tokenizer() {
              return this.components.bpe_tokenizer;
            }
            /**
             * @returns {import('../../tokenizers.js').BertTokenizer} The WordPiece tokenizer.
             */
            get wp_tokenizer() {
              return this.components.wp_tokenizer;
            }
            /**
             * Helper function to decode the model prediction logits.
             * @param {import('../../utils/tensor.js').Tensor} pred_logits Model prediction logits.
             * @param {string} format Type of model prediction. Must be one of ['char', 'bpe', 'wp'].
             * @returns {[string[], number[]]} The decoded sentences and their confidence scores.
             */
            _decode_helper(pred_logits, format) {
              if (!DECODE_TYPE_MAPPING.hasOwnProperty(format)) {
                throw new Error(`Format ${format} is not supported.`);
              }
              const [decoder_name, eos_token] = DECODE_TYPE_MAPPING[format];
              const decoder = this[decoder_name].bind(this);
              const [batch_size, batch_max_length] = pred_logits.dims;
              const conf_scores = [];
              const all_ids = [];
              const pred_logits_list = pred_logits.tolist();
              for (let i = 0; i < batch_size; ++i) {
                const logits = pred_logits_list[i];
                const ids = [];
                const scores = [];
                for (let j = 1; j < batch_max_length; ++j) {
                  const [max_prob, max_prob_index] = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)((0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.softmax)(logits[j]));
                  scores.push(max_prob);
                  if (max_prob_index == eos_token) {
                    break;
                  }
                  ids.push(max_prob_index);
                }
                const confidence_score = scores.length > 0 ? scores.reduce((a, b) => a * b, 1) : 0;
                all_ids.push(ids);
                conf_scores.push(confidence_score);
              }
              const decoded = decoder(all_ids);
              return [decoded, conf_scores];
            }
            /**
             * Convert a list of lists of char token ids into a list of strings by calling char tokenizer.
             * @param {number[][]} sequences List of tokenized input ids.
             * @returns {string[]} The list of char decoded sentences.
             */
            char_decode(sequences) {
              return this.char_tokenizer.batch_decode(sequences).map((str) => str.replaceAll(" ", ""));
            }
            /**
             * Convert a list of lists of BPE token ids into a list of strings by calling BPE tokenizer.
             * @param {number[][]} sequences List of tokenized input ids.
             * @returns {string[]} The list of BPE decoded sentences.
             */
            bpe_decode(sequences) {
              return this.bpe_tokenizer.batch_decode(sequences);
            }
            /**
             * Convert a list of lists of word piece token ids into a list of strings by calling word piece tokenizer.
             * @param {number[][]} sequences List of tokenized input ids.
             * @returns {string[]} The list of wp decoded sentences.
             */
            wp_decode(sequences) {
              return this.wp_tokenizer.batch_decode(sequences).map((str) => str.replaceAll(" ", ""));
            }
            /**
             * Convert a list of lists of token ids into a list of strings by calling decode.
             * @param {import('../../utils/tensor.js').Tensor[]} sequences List of tokenized input ids.
             * @returns {{generated_text: string[], scores: number[], char_preds: string[], bpe_preds: string[], wp_preds: string[]}}
             * Dictionary of all the outputs of the decoded results.
             * - generated_text: The final results after fusion of char, bpe, and wp.
             * - scores: The final scores after fusion of char, bpe, and wp.
             * - char_preds: The list of character decoded sentences.
             * - bpe_preds: The list of BPE decoded sentences.
             * - wp_preds: The list of wp decoded sentences.
             */
            // @ts-expect-error The type of this method is not compatible with the one
            // in the base class. It might be a good idea to fix this.
            batch_decode([char_logits, bpe_logits, wp_logits]) {
              const [char_preds, char_scores] = this._decode_helper(char_logits, "char");
              const [bpe_preds, bpe_scores] = this._decode_helper(bpe_logits, "bpe");
              const [wp_preds, wp_scores] = this._decode_helper(wp_logits, "wp");
              const generated_text = [];
              const scores = [];
              for (let i = 0; i < char_preds.length; ++i) {
                const [max_score, max_score_index] = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)([char_scores[i], bpe_scores[i], wp_scores[i]]);
                generated_text.push([char_preds[i], bpe_preds[i], wp_preds[i]][max_score_index]);
                scores.push(max_score);
              }
              return {
                generated_text,
                scores,
                char_preds,
                bpe_preds,
                wp_preds
              };
            }
            /** @type {typeof Processor.from_pretrained} */
            static async from_pretrained(...args) {
              const base = await super.from_pretrained(...args);
              const bpe_tokenizer = await _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer.from_pretrained("Xenova/gpt2");
              const wp_tokenizer = await _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer.from_pretrained("Xenova/bert-base-uncased");
              base.components = {
                image_processor: base.image_processor,
                char_tokenizer: base.tokenizer,
                bpe_tokenizer,
                wp_tokenizer
              };
              return base;
            }
            async _call(images, text = null) {
              const result = await this.image_processor(images);
              if (text) {
                result.labels = this.tokenizer(text).input_ids;
              }
              return result;
            }
          }
          __publicField(MgpstrProcessor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);
          __publicField(MgpstrProcessor, "image_processor_class", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);
        }
      ),
      /***/
      "./src/models/mobilenet_v1/image_processing_mobilenet_v1.js": (
        /*!******************************************************************!*\
          !*** ./src/models/mobilenet_v1/image_processing_mobilenet_v1.js ***!
          \******************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            MobileNetV1FeatureExtractor: () => (
              /* binding */
              MobileNetV1FeatureExtractor
            ),
            /* harmony export */
            MobileNetV1ImageProcessor: () => (
              /* binding */
              MobileNetV1ImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class MobileNetV1ImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
          class MobileNetV1FeatureExtractor extends MobileNetV1ImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/mobilenet_v2/image_processing_mobilenet_v2.js": (
        /*!******************************************************************!*\
          !*** ./src/models/mobilenet_v2/image_processing_mobilenet_v2.js ***!
          \******************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            MobileNetV2FeatureExtractor: () => (
              /* binding */
              MobileNetV2FeatureExtractor
            ),
            /* harmony export */
            MobileNetV2ImageProcessor: () => (
              /* binding */
              MobileNetV2ImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class MobileNetV2ImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
          class MobileNetV2FeatureExtractor extends MobileNetV2ImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/mobilenet_v3/image_processing_mobilenet_v3.js": (
        /*!******************************************************************!*\
          !*** ./src/models/mobilenet_v3/image_processing_mobilenet_v3.js ***!
          \******************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            MobileNetV3FeatureExtractor: () => (
              /* binding */
              MobileNetV3FeatureExtractor
            ),
            /* harmony export */
            MobileNetV3ImageProcessor: () => (
              /* binding */
              MobileNetV3ImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class MobileNetV3ImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
          class MobileNetV3FeatureExtractor extends MobileNetV3ImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/mobilenet_v4/image_processing_mobilenet_v4.js": (
        /*!******************************************************************!*\
          !*** ./src/models/mobilenet_v4/image_processing_mobilenet_v4.js ***!
          \******************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            MobileNetV4FeatureExtractor: () => (
              /* binding */
              MobileNetV4FeatureExtractor
            ),
            /* harmony export */
            MobileNetV4ImageProcessor: () => (
              /* binding */
              MobileNetV4ImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class MobileNetV4ImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
          class MobileNetV4FeatureExtractor extends MobileNetV4ImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/mobilevit/image_processing_mobilevit.js": (
        /*!************************************************************!*\
          !*** ./src/models/mobilevit/image_processing_mobilevit.js ***!
          \************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            MobileViTFeatureExtractor: () => (
              /* binding */
              MobileViTFeatureExtractor
            ),
            /* harmony export */
            MobileViTImageProcessor: () => (
              /* binding */
              MobileViTImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class MobileViTImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
          class MobileViTFeatureExtractor extends MobileViTImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/moonshine/feature_extraction_moonshine.js": (
        /*!**************************************************************!*\
          !*** ./src/models/moonshine/feature_extraction_moonshine.js ***!
          \**************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            MoonshineFeatureExtractor: () => (
              /* binding */
              MoonshineFeatureExtractor
            )
            /* harmony export */
          });
          var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/feature_extraction_utils.js */
            "./src/base/feature_extraction_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          class MoonshineFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {
            /**
             * Asynchronously extracts input values from a given audio using the provided configuration.
             * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
             * @returns {Promise<{ input_values: Tensor; }>} The extracted input values.
             */
            async _call(audio) {
              (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, "MoonshineFeatureExtractor");
              if (audio instanceof Float64Array) {
                audio = new Float32Array(audio);
              }
              const shape = [
                1,
                /* batch_size */
                audio.length
                /* num_samples */
              ];
              return {
                input_values: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor("float32", audio, shape)
              };
            }
          }
        }
      ),
      /***/
      "./src/models/moonshine/processing_moonshine.js": (
        /*!******************************************************!*\
          !*** ./src/models/moonshine/processing_moonshine.js ***!
          \******************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            MoonshineProcessor: () => (
              /* binding */
              MoonshineProcessor
            )
            /* harmony export */
          });
          var _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../auto/feature_extraction_auto.js */
            "./src/models/auto/feature_extraction_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          class MoonshineProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__.Processor {
            /**
             * Calls the feature_extractor function with the given audio input.
             * @param {any} audio The audio input to extract features from.
             * @returns {Promise<any>} A Promise that resolves with the extracted features.
             */
            async _call(audio) {
              return await this.feature_extractor(audio);
            }
          }
          __publicField(MoonshineProcessor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__.AutoTokenizer);
          __publicField(MoonshineProcessor, "feature_extractor_class", _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_0__.AutoFeatureExtractor);
        }
      ),
      /***/
      "./src/models/nougat/image_processing_nougat.js": (
        /*!******************************************************!*\
          !*** ./src/models/nougat/image_processing_nougat.js ***!
          \******************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            NougatImageProcessor: () => (
              /* binding */
              NougatImageProcessor
            )
            /* harmony export */
          });
          var _donut_image_processing_donut_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../donut/image_processing_donut.js */
            "./src/models/donut/image_processing_donut.js"
          );
          class NougatImageProcessor extends _donut_image_processing_donut_js__WEBPACK_IMPORTED_MODULE_0__.DonutImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/owlv2/image_processing_owlv2.js": (
        /*!****************************************************!*\
          !*** ./src/models/owlv2/image_processing_owlv2.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Owlv2ImageProcessor: () => (
              /* binding */
              Owlv2ImageProcessor
            )
            /* harmony export */
          });
          var _owlvit_image_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../owlvit/image_processing_owlvit.js */
            "./src/models/owlvit/image_processing_owlvit.js"
          );
          class Owlv2ImageProcessor extends _owlvit_image_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_0__.OwlViTImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/owlvit/image_processing_owlvit.js": (
        /*!******************************************************!*\
          !*** ./src/models/owlvit/image_processing_owlvit.js ***!
          \******************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            OwlViTFeatureExtractor: () => (
              /* binding */
              OwlViTFeatureExtractor
            ),
            /* harmony export */
            OwlViTImageProcessor: () => (
              /* binding */
              OwlViTImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class OwlViTImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            /** @type {typeof post_process_object_detection} */
            post_process_object_detection(...args) {
              return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_object_detection)(...args);
            }
          }
          class OwlViTFeatureExtractor extends OwlViTImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/owlvit/processing_owlvit.js": (
        /*!************************************************!*\
          !*** ./src/models/owlvit/processing_owlvit.js ***!
          \************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            OwlViTProcessor: () => (
              /* binding */
              OwlViTProcessor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/image_processing_auto.js */
            "./src/models/auto/image_processing_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          class OwlViTProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
          }
          __publicField(OwlViTProcessor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);
          __publicField(OwlViTProcessor, "image_processor_class", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);
        }
      ),
      /***/
      "./src/models/paligemma/processing_paligemma.js": (
        /*!******************************************************!*\
          !*** ./src/models/paligemma/processing_paligemma.js ***!
          \******************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            PaliGemmaProcessor: () => (
              /* binding */
              PaliGemmaProcessor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/image_processing_auto.js */
            "./src/models/auto/image_processing_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          const IMAGE_TOKEN = "<image>";
          function build_string_from_input(prompt, bos_token, image_seq_len, image_token, num_images) {
            return `${image_token.repeat(image_seq_len * num_images)}${bos_token}${prompt}
`;
          }
          class PaliGemmaProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
            /**
             * @typedef {import('../../utils/image.js').RawImage} RawImage
             */
            // `images` is required, `text` is optional
            async _call(images, text = null, kwargs = {}) {
              if (!text) {
                console.warn(
                  "You are using PaliGemma without a text prefix. It will perform as a picture-captioning model."
                );
                text = "";
              }
              if (!Array.isArray(images)) {
                images = [images];
              }
              if (!Array.isArray(text)) {
                text = [text];
              }
              const bos_token = this.tokenizer.bos_token;
              const image_seq_length = this.image_processor.config.image_seq_length;
              let input_strings;
              if (text.some((t) => t.includes(IMAGE_TOKEN))) {
                input_strings = text.map(
                  (sample) => {
                    const expanded_sample = sample.replaceAll(IMAGE_TOKEN, IMAGE_TOKEN.repeat(image_seq_length));
                    const bos_rfind_index = expanded_sample.lastIndexOf(IMAGE_TOKEN);
                    const bos_index = bos_rfind_index === -1 ? 0 : bos_rfind_index + IMAGE_TOKEN.length;
                    return expanded_sample.slice(0, bos_index) + bos_token + expanded_sample.slice(bos_index) + "\n";
                  }
                );
              } else {
                console.warn(
                  "You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens."
                );
                input_strings = text.map(
                  (sample) => build_string_from_input(
                    sample,
                    bos_token,
                    image_seq_length,
                    IMAGE_TOKEN,
                    images.length
                  )
                );
              }
              const text_inputs = this.tokenizer(input_strings, kwargs);
              const image_inputs = await this.image_processor(images, kwargs);
              return {
                ...image_inputs,
                ...text_inputs
              };
            }
          }
          __publicField(PaliGemmaProcessor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);
          __publicField(PaliGemmaProcessor, "image_processor_class", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);
          __publicField(PaliGemmaProcessor, "uses_processor_config", false);
        }
      ),
      /***/
      "./src/models/phi3_v/image_processing_phi3_v.js": (
        /*!******************************************************!*\
          !*** ./src/models/phi3_v/image_processing_phi3_v.js ***!
          \******************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Phi3VImageProcessor: () => (
              /* binding */
              Phi3VImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          const IMAGE_SIZE = 336;
          const SLICE_AXES = [2, 3];
          const { ceil, floor, sqrt } = Math;
          class Phi3VImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            constructor(config) {
              super({
                ...config,
                do_normalize: true,
                do_pad: true,
                pad_size: "custom",
                do_convert_rgb: true,
                do_resize: true
                // Smart resizing "hd_transform"
              });
              this._num_crops = config.num_crops;
            }
            calc_num_image_tokens_from_image_size(width, height) {
              const { num_img_tokens } = this.config;
              return floor((floor(height / IMAGE_SIZE) * floor(width / IMAGE_SIZE) + 1) * num_img_tokens + 1 + (floor(height / IMAGE_SIZE) + 1) * sqrt(num_img_tokens));
            }
            /** @type {ImageProcessor['get_resize_output_image_size']} */
            get_resize_output_image_size(image, size) {
              const hd_num = this._num_crops;
              const [width, height] = image.size;
              let ratio = width / height;
              let scale = 1;
              while (scale * Math.ceil(scale / ratio) <= hd_num) {
                scale += 1;
              }
              scale -= 1;
              const new_w = Math.floor(scale * 336);
              const new_h = Math.floor(new_w / ratio);
              return [new_w, new_h];
            }
            /** @type {ImageProcessor['pad_image']} */
            pad_image(pixelData, imgDims, padSize, options = {}) {
              const [imageHeight, imageWidth] = imgDims;
              const height = IMAGE_SIZE * ceil(imageHeight / IMAGE_SIZE);
              const width = IMAGE_SIZE * ceil(imageWidth / IMAGE_SIZE);
              const constant_values = [1, 1, 1].map((x2, i) => (x2 - this.image_mean[i]) / this.image_std[i]);
              return super.pad_image(pixelData, imgDims, { width, height }, {
                center: true,
                constant_values,
                ...options
              });
            }
            async _call(images, {
              num_crops = null
            } = {}) {
              this._num_crops = num_crops ?? (num_crops = this.config.num_crops);
              if (num_crops < 4 || sqrt(num_crops) % 1 !== 0) {
                throw new Error("num_crops must be a square number >= 4");
              }
              if (!Array.isArray(images)) {
                images = [images];
              }
              const num_images = images.length;
              const imageData = await Promise.all(images.map((x2) => this.preprocess(x2)));
              const original_sizes = imageData.map((x2) => x2.original_size);
              const reshaped_input_sizes = imageData.map((x2) => x2.reshaped_input_size);
              const all_pixel_values = [];
              for (const { pixel_values: pixel_values2 } of imageData) {
                pixel_values2.unsqueeze_(0);
                const [height, width] = pixel_values2.dims.slice(-2);
                const batch_pixel_values = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate_4d)(pixel_values2, {
                  size: [IMAGE_SIZE, IMAGE_SIZE],
                  mode: "bicubic"
                });
                if (num_crops > 0) {
                  const patches = [];
                  const sqrt_patches = sqrt(num_crops);
                  const patch_width = floor(width / sqrt_patches);
                  const patch_height = floor(height / sqrt_patches);
                  for (let y2 = 0; y2 < sqrt_patches; ++y2) {
                    for (let x2 = 0; x2 < sqrt_patches; ++x2) {
                      let start_x, start_y, end_x, end_y;
                      if (y2 === sqrt_patches - 1) {
                        start_y = height - patch_height;
                        end_y = height;
                      } else {
                        start_y = y2 * patch_height;
                        end_y = (y2 + 1) * patch_height;
                      }
                      if (x2 === sqrt_patches - 1) {
                        start_x = width - patch_width;
                        end_x = width;
                      } else {
                        start_x = x2 * patch_width;
                        end_x = (x2 + 1) * patch_width;
                      }
                      const starts = [start_y, start_x];
                      const ends = [end_y, end_x];
                      const patch = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.slice)(pixel_values2, starts, ends, SLICE_AXES);
                      patches.push(patch);
                    }
                  }
                  const resized_tensors = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.interpolate_4d)((0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)(patches, 0), {
                    size: [IMAGE_SIZE, IMAGE_SIZE],
                    mode: "bicubic"
                  });
                  all_pixel_values.push((0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)([batch_pixel_values, resized_tensors], 0));
                } else {
                  all_pixel_values.push(batch_pixel_values);
                }
              }
              const pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.stack)(all_pixel_values, 0);
              const sizes = reshaped_input_sizes.map((x2) => x2.map((y2) => IMAGE_SIZE * ceil(y2 / IMAGE_SIZE)));
              const image_sizes = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(
                "int64",
                sizes.flat(),
                [num_images, 2]
              );
              const num_img_tokens = sizes.map(
                ([height, width]) => this.calc_num_image_tokens_from_image_size(width, height)
              );
              return { pixel_values, original_sizes, reshaped_input_sizes, image_sizes, num_img_tokens };
            }
          }
        }
      ),
      /***/
      "./src/models/phi3_v/processing_phi3_v.js": (
        /*!************************************************!*\
          !*** ./src/models/phi3_v/processing_phi3_v.js ***!
          \************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Phi3VProcessor: () => (
              /* binding */
              Phi3VProcessor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/image_processing_auto.js */
            "./src/models/auto/image_processing_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _utils_image_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../../utils/image.js */
            "./src/utils/image.js"
          );
          const IMAGE_TOKEN = "<|image|>";
          const IMAGE_TOKEN_PATTERN = /<\|image_\d+\|>/g;
          class Phi3VProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
            /**
             * 
             * @param {string|string[]} text 
             * @param {RawImage|RawImage[]} images 
             * @param  { { padding?: boolean, truncation?: boolean, num_crops?: number } | undefined } options
             * @returns {Promise<any>}
             */
            async _call(text, images = null, {
              padding = true,
              truncation = true,
              num_crops = null
            } = {}) {
              if (!Array.isArray(text)) {
                text = [text];
              }
              let text_inputs, image_inputs;
              if (images) {
                image_inputs = await this.image_processor(images, { num_crops });
                const { num_img_tokens } = image_inputs;
                const prompt_chunks = text.map((t, i) => t.split(IMAGE_TOKEN_PATTERN).join(IMAGE_TOKEN.repeat(num_img_tokens[i])));
                text_inputs = this.tokenizer(prompt_chunks, { padding, truncation });
                const image_token_id = this.tokenizer.model.convert_tokens_to_ids([IMAGE_TOKEN])[0];
                text_inputs.input_ids.map_((id) => id == image_token_id ? -id : id);
              } else {
                text_inputs = this.tokenizer(text);
              }
              return {
                ...text_inputs,
                ...image_inputs
              };
            }
          }
          __publicField(Phi3VProcessor, "image_processor_class", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);
          __publicField(Phi3VProcessor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);
        }
      ),
      /***/
      "./src/models/processors.js": (
        /*!**********************************!*\
          !*** ./src/models/processors.js ***!
          \**********************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Florence2Processor: () => (
              /* reexport safe */
              _florence2_processing_florence2_js__WEBPACK_IMPORTED_MODULE_0__.Florence2Processor
            ),
            /* harmony export */
            GroundingDinoProcessor: () => (
              /* reexport safe */
              _grounding_dino_processing_grounding_dino_js__WEBPACK_IMPORTED_MODULE_1__.GroundingDinoProcessor
            ),
            /* harmony export */
            Idefics3Processor: () => (
              /* reexport safe */
              _idefics3_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_2__.Idefics3Processor
            ),
            /* harmony export */
            JinaCLIPProcessor: () => (
              /* reexport safe */
              _jina_clip_processing_jina_clip_js__WEBPACK_IMPORTED_MODULE_4__.JinaCLIPProcessor
            ),
            /* harmony export */
            MgpstrProcessor: () => (
              /* reexport safe */
              _mgp_str_processing_mgp_str_js__WEBPACK_IMPORTED_MODULE_5__.MgpstrProcessor
            ),
            /* harmony export */
            MoonshineProcessor: () => (
              /* reexport safe */
              _moonshine_processing_moonshine_js__WEBPACK_IMPORTED_MODULE_6__.MoonshineProcessor
            ),
            /* harmony export */
            OwlViTProcessor: () => (
              /* reexport safe */
              _owlvit_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_7__.OwlViTProcessor
            ),
            /* harmony export */
            PaliGemmaProcessor: () => (
              /* reexport safe */
              _paligemma_processing_paligemma_js__WEBPACK_IMPORTED_MODULE_9__.PaliGemmaProcessor
            ),
            /* harmony export */
            Phi3VProcessor: () => (
              /* reexport safe */
              _phi3_v_processing_phi3_v_js__WEBPACK_IMPORTED_MODULE_8__.Phi3VProcessor
            ),
            /* harmony export */
            PyAnnoteProcessor: () => (
              /* reexport safe */
              _pyannote_processing_pyannote_js__WEBPACK_IMPORTED_MODULE_10__.PyAnnoteProcessor
            ),
            /* harmony export */
            Qwen2VLProcessor: () => (
              /* reexport safe */
              _qwen2_vl_processing_qwen2_vl_js__WEBPACK_IMPORTED_MODULE_11__.Qwen2VLProcessor
            ),
            /* harmony export */
            SamProcessor: () => (
              /* reexport safe */
              _sam_processing_sam_js__WEBPACK_IMPORTED_MODULE_12__.SamProcessor
            ),
            /* harmony export */
            SmolVLMProcessor: () => (
              /* reexport safe */
              _smolvlm_processing_smolvlm_js__WEBPACK_IMPORTED_MODULE_13__.SmolVLMProcessor
            ),
            /* harmony export */
            SpeechT5Processor: () => (
              /* reexport safe */
              _speecht5_processing_speecht5_js__WEBPACK_IMPORTED_MODULE_14__.SpeechT5Processor
            ),
            /* harmony export */
            UltravoxProcessor: () => (
              /* reexport safe */
              _ultravox_processing_ultravox_js__WEBPACK_IMPORTED_MODULE_15__.UltravoxProcessor
            ),
            /* harmony export */
            VLChatProcessor: () => (
              /* reexport safe */
              _janus_processing_janus_js__WEBPACK_IMPORTED_MODULE_3__.VLChatProcessor
            ),
            /* harmony export */
            Wav2Vec2Processor: () => (
              /* reexport safe */
              _wav2vec2_processing_wav2vec2_js__WEBPACK_IMPORTED_MODULE_16__.Wav2Vec2Processor
            ),
            /* harmony export */
            Wav2Vec2ProcessorWithLM: () => (
              /* reexport safe */
              _wav2vec2_with_lm_processing_wav2vec2_with_lm_js__WEBPACK_IMPORTED_MODULE_17__.Wav2Vec2ProcessorWithLM
            ),
            /* harmony export */
            WhisperProcessor: () => (
              /* reexport safe */
              _whisper_processing_whisper_js__WEBPACK_IMPORTED_MODULE_18__.WhisperProcessor
            )
            /* harmony export */
          });
          var _florence2_processing_florence2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ./florence2/processing_florence2.js */
            "./src/models/florence2/processing_florence2.js"
          );
          var _grounding_dino_processing_grounding_dino_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ./grounding_dino/processing_grounding_dino.js */
            "./src/models/grounding_dino/processing_grounding_dino.js"
          );
          var _idefics3_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ./idefics3/processing_idefics3.js */
            "./src/models/idefics3/processing_idefics3.js"
          );
          var _janus_processing_janus_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ./janus/processing_janus.js */
            "./src/models/janus/processing_janus.js"
          );
          var _jina_clip_processing_jina_clip_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
            /*! ./jina_clip/processing_jina_clip.js */
            "./src/models/jina_clip/processing_jina_clip.js"
          );
          var _mgp_str_processing_mgp_str_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
            /*! ./mgp_str/processing_mgp_str.js */
            "./src/models/mgp_str/processing_mgp_str.js"
          );
          var _moonshine_processing_moonshine_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
            /*! ./moonshine/processing_moonshine.js */
            "./src/models/moonshine/processing_moonshine.js"
          );
          var _owlvit_processing_owlvit_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
            /*! ./owlvit/processing_owlvit.js */
            "./src/models/owlvit/processing_owlvit.js"
          );
          var _phi3_v_processing_phi3_v_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
            /*! ./phi3_v/processing_phi3_v.js */
            "./src/models/phi3_v/processing_phi3_v.js"
          );
          var _paligemma_processing_paligemma_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
            /*! ./paligemma/processing_paligemma.js */
            "./src/models/paligemma/processing_paligemma.js"
          );
          var _pyannote_processing_pyannote_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
            /*! ./pyannote/processing_pyannote.js */
            "./src/models/pyannote/processing_pyannote.js"
          );
          var _qwen2_vl_processing_qwen2_vl_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__2(
            /*! ./qwen2_vl/processing_qwen2_vl.js */
            "./src/models/qwen2_vl/processing_qwen2_vl.js"
          );
          var _sam_processing_sam_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
            /*! ./sam/processing_sam.js */
            "./src/models/sam/processing_sam.js"
          );
          var _smolvlm_processing_smolvlm_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(
            /*! ./smolvlm/processing_smolvlm.js */
            "./src/models/smolvlm/processing_smolvlm.js"
          );
          var _speecht5_processing_speecht5_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(
            /*! ./speecht5/processing_speecht5.js */
            "./src/models/speecht5/processing_speecht5.js"
          );
          var _ultravox_processing_ultravox_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(
            /*! ./ultravox/processing_ultravox.js */
            "./src/models/ultravox/processing_ultravox.js"
          );
          var _wav2vec2_processing_wav2vec2_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__2(
            /*! ./wav2vec2/processing_wav2vec2.js */
            "./src/models/wav2vec2/processing_wav2vec2.js"
          );
          var _wav2vec2_with_lm_processing_wav2vec2_with_lm_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__2(
            /*! ./wav2vec2_with_lm/processing_wav2vec2_with_lm.js */
            "./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js"
          );
          var _whisper_processing_whisper_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__2(
            /*! ./whisper/processing_whisper.js */
            "./src/models/whisper/processing_whisper.js"
          );
        }
      ),
      /***/
      "./src/models/pvt/image_processing_pvt.js": (
        /*!************************************************!*\
          !*** ./src/models/pvt/image_processing_pvt.js ***!
          \************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            PvtImageProcessor: () => (
              /* binding */
              PvtImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class PvtImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/pyannote/feature_extraction_pyannote.js": (
        /*!************************************************************!*\
          !*** ./src/models/pyannote/feature_extraction_pyannote.js ***!
          \************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            PyAnnoteFeatureExtractor: () => (
              /* binding */
              PyAnnoteFeatureExtractor
            )
            /* harmony export */
          });
          var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/feature_extraction_utils.js */
            "./src/base/feature_extraction_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../utils/maths.js */
            "./src/utils/maths.js"
          );
          class PyAnnoteFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {
            /**
             * Asynchronously extracts features from a given audio using the provided configuration.
             * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
             * @returns {Promise<{ input_values: Tensor; }>} The extracted input features.
             */
            async _call(audio) {
              (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, "PyAnnoteFeatureExtractor");
              if (audio instanceof Float64Array) {
                audio = new Float32Array(audio);
              }
              const shape = [
                1,
                /* batch_size */
                1,
                /* num_channels */
                audio.length
                /* num_samples */
              ];
              return {
                input_values: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor("float32", audio, shape)
              };
            }
            /**
             * NOTE: Can return fractional values. `Math.ceil` will ensure correct value.
             * @param {number} samples The number of frames in the audio.
             * @returns {number} The number of frames in the audio.
             */
            samples_to_frames(samples) {
              return (samples - this.config.offset) / this.config.step;
            }
            /**
             * Post-processes the speaker diarization logits output by the model.
             * @param {import('../../utils/tensor.js').Tensor} logits The speaker diarization logits output by the model.
             * @param {number} num_samples Number of samples in the input audio.
             * @returns {Array<Array<{ id: number, start: number, end: number, confidence: number }>>} The post-processed speaker diarization results.
             */
            post_process_speaker_diarization(logits, num_samples) {
              const ratio = num_samples / this.samples_to_frames(num_samples) / this.config.sampling_rate;
              const results = [];
              for (const scores of logits.tolist()) {
                const accumulated_segments = [];
                let current_speaker = -1;
                for (let i = 0; i < scores.length; ++i) {
                  const probabilities = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.softmax)(scores[i]);
                  const [score, id] = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(probabilities);
                  const [start, end] = [i, i + 1];
                  if (id !== current_speaker) {
                    current_speaker = id;
                    accumulated_segments.push({ id, start, end, score });
                  } else {
                    accumulated_segments.at(-1).end = end;
                    accumulated_segments.at(-1).score += score;
                  }
                }
                results.push(accumulated_segments.map(
                  // Convert frame-space to time-space
                  // and compute the confidence
                  ({ id, start, end, score }) => ({
                    id,
                    start: start * ratio,
                    end: end * ratio,
                    confidence: score / (end - start)
                  })
                ));
              }
              return results;
            }
          }
        }
      ),
      /***/
      "./src/models/pyannote/processing_pyannote.js": (
        /*!****************************************************!*\
          !*** ./src/models/pyannote/processing_pyannote.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            PyAnnoteProcessor: () => (
              /* binding */
              PyAnnoteProcessor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _feature_extraction_pyannote_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ./feature_extraction_pyannote.js */
            "./src/models/pyannote/feature_extraction_pyannote.js"
          );
          class PyAnnoteProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
            /**
             * Calls the feature_extractor function with the given audio input.
             * @param {any} audio The audio input to extract features from.
             * @returns {Promise<any>} A Promise that resolves with the extracted features.
             */
            async _call(audio) {
              return await this.feature_extractor(audio);
            }
            /** @type {PyAnnoteFeatureExtractor['post_process_speaker_diarization']} */
            post_process_speaker_diarization(...args) {
              return (
                /** @type {PyAnnoteFeatureExtractor} */
                this.feature_extractor.post_process_speaker_diarization(...args)
              );
            }
            get sampling_rate() {
              return this.feature_extractor.config.sampling_rate;
            }
          }
          __publicField(PyAnnoteProcessor, "feature_extractor_class", _feature_extraction_pyannote_js__WEBPACK_IMPORTED_MODULE_1__.PyAnnoteFeatureExtractor);
        }
      ),
      /***/
      "./src/models/qwen2_vl/image_processing_qwen2_vl.js": (
        /*!**********************************************************!*\
          !*** ./src/models/qwen2_vl/image_processing_qwen2_vl.js ***!
          \**********************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Qwen2VLImageProcessor: () => (
              /* binding */
              Qwen2VLImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          class Qwen2VLImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            async _call(images, ...args) {
              const { pixel_values, original_sizes, reshaped_input_sizes } = await super._call(images, ...args);
              let patches = pixel_values;
              const { temporal_patch_size, merge_size, patch_size } = this.config;
              if (patches.dims[0] === 1) {
                patches = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)(Array.from({ length: temporal_patch_size }, () => patches), 0);
              }
              const grid_t = patches.dims[0] / temporal_patch_size;
              const channel = patches.dims[1];
              const grid_h = Math.floor(patches.dims[2] / patch_size);
              const grid_w = Math.floor(patches.dims[3] / patch_size);
              const flatten_patches = patches.view(
                grid_t,
                temporal_patch_size,
                channel,
                Math.floor(grid_h / merge_size),
                merge_size,
                patch_size,
                Math.floor(grid_w / merge_size),
                merge_size,
                patch_size
              ).permute(0, 3, 6, 4, 7, 2, 1, 5, 8).view(
                grid_t * grid_h * grid_w,
                channel * temporal_patch_size * patch_size * patch_size
              );
              const image_grid_thw = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor("int64", [grid_t, grid_h, grid_w], [1, 3]);
              return {
                pixel_values: flatten_patches,
                image_grid_thw,
                original_sizes,
                reshaped_input_sizes
              };
            }
          }
        }
      ),
      /***/
      "./src/models/qwen2_vl/processing_qwen2_vl.js": (
        /*!****************************************************!*\
          !*** ./src/models/qwen2_vl/processing_qwen2_vl.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Qwen2VLProcessor: () => (
              /* binding */
              Qwen2VLProcessor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/image_processing_auto.js */
            "./src/models/auto/image_processing_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _utils_image_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../../utils/image.js */
            "./src/utils/image.js"
          );
          class Qwen2VLProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
            /**
             * 
             * @param {string|string[]} text 
             * @param {RawImage|RawImage[]} images 
             * @param  {...any} args 
             * @returns {Promise<any>}
             */
            async _call(text, images = null, ...args) {
              if (!Array.isArray(text)) {
                text = [text];
              }
              let image_inputs, image_grid_thw;
              if (images) {
                image_inputs = await this.image_processor(images);
                image_grid_thw = image_inputs.image_grid_thw;
              }
              if (image_grid_thw) {
                let merge_length = this.image_processor.config.merge_size ** 2;
                let index = 0;
                const image_grid_thw_list = image_grid_thw.tolist();
                text = text.map((t) => {
                  while (t.includes("<|image_pad|>")) {
                    const prod = Number(image_grid_thw_list[index++].reduce((a, b) => a * b, 1n));
                    t = t.replace("<|image_pad|>", "<|placeholder|>".repeat(Math.floor(prod / merge_length)));
                  }
                  return t.replaceAll("<|placeholder|>", "<|image_pad|>");
                });
              }
              const text_inputs = this.tokenizer(text);
              return {
                ...text_inputs,
                ...image_inputs
                // TODO: ...videos_inputs,
              };
            }
          }
          __publicField(Qwen2VLProcessor, "image_processor_class", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);
          __publicField(Qwen2VLProcessor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_2__.AutoTokenizer);
        }
      ),
      /***/
      "./src/models/rt_detr/image_processing_rt_detr.js": (
        /*!********************************************************!*\
          !*** ./src/models/rt_detr/image_processing_rt_detr.js ***!
          \********************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            RTDetrImageProcessor: () => (
              /* binding */
              RTDetrImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class RTDetrImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            /** @type {typeof post_process_object_detection} */
            post_process_object_detection(...args) {
              return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_object_detection)(...args);
            }
          }
        }
      ),
      /***/
      "./src/models/sam/image_processing_sam.js": (
        /*!************************************************!*\
          !*** ./src/models/sam/image_processing_sam.js ***!
          \************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            SamImageProcessor: () => (
              /* binding */
              SamImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          var _utils_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/core.js */
            "./src/utils/core.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          class SamImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            /**
             * 
             * @param {any} input_points 
             * @param {import("../../base/image_processors_utils.js").HeightWidth[]} original_sizes 
             * @param {import("../../base/image_processors_utils.js").HeightWidth[]} reshaped_input_sizes 
             * @returns {Tensor}
             */
            reshape_input_points(input_points, original_sizes, reshaped_input_sizes, is_bounding_box = false) {
              input_points = structuredClone(input_points);
              let shape = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.calculateDimensions)(input_points);
              if (shape.length === 3) {
                if (!is_bounding_box) {
                  shape = [1, ...shape];
                }
                input_points = [input_points];
              } else if (shape.length !== 4) {
                throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");
              }
              for (let i = 0; i < input_points.length; ++i) {
                let originalImageSize = original_sizes[i];
                let reshapedImageSize = reshaped_input_sizes[i];
                let resizeFactors = [
                  reshapedImageSize[0] / originalImageSize[0],
                  reshapedImageSize[1] / originalImageSize[1]
                ];
                for (let j = 0; j < input_points[i].length; ++j) {
                  for (let k = 0; k < input_points[i][j].length; ++k) {
                    for (let w2 = 0; w2 < input_points[i][j][k].length; ++w2) {
                      input_points[i][j][k][w2] *= resizeFactors[w2 % 2];
                    }
                  }
                }
              }
              return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_2__.Tensor(
                "float32",
                Float32Array.from(input_points.flat(Infinity)),
                shape
              );
            }
            /**
             * 
             * @param {any} input_labels 
             * @param {Tensor} input_points 
             * @returns {Tensor}
             */
            add_input_labels(input_labels, input_points) {
              let shape = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.calculateDimensions)(input_labels);
              if (shape.length === 2) {
                shape = [1, ...shape];
                input_labels = [input_labels];
              } else if (shape.length !== 3) {
                throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");
              }
              if (shape.some((x2, i) => x2 !== input_points.dims[i])) {
                throw Error(`The first ${shape.length} dimensions of 'input_points' and 'input_labels' must be the same.`);
              }
              return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_2__.Tensor(
                "int64",
                input_labels.flat(Infinity).map(BigInt),
                shape
              );
            }
            /**
             * @param {any[]} images The URL(s) of the image(s) to extract features from.
             * @param {Object} [options] Additional options for the processor.
             * @param {any} [options.input_points=null] A 3D or 4D array, representing the input points provided by the user.
             * - 3D: `[point_batch_size, nb_points_per_image, 2]`. In this case, `batch_size` is assumed to be 1.
             * - 4D: `[batch_size, point_batch_size, nb_points_per_image, 2]`.
             * @param {any} [options.input_labels=null] A 2D or 3D array, representing the input labels for the points, used by the prompt encoder to encode the prompt.
             * - 2D: `[point_batch_size, nb_points_per_image]`. In this case, `batch_size` is assumed to be 1.
             * - 3D: `[batch_size, point_batch_size, nb_points_per_image]`.
             * @param {number[][][]} [options.input_boxes=null] A 3D array of shape `(batch_size, num_boxes, 4)`, representing the input boxes provided by the user.
             * This is used by the prompt encoder to encode the prompt. Generally yields to much better generated masks.
             * The processor will generate a tensor, with each dimension corresponding respectively to the image batch size,
             * the number of boxes per image and the coordinates of the top left and botton right point of the box.
             * In the order (`x1`, `y1`, `x2`, `y2`):
             * - `x1`: the x coordinate of the top left point of the input box
             * - `y1`: the y coordinate of the top left point of the input box
             * - `x2`: the x coordinate of the bottom right point of the input box
             * - `y2`: the y coordinate of the bottom right point of the input box
             * @returns {Promise<SamImageProcessorResult>}
             */
            async _call(images, {
              input_points = null,
              input_labels = null,
              input_boxes = null
            } = {}) {
              const processed = await super._call(images);
              if (input_points) {
                processed.input_points = this.reshape_input_points(
                  input_points,
                  processed.original_sizes,
                  processed.reshaped_input_sizes
                );
              }
              if (input_labels) {
                if (!processed.input_points) {
                  throw Error("`input_points` must be provided if `input_labels` are provided.");
                }
                processed.input_labels = this.add_input_labels(input_labels, processed.input_points);
              }
              if (input_boxes) {
                processed.input_boxes = this.reshape_input_points(
                  input_boxes,
                  processed.original_sizes,
                  processed.reshaped_input_sizes,
                  true
                );
              }
              return processed;
            }
            /**
             * Remove padding and upscale masks to the original image size.
             * @param {Tensor} masks Batched masks from the mask_decoder in (batch_size, num_channels, height, width) format.
             * @param {[number, number][]} original_sizes The original sizes of each image before it was resized to the model's expected input shape, in (height, width) format.
             * @param {[number, number][]} reshaped_input_sizes The size of each image as it is fed to the model, in (height, width) format. Used to remove padding.
             * @param {Object} options Optional parameters for post-processing.
             * @param {number} [options.mask_threshold] The threshold to use for binarizing the masks.
             * @param {boolean} [options.binarize] Whether to binarize the masks.
             * @param {Object} [options.pad_size] The target size the images were padded to before being passed to the model. If `null`, the target size is assumed to be the processor's `pad_size`.
             * @param {number} [options.pad_size.height] The height the images were padded to.
             * @param {number} [options.pad_size.width] The width the images were padded to.
             * @returns {Promise<Tensor[]>} Batched masks in batch_size, num_channels, height, width) format, where (height, width) is given by original_size.
             */
            async post_process_masks(masks, original_sizes, reshaped_input_sizes, {
              mask_threshold = 0,
              binarize = true,
              pad_size = null
            } = {}) {
              const output_masks = [];
              pad_size = pad_size ?? this.pad_size;
              const target_image_size = [pad_size.height, pad_size.width];
              for (let i = 0; i < original_sizes.length; ++i) {
                const original_size = original_sizes[i];
                const reshaped_input_size = reshaped_input_sizes[i];
                let interpolated_mask = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_2__.interpolate_4d)(
                  masks[i],
                  { mode: "bilinear", size: target_image_size }
                );
                interpolated_mask = interpolated_mask.slice(null, null, [0, reshaped_input_size[0]], [0, reshaped_input_size[1]]);
                interpolated_mask = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_2__.interpolate_4d)(
                  interpolated_mask,
                  { mode: "bilinear", size: original_size }
                );
                if (binarize) {
                  const data = interpolated_mask.data;
                  const binarizedMaskData = new Uint8Array(data.length);
                  for (let i2 = 0; i2 < data.length; ++i2) {
                    if (data[i2] > mask_threshold) {
                      binarizedMaskData[i2] = 1;
                    }
                  }
                  interpolated_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_2__.Tensor(
                    "bool",
                    binarizedMaskData,
                    interpolated_mask.dims
                  );
                }
                output_masks.push(interpolated_mask);
              }
              return output_masks;
            }
            /**
             * Generates a list of crop boxes of different sizes. Each layer has (2**i)**2 boxes for the ith layer.
             * @param {import("../../utils/image.js").RawImage} image Input original image
             * @param {number} target_size Target size of the resized image
             * @param {Object} options Options for generating crop boxes 
             * @param {number} [options.crop_n_layers] If >0, mask prediction will be run again on crops of the image.
             * Sets the number of layers to run, where each layer has 2**i_layer number of image crops.
             * @param {number} [options.overlap_ratio] Sets the degree to which crops overlap. In the first crop layer,
             * crops will overlap by this fraction of the image length. Later layers with more crops scale down this overlap.
             * @param {number} [options.points_per_crop] Number of points to sample from each crop.
             * @param {number} [options.crop_n_points_downscale_factor] The number of points-per-side sampled in layer n is
             * scaled down by crop_n_points_downscale_factor**n.
             * @returns {Object} An object containing the crop boxes, number of points per crop, cropped images, and input labels.
             */
            generate_crop_boxes(image, target_size, {
              crop_n_layers = 0,
              overlap_ratio = 512 / 1500,
              points_per_crop = 32,
              crop_n_points_downscale_factor = 1
            } = {}) {
            }
          }
        }
      ),
      /***/
      "./src/models/sam/processing_sam.js": (
        /*!******************************************!*\
          !*** ./src/models/sam/processing_sam.js ***!
          \******************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            SamProcessor: () => (
              /* binding */
              SamProcessor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/image_processing_auto.js */
            "./src/models/auto/image_processing_auto.js"
          );
          class SamProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
            async _call(...args) {
              return await this.image_processor(...args);
            }
            post_process_masks(...args) {
              return this.image_processor.post_process_masks(...args);
            }
            reshape_input_points(...args) {
              return this.image_processor.reshape_input_points(...args);
            }
          }
          __publicField(SamProcessor, "image_processor_class", _auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoImageProcessor);
        }
      ),
      /***/
      "./src/models/seamless_m4t/feature_extraction_seamless_m4t.js": (
        /*!********************************************************************!*\
          !*** ./src/models/seamless_m4t/feature_extraction_seamless_m4t.js ***!
          \********************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            SeamlessM4TFeatureExtractor: () => (
              /* binding */
              SeamlessM4TFeatureExtractor
            )
            /* harmony export */
          });
          var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/feature_extraction_utils.js */
            "./src/base/feature_extraction_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../utils/audio.js */
            "./src/utils/audio.js"
          );
          class SeamlessM4TFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {
            constructor(config) {
              super(config);
              const sampling_rate = this.config.sampling_rate;
              const mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.mel_filter_bank)(
                257,
                // num_frequency_bins
                this.config.num_mel_bins,
                // num_mel_filters
                20,
                // min_frequency
                Math.floor(sampling_rate / 2),
                // max_frequency
                sampling_rate,
                // sampling_rate
                null,
                // norm
                "kaldi",
                // mel_scale
                true
                // triangularize_in_mel_space
              );
              this.mel_filters = mel_filters;
              this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.window_function)(400, "povey", {
                periodic: false
              });
            }
            /**
             * Computes the log-Mel spectrogram of the provided audio waveform.
             * @param {Float32Array|Float64Array} waveform The audio waveform to process.
             * @param {number} max_length The maximum number of frames to return.
             * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
             */
            async _extract_fbank_features(waveform, max_length) {
              waveform = waveform.map((x2) => x2 * 32768);
              return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.spectrogram)(
                waveform,
                this.window,
                // window
                400,
                // frame_length
                160,
                // hop_length
                {
                  fft_length: 512,
                  power: 2,
                  center: false,
                  preemphasis: 0.97,
                  mel_filters: this.mel_filters,
                  log_mel: "log",
                  mel_floor: 1192092955078125e-22,
                  remove_dc_offset: true,
                  // Custom
                  max_num_frames: max_length,
                  transpose: true
                }
              );
            }
            /**
             * Asynchronously extracts features from a given audio using the provided configuration.
             * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
             * @param {Object} options Optional parameters for feature extraction.
             * @param {boolean} [options.padding=true] Whether to pad the sequence to a multiple of `pad_to_multiple_of`.
             * @param {number} [options.pad_to_multiple_of=2] The number to pad the sequence to a multiple of.
             * @param {boolean} [options.do_normalize_per_mel_bins=true] Whether or not to zero-mean unit-variance normalize the input per mel-channel.
             * @param {boolean} [options.return_attention_mask=true] Whether to return the attention mask.
             * @returns {Promise<{ input_features: Tensor, attention_mask?: Tensor }>} A Promise resolving to an object containing the extracted input features and attention masks as Tensors.
             */
            async _call(audio, {
              padding = true,
              pad_to_multiple_of = 2,
              do_normalize_per_mel_bins = true,
              return_attention_mask = true
            } = {}) {
              (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, "SeamlessM4TFeatureExtractor");
              let features = await this._extract_fbank_features(audio, this.config.max_length);
              if (do_normalize_per_mel_bins) {
                const [num_features, feature_size] = features.dims;
                const data = features.data;
                for (let i = 0; i < feature_size; ++i) {
                  let sum = 0;
                  for (let j = 0; j < num_features; ++j) {
                    sum += data[j * feature_size + i];
                  }
                  const mean = sum / num_features;
                  let variance = 0;
                  for (let j = 0; j < num_features; ++j) {
                    variance += (data[j * feature_size + i] - mean) ** 2;
                  }
                  variance /= num_features - 1;
                  const std = Math.sqrt(variance + 1e-7);
                  for (let j = 0; j < num_features; ++j) {
                    const index = j * feature_size + i;
                    data[index] = (data[index] - mean) / std;
                  }
                }
              }
              let padded_attention_mask;
              if (padding) {
                const [num_frames2, num_channels2] = features.dims;
                const data = (
                  /** @type {Float32Array} */
                  features.data
                );
                const pad_size = num_frames2 % pad_to_multiple_of;
                if (pad_size > 0) {
                  const padded_data = new Float32Array(num_channels2 * (num_frames2 + pad_size));
                  padded_data.set(data);
                  padded_data.fill(this.config.padding_value, data.length);
                  const numPaddedFrames = num_frames2 + pad_size;
                  features = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(
                    features.type,
                    padded_data,
                    [numPaddedFrames, num_channels2]
                  );
                  if (return_attention_mask) {
                    padded_attention_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(
                      "int64",
                      new BigInt64Array(numPaddedFrames),
                      [1, numPaddedFrames]
                    );
                    padded_attention_mask.data.fill(1n, 0, num_frames2);
                  }
                }
              }
              const [num_frames, num_channels] = features.dims;
              const stride = this.config.stride;
              const remainder = num_frames % stride;
              if (remainder !== 0) {
                throw new Error(`The number of frames (${num_frames}) must be a multiple of the stride (${stride}).`);
              }
              const input_features = features.view(
                1,
                Math.floor(num_frames / stride),
                num_channels * stride
              );
              const result = { input_features };
              if (return_attention_mask) {
                const reshapedNumFrames = input_features.dims[1];
                const attention_mask_data = new BigInt64Array(reshapedNumFrames);
                if (padded_attention_mask) {
                  const padded_attention_mask_data = padded_attention_mask.data;
                  for (let i = 1, j = 0; i < num_frames; i += stride, ++j) {
                    attention_mask_data[j] = padded_attention_mask_data[i];
                  }
                } else {
                  attention_mask_data.fill(1n);
                }
                result.attention_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(
                  "int64",
                  attention_mask_data,
                  [1, reshapedNumFrames]
                );
              }
              return result;
            }
          }
        }
      ),
      /***/
      "./src/models/segformer/image_processing_segformer.js": (
        /*!************************************************************!*\
          !*** ./src/models/segformer/image_processing_segformer.js ***!
          \************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            SegformerFeatureExtractor: () => (
              /* binding */
              SegformerFeatureExtractor
            ),
            /* harmony export */
            SegformerImageProcessor: () => (
              /* binding */
              SegformerImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class SegformerImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            /** @type {typeof post_process_semantic_segmentation} */
            post_process_semantic_segmentation(...args) {
              return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_semantic_segmentation)(...args);
            }
          }
          class SegformerFeatureExtractor extends SegformerImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/siglip/image_processing_siglip.js": (
        /*!******************************************************!*\
          !*** ./src/models/siglip/image_processing_siglip.js ***!
          \******************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            SiglipImageProcessor: () => (
              /* binding */
              SiglipImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class SiglipImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/smolvlm/image_processing_smolvlm.js": (
        /*!********************************************************!*\
          !*** ./src/models/smolvlm/image_processing_smolvlm.js ***!
          \********************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            SmolVLMImageProcessor: () => (
              /* reexport safe */
              _idefics3_image_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_0__.Idefics3ImageProcessor
            )
            /* harmony export */
          });
          var _idefics3_image_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../idefics3/image_processing_idefics3.js */
            "./src/models/idefics3/image_processing_idefics3.js"
          );
        }
      ),
      /***/
      "./src/models/smolvlm/processing_smolvlm.js": (
        /*!**************************************************!*\
          !*** ./src/models/smolvlm/processing_smolvlm.js ***!
          \**************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            SmolVLMProcessor: () => (
              /* reexport safe */
              _idefics3_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_0__.Idefics3Processor
            )
            /* harmony export */
          });
          var _idefics3_processing_idefics3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../idefics3/processing_idefics3.js */
            "./src/models/idefics3/processing_idefics3.js"
          );
        }
      ),
      /***/
      "./src/models/snac/feature_extraction_snac.js": (
        /*!****************************************************!*\
          !*** ./src/models/snac/feature_extraction_snac.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            SnacFeatureExtractor: () => (
              /* binding */
              SnacFeatureExtractor
            )
            /* harmony export */
          });
          var _dac_feature_extraction_dac_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../dac/feature_extraction_dac.js */
            "./src/models/dac/feature_extraction_dac.js"
          );
          class SnacFeatureExtractor extends _dac_feature_extraction_dac_js__WEBPACK_IMPORTED_MODULE_0__.DacFeatureExtractor {
          }
        }
      ),
      /***/
      "./src/models/speecht5/feature_extraction_speecht5.js": (
        /*!************************************************************!*\
          !*** ./src/models/speecht5/feature_extraction_speecht5.js ***!
          \************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            SpeechT5FeatureExtractor: () => (
              /* binding */
              SpeechT5FeatureExtractor
            )
            /* harmony export */
          });
          var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/feature_extraction_utils.js */
            "./src/base/feature_extraction_utils.js"
          );
          class SpeechT5FeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {
          }
        }
      ),
      /***/
      "./src/models/speecht5/processing_speecht5.js": (
        /*!****************************************************!*\
          !*** ./src/models/speecht5/processing_speecht5.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            SpeechT5Processor: () => (
              /* binding */
              SpeechT5Processor
            )
            /* harmony export */
          });
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../auto/feature_extraction_auto.js */
            "./src/models/auto/feature_extraction_auto.js"
          );
          class SpeechT5Processor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_0__.Processor {
            /**
             * Calls the feature_extractor function with the given input.
             * @param {any} input The input to extract features from.
             * @returns {Promise<any>} A Promise that resolves with the extracted features.
             */
            async _call(input) {
              return await this.feature_extractor(input);
            }
          }
          __publicField(SpeechT5Processor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__.AutoTokenizer);
          __publicField(SpeechT5Processor, "feature_extractor_class", _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoFeatureExtractor);
        }
      ),
      /***/
      "./src/models/swin2sr/image_processing_swin2sr.js": (
        /*!********************************************************!*\
          !*** ./src/models/swin2sr/image_processing_swin2sr.js ***!
          \********************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Swin2SRImageProcessor: () => (
              /* binding */
              Swin2SRImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class Swin2SRImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            pad_image(pixelData, imgDims, padSize, options = {}) {
              const [imageHeight, imageWidth, imageChannels] = imgDims;
              return super.pad_image(pixelData, imgDims, {
                // NOTE: For Swin2SR models, the original python implementation adds padding even when the image's width/height is already
                // a multiple of `pad_size`. However, this is most likely a bug (PR: https://github.com/mv-lab/swin2sr/pull/19).
                // For this reason, we only add padding when the image's width/height is not a multiple of `pad_size`.
                width: imageWidth + (padSize - imageWidth % padSize) % padSize,
                height: imageHeight + (padSize - imageHeight % padSize) % padSize
              }, {
                mode: "symmetric",
                center: false,
                constant_values: -1,
                ...options
              });
            }
          }
        }
      ),
      /***/
      "./src/models/ultravox/processing_ultravox.js": (
        /*!****************************************************!*\
          !*** ./src/models/ultravox/processing_ultravox.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            UltravoxProcessor: () => (
              /* binding */
              UltravoxProcessor
            )
            /* harmony export */
          });
          var _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../auto/feature_extraction_auto.js */
            "./src/models/auto/feature_extraction_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          class UltravoxProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__.Processor {
            /**
             * @param {string} text The text input to process.
             * @param {Float32Array} audio The audio input to process.
             */
            async _call(text, audio = null, kwargs = {}) {
              if (Array.isArray(text)) {
                throw new Error("Batched inputs are not supported yet.");
              }
              let audio_inputs = {};
              if (audio) {
                const audio_len = audio.length;
                const { input_features } = await this.feature_extractor(audio, {
                  ...kwargs,
                  max_length: audio_len
                });
                const nb_encoder_frames = Math.round(audio_len / this.config.encoder_ds_factor + 1e-4);
                const audio_embed_frames = 1 + Math.ceil(nb_encoder_frames / this.config.stack_factor);
                audio_inputs["audio_token_len"] = [audio_embed_frames];
                audio_inputs["audio_values"] = input_features;
                const image_token = this.config.audio_placeholder;
                if (!text.includes(image_token)) {
                  throw new Error(`The input text does not contain the image token ${image_token}.`);
                }
                text = text.replaceAll(image_token, image_token.repeat(audio_embed_frames));
              }
              const text_inputs = this.tokenizer(text, {
                add_special_tokens: false,
                ...kwargs
              });
              return {
                ...text_inputs,
                ...audio_inputs
              };
            }
          }
          __publicField(UltravoxProcessor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__.AutoTokenizer);
          __publicField(UltravoxProcessor, "feature_extractor_class", _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_0__.AutoFeatureExtractor);
          __publicField(UltravoxProcessor, "uses_processor_config", true);
        }
      ),
      /***/
      "./src/models/vit/image_processing_vit.js": (
        /*!************************************************!*\
          !*** ./src/models/vit/image_processing_vit.js ***!
          \************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            ViTFeatureExtractor: () => (
              /* binding */
              ViTFeatureExtractor
            ),
            /* harmony export */
            ViTImageProcessor: () => (
              /* binding */
              ViTImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class ViTImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
          }
          class ViTFeatureExtractor extends ViTImageProcessor {
          }
        }
      ),
      /***/
      "./src/models/vitmatte/image_processing_vitmatte.js": (
        /*!**********************************************************!*\
          !*** ./src/models/vitmatte/image_processing_vitmatte.js ***!
          \**********************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            VitMatteImageProcessor: () => (
              /* binding */
              VitMatteImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          class VitMatteImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            /**
             * Calls the feature extraction process on an array of images, preprocesses
             * each image, and concatenates the resulting features into a single Tensor.
             * @param {import("../../utils/image.js").RawImage[]} images The image(s) to extract features from.
             * @param {import("../../utils/image.js").RawImage[]} trimaps The trimaps(s) to extract features from.
             * @returns {Promise<import("../../base/image_processors_utils.js").ImageProcessorResult>} An object containing the concatenated pixel values of the preprocessed images.
             */
            async _call(images, trimaps) {
              if (!Array.isArray(images)) {
                images = [images];
              }
              if (!Array.isArray(trimaps)) {
                trimaps = [trimaps];
              }
              const imageData = await Promise.all(images.map((x2) => this.preprocess(x2)));
              const trimapData = await Promise.all(trimaps.map((x2) => this.preprocess(x2, {
                do_normalize: false,
                do_convert_rgb: false,
                do_convert_grayscale: true
              })));
              const pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.stack)(imageData.map(
                // Concatenate images and trimaps
                (x2, i) => (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.cat)([x2.pixel_values, trimapData[i].pixel_values], 0)
              ), 0);
              return {
                pixel_values,
                // Original sizes of images
                original_sizes: imageData.map((x2) => x2.original_size),
                // Reshaped sizes of images, before padding or cropping
                reshaped_input_sizes: imageData.map((x2) => x2.reshaped_input_size)
              };
            }
          }
        }
      ),
      /***/
      "./src/models/vitpose/image_processing_vitpose.js": (
        /*!********************************************************!*\
          !*** ./src/models/vitpose/image_processing_vitpose.js ***!
          \********************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            VitPoseImageProcessor: () => (
              /* binding */
              VitPoseImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class VitPoseImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            /**
             * Transform the heatmaps into keypoint predictions and transform them back to the image.
             * NOTE: This is a naive implementation and does not include advanced post-processing techniques,
             * so the results may not be as accurate as the original implementation.
             * @param {import('../../utils/tensor.js').Tensor} outputs The model outputs.
             * @param {[number, number, number, number][][]} boxes List or array of bounding boxes for each image.
             * Each box should be a list of 4 floats representing the bounding box coordinates in COCO format (top_left_x, top_left_y, width, height).
             * @returns {{
             *   bbox: [number, number, number, number],
             *   scores: number[],
             *   labels: number[],
             *   keypoints: [number, number][]
             * }[][]} List of keypoints predictions for each image.
             */
            post_process_pose_estimation(outputs, boxes, {
              threshold = null
              // TODO:
              // kernel_size = 11,
              // target_sizes = null,
            } = {}) {
              const heatmaps = outputs.tolist();
              const [batch_size, num_classes, height, width] = outputs.dims;
              const results = [];
              for (let b = 0; b < batch_size; ++b) {
                const heatmap = heatmaps[b];
                const bboxes = boxes[b];
                const batch_results = [];
                for (let n = 0; n < bboxes.length; ++n) {
                  const bbox = bboxes[n];
                  const keypoints = [];
                  const scores = [];
                  const labels = [];
                  const xScale = bbox.at(-2) / width;
                  const yScale = bbox.at(-1) / height;
                  for (let c = 0; c < heatmap.length; ++c) {
                    let [xWeightedSum, yWeightedSum] = [0, 0];
                    let sum = 0;
                    let score = -Infinity;
                    const row = heatmap[c];
                    for (let y2 = 0; y2 < row.length; ++y2) {
                      const col = row[y2];
                      for (let x2 = 0; x2 < col.length; ++x2) {
                        const value = col[x2];
                        sum += value;
                        score = Math.max(score, value);
                        xWeightedSum += (x2 + 0.5) * value;
                        yWeightedSum += y2 * value;
                      }
                    }
                    if (threshold != null && score < threshold)
                      continue;
                    const keypoint = [
                      xScale * xWeightedSum / sum,
                      yScale * yWeightedSum / sum
                    ];
                    keypoints.push(keypoint);
                    labels.push(c);
                    scores.push(score);
                  }
                  batch_results.push({
                    bbox,
                    scores,
                    labels,
                    keypoints
                  });
                }
                results.push(batch_results);
              }
              return results;
            }
          }
        }
      ),
      /***/
      "./src/models/wav2vec2/feature_extraction_wav2vec2.js": (
        /*!************************************************************!*\
          !*** ./src/models/wav2vec2/feature_extraction_wav2vec2.js ***!
          \************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Wav2Vec2FeatureExtractor: () => (
              /* binding */
              Wav2Vec2FeatureExtractor
            )
            /* harmony export */
          });
          var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/feature_extraction_utils.js */
            "./src/base/feature_extraction_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          class Wav2Vec2FeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {
            /**
             * @param {Float32Array} input_values 
             * @returns {Float32Array} 
             */
            _zero_mean_unit_var_norm(input_values) {
              const sum = input_values.reduce((a, b) => a + b, 0);
              const mean = sum / input_values.length;
              const variance = input_values.reduce((a, b) => a + (b - mean) ** 2, 0) / input_values.length;
              return input_values.map((x2) => (x2 - mean) / Math.sqrt(variance + 1e-7));
            }
            /**
             * Asynchronously extracts features from a given audio using the provided configuration.
             * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
             * @returns {Promise<{ input_values: Tensor; attention_mask: Tensor }>} A Promise resolving to an object containing the extracted input features and attention mask as Tensors.
             */
            async _call(audio) {
              (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, "Wav2Vec2FeatureExtractor");
              if (audio instanceof Float64Array) {
                audio = new Float32Array(audio);
              }
              let input_values = audio;
              if (this.config.do_normalize) {
                input_values = this._zero_mean_unit_var_norm(input_values);
              }
              const shape = [1, input_values.length];
              return {
                input_values: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor("float32", input_values, shape),
                attention_mask: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor("int64", new BigInt64Array(input_values.length).fill(1n), shape)
              };
            }
          }
        }
      ),
      /***/
      "./src/models/wav2vec2/processing_wav2vec2.js": (
        /*!****************************************************!*\
          !*** ./src/models/wav2vec2/processing_wav2vec2.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Wav2Vec2Processor: () => (
              /* binding */
              Wav2Vec2Processor
            )
            /* harmony export */
          });
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/feature_extraction_auto.js */
            "./src/models/auto/feature_extraction_auto.js"
          );
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          class Wav2Vec2Processor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__.Processor {
            /**
             * Calls the feature_extractor function with the given audio input.
             * @param {any} audio The audio input to extract features from.
             * @returns {Promise<any>} A Promise that resolves with the extracted features.
             */
            async _call(audio) {
              return await this.feature_extractor(audio);
            }
          }
          __publicField(Wav2Vec2Processor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer);
          __publicField(Wav2Vec2Processor, "feature_extractor_class", _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoFeatureExtractor);
        }
      ),
      /***/
      "./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js": (
        /*!********************************************************************!*\
          !*** ./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js ***!
          \********************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Wav2Vec2ProcessorWithLM: () => (
              /* binding */
              Wav2Vec2ProcessorWithLM
            )
            /* harmony export */
          });
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../auto/feature_extraction_auto.js */
            "./src/models/auto/feature_extraction_auto.js"
          );
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          class Wav2Vec2ProcessorWithLM extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__.Processor {
            /**
             * Calls the feature_extractor function with the given audio input.
             * @param {any} audio The audio input to extract features from.
             * @returns {Promise<any>} A Promise that resolves with the extracted features.
             */
            async _call(audio) {
              return await this.feature_extractor(audio);
            }
          }
          __publicField(Wav2Vec2ProcessorWithLM, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer);
          __publicField(Wav2Vec2ProcessorWithLM, "feature_extractor_class", _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_1__.AutoFeatureExtractor);
        }
      ),
      /***/
      "./src/models/wespeaker/feature_extraction_wespeaker.js": (
        /*!**************************************************************!*\
          !*** ./src/models/wespeaker/feature_extraction_wespeaker.js ***!
          \**************************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            WeSpeakerFeatureExtractor: () => (
              /* binding */
              WeSpeakerFeatureExtractor
            )
            /* harmony export */
          });
          var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/feature_extraction_utils.js */
            "./src/base/feature_extraction_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../utils/audio.js */
            "./src/utils/audio.js"
          );
          class WeSpeakerFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {
            constructor(config) {
              super(config);
              const sampling_rate = this.config.sampling_rate;
              const mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.mel_filter_bank)(
                257,
                // num_frequency_bins
                this.config.num_mel_bins,
                // num_mel_filters
                20,
                // min_frequency
                Math.floor(sampling_rate / 2),
                // max_frequency
                sampling_rate,
                // sampling_rate
                null,
                // norm
                "kaldi",
                // mel_scale
                true
                // triangularize_in_mel_space
              );
              this.mel_filters = mel_filters;
              this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.window_function)(400, "hamming", {
                periodic: false
              });
              this.min_num_frames = this.config.min_num_frames;
            }
            /**
             * Computes the log-Mel spectrogram of the provided audio waveform.
             * @param {Float32Array|Float64Array} waveform The audio waveform to process.
             * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
             */
            async _extract_fbank_features(waveform) {
              waveform = waveform.map((x2) => x2 * 32768);
              return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.spectrogram)(
                waveform,
                this.window,
                // window
                400,
                // frame_length
                160,
                // hop_length
                {
                  fft_length: 512,
                  power: 2,
                  center: false,
                  preemphasis: 0.97,
                  mel_filters: this.mel_filters,
                  log_mel: "log",
                  mel_floor: 1192092955078125e-22,
                  remove_dc_offset: true,
                  // Custom
                  transpose: true,
                  min_num_frames: this.min_num_frames
                }
              );
            }
            /**
             * Asynchronously extracts features from a given audio using the provided configuration.
             * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
             * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.
             */
            async _call(audio) {
              (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, "WeSpeakerFeatureExtractor");
              const features = (await this._extract_fbank_features(audio)).unsqueeze_(0);
              if (this.config.fbank_centering_span === null) {
                const meanData = (
                  /** @type {Float32Array} */
                  features.mean(1).data
                );
                const featuresData = (
                  /** @type {Float32Array} */
                  features.data
                );
                const [batch_size, num_frames, feature_size] = features.dims;
                for (let i = 0; i < batch_size; ++i) {
                  const offset1 = i * num_frames * feature_size;
                  const offset2 = i * feature_size;
                  for (let j = 0; j < num_frames; ++j) {
                    const offset3 = offset1 + j * feature_size;
                    for (let k = 0; k < feature_size; ++k) {
                      featuresData[offset3 + k] -= meanData[offset2 + k];
                    }
                  }
                }
              }
              return {
                input_features: features
              };
            }
          }
        }
      ),
      /***/
      "./src/models/whisper/common_whisper.js": (
        /*!**********************************************!*\
          !*** ./src/models/whisper/common_whisper.js ***!
          \**********************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            WHISPER_LANGUAGE_MAPPING: () => (
              /* binding */
              WHISPER_LANGUAGE_MAPPING
            ),
            /* harmony export */
            WHISPER_TO_LANGUAGE_CODE_MAPPING: () => (
              /* binding */
              WHISPER_TO_LANGUAGE_CODE_MAPPING
            ),
            /* harmony export */
            whisper_language_to_code: () => (
              /* binding */
              whisper_language_to_code
            )
            /* harmony export */
          });
          const WHISPER_LANGUAGES = [
            ["en", "english"],
            ["zh", "chinese"],
            ["de", "german"],
            ["es", "spanish"],
            ["ru", "russian"],
            ["ko", "korean"],
            ["fr", "french"],
            ["ja", "japanese"],
            ["pt", "portuguese"],
            ["tr", "turkish"],
            ["pl", "polish"],
            ["ca", "catalan"],
            ["nl", "dutch"],
            ["ar", "arabic"],
            ["sv", "swedish"],
            ["it", "italian"],
            ["id", "indonesian"],
            ["hi", "hindi"],
            ["fi", "finnish"],
            ["vi", "vietnamese"],
            ["he", "hebrew"],
            ["uk", "ukrainian"],
            ["el", "greek"],
            ["ms", "malay"],
            ["cs", "czech"],
            ["ro", "romanian"],
            ["da", "danish"],
            ["hu", "hungarian"],
            ["ta", "tamil"],
            ["no", "norwegian"],
            ["th", "thai"],
            ["ur", "urdu"],
            ["hr", "croatian"],
            ["bg", "bulgarian"],
            ["lt", "lithuanian"],
            ["la", "latin"],
            ["mi", "maori"],
            ["ml", "malayalam"],
            ["cy", "welsh"],
            ["sk", "slovak"],
            ["te", "telugu"],
            ["fa", "persian"],
            ["lv", "latvian"],
            ["bn", "bengali"],
            ["sr", "serbian"],
            ["az", "azerbaijani"],
            ["sl", "slovenian"],
            ["kn", "kannada"],
            ["et", "estonian"],
            ["mk", "macedonian"],
            ["br", "breton"],
            ["eu", "basque"],
            ["is", "icelandic"],
            ["hy", "armenian"],
            ["ne", "nepali"],
            ["mn", "mongolian"],
            ["bs", "bosnian"],
            ["kk", "kazakh"],
            ["sq", "albanian"],
            ["sw", "swahili"],
            ["gl", "galician"],
            ["mr", "marathi"],
            ["pa", "punjabi"],
            ["si", "sinhala"],
            ["km", "khmer"],
            ["sn", "shona"],
            ["yo", "yoruba"],
            ["so", "somali"],
            ["af", "afrikaans"],
            ["oc", "occitan"],
            ["ka", "georgian"],
            ["be", "belarusian"],
            ["tg", "tajik"],
            ["sd", "sindhi"],
            ["gu", "gujarati"],
            ["am", "amharic"],
            ["yi", "yiddish"],
            ["lo", "lao"],
            ["uz", "uzbek"],
            ["fo", "faroese"],
            ["ht", "haitian creole"],
            ["ps", "pashto"],
            ["tk", "turkmen"],
            ["nn", "nynorsk"],
            ["mt", "maltese"],
            ["sa", "sanskrit"],
            ["lb", "luxembourgish"],
            ["my", "myanmar"],
            ["bo", "tibetan"],
            ["tl", "tagalog"],
            ["mg", "malagasy"],
            ["as", "assamese"],
            ["tt", "tatar"],
            ["haw", "hawaiian"],
            ["ln", "lingala"],
            ["ha", "hausa"],
            ["ba", "bashkir"],
            ["jw", "javanese"],
            ["su", "sundanese"]
          ];
          const WHISPER_LANGUAGE_MAPPING = new Map(WHISPER_LANGUAGES);
          const WHISPER_TO_LANGUAGE_CODE_MAPPING = new Map([
            ...WHISPER_LANGUAGES.map(([k, v]) => [v, k]),
            ...[
              ["burmese", "my"],
              ["valencian", "ca"],
              ["flemish", "nl"],
              ["haitian", "ht"],
              ["letzeburgesch", "lb"],
              ["pushto", "ps"],
              ["panjabi", "pa"],
              ["moldavian", "ro"],
              ["moldovan", "ro"],
              ["sinhalese", "si"],
              ["castilian", "es"]
            ]
          ]);
          function whisper_language_to_code(language) {
            language = language.toLowerCase();
            let language_code = WHISPER_TO_LANGUAGE_CODE_MAPPING.get(language);
            if (language_code === void 0) {
              const language_special_token = language.match(/^<\|([a-z]{2})\|>$/);
              if (language_special_token) {
                language = language_special_token[1];
              }
              if (WHISPER_LANGUAGE_MAPPING.has(language)) {
                language_code = language;
              } else {
                const is_language_code = language.length === 2;
                const langs = is_language_code ? WHISPER_LANGUAGE_MAPPING.keys() : WHISPER_LANGUAGE_MAPPING.values();
                throw new Error(`Language "${language}" is not supported. Must be one of: ${JSON.stringify(Array.from(langs))}`);
              }
            }
            return language_code;
          }
        }
      ),
      /***/
      "./src/models/whisper/feature_extraction_whisper.js": (
        /*!**********************************************************!*\
          !*** ./src/models/whisper/feature_extraction_whisper.js ***!
          \**********************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            WhisperFeatureExtractor: () => (
              /* binding */
              WhisperFeatureExtractor
            )
            /* harmony export */
          });
          var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/feature_extraction_utils.js */
            "./src/base/feature_extraction_utils.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../utils/audio.js */
            "./src/utils/audio.js"
          );
          var _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../../utils/maths.js */
            "./src/utils/maths.js"
          );
          class WhisperFeatureExtractor extends _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.FeatureExtractor {
            constructor(config) {
              var _a;
              super(config);
              (_a = this.config).mel_filters ?? (_a.mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.mel_filter_bank)(
                Math.floor(1 + this.config.n_fft / 2),
                // num_frequency_bins
                this.config.feature_size,
                // num_mel_filters
                0,
                // min_frequency
                8e3,
                // max_frequency
                this.config.sampling_rate,
                // sampling_rate
                "slaney",
                // norm
                "slaney"
                // mel_scale
              ));
              this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.window_function)(this.config.n_fft, "hann");
            }
            /**
             * Computes the log-Mel spectrogram of the provided audio waveform.
             * @param {Float32Array|Float64Array} waveform The audio waveform to process.
             * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
             */
            async _extract_fbank_features(waveform) {
              const features = await (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_2__.spectrogram)(
                waveform,
                this.window,
                // window
                this.config.n_fft,
                // frame_length
                this.config.hop_length,
                // hop_length
                {
                  power: 2,
                  mel_filters: this.config.mel_filters,
                  log_mel: "log10",
                  // Custom
                  max_num_frames: Math.min(
                    Math.floor(waveform.length / this.config.hop_length),
                    this.config.nb_max_frames
                    // 3000
                  )
                }
              );
              const data = features.data;
              const maxValue = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)(
                /** @type {Float32Array} */
                data
              )[0];
              for (let i = 0; i < data.length; ++i) {
                data[i] = (Math.max(data[i], maxValue - 8) + 4) / 4;
              }
              return features;
            }
            /**
             * Asynchronously extracts features from a given audio using the provided configuration.
             * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
             * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.
             */
            async _call(audio, {
              max_length = null
            } = {}) {
              (0, _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_0__.validate_audio_inputs)(audio, "WhisperFeatureExtractor");
              let waveform;
              const length = max_length ?? this.config.n_samples;
              if (audio.length > length) {
                if (audio.length > this.config.n_samples) {
                  console.warn(
                    "Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."
                  );
                }
                waveform = audio.slice(0, length);
              } else {
                waveform = new Float32Array(length);
                waveform.set(audio);
              }
              const features = await this._extract_fbank_features(waveform);
              return {
                input_features: features.unsqueeze_(0)
              };
            }
          }
        }
      ),
      /***/
      "./src/models/whisper/generation_whisper.js": (
        /*!**************************************************!*\
          !*** ./src/models/whisper/generation_whisper.js ***!
          \**************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            WhisperGenerationConfig: () => (
              /* binding */
              WhisperGenerationConfig
            )
            /* harmony export */
          });
          var _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../generation/configuration_utils.js */
            "./src/generation/configuration_utils.js"
          );
          class WhisperGenerationConfig extends _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_0__.GenerationConfig {
            constructor() {
              super(...arguments);
              /**
               * Whether to return the timestamps with the text. This enables the `WhisperTimestampsLogitsProcessor`.
               * @type {boolean}
               */
              __publicField(this, "return_timestamps", null);
              /**
               * Whether to return token-level timestamps
               * with the text. This can be used with or without the `return_timestamps` option. To get word-level
               * timestamps, use the tokenizer to group the tokens into words.
               * @type {boolean}
               */
              __publicField(this, "return_token_timestamps", null);
              /**
               * The number of audio frames available in this chunk. This is only used generating word-level timestamps.
               * @type {number}
               */
              __publicField(this, "num_frames", null);
              /**
               * Alignment heads to predict word-level timestamps. This is a list of [layer, head] pairs that
               * select the cross-attention heads that are highly correlated to word-level timing.
               * @type {[number, number][]}
               */
              __publicField(this, "alignment_heads", null);
              /**
               * Task to use for generation, either "translate" or "transcribe".
               * @type {string}
               */
              __publicField(this, "task", null);
              /**
               * Language token to use for generation, can be either in the form of `<|en|>`, `en` or `english`.
               * You can find all the possible language tokens in the `model.generation_config.lang_to_id` dictionary.
               * @type {string}
               */
              __publicField(this, "language", null);
              /**
               * The id of the `"<|notimestamps|>"` token.
               * @type {number}
               */
              __publicField(this, "no_timestamps_token_id", null);
              /**
               * Rank-1 list of token IDs created by passing text to [`~WhisperProcessor.get_prompt_ids`] that is
               * provided as a prompt to each chunk. This can be used to provide or "prompt-engineer" a context for
               * transcription, e.g. custom vocabularies or proper nouns to make it more likely to predict those words
               * correctly. It cannot be used in conjunction with `decoder_start_token_id` as it overwrites this value.
               * @type {number[]}
               */
              __publicField(this, "prompt_ids", null);
              /**
               * Whether the model is multilingual or not.
               * @type {boolean}
               */
              __publicField(this, "is_multilingual", null);
              /**
               * (Optional) A mapping from language tokens to their corresponding IDs.
               * Only required if the model is multilingual.
               * @type {Record<string, number>|null}
               */
              __publicField(this, "lang_to_id", null);
              /**
               * (Optional) A mapping from task tokens to their corresponding IDs.
               * @type {Record<string, number>|null}
               */
              __publicField(this, "task_to_id", null);
              /**
               * Used to set the maximum value of the initial timestamp. This is used to prevent the model from
               * predicting timestamps that are too far in the future.
               * @type {number}
               */
              __publicField(this, "max_initial_timestamp_index", 1);
            }
          }
        }
      ),
      /***/
      "./src/models/whisper/processing_whisper.js": (
        /*!**************************************************!*\
          !*** ./src/models/whisper/processing_whisper.js ***!
          \**************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            WhisperProcessor: () => (
              /* binding */
              WhisperProcessor
            )
            /* harmony export */
          });
          var _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../auto/feature_extraction_auto.js */
            "./src/models/auto/feature_extraction_auto.js"
          );
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../../tokenizers.js */
            "./src/tokenizers.js"
          );
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../../base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          class WhisperProcessor extends _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_2__.Processor {
            /**
             * Calls the feature_extractor function with the given audio input.
             * @param {any} audio The audio input to extract features from.
             * @returns {Promise<any>} A Promise that resolves with the extracted features.
             */
            async _call(audio) {
              return await this.feature_extractor(audio);
            }
          }
          __publicField(WhisperProcessor, "tokenizer_class", _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__.AutoTokenizer);
          __publicField(WhisperProcessor, "feature_extractor_class", _auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_0__.AutoFeatureExtractor);
        }
      ),
      /***/
      "./src/models/yolos/image_processing_yolos.js": (
        /*!****************************************************!*\
          !*** ./src/models/yolos/image_processing_yolos.js ***!
          \****************************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            YolosFeatureExtractor: () => (
              /* binding */
              YolosFeatureExtractor
            ),
            /* harmony export */
            YolosImageProcessor: () => (
              /* binding */
              YolosImageProcessor
            )
            /* harmony export */
          });
          var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../../base/image_processors_utils.js */
            "./src/base/image_processors_utils.js"
          );
          class YolosImageProcessor extends _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.ImageProcessor {
            /** @type {typeof post_process_object_detection} */
            post_process_object_detection(...args) {
              return (0, _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_0__.post_process_object_detection)(...args);
            }
          }
          class YolosFeatureExtractor extends YolosImageProcessor {
          }
        }
      ),
      /***/
      "./src/ops/registry.js": (
        /*!*****************************!*\
          !*** ./src/ops/registry.js ***!
          \*****************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            TensorOpRegistry: () => (
              /* binding */
              TensorOpRegistry
            )
            /* harmony export */
          });
          var _backends_onnx_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../backends/onnx.js */
            "./src/backends/onnx.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../env.js */
            "./src/env.js"
          );
          const IS_WEB_ENV = _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_BROWSER_ENV || _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_WEBWORKER_ENV;
          const wrap = async (session_bytes, session_options, names) => {
            const session = await (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_0__.createInferenceSession)(
              new Uint8Array(session_bytes),
              session_options
            );
            let chain = Promise.resolve();
            return (
              /** @type {any} */
              async (inputs) => {
                const proxied = (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_0__.isONNXProxy)();
                const ortFeed = Object.fromEntries(Object.entries(inputs).map(([k, v]) => [k, (proxied ? v.clone() : v).ort_tensor]));
                const outputs = await (chain = IS_WEB_ENV ? chain.then(() => session.run(ortFeed)) : session.run(ortFeed));
                if (Array.isArray(names)) {
                  return names.map((n) => new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(outputs[n]));
                } else {
                  return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(outputs[
                    /** @type {string} */
                    names
                  ]);
                }
              }
            );
          };
          class TensorOpRegistry {
            static get nearest_interpolate_4d() {
              if (!this._nearest_interpolate_4d) {
                this._nearest_interpolate_4d = wrap(
                  [8, 10, 18, 0, 58, 129, 1, 10, 41, 10, 1, 120, 10, 0, 10, 0, 10, 1, 115, 18, 1, 121, 34, 6, 82, 101, 115, 105, 122, 101, 42, 18, 10, 4, 109, 111, 100, 101, 34, 7, 110, 101, 97, 114, 101, 115, 116, 160, 1, 3, 18, 1, 114, 90, 31, 10, 1, 120, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 90, 15, 10, 1, 115, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 4, 98, 31, 10, 1, 121, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 66, 2, 16, 21],
                  this.session_options,
                  "y"
                );
              }
              return this._nearest_interpolate_4d;
            }
            static get bilinear_interpolate_4d() {
              if (!this._bilinear_interpolate_4d) {
                this._bilinear_interpolate_4d = wrap(
                  [8, 9, 18, 0, 58, 128, 1, 10, 40, 10, 1, 120, 10, 0, 10, 0, 10, 1, 115, 18, 1, 121, 34, 6, 82, 101, 115, 105, 122, 101, 42, 17, 10, 4, 109, 111, 100, 101, 34, 6, 108, 105, 110, 101, 97, 114, 160, 1, 3, 18, 1, 114, 90, 31, 10, 1, 120, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 90, 15, 10, 1, 115, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 4, 98, 31, 10, 1, 121, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 66, 2, 16, 20],
                  this.session_options,
                  "y"
                );
              }
              return this._bilinear_interpolate_4d;
            }
            static get bicubic_interpolate_4d() {
              if (!this._bicubic_interpolate_4d) {
                this._bicubic_interpolate_4d = wrap(
                  [8, 9, 18, 0, 58, 127, 10, 39, 10, 1, 120, 10, 0, 10, 0, 10, 1, 115, 18, 1, 121, 34, 6, 82, 101, 115, 105, 122, 101, 42, 16, 10, 4, 109, 111, 100, 101, 34, 5, 99, 117, 98, 105, 99, 160, 1, 3, 18, 1, 114, 90, 31, 10, 1, 120, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 90, 15, 10, 1, 115, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 4, 98, 31, 10, 1, 121, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 66, 2, 16, 20],
                  this.session_options,
                  "y"
                );
              }
              return this._bicubic_interpolate_4d;
            }
            static get matmul() {
              if (!this._matmul) {
                this._matmul = wrap(
                  [8, 9, 18, 0, 58, 55, 10, 17, 10, 1, 97, 10, 1, 98, 18, 1, 99, 34, 6, 77, 97, 116, 77, 117, 108, 18, 1, 114, 90, 9, 10, 1, 97, 18, 4, 10, 2, 8, 1, 90, 9, 10, 1, 98, 18, 4, 10, 2, 8, 1, 98, 9, 10, 1, 99, 18, 4, 10, 2, 8, 1, 66, 2, 16, 20],
                  this.session_options,
                  "c"
                );
              }
              return this._matmul;
            }
            static get stft() {
              if (!this._stft) {
                this._stft = wrap(
                  [8, 7, 18, 0, 58, 148, 1, 10, 38, 10, 1, 115, 10, 1, 106, 10, 1, 119, 10, 1, 108, 18, 1, 111, 34, 4, 83, 84, 70, 84, 42, 15, 10, 8, 111, 110, 101, 115, 105, 100, 101, 100, 24, 1, 160, 1, 2, 18, 1, 115, 90, 26, 10, 1, 115, 18, 21, 10, 19, 8, 1, 18, 15, 10, 3, 18, 1, 98, 10, 3, 18, 1, 115, 10, 3, 18, 1, 99, 90, 11, 10, 1, 106, 18, 6, 10, 4, 8, 7, 18, 0, 90, 16, 10, 1, 119, 18, 11, 10, 9, 8, 1, 18, 5, 10, 3, 18, 1, 119, 90, 11, 10, 1, 108, 18, 6, 10, 4, 8, 7, 18, 0, 98, 31, 10, 1, 111, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 102, 10, 3, 18, 1, 100, 10, 3, 18, 1, 99, 66, 2, 16, 17],
                  this.session_options,
                  "o"
                );
              }
              return this._stft;
            }
            static get rfft() {
              if (!this._rfft) {
                this._rfft = wrap(
                  [8, 9, 18, 0, 58, 97, 10, 33, 10, 1, 120, 10, 0, 10, 1, 97, 18, 1, 121, 34, 3, 68, 70, 84, 42, 15, 10, 8, 111, 110, 101, 115, 105, 100, 101, 100, 24, 1, 160, 1, 2, 18, 1, 100, 90, 21, 10, 1, 120, 18, 16, 10, 14, 8, 1, 18, 10, 10, 3, 18, 1, 115, 10, 3, 18, 1, 99, 90, 11, 10, 1, 97, 18, 6, 10, 4, 8, 7, 18, 0, 98, 21, 10, 1, 121, 18, 16, 10, 14, 8, 1, 18, 10, 10, 3, 18, 1, 115, 10, 3, 18, 1, 99, 66, 2, 16, 20],
                  this.session_options,
                  "y"
                );
              }
              return this._rfft;
            }
            static get top_k() {
              if (!this._top_k) {
                this._top_k = wrap(
                  [8, 10, 18, 0, 58, 73, 10, 18, 10, 1, 120, 10, 1, 107, 18, 1, 118, 18, 1, 105, 34, 4, 84, 111, 112, 75, 18, 1, 116, 90, 9, 10, 1, 120, 18, 4, 10, 2, 8, 1, 90, 15, 10, 1, 107, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 1, 98, 9, 10, 1, 118, 18, 4, 10, 2, 8, 1, 98, 9, 10, 1, 105, 18, 4, 10, 2, 8, 7, 66, 2, 16, 21],
                  this.session_options,
                  [
                    /* Values */
                    "v",
                    /* Indices */
                    "i"
                  ]
                );
              }
              return this._top_k;
            }
            static get slice() {
              if (!this._slice) {
                this._slice = wrap(
                  [8, 7, 18, 0, 58, 96, 10, 25, 10, 1, 120, 10, 1, 115, 10, 1, 101, 10, 1, 97, 10, 1, 116, 18, 1, 121, 34, 5, 83, 108, 105, 99, 101, 18, 1, 114, 90, 9, 10, 1, 120, 18, 4, 10, 2, 8, 1, 90, 9, 10, 1, 115, 18, 4, 10, 2, 8, 7, 90, 9, 10, 1, 101, 18, 4, 10, 2, 8, 7, 90, 9, 10, 1, 97, 18, 4, 10, 2, 8, 7, 90, 9, 10, 1, 116, 18, 4, 10, 2, 8, 7, 98, 9, 10, 1, 121, 18, 4, 10, 2, 8, 1, 66, 2, 16, 13],
                  this.session_options,
                  "y"
                );
              }
              return this._slice;
            }
          }
          __publicField(TensorOpRegistry, "session_options", {
            // TODO: Allow for multiple execution providers
            // executionProviders: ['webgpu'],
          });
        }
      ),
      /***/
      "./src/pipelines.js": (
        /*!**************************!*\
          !*** ./src/pipelines.js ***!
          \**************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            AudioClassificationPipeline: () => (
              /* binding */
              AudioClassificationPipeline
            ),
            /* harmony export */
            AutomaticSpeechRecognitionPipeline: () => (
              /* binding */
              AutomaticSpeechRecognitionPipeline
            ),
            /* harmony export */
            BackgroundRemovalPipeline: () => (
              /* binding */
              BackgroundRemovalPipeline
            ),
            /* harmony export */
            DepthEstimationPipeline: () => (
              /* binding */
              DepthEstimationPipeline
            ),
            /* harmony export */
            DocumentQuestionAnsweringPipeline: () => (
              /* binding */
              DocumentQuestionAnsweringPipeline
            ),
            /* harmony export */
            FeatureExtractionPipeline: () => (
              /* binding */
              FeatureExtractionPipeline
            ),
            /* harmony export */
            FillMaskPipeline: () => (
              /* binding */
              FillMaskPipeline
            ),
            /* harmony export */
            ImageClassificationPipeline: () => (
              /* binding */
              ImageClassificationPipeline
            ),
            /* harmony export */
            ImageFeatureExtractionPipeline: () => (
              /* binding */
              ImageFeatureExtractionPipeline
            ),
            /* harmony export */
            ImageSegmentationPipeline: () => (
              /* binding */
              ImageSegmentationPipeline
            ),
            /* harmony export */
            ImageToImagePipeline: () => (
              /* binding */
              ImageToImagePipeline
            ),
            /* harmony export */
            ImageToTextPipeline: () => (
              /* binding */
              ImageToTextPipeline
            ),
            /* harmony export */
            ObjectDetectionPipeline: () => (
              /* binding */
              ObjectDetectionPipeline
            ),
            /* harmony export */
            Pipeline: () => (
              /* binding */
              Pipeline
            ),
            /* harmony export */
            QuestionAnsweringPipeline: () => (
              /* binding */
              QuestionAnsweringPipeline
            ),
            /* harmony export */
            SummarizationPipeline: () => (
              /* binding */
              SummarizationPipeline
            ),
            /* harmony export */
            Text2TextGenerationPipeline: () => (
              /* binding */
              Text2TextGenerationPipeline
            ),
            /* harmony export */
            TextClassificationPipeline: () => (
              /* binding */
              TextClassificationPipeline
            ),
            /* harmony export */
            TextGenerationPipeline: () => (
              /* binding */
              TextGenerationPipeline
            ),
            /* harmony export */
            TextToAudioPipeline: () => (
              /* binding */
              TextToAudioPipeline
            ),
            /* harmony export */
            TokenClassificationPipeline: () => (
              /* binding */
              TokenClassificationPipeline
            ),
            /* harmony export */
            TranslationPipeline: () => (
              /* binding */
              TranslationPipeline
            ),
            /* harmony export */
            ZeroShotAudioClassificationPipeline: () => (
              /* binding */
              ZeroShotAudioClassificationPipeline
            ),
            /* harmony export */
            ZeroShotClassificationPipeline: () => (
              /* binding */
              ZeroShotClassificationPipeline
            ),
            /* harmony export */
            ZeroShotImageClassificationPipeline: () => (
              /* binding */
              ZeroShotImageClassificationPipeline
            ),
            /* harmony export */
            ZeroShotObjectDetectionPipeline: () => (
              /* binding */
              ZeroShotObjectDetectionPipeline
            ),
            /* harmony export */
            pipeline: () => (
              /* binding */
              pipeline
            )
            /* harmony export */
          });
          var _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ./tokenizers.js */
            "./src/tokenizers.js"
          );
          var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ./models.js */
            "./src/models.js"
          );
          var _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ./models/auto/processing_auto.js */
            "./src/models/auto/processing_auto.js"
          );
          var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ./base/processing_utils.js */
            "./src/base/processing_utils.js"
          );
          var _utils_generic_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
            /*! ./utils/generic.js */
            "./src/utils/generic.js"
          );
          var _utils_core_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
            /*! ./utils/core.js */
            "./src/utils/core.js"
          );
          var _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
            /*! ./utils/maths.js */
            "./src/utils/maths.js"
          );
          var _utils_audio_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
            /*! ./utils/audio.js */
            "./src/utils/audio.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
            /*! ./utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_image_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
            /*! ./utils/image.js */
            "./src/utils/image.js"
          );
          async function prepareImages(images) {
            if (!Array.isArray(images)) {
              images = [images];
            }
            return await Promise.all(images.map((x2) => _utils_image_js__WEBPACK_IMPORTED_MODULE_9__.RawImage.read(x2)));
          }
          async function prepareAudios(audios, sampling_rate) {
            if (!Array.isArray(audios)) {
              audios = [audios];
            }
            return await Promise.all(audios.map((x2) => {
              if (typeof x2 === "string" || x2 instanceof URL) {
                return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_7__.read_audio)(x2, sampling_rate);
              } else if (x2 instanceof Float64Array) {
                return new Float32Array(x2);
              }
              return x2;
            }));
          }
          function get_bounding_box(box, asInteger) {
            if (asInteger) {
              box = box.map((x2) => x2 | 0);
            }
            const [xmin, ymin, xmax, ymax] = box;
            return { xmin, ymin, xmax, ymax };
          }
          class Pipeline extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_4__.Callable {
            /**
             * Create a new Pipeline.
             * @param {Object} options An object containing the following properties:
             * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.
             * @param {PreTrainedModel} [options.model] The model used by the pipeline.
             * @param {PreTrainedTokenizer} [options.tokenizer=null] The tokenizer used by the pipeline (if any).
             * @param {Processor} [options.processor=null] The processor used by the pipeline (if any).
             */
            constructor({ task, model, tokenizer = null, processor = null }) {
              super();
              this.task = task;
              this.model = model;
              this.tokenizer = tokenizer;
              this.processor = processor;
            }
            /** @type {DisposeType} */
            async dispose() {
              await this.model.dispose();
            }
          }
          class TextClassificationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => TextClassificationPipelineType} */
          Pipeline {
            /**
             * Create a new TextClassificationPipeline.
             * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {TextClassificationPipelineCallback} */
            async _call(texts, {
              top_k = 1
            } = {}) {
              const model_inputs = this.tokenizer(texts, {
                padding: true,
                truncation: true
              });
              const outputs = await this.model(model_inputs);
              const function_to_apply = (
                // @ts-expect-error TS2339
                this.model.config.problem_type === "multi_label_classification" ? (batch) => batch.sigmoid() : (batch) => new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor(
                  "float32",
                  (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(batch.data),
                  batch.dims
                )
              );
              const id2label = this.model.config.id2label;
              const toReturn = [];
              for (const batch of outputs.logits) {
                const output = function_to_apply(batch);
                const scores = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.topk)(output, top_k);
                const values = scores[0].tolist();
                const indices = scores[1].tolist();
                const vals = indices.map((x2, i) => ({
                  label: id2label ? id2label[x2] : `LABEL_${x2}`,
                  score: values[i]
                }));
                if (top_k === 1) {
                  toReturn.push(...vals);
                } else {
                  toReturn.push(vals);
                }
              }
              return Array.isArray(texts) || top_k === 1 ? (
                /** @type {TextClassificationOutput} */
                toReturn
              ) : (
                /** @type {TextClassificationOutput[]} */
                toReturn[0]
              );
            }
          }
          class TokenClassificationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => TokenClassificationPipelineType} */
          Pipeline {
            /**
             * Create a new TokenClassificationPipeline.
             * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {TokenClassificationPipelineCallback} */
            async _call(texts, {
              ignore_labels = ["O"]
            } = {}) {
              const isBatched = Array.isArray(texts);
              const model_inputs = this.tokenizer(isBatched ? texts : [texts], {
                padding: true,
                truncation: true
              });
              const outputs = await this.model(model_inputs);
              const logits = outputs.logits;
              const id2label = this.model.config.id2label;
              const toReturn = [];
              for (let i = 0; i < logits.dims[0]; ++i) {
                const ids = model_inputs.input_ids[i];
                const batch = logits[i];
                const tokens = [];
                for (let j = 0; j < batch.dims[0]; ++j) {
                  const tokenData = batch[j];
                  const topScoreIndex = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.max)(tokenData.data)[1];
                  const entity = id2label ? id2label[topScoreIndex] : `LABEL_${topScoreIndex}`;
                  if (ignore_labels.includes(entity)) {
                    continue;
                  }
                  const word = this.tokenizer.decode([ids[j].item()], { skip_special_tokens: true });
                  if (word === "") {
                    continue;
                  }
                  const scores = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(tokenData.data);
                  tokens.push({
                    entity,
                    score: scores[topScoreIndex],
                    index: j,
                    word
                    // TODO: Add support for start and end
                    // start: null,
                    // end: null,
                  });
                }
                toReturn.push(tokens);
              }
              return isBatched ? toReturn : toReturn[0];
            }
          }
          class QuestionAnsweringPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => QuestionAnsweringPipelineType} */
          Pipeline {
            /**
             * Create a new QuestionAnsweringPipeline.
             * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {QuestionAnsweringPipelineCallback} */
            async _call(question, context, {
              top_k = 1
            } = {}) {
              const inputs = this.tokenizer(question, {
                text_pair: context,
                padding: true,
                truncation: true
              });
              const { start_logits, end_logits } = await this.model(inputs);
              const input_ids = inputs.input_ids.tolist();
              const attention_mask = inputs.attention_mask.tolist();
              const special_tokens = this.tokenizer.all_special_ids;
              const toReturn = [];
              for (let j = 0; j < start_logits.dims[0]; ++j) {
                const ids = input_ids[j];
                const sepIndex = ids.findIndex(
                  (x2) => (
                    // We use == to match bigint with number
                    // @ts-ignore
                    x2 == this.tokenizer.sep_token_id
                  )
                );
                const valid_mask = attention_mask[j].map((y2, ix) => y2 == 1 && (ix === 0 || ix > sepIndex && special_tokens.findIndex((x2) => x2 == ids[ix]) === -1));
                const start = start_logits[j].tolist();
                const end = end_logits[j].tolist();
                for (let i = 1; i < start.length; ++i) {
                  if (attention_mask[j] == 0 || i <= sepIndex || special_tokens.findIndex((x2) => x2 == ids[i]) !== -1) {
                    start[i] = -Infinity;
                    end[i] = -Infinity;
                  }
                }
                const start_scores = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(start).map((x2, i) => [x2, i]);
                const end_scores = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(end).map((x2, i) => [x2, i]);
                start_scores[0][0] = 0;
                end_scores[0][0] = 0;
                const options = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_5__.product)(start_scores, end_scores).filter((x2) => x2[0][1] <= x2[1][1]).map((x2) => [x2[0][1], x2[1][1], x2[0][0] * x2[1][0]]).sort((a, b) => b[2] - a[2]);
                for (let k = 0; k < Math.min(options.length, top_k); ++k) {
                  const [start2, end2, score] = options[k];
                  const answer_tokens = ids.slice(start2, end2 + 1);
                  const answer = this.tokenizer.decode(answer_tokens, {
                    skip_special_tokens: true
                  });
                  toReturn.push({
                    answer,
                    score
                  });
                }
              }
              return top_k === 1 ? toReturn[0] : toReturn;
            }
          }
          class FillMaskPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => FillMaskPipelineType} */
          Pipeline {
            /**
             * Create a new FillMaskPipeline.
             * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {FillMaskPipelineCallback} */
            async _call(texts, {
              top_k = 5
            } = {}) {
              const model_inputs = this.tokenizer(texts, {
                padding: true,
                truncation: true
              });
              const { logits } = await this.model(model_inputs);
              const toReturn = [];
              const input_ids = model_inputs.input_ids.tolist();
              for (let i = 0; i < input_ids.length; ++i) {
                const ids = input_ids[i];
                const mask_token_index = ids.findIndex(
                  (x2) => (
                    // We use == to match bigint with number
                    // @ts-ignore
                    x2 == this.tokenizer.mask_token_id
                  )
                );
                if (mask_token_index === -1) {
                  throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);
                }
                const itemLogits = logits[i][mask_token_index];
                const scores = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.topk)(new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor(
                  "float32",
                  (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(itemLogits.data),
                  itemLogits.dims
                ), top_k);
                const values = scores[0].tolist();
                const indices = scores[1].tolist();
                toReturn.push(indices.map((x2, i2) => {
                  const sequence = ids.slice();
                  sequence[mask_token_index] = x2;
                  return {
                    score: values[i2],
                    token: Number(x2),
                    token_str: this.tokenizer.decode([x2]),
                    sequence: this.tokenizer.decode(sequence, { skip_special_tokens: true })
                  };
                }));
              }
              return Array.isArray(texts) ? toReturn : toReturn[0];
            }
          }
          class Text2TextGenerationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => Text2TextGenerationPipelineType} */
          Pipeline {
            /**
             * Create a new Text2TextGenerationPipeline.
             * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
              /** @type {'generated_text'} */
              __publicField(this, "_key", "generated_text");
            }
            /** @type {Text2TextGenerationPipelineCallback} */
            async _call(texts, generate_kwargs = {}) {
              if (!Array.isArray(texts)) {
                texts = [texts];
              }
              if (this.model.config.prefix) {
                texts = texts.map((x2) => this.model.config.prefix + x2);
              }
              const task_specific_params = this.model.config.task_specific_params;
              if (task_specific_params && task_specific_params[this.task]) {
                if (task_specific_params[this.task].prefix) {
                  texts = texts.map((x2) => task_specific_params[this.task].prefix + x2);
                }
              }
              const tokenizer = this.tokenizer;
              const tokenizer_options = {
                padding: true,
                truncation: true
              };
              let inputs;
              if (this instanceof TranslationPipeline && "_build_translation_inputs" in tokenizer) {
                inputs = tokenizer._build_translation_inputs(texts, tokenizer_options, generate_kwargs);
              } else {
                inputs = tokenizer(texts, tokenizer_options);
              }
              const outputTokenIds = await this.model.generate({ ...inputs, ...generate_kwargs });
              return tokenizer.batch_decode(
                /** @type {Tensor} */
                outputTokenIds,
                {
                  skip_special_tokens: true
                }
              ).map((text) => ({ [this._key]: text }));
            }
          }
          class SummarizationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => SummarizationPipelineType} */
          /** @type {any} */
          Text2TextGenerationPipeline {
            /**
             * Create a new SummarizationPipeline.
             * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
              /** @type {'summary_text'} */
              __publicField(this, "_key", "summary_text");
            }
          }
          class TranslationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => TranslationPipelineType} */
          /** @type {any} */
          Text2TextGenerationPipeline {
            /**
             * Create a new TranslationPipeline.
             * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
              /** @type {'translation_text'} */
              __publicField(this, "_key", "translation_text");
            }
          }
          function isChat(x2) {
            return Array.isArray(x2) && x2.every((x3) => "role" in x3 && "content" in x3);
          }
          class TextGenerationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => TextGenerationPipelineType} */
          Pipeline {
            /**
             * Create a new TextGenerationPipeline.
             * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {TextGenerationPipelineCallback} */
            async _call(texts, generate_kwargs = {}) {
              let isBatched = false;
              let isChatInput = false;
              let inputs;
              if (typeof texts === "string") {
                inputs = texts = [texts];
              } else if (Array.isArray(texts) && texts.every((x2) => typeof x2 === "string")) {
                isBatched = true;
                inputs = /** @type {string[]} */
                texts;
              } else {
                if (isChat(texts)) {
                  texts = [
                    /** @type {Chat} */
                    texts
                  ];
                } else if (Array.isArray(texts) && texts.every(isChat)) {
                  isBatched = true;
                } else {
                  throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");
                }
                isChatInput = true;
                inputs = /** @type {string[]} */
                /** @type {Chat[]} */
                texts.map(
                  (x2) => this.tokenizer.apply_chat_template(x2, {
                    tokenize: false,
                    add_generation_prompt: true
                  })
                );
              }
              const add_special_tokens = generate_kwargs.add_special_tokens ?? false;
              const return_full_text = isChatInput ? false : generate_kwargs.return_full_text ?? true;
              this.tokenizer.padding_side = "left";
              const text_inputs = this.tokenizer(inputs, {
                add_special_tokens,
                padding: true,
                truncation: true
              });
              const outputTokenIds = (
                /** @type {Tensor} */
                await this.model.generate({
                  ...text_inputs,
                  ...generate_kwargs
                })
              );
              const decoded = this.tokenizer.batch_decode(outputTokenIds, {
                skip_special_tokens: true
              });
              let promptLengths;
              if (!return_full_text && text_inputs.input_ids.dims.at(-1) > 0) {
                promptLengths = this.tokenizer.batch_decode(text_inputs.input_ids, {
                  skip_special_tokens: true
                }).map((x2) => x2.length);
              }
              const toReturn = Array.from({ length: texts.length }, (_2) => []);
              for (let i = 0; i < decoded.length; ++i) {
                const textIndex = Math.floor(i / outputTokenIds.dims[0] * texts.length);
                if (promptLengths) {
                  decoded[i] = decoded[i].slice(promptLengths[textIndex]);
                }
                toReturn[textIndex].push({
                  generated_text: isChatInput ? [
                    .../** @type {Chat[]} */
                    texts[textIndex],
                    { role: "assistant", content: decoded[i] }
                  ] : decoded[i]
                });
              }
              return !isBatched && toReturn.length === 1 ? toReturn[0] : toReturn;
            }
          }
          class ZeroShotClassificationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => ZeroShotClassificationPipelineType} */
          Pipeline {
            /**
             * Create a new ZeroShotClassificationPipeline.
             * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
              this.label2id = Object.fromEntries(
                Object.entries(
                  /** @type {any} */
                  this.model.config.label2id
                ).map(
                  ([k, v]) => [k.toLowerCase(), v]
                )
              );
              this.entailment_id = this.label2id["entailment"];
              if (this.entailment_id === void 0) {
                console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id.");
                this.entailment_id = 2;
              }
              this.contradiction_id = this.label2id["contradiction"] ?? this.label2id["not_entailment"];
              if (this.contradiction_id === void 0) {
                console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id.");
                this.contradiction_id = 0;
              }
            }
            /** @type {ZeroShotClassificationPipelineCallback} */
            async _call(texts, candidate_labels, {
              hypothesis_template = "This example is {}.",
              multi_label = false
            } = {}) {
              const isBatched = Array.isArray(texts);
              if (!isBatched) {
                texts = [
                  /** @type {string} */
                  texts
                ];
              }
              if (!Array.isArray(candidate_labels)) {
                candidate_labels = [candidate_labels];
              }
              const hypotheses = candidate_labels.map(
                (x2) => hypothesis_template.replace("{}", x2)
              );
              const softmaxEach = multi_label || candidate_labels.length === 1;
              const toReturn = [];
              for (const premise of texts) {
                const entails_logits = [];
                for (const hypothesis of hypotheses) {
                  const inputs = this.tokenizer(premise, {
                    text_pair: hypothesis,
                    padding: true,
                    truncation: true
                  });
                  const outputs = await this.model(inputs);
                  if (softmaxEach) {
                    entails_logits.push([
                      outputs.logits.data[this.contradiction_id],
                      outputs.logits.data[this.entailment_id]
                    ]);
                  } else {
                    entails_logits.push(outputs.logits.data[this.entailment_id]);
                  }
                }
                const scores = softmaxEach ? entails_logits.map((x2) => (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(x2)[1]) : (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(entails_logits);
                const scores_sorted = scores.map((x2, i) => [x2, i]).sort((a, b) => b[0] - a[0]);
                toReturn.push({
                  sequence: premise,
                  labels: scores_sorted.map((x2) => candidate_labels[x2[1]]),
                  scores: scores_sorted.map((x2) => x2[0])
                });
              }
              return isBatched ? toReturn : toReturn[0];
            }
          }
          class FeatureExtractionPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => FeatureExtractionPipelineType} */
          Pipeline {
            /**
             * Create a new FeatureExtractionPipeline.
             * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {FeatureExtractionPipelineCallback} */
            async _call(texts, {
              pooling = (
                /** @type {'none'} */
                "none"
              ),
              normalize = false,
              quantize = false,
              precision = (
                /** @type {'binary'} */
                "binary"
              )
            } = {}) {
              const model_inputs = this.tokenizer(texts, {
                padding: true,
                truncation: true
              });
              const outputs = await this.model(model_inputs);
              let result = outputs.last_hidden_state ?? outputs.logits ?? outputs.token_embeddings;
              if (pooling === "none") {
              } else if (pooling === "mean") {
                result = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.mean_pooling)(result, model_inputs.attention_mask);
              } else if (pooling === "cls") {
                result = result.slice(null, 0);
              } else {
                throw Error(`Pooling method '${pooling}' not supported.`);
              }
              if (normalize) {
                result = result.normalize(2, -1);
              }
              if (quantize) {
                result = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.quantize_embeddings)(result, precision);
              }
              return result;
            }
          }
          class ImageFeatureExtractionPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageFeatureExtractionPipelineType} */
          Pipeline {
            /**
             * Create a new ImageFeatureExtractionPipeline.
             * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {ImageFeatureExtractionPipelineCallback} */
            async _call(images, {
              pool = null
            } = {}) {
              const preparedImages = await prepareImages(images);
              const { pixel_values } = await this.processor(preparedImages);
              const outputs = await this.model({ pixel_values });
              let result;
              if (pool) {
                if (!("pooler_output" in outputs)) {
                  throw Error(`No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.`);
                }
                result = outputs.pooler_output;
              } else {
                result = outputs.last_hidden_state ?? outputs.logits ?? outputs.image_embeds;
              }
              return result;
            }
          }
          class AudioClassificationPipeline extends /** @type {new (options: AudioPipelineConstructorArgs) => AudioClassificationPipelineType} */
          Pipeline {
            /**
             * Create a new AudioClassificationPipeline.
             * @param {AudioPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {AudioClassificationPipelineCallback} */
            async _call(audio, {
              top_k = 5
            } = {}) {
              const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
              const preparedAudios = await prepareAudios(audio, sampling_rate);
              const id2label = this.model.config.id2label;
              const toReturn = [];
              for (const aud of preparedAudios) {
                const inputs = await this.processor(aud);
                const output = await this.model(inputs);
                const logits = output.logits[0];
                const scores = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.topk)(new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor(
                  "float32",
                  (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(logits.data),
                  logits.dims
                ), top_k);
                const values = scores[0].tolist();
                const indices = scores[1].tolist();
                const vals = indices.map((x2, i) => ({
                  label: (
                    /** @type {string} */
                    id2label ? id2label[x2] : `LABEL_${x2}`
                  ),
                  score: (
                    /** @type {number} */
                    values[i]
                  )
                }));
                toReturn.push(vals);
              }
              ;
              return Array.isArray(audio) ? toReturn : toReturn[0];
            }
          }
          class ZeroShotAudioClassificationPipeline extends /** @type {new (options: TextAudioPipelineConstructorArgs) => ZeroShotAudioClassificationPipelineType} */
          Pipeline {
            /**
             * Create a new ZeroShotAudioClassificationPipeline.
             * @param {TextAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {ZeroShotAudioClassificationPipelineCallback} */
            async _call(audio, candidate_labels, {
              hypothesis_template = "This is a sound of {}."
            } = {}) {
              const single = !Array.isArray(audio);
              if (single) {
                audio = [
                  /** @type {AudioInput} */
                  audio
                ];
              }
              const texts = candidate_labels.map(
                (x2) => hypothesis_template.replace("{}", x2)
              );
              const text_inputs = this.tokenizer(texts, {
                padding: true,
                truncation: true
              });
              const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
              const preparedAudios = await prepareAudios(audio, sampling_rate);
              const toReturn = [];
              for (const aud of preparedAudios) {
                const audio_inputs = await this.processor(aud);
                const output = await this.model({ ...text_inputs, ...audio_inputs });
                const probs = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(output.logits_per_audio.data);
                toReturn.push([...probs].map((x2, i) => ({
                  score: x2,
                  label: candidate_labels[i]
                })));
              }
              return single ? toReturn[0] : toReturn;
            }
          }
          class AutomaticSpeechRecognitionPipeline extends /** @type {new (options: TextAudioPipelineConstructorArgs) => AutomaticSpeechRecognitionPipelineType} */
          Pipeline {
            /**
             * Create a new AutomaticSpeechRecognitionPipeline.
             * @param {TextAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {AutomaticSpeechRecognitionPipelineCallback} */
            async _call(audio, kwargs = {}) {
              switch (this.model.config.model_type) {
                case "whisper":
                case "lite-whisper":
                  return this._call_whisper(audio, kwargs);
                case "wav2vec2":
                case "wav2vec2-bert":
                case "unispeech":
                case "unispeech-sat":
                case "hubert":
                  return this._call_wav2vec2(audio, kwargs);
                case "moonshine":
                  return this._call_moonshine(audio, kwargs);
                default:
                  throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`);
              }
            }
            /**
             * @type {AutomaticSpeechRecognitionPipelineCallback}
             * @private
             */
            async _call_wav2vec2(audio, kwargs) {
              if (kwargs.language) {
                console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".');
              }
              if (kwargs.task) {
                console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');
              }
              const single = !Array.isArray(audio);
              if (single) {
                audio = [
                  /** @type {AudioInput} */
                  audio
                ];
              }
              const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
              const preparedAudios = await prepareAudios(audio, sampling_rate);
              const toReturn = [];
              for (const aud of preparedAudios) {
                const inputs = await this.processor(aud);
                const output = await this.model(inputs);
                const logits = output.logits[0];
                const predicted_ids = [];
                for (const item of logits) {
                  predicted_ids.push((0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.max)(item.data)[1]);
                }
                const predicted_sentences = this.tokenizer.decode(predicted_ids);
                toReturn.push({ text: predicted_sentences });
              }
              return single ? toReturn[0] : toReturn;
            }
            /**
             * @type {AutomaticSpeechRecognitionPipelineCallback}
             * @private
             */
            async _call_whisper(audio, kwargs) {
              const return_timestamps = kwargs.return_timestamps ?? false;
              const chunk_length_s = kwargs.chunk_length_s ?? 0;
              const force_full_sequences = kwargs.force_full_sequences ?? false;
              let stride_length_s = kwargs.stride_length_s ?? null;
              const generation_config = { ...kwargs };
              if (return_timestamps === "word") {
                generation_config["return_token_timestamps"] = true;
                generation_config["return_timestamps"] = false;
              }
              const single = !Array.isArray(audio);
              if (single) {
                audio = [
                  /** @type {AudioInput} */
                  audio
                ];
              }
              const time_precision = this.processor.feature_extractor.config.chunk_length / this.model.config.max_source_positions;
              const hop_length = this.processor.feature_extractor.config.hop_length;
              const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
              const preparedAudios = await prepareAudios(audio, sampling_rate);
              const toReturn = [];
              for (const aud of preparedAudios) {
                let chunks = [];
                if (chunk_length_s > 0) {
                  if (stride_length_s === null) {
                    stride_length_s = chunk_length_s / 6;
                  } else if (chunk_length_s <= stride_length_s) {
                    throw Error("`chunk_length_s` must be larger than `stride_length_s`.");
                  }
                  const window2 = sampling_rate * chunk_length_s;
                  const stride = sampling_rate * stride_length_s;
                  const jump = window2 - 2 * stride;
                  let offset = 0;
                  while (true) {
                    const offset_end = offset + window2;
                    const subarr = aud.subarray(offset, offset_end);
                    const feature = await this.processor(subarr);
                    const is_first = offset === 0;
                    const is_last = offset_end >= aud.length;
                    chunks.push({
                      stride: [
                        subarr.length,
                        is_first ? 0 : stride,
                        is_last ? 0 : stride
                      ],
                      input_features: feature.input_features,
                      is_last
                    });
                    if (is_last)
                      break;
                    offset += jump;
                  }
                } else {
                  chunks = [{
                    stride: [aud.length, 0, 0],
                    input_features: (await this.processor(aud)).input_features,
                    is_last: true
                  }];
                }
                for (const chunk of chunks) {
                  generation_config.num_frames = Math.floor(chunk.stride[0] / hop_length);
                  const data = await this.model.generate({
                    inputs: chunk.input_features,
                    ...generation_config
                  });
                  if (return_timestamps === "word") {
                    chunk.tokens = data.sequences.tolist()[0];
                    chunk.token_timestamps = data.token_timestamps.tolist()[0].map(
                      (x2) => (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.round)(x2, 2)
                    );
                  } else {
                    chunk.tokens = /** @type {Tensor} */
                    data[0].tolist();
                  }
                  chunk.stride = chunk.stride.map((x2) => x2 / sampling_rate);
                }
                const [full_text, optional] = this.tokenizer._decode_asr(chunks, {
                  time_precision,
                  return_timestamps,
                  force_full_sequences
                });
                toReturn.push({ text: full_text, ...optional });
              }
              return single ? toReturn[0] : toReturn;
            }
            /**
             * @type {AutomaticSpeechRecognitionPipelineCallback}
             * @private
             */
            async _call_moonshine(audio, kwargs) {
              const single = !Array.isArray(audio);
              if (single) {
                audio = [
                  /** @type {AudioInput} */
                  audio
                ];
              }
              const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
              const preparedAudios = await prepareAudios(audio, sampling_rate);
              const toReturn = [];
              for (const aud of preparedAudios) {
                const inputs = await this.processor(aud);
                const max_new_tokens = Math.floor(aud.length / sampling_rate) * 6;
                const outputs = await this.model.generate({ max_new_tokens, ...kwargs, ...inputs });
                const text = this.processor.batch_decode(
                  /** @type {Tensor} */
                  outputs,
                  { skip_special_tokens: true }
                )[0];
                toReturn.push({ text });
              }
              return single ? toReturn[0] : toReturn;
            }
          }
          class ImageToTextPipeline extends /** @type {new (options: TextImagePipelineConstructorArgs) => ImageToTextPipelineType} */
          Pipeline {
            /**
             * Create a new ImageToTextPipeline.
             * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {ImageToTextPipelineCallback} */
            async _call(images, generate_kwargs = {}) {
              const isBatched = Array.isArray(images);
              const preparedImages = await prepareImages(images);
              const { pixel_values } = await this.processor(preparedImages);
              const toReturn = [];
              for (const batch of pixel_values) {
                batch.dims = [1, ...batch.dims];
                const output = await this.model.generate({ inputs: batch, ...generate_kwargs });
                const decoded = this.tokenizer.batch_decode(
                  /** @type {Tensor} */
                  output,
                  {
                    skip_special_tokens: true
                  }
                ).map((x2) => ({ generated_text: x2.trim() }));
                toReturn.push(decoded);
              }
              return isBatched ? toReturn : toReturn[0];
            }
          }
          class ImageClassificationPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageClassificationPipelineType} */
          Pipeline {
            /**
             * Create a new ImageClassificationPipeline.
             * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {ImageClassificationPipelineCallback} */
            async _call(images, {
              top_k = 5
            } = {}) {
              const preparedImages = await prepareImages(images);
              const { pixel_values } = await this.processor(preparedImages);
              const output = await this.model({ pixel_values });
              const id2label = this.model.config.id2label;
              const toReturn = [];
              for (const batch of output.logits) {
                const scores = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.topk)(new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor(
                  "float32",
                  (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(batch.data),
                  batch.dims
                ), top_k);
                const values = scores[0].tolist();
                const indices = scores[1].tolist();
                const vals = indices.map((x2, i) => ({
                  label: (
                    /** @type {string} */
                    id2label ? id2label[x2] : `LABEL_${x2}`
                  ),
                  score: (
                    /** @type {number} */
                    values[i]
                  )
                }));
                toReturn.push(vals);
              }
              return Array.isArray(images) ? toReturn : toReturn[0];
            }
          }
          class ImageSegmentationPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageSegmentationPipelineType} */
          Pipeline {
            /**
             * Create a new ImageSegmentationPipeline.
             * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
              this.subtasks_mapping = {
                // Mapping of subtasks to their corresponding post-processing function names.
                panoptic: "post_process_panoptic_segmentation",
                instance: "post_process_instance_segmentation",
                semantic: "post_process_semantic_segmentation"
              };
            }
            /** @type {ImageSegmentationPipelineCallback} */
            async _call(images, {
              threshold = 0.5,
              mask_threshold = 0.5,
              overlap_mask_area_threshold = 0.8,
              label_ids_to_fuse = null,
              target_sizes = null,
              subtask = null
            } = {}) {
              const isBatched = Array.isArray(images);
              if (isBatched && images.length !== 1) {
                throw Error("Image segmentation pipeline currently only supports a batch size of 1.");
              }
              const preparedImages = await prepareImages(images);
              const imageSizes = preparedImages.map((x2) => [x2.height, x2.width]);
              const inputs = await this.processor(preparedImages);
              const { inputNames, outputNames } = this.model.sessions["model"];
              if (!inputNames.includes("pixel_values")) {
                if (inputNames.length !== 1) {
                  throw Error(`Expected a single input name, but got ${inputNames.length} inputs: ${inputNames}.`);
                }
                const newName = inputNames[0];
                if (newName in inputs) {
                  throw Error(`Input name ${newName} already exists in the inputs.`);
                }
                inputs[newName] = inputs.pixel_values;
              }
              const output = await this.model(inputs);
              let fn = null;
              if (subtask !== null) {
                fn = this.subtasks_mapping[subtask];
              } else if (this.processor.image_processor) {
                for (const [task, func] of Object.entries(this.subtasks_mapping)) {
                  if (func in this.processor.image_processor) {
                    fn = this.processor.image_processor[func].bind(this.processor.image_processor);
                    subtask = task;
                    break;
                  }
                }
              }
              const id2label = this.model.config.id2label;
              const annotation = [];
              if (!subtask) {
                const epsilon = 1e-5;
                const result = output[outputNames[0]];
                for (let i = 0; i < imageSizes.length; ++i) {
                  const size = imageSizes[i];
                  const item = result[i];
                  if (item.data.some((x2) => x2 < -epsilon || x2 > 1 + epsilon)) {
                    item.sigmoid_();
                  }
                  const mask = await _utils_image_js__WEBPACK_IMPORTED_MODULE_9__.RawImage.fromTensor(item.mul_(255).to("uint8")).resize(size[1], size[0]);
                  annotation.push({
                    label: null,
                    score: null,
                    mask
                  });
                }
              } else if (subtask === "panoptic" || subtask === "instance") {
                const processed = fn(
                  output,
                  threshold,
                  mask_threshold,
                  overlap_mask_area_threshold,
                  label_ids_to_fuse,
                  target_sizes ?? imageSizes
                  // TODO FIX?
                )[0];
                const segmentation = processed.segmentation;
                for (const segment of processed.segments_info) {
                  const maskData = new Uint8ClampedArray(segmentation.data.length);
                  for (let i = 0; i < segmentation.data.length; ++i) {
                    if (segmentation.data[i] === segment.id) {
                      maskData[i] = 255;
                    }
                  }
                  const mask = new _utils_image_js__WEBPACK_IMPORTED_MODULE_9__.RawImage(maskData, segmentation.dims[1], segmentation.dims[0], 1);
                  annotation.push({
                    score: segment.score,
                    label: id2label[segment.label_id],
                    mask
                  });
                }
              } else if (subtask === "semantic") {
                const { segmentation, labels } = fn(output, target_sizes ?? imageSizes)[0];
                for (const label of labels) {
                  const maskData = new Uint8ClampedArray(segmentation.data.length);
                  for (let i = 0; i < segmentation.data.length; ++i) {
                    if (segmentation.data[i] === label) {
                      maskData[i] = 255;
                    }
                  }
                  const mask = new _utils_image_js__WEBPACK_IMPORTED_MODULE_9__.RawImage(maskData, segmentation.dims[1], segmentation.dims[0], 1);
                  annotation.push({
                    score: null,
                    label: id2label[label],
                    mask
                  });
                }
              } else {
                throw Error(`Subtask ${subtask} not supported.`);
              }
              return annotation;
            }
          }
          class BackgroundRemovalPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => BackgroundRemovalPipelineType} */
          /** @type {any} */
          ImageSegmentationPipeline {
            /**
             * Create a new BackgroundRemovalPipeline.
             * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {BackgroundRemovalPipelineCallback} */
            async _call(images, options = {}) {
              const isBatched = Array.isArray(images);
              if (isBatched && images.length !== 1) {
                throw Error("Background removal pipeline currently only supports a batch size of 1.");
              }
              const preparedImages = await prepareImages(images);
              const masks = await super._call(images, options);
              const result = preparedImages.map((img, i) => {
                const cloned = img.clone();
                cloned.putAlpha(masks[i].mask);
                return cloned;
              });
              return result;
            }
          }
          class ZeroShotImageClassificationPipeline extends /** @type {new (options: TextImagePipelineConstructorArgs) => ZeroShotImageClassificationPipelineType} */
          Pipeline {
            /**
             * Create a new ZeroShotImageClassificationPipeline.
             * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {ZeroShotImageClassificationPipelineCallback} */
            async _call(images, candidate_labels, {
              hypothesis_template = "This is a photo of {}"
            } = {}) {
              const isBatched = Array.isArray(images);
              const preparedImages = await prepareImages(images);
              const texts = candidate_labels.map(
                (x2) => hypothesis_template.replace("{}", x2)
              );
              const text_inputs = this.tokenizer(texts, {
                padding: this.model.config.model_type === "siglip" ? "max_length" : true,
                truncation: true
              });
              const { pixel_values } = await this.processor(preparedImages);
              const output = await this.model({ ...text_inputs, pixel_values });
              const function_to_apply = this.model.config.model_type === "siglip" ? (batch) => batch.sigmoid().data : (batch) => (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_6__.softmax)(batch.data);
              const toReturn = [];
              for (const batch of output.logits_per_image) {
                const probs = function_to_apply(batch);
                const result = [...probs].map((x2, i) => ({
                  score: x2,
                  label: candidate_labels[i]
                }));
                result.sort((a, b) => b.score - a.score);
                toReturn.push(result);
              }
              return isBatched ? toReturn : toReturn[0];
            }
          }
          class ObjectDetectionPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ObjectDetectionPipelineType} */
          Pipeline {
            /**
             * Create a new ObjectDetectionPipeline.
             * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {ObjectDetectionPipelineCallback} */
            async _call(images, {
              threshold = 0.9,
              percentage = false
            } = {}) {
              const isBatched = Array.isArray(images);
              if (isBatched && images.length !== 1) {
                throw Error("Object detection pipeline currently only supports a batch size of 1.");
              }
              const preparedImages = await prepareImages(images);
              const imageSizes = percentage ? null : preparedImages.map((x2) => [x2.height, x2.width]);
              const { pixel_values, pixel_mask } = await this.processor(preparedImages);
              const output = await this.model({ pixel_values, pixel_mask });
              const processed = this.processor.image_processor.post_process_object_detection(output, threshold, imageSizes);
              const id2label = this.model.config.id2label;
              const result = processed.map((batch) => batch.boxes.map((box, i) => ({
                score: batch.scores[i],
                label: id2label[batch.classes[i]],
                box: get_bounding_box(box, !percentage)
              })));
              return isBatched ? result : result[0];
            }
          }
          class ZeroShotObjectDetectionPipeline extends /** @type {new (options: TextImagePipelineConstructorArgs) => ZeroShotObjectDetectionPipelineType} */
          Pipeline {
            /**
             * Create a new ZeroShotObjectDetectionPipeline.
             * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {ZeroShotObjectDetectionPipelineCallback} */
            async _call(images, candidate_labels, {
              threshold = 0.1,
              top_k = null,
              percentage = false
            } = {}) {
              const isBatched = Array.isArray(images);
              const preparedImages = await prepareImages(images);
              const text_inputs = this.tokenizer(candidate_labels, {
                padding: true,
                truncation: true
              });
              const model_inputs = await this.processor(preparedImages);
              const toReturn = [];
              for (let i = 0; i < preparedImages.length; ++i) {
                const image = preparedImages[i];
                const imageSize = percentage ? null : [[image.height, image.width]];
                const pixel_values = model_inputs.pixel_values[i].unsqueeze_(0);
                const output = await this.model({ ...text_inputs, pixel_values });
                let result;
                if ("post_process_grounded_object_detection" in this.processor) {
                  const processed = this.processor.post_process_grounded_object_detection(
                    output,
                    text_inputs.input_ids,
                    {
                      // TODO: support separate threshold values
                      box_threshold: threshold,
                      text_threshold: threshold,
                      target_sizes: imageSize
                    }
                  )[0];
                  result = processed.boxes.map((box, i2) => ({
                    score: processed.scores[i2],
                    label: processed.labels[i2],
                    box: get_bounding_box(box, !percentage)
                  }));
                } else {
                  const processed = this.processor.image_processor.post_process_object_detection(output, threshold, imageSize, true)[0];
                  result = processed.boxes.map((box, i2) => ({
                    score: processed.scores[i2],
                    label: candidate_labels[processed.classes[i2]],
                    box: get_bounding_box(box, !percentage)
                  }));
                }
                result.sort((a, b) => b.score - a.score);
                if (top_k !== null) {
                  result = result.slice(0, top_k);
                }
                toReturn.push(result);
              }
              return isBatched ? toReturn : toReturn[0];
            }
          }
          class DocumentQuestionAnsweringPipeline extends /** @type {new (options: TextImagePipelineConstructorArgs) => DocumentQuestionAnsweringPipelineType} */
          Pipeline {
            /**
             * Create a new DocumentQuestionAnsweringPipeline.
             * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {DocumentQuestionAnsweringPipelineCallback} */
            async _call(image, question, generate_kwargs = {}) {
              const preparedImage = (await prepareImages(image))[0];
              const { pixel_values } = await this.processor(preparedImage);
              const task_prompt = `<s_docvqa><s_question>${question}</s_question><s_answer>`;
              const decoder_input_ids = this.tokenizer(task_prompt, {
                add_special_tokens: false,
                padding: true,
                truncation: true
              }).input_ids;
              const output = await this.model.generate({
                inputs: pixel_values,
                // @ts-expect-error TS2339
                max_length: this.model.config.decoder.max_position_embeddings,
                decoder_input_ids,
                ...generate_kwargs
              });
              const decoded = this.tokenizer.batch_decode(
                /** @type {Tensor} */
                output
              )[0];
              const match = decoded.match(/<s_answer>(.*?)<\/s_answer>/);
              let answer = null;
              if (match && match.length >= 2) {
                answer = match[1].trim();
              }
              return [{ answer }];
            }
          }
          class TextToAudioPipeline extends /** @type {new (options: TextToAudioPipelineConstructorArgs) => TextToAudioPipelineType} */
          Pipeline {
            /**
             * Create a new TextToAudioPipeline.
             * @param {TextToAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
              __publicField(this, "DEFAULT_VOCODER_ID", "Xenova/speecht5_hifigan");
              this.vocoder = options.vocoder ?? null;
            }
            /** @type {TextToAudioPipelineCallback} */
            async _call(text_inputs, {
              speaker_embeddings = null
            } = {}) {
              if (this.processor) {
                return this._call_text_to_spectrogram(text_inputs, { speaker_embeddings });
              } else {
                return this._call_text_to_waveform(text_inputs);
              }
            }
            async _call_text_to_waveform(text_inputs) {
              const inputs = this.tokenizer(text_inputs, {
                padding: true,
                truncation: true
              });
              const { waveform } = await this.model(inputs);
              const sampling_rate = this.model.config.sampling_rate;
              return new _utils_audio_js__WEBPACK_IMPORTED_MODULE_7__.RawAudio(
                waveform.data,
                sampling_rate
              );
            }
            async _call_text_to_spectrogram(text_inputs, { speaker_embeddings }) {
              if (!this.vocoder) {
                console.log("No vocoder specified, using default HifiGan vocoder.");
                this.vocoder = await _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID, { dtype: "fp32" });
              }
              if (typeof speaker_embeddings === "string" || speaker_embeddings instanceof URL) {
                speaker_embeddings = new Float32Array(
                  await (await fetch(speaker_embeddings)).arrayBuffer()
                );
              }
              if (speaker_embeddings instanceof Float32Array) {
                speaker_embeddings = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor(
                  "float32",
                  speaker_embeddings,
                  [1, speaker_embeddings.length]
                );
              } else if (!(speaker_embeddings instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor)) {
                throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");
              }
              const { input_ids } = this.tokenizer(text_inputs, {
                padding: true,
                truncation: true
              });
              const { waveform } = await this.model.generate_speech(input_ids, speaker_embeddings, { vocoder: this.vocoder });
              const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
              return new _utils_audio_js__WEBPACK_IMPORTED_MODULE_7__.RawAudio(
                waveform.data,
                sampling_rate
              );
            }
          }
          class ImageToImagePipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageToImagePipelineType} */
          Pipeline {
            /**
             * Create a new ImageToImagePipeline.
             * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {ImageToImagePipelineCallback} */
            async _call(images) {
              const preparedImages = await prepareImages(images);
              const inputs = await this.processor(preparedImages);
              const outputs = await this.model(inputs);
              const toReturn = [];
              for (const batch of outputs.reconstruction) {
                const output = batch.squeeze().clamp_(0, 1).mul_(255).round_().to("uint8");
                toReturn.push(_utils_image_js__WEBPACK_IMPORTED_MODULE_9__.RawImage.fromTensor(output));
              }
              return toReturn.length > 1 ? toReturn : toReturn[0];
            }
          }
          class DepthEstimationPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => DepthEstimationPipelineType} */
          Pipeline {
            /**
             * Create a new DepthEstimationPipeline.
             * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
             */
            constructor(options) {
              super(options);
            }
            /** @type {DepthEstimationPipelineCallback} */
            async _call(images) {
              const preparedImages = await prepareImages(images);
              const inputs = await this.processor(preparedImages);
              const { predicted_depth } = await this.model(inputs);
              const toReturn = [];
              for (let i = 0; i < preparedImages.length; ++i) {
                const batch = predicted_depth[i];
                const [height, width] = batch.dims.slice(-2);
                const [new_width, new_height] = preparedImages[i].size;
                const prediction = (await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.interpolate_4d)(batch.view(1, 1, height, width), {
                  size: [new_height, new_width],
                  mode: "bilinear"
                })).view(new_height, new_width);
                const minval = (
                  /** @type {number} */
                  prediction.min().item()
                );
                const maxval = (
                  /** @type {number} */
                  prediction.max().item()
                );
                const formatted = prediction.sub(minval).div_(maxval - minval).mul_(255).to("uint8").unsqueeze(0);
                const depth = _utils_image_js__WEBPACK_IMPORTED_MODULE_9__.RawImage.fromTensor(formatted);
                toReturn.push({
                  predicted_depth: prediction,
                  depth
                });
              }
              return toReturn.length > 1 ? toReturn : toReturn[0];
            }
          }
          const SUPPORTED_TASKS = Object.freeze({
            "text-classification": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": TextClassificationPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSequenceClassification,
              "default": {
                // TODO: replace with original
                // "model": "distilbert-base-uncased-finetuned-sst-2-english",
                "model": "Xenova/distilbert-base-uncased-finetuned-sst-2-english"
              },
              "type": "text"
            },
            "token-classification": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": TokenClassificationPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForTokenClassification,
              "default": {
                // TODO: replace with original
                // "model": "Davlan/bert-base-multilingual-cased-ner-hrl",
                "model": "Xenova/bert-base-multilingual-cased-ner-hrl"
              },
              "type": "text"
            },
            "question-answering": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": QuestionAnsweringPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForQuestionAnswering,
              "default": {
                // TODO: replace with original
                // "model": "distilbert-base-cased-distilled-squad",
                "model": "Xenova/distilbert-base-cased-distilled-squad"
              },
              "type": "text"
            },
            "fill-mask": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": FillMaskPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForMaskedLM,
              "default": {
                // TODO: replace with original
                // "model": "bert-base-uncased",
                "model": "Xenova/bert-base-uncased"
              },
              "type": "text"
            },
            "summarization": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": SummarizationPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSeq2SeqLM,
              "default": {
                // TODO: replace with original
                // "model": "sshleifer/distilbart-cnn-6-6",
                "model": "Xenova/distilbart-cnn-6-6"
              },
              "type": "text"
            },
            "translation": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": TranslationPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSeq2SeqLM,
              "default": {
                // TODO: replace with original
                // "model": "t5-small",
                "model": "Xenova/t5-small"
              },
              "type": "text"
            },
            "text2text-generation": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": Text2TextGenerationPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSeq2SeqLM,
              "default": {
                // TODO: replace with original
                // "model": "google/flan-t5-small",
                "model": "Xenova/flan-t5-small"
              },
              "type": "text"
            },
            "text-generation": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": TextGenerationPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForCausalLM,
              "default": {
                // TODO: replace with original
                // "model": "gpt2",
                "model": "Xenova/gpt2"
              },
              "type": "text"
            },
            "zero-shot-classification": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": ZeroShotClassificationPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSequenceClassification,
              "default": {
                // TODO: replace with original
                // "model": "typeform/distilbert-base-uncased-mnli",
                "model": "Xenova/distilbert-base-uncased-mnli"
              },
              "type": "text"
            },
            "audio-classification": {
              "pipeline": AudioClassificationPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForAudioClassification,
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                // TODO: replace with original
                // "model": "superb/wav2vec2-base-superb-ks",
                "model": "Xenova/wav2vec2-base-superb-ks"
              },
              "type": "audio"
            },
            "zero-shot-audio-classification": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": ZeroShotAudioClassificationPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel,
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                // TODO: replace with original
                // "model": "laion/clap-htsat-fused",
                "model": "Xenova/clap-htsat-unfused"
              },
              "type": "multimodal"
            },
            "automatic-speech-recognition": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": AutomaticSpeechRecognitionPipeline,
              "model": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSpeechSeq2Seq, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForCTC],
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                // TODO: replace with original
                // "model": "openai/whisper-tiny.en",
                "model": "Xenova/whisper-tiny.en"
              },
              "type": "multimodal"
            },
            "text-to-audio": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": TextToAudioPipeline,
              "model": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForTextToWaveform, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForTextToSpectrogram],
              "processor": [
                _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
                /* Some don't use a processor */
                null
              ],
              "default": {
                // TODO: replace with original
                // "model": "microsoft/speecht5_tts",
                "model": "Xenova/speecht5_tts"
              },
              "type": "text"
            },
            "image-to-text": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": ImageToTextPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForVision2Seq,
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                // TODO: replace with original
                // "model": "nlpconnect/vit-gpt2-image-captioning",
                "model": "Xenova/vit-gpt2-image-captioning"
              },
              "type": "multimodal"
            },
            "image-classification": {
              // no tokenizer
              "pipeline": ImageClassificationPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageClassification,
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                // TODO: replace with original
                // "model": "google/vit-base-patch16-224",
                "model": "Xenova/vit-base-patch16-224"
              },
              "type": "multimodal"
            },
            "image-segmentation": {
              // no tokenizer
              "pipeline": ImageSegmentationPipeline,
              "model": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageSegmentation, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSemanticSegmentation, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForUniversalSegmentation],
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                // TODO: replace with original
                // "model": "facebook/detr-resnet-50-panoptic",
                "model": "Xenova/detr-resnet-50-panoptic"
              },
              "type": "multimodal"
            },
            "background-removal": {
              // no tokenizer
              "pipeline": BackgroundRemovalPipeline,
              "model": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageSegmentation, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSemanticSegmentation, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForUniversalSegmentation],
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                "model": "Xenova/modnet"
              },
              "type": "image"
            },
            "zero-shot-image-classification": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": ZeroShotImageClassificationPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel,
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                // TODO: replace with original
                // "model": "openai/clip-vit-base-patch32",
                "model": "Xenova/clip-vit-base-patch32"
              },
              "type": "multimodal"
            },
            "object-detection": {
              // no tokenizer
              "pipeline": ObjectDetectionPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForObjectDetection,
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                // TODO: replace with original
                // "model": "facebook/detr-resnet-50",
                "model": "Xenova/detr-resnet-50"
              },
              "type": "multimodal"
            },
            "zero-shot-object-detection": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": ZeroShotObjectDetectionPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForZeroShotObjectDetection,
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                // TODO: replace with original
                // "model": "google/owlvit-base-patch32",
                "model": "Xenova/owlvit-base-patch32"
              },
              "type": "multimodal"
            },
            "document-question-answering": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": DocumentQuestionAnsweringPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForDocumentQuestionAnswering,
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                // TODO: replace with original
                // "model": "naver-clova-ix/donut-base-finetuned-docvqa",
                "model": "Xenova/donut-base-finetuned-docvqa"
              },
              "type": "multimodal"
            },
            "image-to-image": {
              // no tokenizer
              "pipeline": ImageToImagePipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageToImage,
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                // TODO: replace with original
                // "model": "caidas/swin2SR-classical-sr-x2-64",
                "model": "Xenova/swin2SR-classical-sr-x2-64"
              },
              "type": "image"
            },
            "depth-estimation": {
              // no tokenizer
              "pipeline": DepthEstimationPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForDepthEstimation,
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "default": {
                // TODO: replace with original
                // "model": "Intel/dpt-large",
                "model": "Xenova/dpt-large"
              },
              "type": "image"
            },
            // This task serves as a useful interface for dealing with sentence-transformers (https://huggingface.co/sentence-transformers).
            "feature-extraction": {
              "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
              "pipeline": FeatureExtractionPipeline,
              "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel,
              "default": {
                // TODO: replace with original
                // "model": "sentence-transformers/all-MiniLM-L6-v2",
                "model": "Xenova/all-MiniLM-L6-v2"
              },
              "type": "text"
            },
            "image-feature-extraction": {
              "processor": _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              "pipeline": ImageFeatureExtractionPipeline,
              "model": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageFeatureExtraction, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel],
              "default": {
                // TODO: replace with original
                // "model": "google/vit-base-patch16-224",
                "model": "Xenova/vit-base-patch16-224-in21k"
              },
              "type": "image"
            }
          });
          const TASK_ALIASES = Object.freeze({
            "sentiment-analysis": "text-classification",
            "ner": "token-classification",
            // "vqa": "visual-question-answering", // TODO: Add
            "asr": "automatic-speech-recognition",
            "text-to-speech": "text-to-audio",
            // Add for backwards compatibility
            "embeddings": "feature-extraction"
          });
          async function pipeline(task, model = null, {
            progress_callback = null,
            config = null,
            cache_dir = null,
            local_files_only = false,
            revision = "main",
            device = null,
            dtype = null,
            subfolder = "onnx",
            use_external_data_format = null,
            model_file_name = null,
            session_options = {}
          } = {}) {
            task = TASK_ALIASES[task] ?? task;
            const pipelineInfo = SUPPORTED_TASKS[task.split("_", 1)[0]];
            if (!pipelineInfo) {
              throw Error(`Unsupported pipeline: ${task}. Must be one of [${Object.keys(SUPPORTED_TASKS)}]`);
            }
            if (!model) {
              model = pipelineInfo.default.model;
              console.log(`No model specified. Using default model: "${model}".`);
            }
            const pretrainedOptions = {
              progress_callback,
              config,
              cache_dir,
              local_files_only,
              revision,
              device,
              dtype,
              subfolder,
              use_external_data_format,
              model_file_name,
              session_options
            };
            const classes = /* @__PURE__ */ new Map([
              ["tokenizer", pipelineInfo.tokenizer],
              ["model", pipelineInfo.model],
              ["processor", pipelineInfo.processor]
            ]);
            const results = await loadItems(classes, model, pretrainedOptions);
            results.task = task;
            (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_5__.dispatchCallback)(progress_callback, {
              "status": "ready",
              "task": task,
              "model": model
            });
            const pipelineClass = pipelineInfo.pipeline;
            return new pipelineClass(results);
          }
          async function loadItems(mapping, model, pretrainedOptions) {
            const result = /* @__PURE__ */ Object.create(null);
            const promises = [];
            for (const [name, cls] of mapping.entries()) {
              if (!cls)
                continue;
              let promise;
              if (Array.isArray(cls)) {
                promise = new Promise(async (resolve, reject) => {
                  let e;
                  for (const c of cls) {
                    if (c === null) {
                      resolve(null);
                      return;
                    }
                    try {
                      resolve(await c.from_pretrained(model, pretrainedOptions));
                      return;
                    } catch (err) {
                      if (err.message?.includes("Unsupported model type")) {
                        e = err;
                      } else if (err.message?.includes("Could not locate file")) {
                        e = err;
                      } else {
                        reject(err);
                        return;
                      }
                    }
                  }
                  reject(e);
                });
              } else {
                promise = cls.from_pretrained(model, pretrainedOptions);
              }
              result[name] = promise;
              promises.push(promise);
            }
            await Promise.all(promises);
            for (const [name, promise] of Object.entries(result)) {
              result[name] = await promise;
            }
            return result;
          }
        }
      ),
      /***/
      "./src/tokenizers.js": (
        /*!***************************!*\
          !*** ./src/tokenizers.js ***!
          \***************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            AlbertTokenizer: () => (
              /* binding */
              AlbertTokenizer
            ),
            /* harmony export */
            AutoTokenizer: () => (
              /* binding */
              AutoTokenizer
            ),
            /* harmony export */
            BartTokenizer: () => (
              /* binding */
              BartTokenizer
            ),
            /* harmony export */
            BertTokenizer: () => (
              /* binding */
              BertTokenizer
            ),
            /* harmony export */
            BlenderbotSmallTokenizer: () => (
              /* binding */
              BlenderbotSmallTokenizer
            ),
            /* harmony export */
            BlenderbotTokenizer: () => (
              /* binding */
              BlenderbotTokenizer
            ),
            /* harmony export */
            BloomTokenizer: () => (
              /* binding */
              BloomTokenizer
            ),
            /* harmony export */
            CLIPTokenizer: () => (
              /* binding */
              CLIPTokenizer
            ),
            /* harmony export */
            CamembertTokenizer: () => (
              /* binding */
              CamembertTokenizer
            ),
            /* harmony export */
            CodeGenTokenizer: () => (
              /* binding */
              CodeGenTokenizer
            ),
            /* harmony export */
            CodeLlamaTokenizer: () => (
              /* binding */
              CodeLlamaTokenizer
            ),
            /* harmony export */
            CohereTokenizer: () => (
              /* binding */
              CohereTokenizer
            ),
            /* harmony export */
            ConvBertTokenizer: () => (
              /* binding */
              ConvBertTokenizer
            ),
            /* harmony export */
            DebertaTokenizer: () => (
              /* binding */
              DebertaTokenizer
            ),
            /* harmony export */
            DebertaV2Tokenizer: () => (
              /* binding */
              DebertaV2Tokenizer
            ),
            /* harmony export */
            DistilBertTokenizer: () => (
              /* binding */
              DistilBertTokenizer
            ),
            /* harmony export */
            ElectraTokenizer: () => (
              /* binding */
              ElectraTokenizer
            ),
            /* harmony export */
            EsmTokenizer: () => (
              /* binding */
              EsmTokenizer
            ),
            /* harmony export */
            FalconTokenizer: () => (
              /* binding */
              FalconTokenizer
            ),
            /* harmony export */
            GPT2Tokenizer: () => (
              /* binding */
              GPT2Tokenizer
            ),
            /* harmony export */
            GPTNeoXTokenizer: () => (
              /* binding */
              GPTNeoXTokenizer
            ),
            /* harmony export */
            GemmaTokenizer: () => (
              /* binding */
              GemmaTokenizer
            ),
            /* harmony export */
            Grok1Tokenizer: () => (
              /* binding */
              Grok1Tokenizer
            ),
            /* harmony export */
            HerbertTokenizer: () => (
              /* binding */
              HerbertTokenizer
            ),
            /* harmony export */
            LlamaTokenizer: () => (
              /* binding */
              LlamaTokenizer
            ),
            /* harmony export */
            M2M100Tokenizer: () => (
              /* binding */
              M2M100Tokenizer
            ),
            /* harmony export */
            MBart50Tokenizer: () => (
              /* binding */
              MBart50Tokenizer
            ),
            /* harmony export */
            MBartTokenizer: () => (
              /* binding */
              MBartTokenizer
            ),
            /* harmony export */
            MPNetTokenizer: () => (
              /* binding */
              MPNetTokenizer
            ),
            /* harmony export */
            MarianTokenizer: () => (
              /* binding */
              MarianTokenizer
            ),
            /* harmony export */
            MgpstrTokenizer: () => (
              /* binding */
              MgpstrTokenizer
            ),
            /* harmony export */
            MobileBertTokenizer: () => (
              /* binding */
              MobileBertTokenizer
            ),
            /* harmony export */
            NllbTokenizer: () => (
              /* binding */
              NllbTokenizer
            ),
            /* harmony export */
            NougatTokenizer: () => (
              /* binding */
              NougatTokenizer
            ),
            /* harmony export */
            PreTrainedTokenizer: () => (
              /* binding */
              PreTrainedTokenizer
            ),
            /* harmony export */
            Qwen2Tokenizer: () => (
              /* binding */
              Qwen2Tokenizer
            ),
            /* harmony export */
            RoFormerTokenizer: () => (
              /* binding */
              RoFormerTokenizer
            ),
            /* harmony export */
            RobertaTokenizer: () => (
              /* binding */
              RobertaTokenizer
            ),
            /* harmony export */
            SiglipTokenizer: () => (
              /* binding */
              SiglipTokenizer
            ),
            /* harmony export */
            SpeechT5Tokenizer: () => (
              /* binding */
              SpeechT5Tokenizer
            ),
            /* harmony export */
            SqueezeBertTokenizer: () => (
              /* binding */
              SqueezeBertTokenizer
            ),
            /* harmony export */
            T5Tokenizer: () => (
              /* binding */
              T5Tokenizer
            ),
            /* harmony export */
            TokenizerModel: () => (
              /* binding */
              TokenizerModel
            ),
            /* harmony export */
            VitsTokenizer: () => (
              /* binding */
              VitsTokenizer
            ),
            /* harmony export */
            Wav2Vec2CTCTokenizer: () => (
              /* binding */
              Wav2Vec2CTCTokenizer
            ),
            /* harmony export */
            WhisperTokenizer: () => (
              /* binding */
              WhisperTokenizer
            ),
            /* harmony export */
            XLMRobertaTokenizer: () => (
              /* binding */
              XLMRobertaTokenizer
            ),
            /* harmony export */
            XLMTokenizer: () => (
              /* binding */
              XLMTokenizer
            ),
            /* harmony export */
            is_chinese_char: () => (
              /* binding */
              is_chinese_char
            )
            /* harmony export */
          });
          var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ./utils/generic.js */
            "./src/utils/generic.js"
          );
          var _utils_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ./utils/core.js */
            "./src/utils/core.js"
          );
          var _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ./utils/hub.js */
            "./src/utils/hub.js"
          );
          var _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ./utils/maths.js */
            "./src/utils/maths.js"
          );
          var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
            /*! ./utils/tensor.js */
            "./src/utils/tensor.js"
          );
          var _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
            /*! ./utils/data-structures.js */
            "./src/utils/data-structures.js"
          );
          var _huggingface_jinja__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
            /*! @huggingface/jinja */
            "./node_modules/@huggingface/jinja/dist/index.js"
          );
          var _models_whisper_common_whisper_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
            /*! ./models/whisper/common_whisper.js */
            "./src/models/whisper/common_whisper.js"
          );
          async function loadTokenizer(pretrained_model_name_or_path, options) {
            const info = await Promise.all([
              (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__.getModelJSON)(pretrained_model_name_or_path, "tokenizer.json", true, options),
              (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__.getModelJSON)(pretrained_model_name_or_path, "tokenizer_config.json", true, options)
            ]);
            if (options.legacy !== null) {
              info[1].legacy = options.legacy;
            }
            return info;
          }
          function regexSplit(text, regex) {
            const result = [];
            let prev = 0;
            for (const match of text.matchAll(regex)) {
              const fullMatch = match[0];
              if (prev < match.index) {
                result.push(text.slice(prev, match.index));
              }
              if (fullMatch.length > 0) {
                result.push(fullMatch);
              }
              prev = match.index + fullMatch.length;
            }
            if (prev < text.length) {
              result.push(text.slice(prev));
            }
            return result;
          }
          function createPattern(pattern, invert = true) {
            if (pattern.Regex !== void 0) {
              let regex = pattern.Regex.replace(/\\([#&~])/g, "$1");
              for (const [key, value] of PROBLEMATIC_REGEX_MAP) {
                regex = regex.replaceAll(key, value);
              }
              return new RegExp(regex, "gu");
            } else if (pattern.String !== void 0) {
              const escaped = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.escapeRegExp)(pattern.String);
              return new RegExp(invert ? escaped : `(${escaped})`, "gu");
            } else {
              console.warn("Unknown pattern type:", pattern);
              return null;
            }
          }
          function objectToMap(obj) {
            return new Map(Object.entries(obj));
          }
          function prepareTensorForDecode(tensor) {
            const dims = tensor.dims;
            switch (dims.length) {
              case 1:
                return tensor.tolist();
              case 2:
                if (dims[0] !== 1) {
                  throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");
                }
                return tensor.tolist()[0];
              default:
                throw new Error(`Expected tensor to have 1-2 dimensions, got ${dims.length}.`);
            }
          }
          function clean_up_tokenization(text) {
            return text.replace(/ \./g, ".").replace(/ \?/g, "?").replace(/ \!/g, "!").replace(/ ,/g, ",").replace(/ \' /g, "'").replace(/ n\'t/g, "n't").replace(/ \'m/g, "'m").replace(/ \'s/g, "'s").replace(/ \'ve/g, "'ve").replace(/ \'re/g, "'re");
          }
          function remove_accents(text) {
            return text.replace(/\p{M}/gu, "");
          }
          function lowercase_and_remove_accent(text) {
            return remove_accents(text.toLowerCase());
          }
          function is_chinese_char(cp) {
            return cp >= 19968 && cp <= 40959 || cp >= 13312 && cp <= 19903 || cp >= 131072 && cp <= 173791 || cp >= 173824 && cp <= 177983 || cp >= 177984 && cp <= 178207 || cp >= 178208 && cp <= 183983 || cp >= 63744 && cp <= 64255 || cp >= 194560 && cp <= 195103;
          }
          function fuse_unk(arr, tokens_to_ids, unk_token_id) {
            const fused = [];
            let i = 0;
            while (i < arr.length) {
              fused.push(arr[i]);
              if ((tokens_to_ids.get(arr[i]) ?? unk_token_id) !== unk_token_id) {
                ++i;
                continue;
              }
              while (++i < arr.length && (tokens_to_ids.get(arr[i]) ?? unk_token_id) === unk_token_id) {
                if (tokens_to_ids.get(fused.at(-1)) !== unk_token_id) {
                  fused[fused.length - 1] += arr[i];
                }
              }
            }
            return fused;
          }
          function whitespace_split(text) {
            return text.match(/\S+/g) || [];
          }
          const PUNCTUATION_REGEX = "\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E";
          const PUNCTUATION_ONLY_REGEX = new RegExp(`^[${PUNCTUATION_REGEX}]+$`, "gu");
          const BLOOM_SPLIT_CHARS = ".,!?\u2026\u3002\uFF0C\u3001\u0964\u06D4\u060C";
          const PROBLEMATIC_REGEX_MAP = /* @__PURE__ */ new Map([
            // This uses the case insensitive group modifier, which is not supported in JavaScript.
            // When parsing the regex, an "Invalid group" error is thrown.
            ["(?i:'s|'t|'re|'ve|'m|'ll|'d)", "(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],
            // Used to override the default (invalid) regex of the bloom pretokenizer.
            // For more information, see https://github.com/huggingface/transformers.js/issues/94
            [` ?[^(\\s|[${BLOOM_SPLIT_CHARS}])]+`, ` ?[^\\s${BLOOM_SPLIT_CHARS}]+`]
          ]);
          class AddedToken {
            /**
             * Creates a new instance of AddedToken.
             * @param {Object} config Added token configuration object.
             * @param {string} config.content The content of the added token.
             * @param {number} config.id The id of the added token.
             * @param {boolean} [config.single_word=false] Whether this token must be a single word or can break words.
             * @param {boolean} [config.lstrip=false] Whether this token should strip whitespaces on its left.
             * @param {boolean} [config.rstrip=false] Whether this token should strip whitespaces on its right.
             * @param {boolean} [config.normalized=false] Whether this token should be normalized.
             * @param {boolean} [config.special=false] Whether this token is special.
             */
            constructor(config) {
              this.content = config.content;
              this.id = config.id;
              this.single_word = config.single_word ?? false;
              this.lstrip = config.lstrip ?? false;
              this.rstrip = config.rstrip ?? false;
              this.special = config.special ?? false;
              this.normalized = config.normalized ?? null;
            }
          }
          class TokenizerModel extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
             * Creates a new instance of TokenizerModel.
             * @param {Object} config The configuration object for the TokenizerModel.
             */
            constructor(config) {
              super();
              this.config = config;
              this.vocab = [];
              this.tokens_to_ids = /* @__PURE__ */ new Map();
              this.unk_token_id = void 0;
              this.unk_token = void 0;
              this.end_of_word_suffix = void 0;
              this.fuse_unk = this.config.fuse_unk ?? false;
            }
            /**
             * Instantiates a new TokenizerModel instance based on the configuration object provided.
             * @param {Object} config The configuration object for the TokenizerModel.
             * @param {...*} args Optional arguments to pass to the specific TokenizerModel constructor.
             * @returns {TokenizerModel} A new instance of a TokenizerModel.
             * @throws Will throw an error if the TokenizerModel type in the config is not recognized.
             */
            static fromConfig(config, ...args) {
              switch (config.type) {
                case "WordPiece":
                  return new WordPieceTokenizer(config);
                case "Unigram":
                  return new Unigram(config, ...args);
                case "BPE":
                  return new BPE(config);
                default:
                  if (config.vocab) {
                    if (Array.isArray(config.vocab)) {
                      return new Unigram(config, ...args);
                    } else if (Object.hasOwn(config, "continuing_subword_prefix") && Object.hasOwn(config, "unk_token")) {
                      if (Object.hasOwn(config, "merges")) {
                        return new BPE(config);
                      } else {
                        return new WordPieceTokenizer(config);
                      }
                    } else {
                      return new LegacyTokenizerModel(config, ...args);
                    }
                  }
                  throw new Error(`Unknown TokenizerModel type: ${config.type}`);
              }
            }
            /**
             * Internal function to call the TokenizerModel instance.
             * @param {string[]} tokens The tokens to encode.
             * @returns {string[]} The encoded tokens.
             */
            _call(tokens) {
              tokens = this.encode(tokens);
              if (this.fuse_unk) {
                tokens = fuse_unk(tokens, this.tokens_to_ids, this.unk_token_id);
              }
              return tokens;
            }
            /**
             * Encodes a list of tokens into a list of token IDs.
             * @param {string[]} tokens The tokens to encode.
             * @returns {string[]} The encoded tokens.
             * @throws Will throw an error if not implemented in a subclass.
             */
            encode(tokens) {
              throw Error("encode should be implemented in subclass.");
            }
            /**
             * Converts a list of tokens into a list of token IDs.
             * @param {string[]} tokens The tokens to convert.
             * @returns {number[]} The converted token IDs.
             */
            convert_tokens_to_ids(tokens) {
              return tokens.map((t) => this.tokens_to_ids.get(t) ?? this.unk_token_id);
            }
            /**
             * Converts a list of token IDs into a list of tokens.
             * @param {number[]|bigint[]} ids The token IDs to convert.
             * @returns {string[]} The converted tokens.
             */
            convert_ids_to_tokens(ids) {
              return ids.map((i) => this.vocab[i] ?? this.unk_token);
            }
          }
          class WordPieceTokenizer extends TokenizerModel {
            /**
             * @param {Object} config The configuration object.
             * @param {Object} config.vocab A mapping of tokens to ids.
             * @param {string} config.unk_token The unknown token string.
             * @param {string} config.continuing_subword_prefix The prefix to use for continuing subwords.
             * @param {number} [config.max_input_chars_per_word=100] The maximum number of characters per word.
             */
            constructor(config) {
              super(config);
              this.tokens_to_ids = objectToMap(config.vocab);
              this.unk_token_id = this.tokens_to_ids.get(config.unk_token);
              this.unk_token = config.unk_token;
              this.max_input_chars_per_word = config.max_input_chars_per_word ?? 100;
              this.vocab = new Array(this.tokens_to_ids.size);
              for (const [key, value] of this.tokens_to_ids) {
                this.vocab[value] = key;
              }
            }
            /**
             * Encodes an array of tokens using WordPiece encoding.
             * @param {string[]} tokens The tokens to encode.
             * @returns {string[]} An array of encoded tokens.
             */
            encode(tokens) {
              const outputTokens = [];
              for (const token of tokens) {
                const chars = [...token];
                if (chars.length > this.max_input_chars_per_word) {
                  outputTokens.push(this.unk_token);
                  continue;
                }
                let isUnknown = false;
                let start = 0;
                const subTokens = [];
                while (start < chars.length) {
                  let end = chars.length;
                  let currentSubstring = null;
                  while (start < end) {
                    let substr = chars.slice(start, end).join("");
                    if (start > 0) {
                      substr = this.config.continuing_subword_prefix + substr;
                    }
                    if (this.tokens_to_ids.has(substr)) {
                      currentSubstring = substr;
                      break;
                    }
                    --end;
                  }
                  if (currentSubstring === null) {
                    isUnknown = true;
                    break;
                  }
                  subTokens.push(currentSubstring);
                  start = end;
                }
                if (isUnknown) {
                  outputTokens.push(this.unk_token);
                } else {
                  outputTokens.push(...subTokens);
                }
              }
              return outputTokens;
            }
          }
          class Unigram extends TokenizerModel {
            /**
             * Create a new Unigram tokenizer model.
             * @param {Object} config The configuration object for the Unigram model.
             * @param {number} config.unk_id The ID of the unknown token
             * @param {[string, number][]} config.vocab A 2D array representing a mapping of tokens to scores.
             * @param {Object} moreConfig Additional configuration object for the Unigram model.
             */
            constructor(config, moreConfig) {
              super(config);
              const vocabSize = config.vocab.length;
              this.vocab = new Array(vocabSize);
              this.scores = new Array(vocabSize);
              for (let i = 0; i < vocabSize; ++i) {
                [this.vocab[i], this.scores[i]] = config.vocab[i];
              }
              this.unk_token_id = config.unk_id;
              this.unk_token = this.vocab[config.unk_id];
              this.tokens_to_ids = new Map(this.vocab.map((x2, i) => [x2, i]));
              this.bos_token = " ";
              this.bos_token_id = this.tokens_to_ids.get(this.bos_token);
              this.eos_token = moreConfig.eos_token;
              this.eos_token_id = this.tokens_to_ids.get(this.eos_token);
              this.unk_token = this.vocab[this.unk_token_id];
              this.minScore = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.min)(this.scores)[0];
              this.unk_score = this.minScore - 10;
              this.scores[this.unk_token_id] = this.unk_score;
              this.trie = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.CharTrie();
              this.trie.extend(this.vocab);
              this.fuse_unk = true;
            }
            /**
             * Populates lattice nodes.
             * @param {TokenLattice} lattice The token lattice to populate with nodes.
             */
            populateNodes(lattice) {
              const chars = lattice.chars;
              const mblen = 1;
              let beginPos = 0;
              while (beginPos < chars.length) {
                let hasSingleNode = false;
                const tokens = [];
                const sliced = chars.slice(beginPos).join("");
                const prefixedTokens = this.trie.commonPrefixSearch(sliced);
                for (const token of prefixedTokens) {
                  tokens.push(token);
                  const tokenId = this.tokens_to_ids.get(token);
                  const tokenScore = this.scores[tokenId];
                  const n = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.len)(token);
                  lattice.insert(beginPos, n, tokenScore, tokenId);
                  if (!hasSingleNode && n === mblen) {
                    hasSingleNode = true;
                  }
                }
                if (!hasSingleNode) {
                  lattice.insert(beginPos, mblen, this.unk_score, this.unk_token_id);
                }
                beginPos += mblen;
              }
            }
            /**
             * Encodes an array of tokens into an array of subtokens using the unigram model.
             *
             * @param {string} normalized The normalized string.
             * @returns {string[]} An array of subtokens obtained by encoding the input tokens using the unigram model.
             */
            tokenize(normalized) {
              const lattice = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.TokenLattice(normalized, this.bos_token_id, this.eos_token_id);
              this.populateNodes(lattice);
              return lattice.tokens();
            }
            /**
             * Encodes an array of tokens using Unigram encoding.
             * @param {string[]} tokens The tokens to encode.
             * @returns {string[]} An array of encoded tokens.
             */
            encode(tokens) {
              const toReturn = [];
              for (const token of tokens) {
                const tokenized = this.tokenize(token);
                toReturn.push(...tokenized);
              }
              return toReturn;
            }
          }
          const BYTES_TO_UNICODE = (() => {
            const bs = [
              ...Array.from({ length: "~".charCodeAt(0) - "!".charCodeAt(0) + 1 }, (_2, i) => i + "!".charCodeAt(0)),
              ...Array.from({ length: "\xAC".charCodeAt(0) - "\xA1".charCodeAt(0) + 1 }, (_2, i) => i + "\xA1".charCodeAt(0)),
              ...Array.from({ length: "\xFF".charCodeAt(0) - "\xAE".charCodeAt(0) + 1 }, (_2, i) => i + "\xAE".charCodeAt(0))
            ];
            const cs = bs.slice();
            let n = 0;
            for (let b = 0; b < 256; ++b) {
              if (!bs.includes(b)) {
                bs.push(b);
                cs.push(256 + n);
                n += 1;
              }
            }
            const ccs = cs.map((n2) => String.fromCharCode(n2));
            return Object.fromEntries(bs.map((b, i) => [b, ccs[i]]));
          })();
          const UNICODE_TO_BYTES = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.reverseDictionary)(BYTES_TO_UNICODE);
          class BPE extends TokenizerModel {
            /**
             * Create a BPE instance.
             * @param {Object} config The configuration object for BPE.
             * @param {Object} config.vocab A mapping of tokens to ids.
             * @param {string[]|[string, string][]} config.merges An array of BPE merges as strings.
             * @param {string} config.unk_token The unknown token used for out of vocabulary words.
             * @param {string} config.end_of_word_suffix The suffix to place at the end of each word.
             * @param {string} [config.continuing_subword_suffix] The suffix to insert between words.
             * @param {boolean} [config.byte_fallback=false] Whether to use spm byte-fallback trick (defaults to False)
             * @param {boolean} [config.ignore_merges=false] Whether or not to match tokens with the vocab before using merges.
             */
            constructor(config) {
              super(config);
              this.tokens_to_ids = objectToMap(config.vocab);
              this.unk_token_id = this.tokens_to_ids.get(config.unk_token);
              this.unk_token = config.unk_token;
              this.vocab = new Array(this.tokens_to_ids.size);
              for (const [key, value] of this.tokens_to_ids) {
                this.vocab[value] = key;
              }
              const use_new_merge_format = Array.isArray(config.merges[0]);
              this.merges = use_new_merge_format ? (
                /** @type {[string, string][]} */
                config.merges
              ) : (
                /** @type {string[]} */
                config.merges.map((x2) => (
                  /** @type {[string, string]} */
                  x2.split(" ", 2)
                ))
              );
              this.bpe_ranks = new Map(this.merges.map((x2, i) => [JSON.stringify(x2), i]));
              this.end_of_word_suffix = config.end_of_word_suffix;
              this.continuing_subword_suffix = config.continuing_subword_suffix ?? null;
              this.byte_fallback = this.config.byte_fallback ?? false;
              if (this.byte_fallback) {
                this.text_encoder = new TextEncoder();
              }
              this.ignore_merges = this.config.ignore_merges ?? false;
              this.max_length_to_cache = 256;
              this.cache_capacity = 1e4;
              this.cache = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.LRUCache(this.cache_capacity);
            }
            /**
             * Clears the cache.
             */
            clear_cache() {
              this.cache.clear();
            }
            /**
             * Apply Byte-Pair-Encoding (BPE) to a given token. Efficient heap-based priority
             * queue implementation adapted from https://github.com/belladoreai/llama-tokenizer-js.
             * @param {string} token The token to encode.
             * @returns {string[]} The BPE encoded tokens.
             */
            bpe(token) {
              if (token.length === 0) {
                return [];
              }
              const cached = this.cache.get(token);
              if (cached !== void 0) {
                return cached;
              }
              const word = Array.from(token);
              if (this.end_of_word_suffix) {
                word[word.length - 1] += this.end_of_word_suffix;
              }
              let result = [];
              if (word.length > 1) {
                const queue = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.PriorityQueue((a, b) => a.score < b.score);
                let startingNode = {
                  token: word[0],
                  bias: 0,
                  prev: null,
                  next: null
                };
                let previousNode = startingNode;
                for (let i = 1; i < word.length; ++i) {
                  const currentNode = {
                    bias: i / word.length,
                    // Add fractional component to break ties
                    token: word[i],
                    prev: previousNode,
                    next: null
                  };
                  previousNode.next = currentNode;
                  this._add_node(queue, previousNode);
                  previousNode = currentNode;
                }
                while (!queue.isEmpty()) {
                  const node = queue.pop();
                  if (node.deleted || !node.next || node.next.deleted)
                    continue;
                  node.deleted = true;
                  node.next.deleted = true;
                  if (node.prev) {
                    const newPreviousNode = { ...node.prev };
                    node.prev.deleted = true;
                    node.prev = newPreviousNode;
                    if (newPreviousNode.prev) {
                      newPreviousNode.prev.next = newPreviousNode;
                    } else {
                      startingNode = newPreviousNode;
                    }
                  }
                  const merged = {
                    token: node.token + node.next.token,
                    bias: node.bias,
                    prev: node.prev,
                    next: node.next.next
                  };
                  if (merged.prev) {
                    merged.prev.next = merged;
                    this._add_node(queue, merged.prev);
                  } else {
                    startingNode = merged;
                  }
                  if (merged.next) {
                    merged.next.prev = merged;
                    this._add_node(queue, merged);
                  }
                }
                for (let currentNode = startingNode; currentNode !== null; currentNode = currentNode.next) {
                  result.push(currentNode.token);
                }
              } else {
                result = word;
              }
              if (this.continuing_subword_suffix) {
                for (let i = 0; i < result.length - 1; ++i) {
                  result[i] += this.continuing_subword_suffix;
                }
              }
              if (token.length < this.max_length_to_cache) {
                this.cache.put(token, result);
              }
              return result;
            }
            /**
             * Helper function to add a node to the priority queue.
             * @param {PriorityQueue} queue 
             * @param {BPENode} node
             * @private
             */
            _add_node(queue, node) {
              const rank = this.bpe_ranks.get(JSON.stringify([node.token, node.next.token]));
              if (rank !== void 0) {
                node.score = rank + node.bias;
                queue.push(node);
              }
            }
            /**
             * Encodes the input sequence of tokens using the BPE algorithm and returns the resulting subword tokens.
             * @param {string[]} tokens The input sequence of tokens to encode.
             * @returns {string[]} The resulting subword tokens after applying the BPE algorithm to the input sequence of tokens.
             */
            encode(tokens) {
              const outputTokens = [];
              for (const token of tokens) {
                if (this.ignore_merges && this.tokens_to_ids.has(token)) {
                  outputTokens.push(token);
                  continue;
                }
                const bpe_token_list = this.bpe(token);
                for (const t of bpe_token_list) {
                  if (this.tokens_to_ids.has(t)) {
                    outputTokens.push(t);
                  } else if (this.byte_fallback) {
                    const byteTokens = Array.from(this.text_encoder.encode(t)).map((x2) => `<0x${x2.toString(16).toUpperCase().padStart(2, "0")}>`);
                    if (byteTokens.every((x2) => this.tokens_to_ids.has(x2))) {
                      outputTokens.push(...byteTokens);
                    } else {
                      outputTokens.push(this.unk_token);
                    }
                  } else {
                    outputTokens.push(this.unk_token);
                  }
                }
              }
              return outputTokens;
            }
          }
          class LegacyTokenizerModel extends TokenizerModel {
            /**
             * Create a LegacyTokenizerModel instance.
             * @param {Object} config The configuration object for LegacyTokenizerModel.
             * @param {Object} config.vocab A (possibly nested) mapping of tokens to ids.
             * @param {Object} moreConfig Additional configuration object for the LegacyTokenizerModel model.
             */
            constructor(config, moreConfig) {
              super(config);
              this.tokens_to_ids = objectToMap(
                moreConfig.target_lang ? config.vocab[moreConfig.target_lang] : config.vocab
              );
              this.bos_token = moreConfig.bos_token;
              this.bos_token_id = this.tokens_to_ids.get(this.bos_token);
              this.eos_token = moreConfig.eos_token;
              this.eos_token_id = this.tokens_to_ids.get(this.eos_token);
              this.pad_token = moreConfig.pad_token;
              this.pad_token_id = this.tokens_to_ids.get(this.pad_token);
              this.unk_token = moreConfig.unk_token;
              this.unk_token_id = this.tokens_to_ids.get(this.unk_token);
              this.vocab = new Array(this.tokens_to_ids.size);
              for (const [key, value] of this.tokens_to_ids) {
                this.vocab[value] = key;
              }
            }
            encode(tokens) {
              return tokens;
            }
          }
          class Normalizer extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
             * @param {Object} config The configuration object for the normalizer.
             */
            constructor(config) {
              super();
              this.config = config;
            }
            /**
             * Factory method for creating normalizers from config objects.
             * @static
             * @param {Object} config The configuration object for the normalizer.
             * @returns {Normalizer} A Normalizer object.
             * @throws {Error} If an unknown Normalizer type is specified in the config.
             */
            static fromConfig(config) {
              if (config === null)
                return null;
              switch (config.type) {
                case "BertNormalizer":
                  return new BertNormalizer(config);
                case "Precompiled":
                  return new Precompiled(config);
                case "Sequence":
                  return new NormalizerSequence(config);
                case "Replace":
                  return new Replace(config);
                case "NFC":
                  return new NFC(config);
                case "NFD":
                  return new NFD(config);
                case "NFKC":
                  return new NFKC(config);
                case "NFKD":
                  return new NFKD(config);
                case "Strip":
                  return new StripNormalizer(config);
                case "StripAccents":
                  return new StripAccents(config);
                case "Lowercase":
                  return new Lowercase(config);
                case "Prepend":
                  return new Prepend(config);
                default:
                  throw new Error(`Unknown Normalizer type: ${config.type}`);
              }
            }
            /**
             * Normalize the input text.
             * @abstract
             * @param {string} text The text to normalize.
             * @returns {string} The normalized text.
             * @throws {Error} If this method is not implemented in a subclass.
             */
            normalize(text) {
              throw Error("normalize should be implemented in subclass.");
            }
            /**
             * Alias for {@link Normalizer#normalize}.
             * @param {string} text The text to normalize.
             * @returns {string} The normalized text.
             */
            _call(text) {
              return this.normalize(text);
            }
          }
          class Replace extends Normalizer {
            /**
             * Normalize the input text by replacing the pattern with the content.
             * @param {string} text The input text to be normalized.
             * @returns {string} The normalized text after replacing the pattern with the content.
             */
            normalize(text) {
              const pattern = createPattern(this.config.pattern);
              return pattern === null ? text : text.replaceAll(pattern, this.config.content);
            }
          }
          class UnicodeNormalizer extends Normalizer {
            constructor() {
              super(...arguments);
              /**
               * @type {string} The Unicode normalization form to apply.
               * Should be one of: 'NFC', 'NFD', 'NFKC', or 'NFKD'.
               */
              __publicField(this, "form");
            }
            /**
             * Normalize the input text by applying Unicode normalization.
             * @param {string} text The input text to be normalized.
             * @returns {string} The normalized text.
             */
            normalize(text) {
              text = text.normalize(this.form);
              return text;
            }
          }
          class NFC extends UnicodeNormalizer {
            constructor() {
              super(...arguments);
              __publicField(this, "form", "NFC");
            }
          }
          class NFD extends UnicodeNormalizer {
            constructor() {
              super(...arguments);
              __publicField(this, "form", "NFD");
            }
          }
          class NFKC extends UnicodeNormalizer {
            constructor() {
              super(...arguments);
              __publicField(this, "form", "NFKC");
            }
          }
          class NFKD extends UnicodeNormalizer {
            constructor() {
              super(...arguments);
              __publicField(this, "form", "NFKD");
            }
          }
          class StripNormalizer extends Normalizer {
            /**
             * Strip leading and/or trailing whitespace from the input text.
             * @param {string} text The input text.
             * @returns {string} The normalized text.
             */
            normalize(text) {
              if (this.config.strip_left && this.config.strip_right) {
                text = text.trim();
              } else {
                if (this.config.strip_left) {
                  text = text.trimStart();
                }
                if (this.config.strip_right) {
                  text = text.trimEnd();
                }
              }
              return text;
            }
          }
          class StripAccents extends Normalizer {
            /**
             * Remove all accents from the text.
             * @param {string} text The input text.
             * @returns {string} The normalized text without accents.
             */
            normalize(text) {
              text = remove_accents(text);
              return text;
            }
          }
          class Lowercase extends Normalizer {
            /**
             * Lowercases the input string.
             * @param {string} text The text to normalize.
             * @returns {string} The normalized text.
             */
            normalize(text) {
              text = text.toLowerCase();
              return text;
            }
          }
          class Prepend extends Normalizer {
            /**
             * Prepends the input string.
             * @param {string} text The text to normalize.
             * @returns {string} The normalized text.
             */
            normalize(text) {
              text = this.config.prepend + text;
              return text;
            }
          }
          class NormalizerSequence extends Normalizer {
            /**
            * Create a new instance of NormalizerSequence.
            * @param {Object} config The configuration object.
            * @param {Object[]} config.normalizers An array of Normalizer configuration objects.
            */
            constructor(config) {
              super(config);
              this.normalizers = config.normalizers.map((x2) => Normalizer.fromConfig(x2));
            }
            /**
            * Apply a sequence of Normalizers to the input text.
            * @param {string} text The text to normalize.
            * @returns {string} The normalized text.
            */
            normalize(text) {
              return this.normalizers.reduce((t, normalizer) => {
                return normalizer.normalize(t);
              }, text);
            }
          }
          class BertNormalizer extends Normalizer {
            /**
             * Adds whitespace around any CJK (Chinese, Japanese, or Korean) character in the input text.
             *
             * @param {string} text The input text to tokenize.
             * @returns {string} The tokenized text with whitespace added around CJK characters.
             */
            _tokenize_chinese_chars(text) {
              const output = [];
              for (let i = 0; i < text.length; ++i) {
                const char = text[i];
                const cp = char.charCodeAt(0);
                if (is_chinese_char(cp)) {
                  output.push(" ");
                  output.push(char);
                  output.push(" ");
                } else {
                  output.push(char);
                }
              }
              return output.join("");
            }
            /**
             * Strips accents from the given text.
             * @param {string} text The text to strip accents from.
             * @returns {string} The text with accents removed.
             */
            stripAccents(text) {
              return text.normalize("NFD").replace(/\p{Mn}/gu, "");
            }
            /**
             * Checks whether `char` is a control character.
             * @param {string} char The character to check.
             * @returns {boolean} Whether `char` is a control character.
             * @private
             */
            _is_control(char) {
              switch (char) {
                case "	":
                case "\n":
                case "\r":
                  return false;
                default:
                  return /^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(char);
              }
            }
            /**
             * Performs invalid character removal and whitespace cleanup on text.
             * @param {string} text The text to clean.
             * @returns {string} The cleaned text.
             * @private
             */
            _clean_text(text) {
              const output = [];
              for (const char of text) {
                const cp = char.charCodeAt(0);
                if (cp === 0 || cp === 65533 || this._is_control(char)) {
                  continue;
                }
                if (/^\s$/.test(char)) {
                  output.push(" ");
                } else {
                  output.push(char);
                }
              }
              return output.join("");
            }
            /**
             * Normalizes the given text based on the configuration.
             * @param {string} text The text to normalize.
             * @returns {string} The normalized text.
             */
            normalize(text) {
              if (this.config.clean_text) {
                text = this._clean_text(text);
              }
              if (this.config.handle_chinese_chars) {
                text = this._tokenize_chinese_chars(text);
              }
              if (this.config.lowercase) {
                text = text.toLowerCase();
                if (this.config.strip_accents !== false) {
                  text = this.stripAccents(text);
                }
              } else if (this.config.strip_accents) {
                text = this.stripAccents(text);
              }
              return text;
            }
          }
          class PreTokenizer extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
            * Factory method that returns an instance of a subclass of `PreTokenizer` based on the provided configuration.
            *
            * @static
            * @param {Object} config A configuration object for the pre-tokenizer.
            * @returns {PreTokenizer} An instance of a subclass of `PreTokenizer`.
            * @throws {Error} If the provided configuration object does not correspond to any known pre-tokenizer.
            */
            static fromConfig(config) {
              if (config === null)
                return null;
              switch (config.type) {
                case "BertPreTokenizer":
                  return new BertPreTokenizer(config);
                case "Sequence":
                  return new PreTokenizerSequence(config);
                case "Whitespace":
                  return new WhitespacePreTokenizer(config);
                case "WhitespaceSplit":
                  return new WhitespaceSplit(config);
                case "Metaspace":
                  return new MetaspacePreTokenizer(config);
                case "ByteLevel":
                  return new ByteLevelPreTokenizer(config);
                case "Split":
                  return new SplitPreTokenizer(config);
                case "Punctuation":
                  return new PunctuationPreTokenizer(config);
                case "Digits":
                  return new DigitsPreTokenizer(config);
                case "Replace":
                  return new ReplacePreTokenizer(config);
                default:
                  throw new Error(`Unknown PreTokenizer type: ${config.type}`);
              }
            }
            /**
             * Method that should be implemented by subclasses to define the specific pre-tokenization logic.
             *
             * @abstract
             * @param {string} text The text to pre-tokenize.
             * @param {Object} [options] Additional options for the pre-tokenization logic.
             * @returns {string[]} The pre-tokenized text.
             * @throws {Error} If the method is not implemented in the subclass.
             */
            pre_tokenize_text(text, options) {
              throw Error("pre_tokenize_text should be implemented in subclass.");
            }
            /**
             * Tokenizes the given text into pre-tokens.
             * @param {string|string[]} text The text or array of texts to pre-tokenize.
             * @param {Object} [options] Additional options for the pre-tokenization logic.
             * @returns {string[]} An array of pre-tokens.
             */
            pre_tokenize(text, options) {
              return (Array.isArray(text) ? text.map((x2) => this.pre_tokenize_text(x2, options)) : this.pre_tokenize_text(text, options)).flat();
            }
            /**
             * Alias for {@link PreTokenizer#pre_tokenize}.
             * @param {string|string[]} text The text or array of texts to pre-tokenize.
             * @param {Object} [options] Additional options for the pre-tokenization logic.
             * @returns {string[]} An array of pre-tokens.
             */
            _call(text, options) {
              return this.pre_tokenize(text, options);
            }
          }
          class BertPreTokenizer extends PreTokenizer {
            /**
             * A PreTokenizer that splits text into wordpieces using a basic tokenization scheme
             * similar to that used in the original implementation of BERT.
             * 
             * @param {Object} config The configuration object.
             */
            constructor(config) {
              super();
              this.pattern = new RegExp(`[^\\s${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]`, "gu");
            }
            /**
             * Tokenizes a single text using the BERT pre-tokenization scheme.
             * 
             * @param {string} text The text to tokenize.
             * @param {Object} [options] Additional options for the pre-tokenization logic.
             * @returns {string[]} An array of tokens.
             */
            pre_tokenize_text(text, options) {
              return text.trim().match(this.pattern) || [];
            }
          }
          class ByteLevelPreTokenizer extends PreTokenizer {
            /**
             * Creates a new instance of the `ByteLevelPreTokenizer` class.
             * @param {Object} config The configuration object.
             */
            constructor(config) {
              super();
              this.config = config;
              this.add_prefix_space = this.config.add_prefix_space;
              this.trim_offsets = this.config.trim_offsets;
              this.use_regex = this.config.use_regex ?? true;
              this.pattern = /'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu;
              this.byte_encoder = BYTES_TO_UNICODE;
              this.text_encoder = new TextEncoder();
            }
            /**
             * Tokenizes a single piece of text using byte-level tokenization.
             * @param {string} text The text to tokenize.
             * @param {Object} [options] Additional options for the pre-tokenization logic.
             * @returns {string[]} An array of tokens.
             */
            pre_tokenize_text(text, options) {
              if (this.add_prefix_space && !text.startsWith(" ")) {
                text = " " + text;
              }
              const tokens = this.use_regex ? text.match(this.pattern) || [] : [text];
              return tokens.map(
                (token) => Array.from(this.text_encoder.encode(token), (byte) => this.byte_encoder[byte]).join("")
              );
            }
          }
          class SplitPreTokenizer extends PreTokenizer {
            /**
             * @param {Object} config The configuration options for the pre-tokenizer.
             * @param {Object} config.pattern The pattern used to split the text. Can be a string or a regex object.
             * @param {string|undefined} config.pattern.String The string to use for splitting. Only defined if the pattern is a string.
             * @param {string|undefined} config.pattern.Regex The regex to use for splitting. Only defined if the pattern is a regex.
             * @param {SplitDelimiterBehavior} config.behavior The behavior to use when splitting.
             * @param {boolean} config.invert Whether to split (invert=false) or match (invert=true) the pattern.
             */
            constructor(config) {
              super();
              this.config = config;
              this.pattern = createPattern(this.config.pattern, this.config.invert);
            }
            /**
             * Tokenizes text by splitting it using the given pattern.
             * @param {string} text The text to tokenize.
             * @param {Object} [options] Additional options for the pre-tokenization logic.
             * @returns {string[]} An array of tokens.
             */
            pre_tokenize_text(text, options) {
              if (this.pattern === null) {
                return [];
              }
              if (this.config.invert) {
                return text.match(this.pattern) || [];
              } else if (this.config.behavior?.toLowerCase() === "removed") {
                return text.split(this.pattern).filter((x2) => x2);
              } else {
                return regexSplit(text, this.pattern);
              }
            }
          }
          class PunctuationPreTokenizer extends PreTokenizer {
            /**
             * @param {Object} config The configuration options for the pre-tokenizer.
             * @param {SplitDelimiterBehavior} config.behavior The behavior to use when splitting.
             */
            constructor(config) {
              super();
              this.config = config;
              this.pattern = new RegExp(`[^${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]+`, "gu");
            }
            /**
             * Tokenizes text by splitting it using the given pattern.
             * @param {string} text The text to tokenize.
             * @param {Object} [options] Additional options for the pre-tokenization logic.
             * @returns {string[]} An array of tokens.
             */
            pre_tokenize_text(text, options) {
              return text.match(this.pattern) || [];
            }
          }
          class DigitsPreTokenizer extends PreTokenizer {
            /**
             * @param {Object} config The configuration options for the pre-tokenizer.
             * @param {boolean} config.individual_digits Whether to split on individual digits.
             */
            constructor(config) {
              super();
              this.config = config;
              const digit_pattern = `[^\\d]+|\\d${this.config.individual_digits ? "" : "+"}`;
              this.pattern = new RegExp(digit_pattern, "gu");
            }
            /**
             * Tokenizes text by splitting it using the given pattern.
             * @param {string} text The text to tokenize.
             * @param {Object} [options] Additional options for the pre-tokenization logic.
             * @returns {string[]} An array of tokens.
             */
            pre_tokenize_text(text, options) {
              return text.match(this.pattern) || [];
            }
          }
          class PostProcessor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
             * @param {Object} config The configuration for the post-processor.
             */
            constructor(config) {
              super();
              this.config = config;
            }
            /**
             * Factory method to create a PostProcessor object from a configuration object.
             *
             * @param {Object} config Configuration object representing a PostProcessor.
             * @returns {PostProcessor} A PostProcessor object created from the given configuration.
             * @throws {Error} If an unknown PostProcessor type is encountered.
             */
            static fromConfig(config) {
              if (config === null)
                return null;
              switch (config.type) {
                case "TemplateProcessing":
                  return new TemplateProcessing(config);
                case "ByteLevel":
                  return new ByteLevelPostProcessor(config);
                case "RobertaProcessing":
                  return new RobertaProcessing(config);
                case "BertProcessing":
                  return new BertProcessing(config);
                case "Sequence":
                  return new PostProcessorSequence(config);
                default:
                  throw new Error(`Unknown PostProcessor type: ${config.type}`);
              }
            }
            /**
             * Method to be implemented in subclass to apply post-processing on the given tokens.
             *
             * @param {Array} tokens The input tokens to be post-processed.
             * @param {...*} args Additional arguments required by the post-processing logic.
             * @returns {PostProcessedOutput} The post-processed tokens.
             * @throws {Error} If the method is not implemented in subclass.
             */
            post_process(tokens, ...args) {
              throw Error("post_process should be implemented in subclass.");
            }
            /**
             * Alias for {@link PostProcessor#post_process}.
             * @param {Array} tokens The text or array of texts to post-process.
             * @param {...*} args Additional arguments required by the post-processing logic.
             * @returns {PostProcessedOutput} The post-processed tokens.
             */
            _call(tokens, ...args) {
              return this.post_process(tokens, ...args);
            }
          }
          class BertProcessing extends PostProcessor {
            /**
             * @param {Object} config The configuration for the post-processor.
             * @param {string[]} config.cls The special tokens to add to the beginning of the input.
             * @param {string[]} config.sep The special tokens to add to the end of the input.
             */
            constructor(config) {
              super(config);
              this.cls = config.cls[0];
              this.sep = config.sep[0];
            }
            /**
             * Adds the special tokens to the beginning and end of the input.
             * @param {string[]} tokens The input tokens.
             * @param {string[]} [tokens_pair=null] An optional second set of input tokens.
             * @returns {PostProcessedOutput} The post-processed tokens with the special tokens added to the beginning and end.
             */
            post_process(tokens, tokens_pair = null, {
              add_special_tokens = true
            } = {}) {
              if (add_special_tokens) {
                tokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)([this.cls], tokens, [this.sep]);
              }
              let token_type_ids = new Array(tokens.length).fill(0);
              if (tokens_pair !== null) {
                const middle = add_special_tokens && this instanceof RobertaProcessing ? [this.sep] : [];
                const after = add_special_tokens ? [this.sep] : [];
                tokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(tokens, middle, tokens_pair, after);
                token_type_ids = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(token_type_ids, new Array(tokens_pair.length + middle.length + after.length).fill(1));
              }
              return { tokens, token_type_ids };
            }
          }
          class RobertaProcessing extends BertProcessing {
          }
          class TemplateProcessing extends PostProcessor {
            /**
             * Creates a new instance of `TemplateProcessing`.
             * @param {Object} config The configuration options for the post processor.
             * @param {Array} config.single The template for a single sequence of tokens.
             * @param {Array} config.pair The template for a pair of sequences of tokens.
             */
            constructor(config) {
              super(config);
              this.single = config.single;
              this.pair = config.pair;
            }
            /**
             * Replaces special tokens in the template with actual tokens.
             * @param {string[]} tokens The list of tokens for the first sequence.
             * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).
             * @returns {PostProcessedOutput} An object containing the list of tokens with the special tokens replaced with actual tokens.
             */
            post_process(tokens, tokens_pair = null, {
              add_special_tokens = true
            } = {}) {
              const type = tokens_pair === null ? this.single : this.pair;
              let processedTokens = [];
              let types = [];
              for (const item of type) {
                if ("SpecialToken" in item) {
                  if (add_special_tokens) {
                    processedTokens.push(item.SpecialToken.id);
                    types.push(item.SpecialToken.type_id);
                  }
                } else if ("Sequence" in item) {
                  if (item.Sequence.id === "A") {
                    processedTokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(processedTokens, tokens);
                    types = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(types, new Array(tokens.length).fill(item.Sequence.type_id));
                  } else if (item.Sequence.id === "B") {
                    processedTokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(processedTokens, tokens_pair);
                    types = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(types, new Array(tokens_pair.length).fill(item.Sequence.type_id));
                  }
                }
              }
              return { tokens: processedTokens, token_type_ids: types };
            }
          }
          class ByteLevelPostProcessor extends PostProcessor {
            /**
             * Post process the given tokens.
             * @param {string[]} tokens The list of tokens for the first sequence.
             * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).
             * @returns {PostProcessedOutput} An object containing the post-processed tokens.
             */
            post_process(tokens, tokens_pair = null) {
              if (tokens_pair) {
                tokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(tokens, tokens_pair);
              }
              return { tokens };
            }
          }
          class PostProcessorSequence extends PostProcessor {
            /**
             * Creates a new instance of PostProcessorSequence.
             * @param {Object} config The configuration object.
             * @param {Object[]} config.processors The list of post-processors to apply.
             */
            constructor(config) {
              super(config);
              this.processors = config.processors.map((x2) => PostProcessor.fromConfig(x2));
            }
            /**
             * Post process the given tokens.
             * @param {string[]} tokens The list of tokens for the first sequence.
             * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).
             * @returns {PostProcessedOutput} An object containing the post-processed tokens.
             */
            post_process(tokens, tokens_pair = null, options = {}) {
              let token_type_ids;
              for (const processor of this.processors) {
                if (processor instanceof ByteLevelPostProcessor) {
                  const output = processor.post_process(tokens);
                  tokens = output.tokens;
                  if (tokens_pair) {
                    const pair_output = processor.post_process(tokens_pair);
                    tokens_pair = pair_output.tokens;
                  }
                } else {
                  const output = processor.post_process(tokens, tokens_pair, options);
                  tokens = output.tokens;
                  token_type_ids = output.token_type_ids;
                }
              }
              return { tokens, token_type_ids };
            }
          }
          class Decoder extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
            * Creates an instance of `Decoder`.
            *
            * @param {Object} config The configuration object.
            */
            constructor(config) {
              super();
              this.config = config;
              this.added_tokens = [];
              this.end_of_word_suffix = null;
              this.trim_offsets = config.trim_offsets;
            }
            /**
            * Creates a decoder instance based on the provided configuration.
            *
            * @param {Object} config The configuration object.
            * @returns {Decoder} A decoder instance.
            * @throws {Error} If an unknown decoder type is provided.
            */
            static fromConfig(config) {
              if (config === null)
                return null;
              switch (config.type) {
                case "WordPiece":
                  return new WordPieceDecoder(config);
                case "Metaspace":
                  return new MetaspaceDecoder(config);
                case "ByteLevel":
                  return new ByteLevelDecoder(config);
                case "Replace":
                  return new ReplaceDecoder(config);
                case "ByteFallback":
                  return new ByteFallback(config);
                case "Fuse":
                  return new FuseDecoder(config);
                case "Strip":
                  return new StripDecoder(config);
                case "Sequence":
                  return new DecoderSequence(config);
                case "CTC":
                  return new CTCDecoder(config);
                case "BPEDecoder":
                  return new BPEDecoder(config);
                default:
                  throw new Error(`Unknown Decoder type: ${config.type}`);
              }
            }
            /**
            * Calls the `decode` method.
            *
            * @param {string[]} tokens The list of tokens.
            * @returns {string} The decoded string.
            */
            _call(tokens) {
              return this.decode(tokens);
            }
            /**
            * Decodes a list of tokens.
            * @param {string[]} tokens The list of tokens.
            * @returns {string} The decoded string.
            */
            decode(tokens) {
              return this.decode_chain(tokens).join("");
            }
            /**
             * Apply the decoder to a list of tokens.
             * 
             * @param {string[]} tokens The list of tokens.
             * @returns {string[]} The decoded list of tokens.
             * @throws {Error} If the `decode_chain` method is not implemented in the subclass.
             */
            decode_chain(tokens) {
              throw Error("`decode_chain` should be implemented in subclass.");
            }
          }
          class ReplaceDecoder extends Decoder {
            /** @type {Decoder['decode_chain']} */
            decode_chain(tokens) {
              const pattern = createPattern(this.config.pattern);
              return pattern === null ? tokens : tokens.map((token) => token.replaceAll(pattern, this.config.content));
            }
          }
          class ByteFallback extends Decoder {
            constructor(config) {
              super(config);
              this.text_decoder = new TextDecoder();
            }
            /** @type {Decoder['decode_chain']} */
            decode_chain(tokens) {
              const new_tokens = [];
              let previous_byte_tokens = [];
              for (const token of tokens) {
                let bytes = null;
                if (token.length === 6 && token.startsWith("<0x") && token.endsWith(">")) {
                  const byte = parseInt(token.slice(3, 5), 16);
                  if (!isNaN(byte)) {
                    bytes = byte;
                  }
                }
                if (bytes !== null) {
                  previous_byte_tokens.push(bytes);
                } else {
                  if (previous_byte_tokens.length > 0) {
                    const string = this.text_decoder.decode(Uint8Array.from(previous_byte_tokens));
                    new_tokens.push(string);
                    previous_byte_tokens = [];
                  }
                  new_tokens.push(token);
                }
              }
              if (previous_byte_tokens.length > 0) {
                const string = this.text_decoder.decode(Uint8Array.from(previous_byte_tokens));
                new_tokens.push(string);
                previous_byte_tokens = [];
              }
              return new_tokens;
            }
          }
          class FuseDecoder extends Decoder {
            /** @type {Decoder['decode_chain']} */
            decode_chain(tokens) {
              return [tokens.join("")];
            }
          }
          class StripDecoder extends Decoder {
            constructor(config) {
              super(config);
              this.content = this.config.content;
              this.start = this.config.start;
              this.stop = this.config.stop;
            }
            /** @type {Decoder['decode_chain']} */
            decode_chain(tokens) {
              return tokens.map((token) => {
                let start_cut = 0;
                for (let i = 0; i < this.start; ++i) {
                  if (token[i] === this.content) {
                    start_cut = i + 1;
                    continue;
                  } else {
                    break;
                  }
                }
                let stop_cut = token.length;
                for (let i = 0; i < this.stop; ++i) {
                  const index = token.length - i - 1;
                  if (token[index] === this.content) {
                    stop_cut = index;
                    continue;
                  } else {
                    break;
                  }
                }
                return token.slice(start_cut, stop_cut);
              });
            }
          }
          class WordPieceDecoder extends Decoder {
            /**
             * Creates a new instance of WordPieceDecoder.
             * @param {Object} config The configuration object.
             * @param {string} config.prefix The prefix used for WordPiece encoding.
             * @param {boolean} config.cleanup Whether to cleanup the decoded string.
             */
            constructor(config) {
              super(config);
              this.cleanup = config.cleanup;
            }
            /** @type {Decoder['decode_chain']} */
            decode_chain(tokens) {
              return tokens.map((token, i) => {
                if (i !== 0) {
                  if (token.startsWith(this.config.prefix)) {
                    token = token.replace(this.config.prefix, "");
                  } else {
                    token = " " + token;
                  }
                }
                if (this.cleanup) {
                  token = clean_up_tokenization(token);
                }
                return token;
              });
            }
          }
          class ByteLevelDecoder extends Decoder {
            /**
             * Create a `ByteLevelDecoder` object.
             * @param {Object} config Configuration object.
             */
            constructor(config) {
              super(config);
              this.byte_decoder = UNICODE_TO_BYTES;
              this.text_decoder = new TextDecoder("utf-8", {
                fatal: false,
                ignoreBOM: true
              });
              this.end_of_word_suffix = null;
            }
            /**
             * Convert an array of tokens to string by decoding each byte.
             * @param {string[]} tokens Array of tokens to be decoded.
             * @returns {string} The decoded string.
             */
            convert_tokens_to_string(tokens) {
              const text = tokens.join("");
              const byteArray = new Uint8Array([...text].map((c) => this.byte_decoder[c]));
              const decoded_text = this.text_decoder.decode(byteArray);
              return decoded_text;
            }
            /** @type {Decoder['decode_chain']} */
            decode_chain(tokens) {
              const sub_texts = [];
              let current_sub_text = [];
              for (const token of tokens) {
                if (this.added_tokens.find((x2) => x2.content === token) !== void 0) {
                  if (current_sub_text.length > 0) {
                    sub_texts.push(this.convert_tokens_to_string(current_sub_text));
                    current_sub_text = [];
                  }
                  sub_texts.push(token);
                } else {
                  current_sub_text.push(token);
                }
              }
              if (current_sub_text.length > 0) {
                sub_texts.push(this.convert_tokens_to_string(current_sub_text));
              }
              return sub_texts;
            }
          }
          class CTCDecoder extends Decoder {
            constructor(config) {
              super(config);
              this.pad_token = this.config.pad_token;
              this.word_delimiter_token = this.config.word_delimiter_token;
              this.cleanup = this.config.cleanup;
            }
            /**
             * Converts a connectionist-temporal-classification (CTC) output tokens into a single string.
             * @param {string[]} tokens Array of tokens to be decoded.
             * @returns {string} The decoded string.
             */
            convert_tokens_to_string(tokens) {
              if (tokens.length === 0)
                return "";
              const grouped_tokens = [tokens[0]];
              for (let i = 1; i < tokens.length; ++i) {
                if (tokens[i] !== grouped_tokens.at(-1)) {
                  grouped_tokens.push(tokens[i]);
                }
              }
              const filtered_tokens = grouped_tokens.filter((token) => token !== this.pad_token);
              let text = filtered_tokens.join("");
              if (this.cleanup) {
                text = clean_up_tokenization(text).replaceAll(this.word_delimiter_token, " ").trim();
              }
              return text;
            }
            /** @type {Decoder['decode_chain']} */
            decode_chain(tokens) {
              return [this.convert_tokens_to_string(tokens)];
            }
          }
          class DecoderSequence extends Decoder {
            /**
             * Creates a new instance of DecoderSequence.
             * @param {Object} config The configuration object.
             * @param {Object[]} config.decoders The list of decoders to apply.
             */
            constructor(config) {
              super(config);
              this.decoders = config.decoders.map((x2) => Decoder.fromConfig(x2));
            }
            /** @type {Decoder['decode_chain']} */
            decode_chain(tokens) {
              return this.decoders.reduce((toks, decoder) => {
                return decoder.decode_chain(toks);
              }, tokens);
            }
          }
          class BPEDecoder extends Decoder {
            constructor(config) {
              super(config);
              this.suffix = this.config.suffix;
            }
            /** @type {Decoder['decode_chain']} */
            decode_chain(tokens) {
              return tokens.map((token, i) => {
                return token.replaceAll(this.suffix, i === tokens.length - 1 ? "" : " ");
              });
            }
          }
          class VitsDecoder extends Decoder {
            /** @type {Decoder['decode_chain']} */
            decode_chain(tokens) {
              let decoded = "";
              for (let i = 1; i < tokens.length; i += 2) {
                decoded += tokens[i];
              }
              return [decoded];
            }
          }
          class MetaspacePreTokenizer extends PreTokenizer {
            /**
             * @param {Object} config The configuration object for the MetaspacePreTokenizer.
             * @param {boolean} config.add_prefix_space Whether to add a prefix space to the first token.
             * @param {string} config.replacement The character to replace spaces with.
             * @param {string} [config.str_rep=config.replacement] An optional string representation of the replacement character.
             * @param {'first'|'never'|'always'} [config.prepend_scheme='always'] The metaspace prepending scheme.
             */
            constructor(config) {
              super();
              this.addPrefixSpace = config.add_prefix_space;
              this.replacement = config.replacement;
              this.strRep = config.str_rep || this.replacement;
              this.prepend_scheme = config.prepend_scheme ?? "always";
            }
            /**
             * This method takes a string, replaces spaces with the replacement character,
             * adds a prefix space if requested, and returns a new list of tokens.
             * @param {string} text The text to pre-tokenize.
             * @param {Object} [options] The options for the pre-tokenization.
             * @param {number} [options.section_index] The index of the section to pre-tokenize.
             * @returns {string[]} A new list of pre-tokenized tokens.
             */
            pre_tokenize_text(text, {
              section_index = void 0
            } = {}) {
              let normalized = text.replaceAll(" ", this.strRep);
              if (
                // We add a prefix space if:
                //  (1) The addPrefixSpace option is enabled and the normalized
                //      token does not already start with the replacement character.
                this.addPrefixSpace && !normalized.startsWith(this.replacement) && (this.prepend_scheme === "always" || this.prepend_scheme === "first" && section_index === 0)
              ) {
                normalized = this.strRep + normalized;
              }
              return [normalized];
            }
          }
          class MetaspaceDecoder extends Decoder {
            /**
             * Constructs a new MetaspaceDecoder object.
             * @param {Object} config The configuration object for the MetaspaceDecoder.
             * @param {boolean} config.add_prefix_space Whether to add a prefix space to the decoded string.
             * @param {string} config.replacement The string to replace spaces with.
             */
            constructor(config) {
              super(config);
              this.addPrefixSpace = config.add_prefix_space;
              this.replacement = config.replacement;
            }
            /** @type {Decoder['decode_chain']} */
            decode_chain(tokens) {
              const result = [];
              for (let i = 0; i < tokens.length; ++i) {
                let normalized = tokens[i].replaceAll(this.replacement, " ");
                if (this.addPrefixSpace && i == 0 && normalized.startsWith(" ")) {
                  normalized = normalized.substring(1);
                }
                result.push(normalized);
              }
              return result;
            }
          }
          class Precompiled extends Normalizer {
            /**
             * Create a new instance of Precompiled normalizer.
             * @param {Object} config The configuration object.
             * @param {any} config.precompiled_charsmap Precompiled chars mapping.
             */
            constructor(config) {
              super(config);
              this.charsmap = config.precompiled_charsmap;
            }
            /**
             * Normalizes the given text by applying the precompiled charsmap.
             * @param {string} text The text to normalize.
             * @returns {string} The normalized text.
             */
            normalize(text) {
              text = text.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm, "");
              text = text.replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm, " ");
              if (text.includes("\uFF5E")) {
                const parts = text.split("\uFF5E");
                text = parts.map((part) => part.normalize("NFKC")).join("\uFF5E");
              } else {
                text = text.normalize("NFKC");
              }
              return text;
            }
          }
          class PreTokenizerSequence extends PreTokenizer {
            /**
             * Creates an instance of PreTokenizerSequence.
             * @param {Object} config The configuration object for the pre-tokenizer sequence.
             * @param {Object[]} config.pretokenizers An array of pre-tokenizer configurations.
             */
            constructor(config) {
              super();
              this.tokenizers = config.pretokenizers.map((x2) => PreTokenizer.fromConfig(x2));
            }
            /**
             * Applies each pre-tokenizer in the sequence to the input text in turn.
             * @param {string} text The text to pre-tokenize.
             * @param {Object} [options] Additional options for the pre-tokenization logic.
             * @returns {string[]} The pre-tokenized text.
             */
            pre_tokenize_text(text, options) {
              return this.tokenizers.reduce((preTokenizedText, tokenizer) => {
                return tokenizer.pre_tokenize(preTokenizedText, options);
              }, [text]);
            }
          }
          class WhitespacePreTokenizer extends PreTokenizer {
            /**
             * Creates an instance of WhitespacePreTokenizer.
             * @param {Object} config The configuration object for the pre-tokenizer.
             */
            constructor(config) {
              super();
            }
            /**
             * Pre-tokenizes the input text by splitting it on word boundaries.
             * @param {string} text The text to be pre-tokenized.
             * @param {Object} [options] Additional options for the pre-tokenization logic.
             * @returns {string[]} An array of tokens produced by splitting the input text on whitespace.
             */
            pre_tokenize_text(text, options) {
              return text.match(/\w+|[^\w\s]+/g) || [];
            }
          }
          class WhitespaceSplit extends PreTokenizer {
            /**
             * Creates an instance of WhitespaceSplit.
             * @param {Object} config The configuration object for the pre-tokenizer.
             */
            constructor(config) {
              super();
            }
            /**
             * Pre-tokenizes the input text by splitting it on whitespace characters.
             * @param {string} text The text to be pre-tokenized.
             * @param {Object} [options] Additional options for the pre-tokenization logic.
             * @returns {string[]} An array of tokens produced by splitting the input text on whitespace.
             */
            pre_tokenize_text(text, options) {
              return whitespace_split(text);
            }
          }
          class ReplacePreTokenizer extends PreTokenizer {
            /**
             * @param {Object} config The configuration options for the pre-tokenizer.
             * @param {Object} config.pattern The pattern used to split the text. Can be a string or a regex object.
             * @param {string} config.content What to replace the pattern with.
             */
            constructor(config) {
              super();
              this.config = config;
              this.pattern = createPattern(this.config.pattern);
              this.content = this.config.content;
            }
            /**
             * Pre-tokenizes the input text by replacing certain characters.
             * @param {string} text The text to be pre-tokenized.
             * @param {Object} [options] Additional options for the pre-tokenization logic.
             * @returns {string[]} An array of tokens produced by replacing certain characters.
             */
            pre_tokenize_text(text, options) {
              if (this.pattern === null) {
                return [text];
              }
              return [text.replaceAll(this.pattern, this.config.content)];
            }
          }
          const SPECIAL_TOKEN_ATTRIBUTES = [
            "bos_token",
            "eos_token",
            "unk_token",
            "sep_token",
            "pad_token",
            "cls_token",
            "mask_token"
            // additional_special_tokens (TODO)
          ];
          function padHelper(item, length, value_fn, side) {
            for (const key of Object.keys(item)) {
              const diff = length - item[key].length;
              const value = value_fn(key);
              const padData = new Array(diff).fill(value);
              item[key] = side === "right" ? (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(item[key], padData) : (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(padData, item[key]);
            }
          }
          function truncateHelper(item, length) {
            for (const key of Object.keys(item)) {
              item[key].length = length;
            }
          }
          class PreTrainedTokenizer extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
            /**
             * Create a new PreTrainedTokenizer instance.
             * @param {Object} tokenizerJSON The JSON of the tokenizer.
             * @param {Object} tokenizerConfig The config of the tokenizer.
             */
            constructor(tokenizerJSON, tokenizerConfig) {
              super();
              __publicField(this, "return_token_type_ids", false);
              __publicField(this, "padding_side", "right");
              this._tokenizer_config = tokenizerConfig;
              this.normalizer = Normalizer.fromConfig(tokenizerJSON.normalizer);
              this.pre_tokenizer = PreTokenizer.fromConfig(tokenizerJSON.pre_tokenizer);
              this.model = TokenizerModel.fromConfig(tokenizerJSON.model, tokenizerConfig);
              this.post_processor = PostProcessor.fromConfig(tokenizerJSON.post_processor);
              this.decoder = Decoder.fromConfig(tokenizerJSON.decoder);
              this.special_tokens = [];
              this.all_special_ids = [];
              this.added_tokens = [];
              for (const addedToken of tokenizerJSON.added_tokens) {
                const token = new AddedToken(addedToken);
                this.added_tokens.push(token);
                this.model.tokens_to_ids.set(token.content, token.id);
                this.model.vocab[token.id] = token.content;
                if (token.special) {
                  this.special_tokens.push(token.content);
                  this.all_special_ids.push(token.id);
                }
              }
              this.additional_special_tokens = tokenizerConfig.additional_special_tokens ?? [];
              this.special_tokens.push(...this.additional_special_tokens);
              this.special_tokens = [...new Set(this.special_tokens)];
              if (this.decoder) {
                this.decoder.added_tokens = this.added_tokens;
                this.decoder.end_of_word_suffix = this.model.end_of_word_suffix;
              }
              this.added_tokens_splitter = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.DictionarySplitter(
                this.added_tokens.map((x2) => x2.content)
              );
              this.added_tokens_map = new Map(this.added_tokens.map((x2) => [x2.content, x2]));
              this.mask_token = this.getToken("mask_token");
              this.mask_token_id = this.model.tokens_to_ids.get(this.mask_token);
              this.pad_token = this.getToken("pad_token", "eos_token");
              this.pad_token_id = this.model.tokens_to_ids.get(this.pad_token);
              this.sep_token = this.getToken("sep_token");
              this.sep_token_id = this.model.tokens_to_ids.get(this.sep_token);
              this.unk_token = this.getToken("unk_token");
              this.unk_token_id = this.model.tokens_to_ids.get(this.unk_token);
              this.bos_token = this.getToken("bos_token");
              this.bos_token_id = this.model.tokens_to_ids.get(this.bos_token);
              this.eos_token = this.getToken("eos_token");
              this.eos_token_id = this.model.tokens_to_ids.get(this.eos_token);
              this.model_max_length = tokenizerConfig.model_max_length;
              this.remove_space = tokenizerConfig.remove_space;
              this.clean_up_tokenization_spaces = tokenizerConfig.clean_up_tokenization_spaces ?? true;
              this.do_lowercase_and_remove_accent = tokenizerConfig.do_lowercase_and_remove_accent ?? false;
              if (tokenizerConfig.padding_side) {
                this.padding_side = tokenizerConfig.padding_side;
              }
              this.legacy = false;
              this.chat_template = tokenizerConfig.chat_template ?? null;
              if (Array.isArray(this.chat_template)) {
                const chat_template = /* @__PURE__ */ Object.create(null);
                for (const { name, template } of this.chat_template) {
                  if (typeof name !== "string" || typeof template !== "string") {
                    throw new Error('Chat template must be a list of objects with "name" and "template" properties');
                  }
                  chat_template[name] = template;
                }
                this.chat_template = chat_template;
              }
              this._compiled_template_cache = /* @__PURE__ */ new Map();
            }
            /**
             * Returns the value of the first matching key in the tokenizer config object.
             * @param {...string} keys One or more keys to search for in the tokenizer config object.
             * @returns {string|null} The value associated with the first matching key, or null if no match is found.
             * @throws {Error} If an object is found for a matching key and its __type property is not "AddedToken".
             * @private
             */
            getToken(...keys) {
              for (const key of keys) {
                const item = this._tokenizer_config[key];
                if (!item)
                  continue;
                if (typeof item === "object") {
                  if (item.__type === "AddedToken") {
                    return item.content;
                  } else {
                    throw Error(`Unknown token: ${item}`);
                  }
                } else {
                  return item;
                }
              }
              return null;
            }
            /**
             * Loads a pre-trained tokenizer from the given `pretrained_model_name_or_path`. 
             * 
             * @param {string} pretrained_model_name_or_path The path to the pre-trained tokenizer.
             * @param {PretrainedTokenizerOptions} options Additional options for loading the tokenizer.
             * 
             * @throws {Error} Throws an error if the tokenizer.json or tokenizer_config.json files are not found in the `pretrained_model_name_or_path`.
             * @returns {Promise<PreTrainedTokenizer>} A new instance of the `PreTrainedTokenizer` class.
             */
            static async from_pretrained(pretrained_model_name_or_path, {
              progress_callback = null,
              config = null,
              cache_dir = null,
              local_files_only = false,
              revision = "main",
              legacy = null
            } = {}) {
              const info = await loadTokenizer(pretrained_model_name_or_path, {
                progress_callback,
                config,
                cache_dir,
                local_files_only,
                revision,
                legacy
              });
              return new this(...info);
            }
            /**
             * @typedef {number[]|number[][]|Tensor} BatchEncodingItem
             * 
             * @typedef {Object} BatchEncoding Holds the output of the tokenizer's call function.
             * @property {BatchEncodingItem} input_ids List of token ids to be fed to a model.
             * @property {BatchEncodingItem} attention_mask List of indices specifying which tokens should be attended to by the model.
             * @property {BatchEncodingItem} [token_type_ids] List of token type ids to be fed to a model.
             */
            /**
             * Encode/tokenize the given text(s).
             * @param {string|string[]} text The text to tokenize.
             * @param {Object} options An optional object containing the following properties:
             * @param {string|string[]} [options.text_pair=null] Optional second sequence to be encoded. If set, must be the same type as text.
             * @param {boolean|'max_length'} [options.padding=false] Whether to pad the input sequences.
             * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.
             * @param {boolean} [options.truncation=null] Whether to truncate the input sequences.
             * @param {number} [options.max_length=null] Maximum length of the returned list and optionally padding length.
             * @param {boolean} [options.return_tensor=true] Whether to return the results as Tensors or arrays.
             * @param {boolean} [options.return_token_type_ids=null] Whether to return the token type ids.
             * @returns {BatchEncoding} Object to be passed to the model.
             */
            _call(text, {
              text_pair = null,
              add_special_tokens = true,
              padding = false,
              truncation = null,
              max_length = null,
              return_tensor = true,
              // Different to HF
              return_token_type_ids = null
            } = {}) {
              const isBatched = Array.isArray(text);
              let encodedTokens;
              if (isBatched) {
                if (text.length === 0) {
                  throw Error("text array must be non-empty");
                }
                if (text_pair !== null) {
                  if (!Array.isArray(text_pair)) {
                    throw Error("text_pair must also be an array");
                  } else if (text.length !== text_pair.length) {
                    throw Error("text and text_pair must have the same length");
                  }
                  encodedTokens = text.map(
                    (t, i) => this._encode_plus(t, { text_pair: text_pair[i], add_special_tokens, return_token_type_ids })
                  );
                } else {
                  encodedTokens = text.map((x2) => this._encode_plus(x2, { add_special_tokens, return_token_type_ids }));
                }
              } else {
                if (text === null || text === void 0) {
                  throw Error("text may not be null or undefined");
                }
                if (Array.isArray(text_pair)) {
                  throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");
                }
                encodedTokens = [this._encode_plus(text, { text_pair, add_special_tokens, return_token_type_ids })];
              }
              if (max_length === null) {
                max_length = this.model_max_length;
              } else if (truncation === null) {
                if (padding === true) {
                  console.warn(
                    "`max_length` is ignored when `padding: true` and there is no truncation strategy. To pad to max length, use `padding: 'max_length'`."
                  );
                  max_length = this.model_max_length;
                } else if (padding === false) {
                  console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation: true` to explicitly truncate examples to max length.");
                  truncation = true;
                }
              }
              if (padding === true) {
                max_length = Math.min((0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)(encodedTokens.map((x2) => x2.input_ids.length))[0], max_length ?? Infinity);
              }
              max_length = Math.min(max_length, this.model_max_length ?? Infinity);
              if (padding || truncation) {
                for (let i = 0; i < encodedTokens.length; ++i) {
                  if (encodedTokens[i].input_ids.length === max_length) {
                    continue;
                  } else if (encodedTokens[i].input_ids.length > max_length) {
                    if (truncation) {
                      truncateHelper(encodedTokens[i], max_length);
                    }
                  } else {
                    if (padding) {
                      padHelper(
                        encodedTokens[i],
                        max_length,
                        (key) => key === "input_ids" ? this.pad_token_id : 0,
                        this.padding_side
                      );
                    }
                  }
                }
              }
              const result = {};
              if (return_tensor) {
                if (!(padding && truncation)) {
                  if (encodedTokens.some((x2) => {
                    for (const key of Object.keys(x2)) {
                      if (x2[key].length !== encodedTokens[0][key]?.length) {
                        return true;
                      }
                    }
                    return false;
                  })) {
                    throw Error(
                      "Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length."
                    );
                  }
                }
                const dims = [encodedTokens.length, encodedTokens[0].input_ids.length];
                for (const key of Object.keys(encodedTokens[0])) {
                  result[key] = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(
                    "int64",
                    BigInt64Array.from(encodedTokens.flatMap((x2) => x2[key]).map(BigInt)),
                    dims
                  );
                }
              } else {
                for (const key of Object.keys(encodedTokens[0])) {
                  result[key] = encodedTokens.map((x2) => x2[key]);
                }
                if (!isBatched) {
                  for (const key of Object.keys(result)) {
                    result[key] = result[key][0];
                  }
                }
              }
              return (
                /** @type {BatchEncoding} */
                result
              );
            }
            /**
             * Encodes a single text using the preprocessor pipeline of the tokenizer.
             *
             * @param {string|null} text The text to encode.
             * @returns {string[]|null} The encoded tokens.
             */
            _encode_text(text) {
              if (text === null)
                return null;
              const sections = this.added_tokens_splitter.split(text);
              for (let i = 0; i < sections.length; ++i) {
                const addedToken = this.added_tokens_map.get(sections[i]);
                if (addedToken) {
                  if (addedToken.lstrip && i > 0) {
                    sections[i - 1] = sections[i - 1].trimEnd();
                  }
                  if (addedToken.rstrip && i < sections.length - 1) {
                    sections[i + 1] = sections[i + 1].trimStart();
                  }
                }
              }
              const tokens = sections.flatMap((x2, section_index) => {
                if (x2.length === 0)
                  return [];
                if (this.added_tokens_map.has(x2))
                  return [x2];
                if (this.remove_space === true) {
                  x2 = x2.trim().split(/\s+/).join(" ");
                }
                if (this.do_lowercase_and_remove_accent) {
                  x2 = lowercase_and_remove_accent(x2);
                }
                if (this.normalizer !== null) {
                  x2 = this.normalizer(x2);
                }
                if (x2.length === 0) {
                  return [];
                }
                const sectionTokens = this.pre_tokenizer !== null ? this.pre_tokenizer(x2, {
                  section_index
                }) : [x2];
                const tokens2 = this.model(sectionTokens);
                return tokens2;
              });
              return tokens;
            }
            /**
             * Encodes a single text or a pair of texts using the model's tokenizer.
             *
             * @param {string} text The text to encode.
             * @param {Object} options An optional object containing the following properties:
             * @param {string} [options.text_pair=null] The optional second text to encode.
             * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.
             * @param {boolean} [options.return_token_type_ids=null] Whether to return token_type_ids.
             * @returns {EncodingSingle} An object containing the encoded text.
             * @private
             */
            _encode_plus(text, {
              text_pair = null,
              add_special_tokens = true,
              return_token_type_ids = null
            } = {}) {
              const { tokens, token_type_ids } = this._tokenize_helper(text, { pair: text_pair, add_special_tokens });
              const input_ids = this.model.convert_tokens_to_ids(tokens);
              const result = {
                input_ids,
                attention_mask: new Array(input_ids.length).fill(1)
              };
              if ((return_token_type_ids ?? this.return_token_type_ids) && token_type_ids) {
                result.token_type_ids = token_type_ids;
              }
              return result;
            }
            /**
             * Internal helper function to tokenize a text, and optionally a pair of texts.
             * @param {string} text The text to tokenize.
             * @param {Object} options An optional object containing the following properties:
             * @param {string} [options.pair=null] The optional second text to tokenize.
             * @param {boolean} [options.add_special_tokens=false] Whether or not to add the special tokens associated with the corresponding model.
             * @returns {{tokens: string[], token_type_ids?: number[]}} An object containing the tokens and optionally the token type IDs.
             */
            _tokenize_helper(text, {
              pair = null,
              add_special_tokens = false
            } = {}) {
              const tokens = this._encode_text(text);
              const tokens2 = this._encode_text(pair);
              return this.post_processor ? this.post_processor(tokens, tokens2, { add_special_tokens }) : { tokens: (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(tokens ?? [], tokens2 ?? []) };
            }
            /**
             * Converts a string into a sequence of tokens.
             * @param {string} text The sequence to be encoded.
             * @param {Object} options An optional object containing the following properties:
             * @param {string} [options.pair] A second sequence to be encoded with the first.
             * @param {boolean} [options.add_special_tokens=false] Whether or not to add the special tokens associated with the corresponding model.
             * @returns {string[]} The list of tokens.
             */
            tokenize(text, {
              pair = null,
              add_special_tokens = false
            } = {}) {
              return this._tokenize_helper(text, { pair, add_special_tokens }).tokens;
            }
            /**
             * Encodes a single text or a pair of texts using the model's tokenizer.
             *
             * @param {string} text The text to encode.
             * @param {Object} options An optional object containing the following properties:
             * @param {string} [options.text_pair=null] The optional second text to encode.
             * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.
             * @param {boolean} [options.return_token_type_ids=null] Whether to return token_type_ids.
             * @returns {number[]} An array of token IDs representing the encoded text(s).
             */
            encode(text, {
              text_pair = null,
              add_special_tokens = true,
              return_token_type_ids = null
            } = {}) {
              return this._encode_plus(text, {
                text_pair,
                add_special_tokens,
                return_token_type_ids
              }).input_ids;
            }
            /**
             * Decode a batch of tokenized sequences.
             * @param {number[][]|Tensor} batch List/Tensor of tokenized input sequences.
             * @param {Object} decode_args (Optional) Object with decoding arguments.
             * @returns {string[]} List of decoded sequences.
             */
            batch_decode(batch, decode_args = {}) {
              if (batch instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor) {
                batch = batch.tolist();
              }
              return batch.map((x2) => this.decode(x2, decode_args));
            }
            /**
             * Decodes a sequence of token IDs back to a string.
             *
             * @param {number[]|bigint[]|Tensor} token_ids List/Tensor of token IDs to decode.
             * @param {Object} [decode_args={}]
             * @param {boolean} [decode_args.skip_special_tokens=false] If true, special tokens are removed from the output string.
             * @param {boolean} [decode_args.clean_up_tokenization_spaces=true] If true, spaces before punctuations and abbreviated forms are removed.
             *
             * @returns {string} The decoded string.
             * @throws {Error} If `token_ids` is not a non-empty array of integers.
             */
            decode(token_ids, decode_args = {}) {
              if (token_ids instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor) {
                token_ids = prepareTensorForDecode(token_ids);
              }
              if (!Array.isArray(token_ids) || token_ids.length === 0 || !(0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.isIntegralNumber)(token_ids[0])) {
                throw Error("token_ids must be a non-empty array of integers.");
              }
              return this.decode_single(token_ids, decode_args);
            }
            /**
             * Decode a single list of token ids to a string.
             * @param {number[]|bigint[]} token_ids List of token ids to decode
             * @param {Object} decode_args Optional arguments for decoding
             * @param {boolean} [decode_args.skip_special_tokens=false] Whether to skip special tokens during decoding
             * @param {boolean} [decode_args.clean_up_tokenization_spaces=null] Whether to clean up tokenization spaces during decoding.
             * If null, the value is set to `this.decoder.cleanup` if it exists, falling back to `this.clean_up_tokenization_spaces` if it exists, falling back to `true`.
             * @returns {string} The decoded string
             */
            decode_single(token_ids, {
              skip_special_tokens = false,
              clean_up_tokenization_spaces = null
            }) {
              let tokens = this.model.convert_ids_to_tokens(token_ids);
              if (skip_special_tokens) {
                tokens = tokens.filter((x2) => !this.special_tokens.includes(x2));
              }
              let decoded = this.decoder ? this.decoder(tokens) : tokens.join(" ");
              if (this.decoder && this.decoder.end_of_word_suffix) {
                decoded = decoded.replaceAll(this.decoder.end_of_word_suffix, " ");
                if (skip_special_tokens) {
                  decoded = decoded.trim();
                }
              }
              if (clean_up_tokenization_spaces ?? this.clean_up_tokenization_spaces) {
                decoded = clean_up_tokenization(decoded);
              }
              return decoded;
            }
            /**
             * Retrieve the chat template string used for tokenizing chat messages. This template is used
             * internally by the `apply_chat_template` method and can also be used externally to retrieve the model's chat
             * template for better generation tracking.
             * 
             * @param {Object} options An optional object containing the following properties:
             * @param {string} [options.chat_template=null]
             * A Jinja template or the name of a template to use for this conversion.
             * It is usually not necessary to pass anything to this argument,
             * as the model's template will be used by default.
             * @param {Object[]} [options.tools=null]
             * A list of tools (callable functions) that will be accessible to the model. If the template does not
             * support function calling, this argument will have no effect. Each tool should be passed as a JSON Schema,
             * giving the name, description and argument types for the tool. See our
             * [chat templating guide](https://huggingface.co/docs/transformers/main/en/chat_templating#automated-function-conversion-for-tool-use)
             * for more information.
             * @returns {string} The chat template string.
             */
            get_chat_template({
              chat_template = null,
              tools = null
            } = {}) {
              if (this.chat_template && typeof this.chat_template === "object") {
                const template_dict = this.chat_template;
                if (chat_template !== null && Object.hasOwn(template_dict, chat_template)) {
                  chat_template = template_dict[chat_template];
                } else if (chat_template === null) {
                  if (tools !== null && "tool_use" in template_dict) {
                    chat_template = template_dict["tool_use"];
                  } else if ("default" in template_dict) {
                    chat_template = template_dict["default"];
                  } else {
                    throw Error(
                      `This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(template_dict).sort()}.`
                    );
                  }
                }
              } else if (chat_template === null) {
                if (this.chat_template) {
                  chat_template = this.chat_template;
                } else {
                  throw Error(
                    "Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating"
                  );
                }
              }
              return chat_template;
            }
            /**
             * Converts a list of message objects with `"role"` and `"content"` keys to a list of token
             * ids. This method is intended for use with chat models, and will read the tokenizer's chat_template attribute to
             * determine the format and control tokens to use when converting.
             * 
             * See [here](https://huggingface.co/docs/transformers/chat_templating) for more information.
             * 
             * **Example:** Applying a chat template to a conversation.
             * 
             * ```javascript
             * import { AutoTokenizer } from "@huggingface/transformers";
             * 
             * const tokenizer = await AutoTokenizer.from_pretrained("Xenova/mistral-tokenizer-v1");
             * 
             * const chat = [
             *   { "role": "user", "content": "Hello, how are you?" },
             *   { "role": "assistant", "content": "I'm doing great. How can I help you today?" },
             *   { "role": "user", "content": "I'd like to show off how chat templating works!" },
             * ]
             * 
             * const text = tokenizer.apply_chat_template(chat, { tokenize: false });
             * // "<s>[INST] Hello, how are you? [/INST]I'm doing great. How can I help you today?</s> [INST] I'd like to show off how chat templating works! [/INST]"
             * 
             * const input_ids = tokenizer.apply_chat_template(chat, { tokenize: true, return_tensor: false });
             * // [1, 733, 16289, 28793, 22557, 28725, 910, 460, 368, 28804, 733, 28748, 16289, 28793, 28737, 28742, 28719, 2548, 1598, 28723, 1602, 541, 315, 1316, 368, 3154, 28804, 2, 28705, 733, 16289, 28793, 315, 28742, 28715, 737, 298, 1347, 805, 910, 10706, 5752, 1077, 3791, 28808, 733, 28748, 16289, 28793]
             * ```
             * 
             * @param {Message[]} conversation A list of message objects with `"role"` and `"content"` keys,
             * representing the chat history so far.
             * @param {Object} options An optional object containing the following properties:
             * @param {string} [options.chat_template=null] A Jinja template to use for this conversion. If
             * this is not passed, the model's chat template will be used instead.
             * @param {Object[]} [options.tools=null]
             * A list of tools (callable functions) that will be accessible to the model. If the template does not
             * support function calling, this argument will have no effect. Each tool should be passed as a JSON Schema,
             * giving the name, description and argument types for the tool. See our
             * [chat templating guide](https://huggingface.co/docs/transformers/main/en/chat_templating#automated-function-conversion-for-tool-use)
             * for more information.
             * @param {Record<string, string>[]} [options.documents=null]
             * A list of dicts representing documents that will be accessible to the model if it is performing RAG
             * (retrieval-augmented generation). If the template does not support RAG, this argument will have no
             * effect. We recommend that each document should be a dict containing "title" and "text" keys. Please
             * see the RAG section of the [chat templating guide](https://huggingface.co/docs/transformers/main/en/chat_templating#arguments-for-RAG)
             * for examples of passing documents with chat templates.
             * @param {boolean} [options.add_generation_prompt=false] Whether to end the prompt with the token(s) that indicate
             * the start of an assistant message. This is useful when you want to generate a response from the model.
             * Note that this argument will be passed to the chat template, and so it must be supported in the
             * template for this argument to have any effect.
             * @param {boolean} [options.tokenize=true] Whether to tokenize the output. If false, the output will be a string.
             * @param {boolean} [options.padding=false] Whether to pad sequences to the maximum length. Has no effect if tokenize is false.
             * @param {boolean} [options.truncation=false] Whether to truncate sequences to the maximum length. Has no effect if tokenize is false.
             * @param {number} [options.max_length=null] Maximum length (in tokens) to use for padding or truncation. Has no effect if tokenize is false.
             * If not specified, the tokenizer's `max_length` attribute will be used as a default.
             * @param {boolean} [options.return_tensor=true] Whether to return the output as a Tensor or an Array. Has no effect if tokenize is false.
             * @param {boolean} [options.return_dict=true] Whether to return a dictionary with named outputs. Has no effect if tokenize is false.
             * @param {Object} [options.tokenizer_kwargs={}] Additional options to pass to the tokenizer.
             * @returns {string | Tensor | number[]| number[][]|BatchEncoding} The tokenized output.
             */
            apply_chat_template(conversation, {
              tools = null,
              documents = null,
              chat_template = null,
              add_generation_prompt = false,
              tokenize = true,
              padding = false,
              truncation = false,
              max_length = null,
              return_tensor = true,
              return_dict = false,
              tokenizer_kwargs = {},
              ...kwargs
            } = {}) {
              chat_template = this.get_chat_template({ chat_template, tools });
              if (typeof chat_template !== "string") {
                throw Error(`chat_template must be a string, but got ${typeof chat_template}`);
              }
              let compiledTemplate = this._compiled_template_cache.get(chat_template);
              if (compiledTemplate === void 0) {
                compiledTemplate = new _huggingface_jinja__WEBPACK_IMPORTED_MODULE_6__.Template(chat_template);
                this._compiled_template_cache.set(chat_template, compiledTemplate);
              }
              const special_tokens_map = /* @__PURE__ */ Object.create(null);
              for (const key of SPECIAL_TOKEN_ATTRIBUTES) {
                const value = this.getToken(key);
                if (value) {
                  special_tokens_map[key] = value;
                }
              }
              const rendered = compiledTemplate.render({
                messages: conversation,
                add_generation_prompt,
                tools,
                documents,
                ...special_tokens_map,
                ...kwargs
              });
              if (tokenize) {
                const out = this._call(rendered, {
                  add_special_tokens: false,
                  padding,
                  truncation,
                  max_length,
                  return_tensor,
                  ...tokenizer_kwargs
                });
                return return_dict ? out : out.input_ids;
              }
              return rendered;
            }
          }
          class BertTokenizer extends PreTrainedTokenizer {
            constructor() {
              super(...arguments);
              __publicField(this, "return_token_type_ids", true);
            }
          }
          class AlbertTokenizer extends PreTrainedTokenizer {
            constructor() {
              super(...arguments);
              __publicField(this, "return_token_type_ids", true);
            }
          }
          class MobileBertTokenizer extends PreTrainedTokenizer {
            constructor() {
              super(...arguments);
              __publicField(this, "return_token_type_ids", true);
            }
          }
          class SqueezeBertTokenizer extends PreTrainedTokenizer {
            constructor() {
              super(...arguments);
              __publicField(this, "return_token_type_ids", true);
            }
          }
          class DebertaTokenizer extends PreTrainedTokenizer {
            constructor() {
              super(...arguments);
              __publicField(this, "return_token_type_ids", true);
            }
          }
          class DebertaV2Tokenizer extends PreTrainedTokenizer {
            constructor() {
              super(...arguments);
              __publicField(this, "return_token_type_ids", true);
            }
          }
          class HerbertTokenizer extends PreTrainedTokenizer {
            constructor() {
              super(...arguments);
              __publicField(this, "return_token_type_ids", true);
            }
          }
          class ConvBertTokenizer extends PreTrainedTokenizer {
            constructor() {
              super(...arguments);
              __publicField(this, "return_token_type_ids", true);
            }
          }
          class RoFormerTokenizer extends PreTrainedTokenizer {
            constructor() {
              super(...arguments);
              __publicField(this, "return_token_type_ids", true);
            }
          }
          class DistilBertTokenizer extends PreTrainedTokenizer {
          }
          class CamembertTokenizer extends PreTrainedTokenizer {
          }
          class XLMTokenizer extends PreTrainedTokenizer {
            constructor(tokenizerJSON, tokenizerConfig) {
              super(tokenizerJSON, tokenizerConfig);
              __publicField(this, "return_token_type_ids", true);
              console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.');
            }
          }
          class ElectraTokenizer extends PreTrainedTokenizer {
            constructor() {
              super(...arguments);
              __publicField(this, "return_token_type_ids", true);
            }
          }
          class T5Tokenizer extends PreTrainedTokenizer {
          }
          class GPT2Tokenizer extends PreTrainedTokenizer {
          }
          class BartTokenizer extends PreTrainedTokenizer {
          }
          class MBartTokenizer extends PreTrainedTokenizer {
            constructor(tokenizerJSON, tokenizerConfig) {
              super(tokenizerJSON, tokenizerConfig);
              this.languageRegex = /^[a-z]{2}_[A-Z]{2}$/;
              this.language_codes = this.special_tokens.filter((x2) => this.languageRegex.test(x2));
              this.lang_to_token = (x2) => x2;
            }
            /**
             * Helper function to build translation inputs for an `MBartTokenizer`.
             * @param {string|string[]} raw_inputs The text to tokenize.
             * @param {Object} tokenizer_options Options to be sent to the tokenizer
             * @param {Object} generate_kwargs Generation options.
             * @returns {Object} Object to be passed to the model.
             */
            _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {
              return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);
            }
          }
          class MBart50Tokenizer extends MBartTokenizer {
          }
          class RobertaTokenizer extends PreTrainedTokenizer {
          }
          class BloomTokenizer extends PreTrainedTokenizer {
          }
          const SPIECE_UNDERLINE = "\u2581";
          class LlamaTokenizer extends PreTrainedTokenizer {
            constructor(tokenizerJSON, tokenizerConfig) {
              super(tokenizerJSON, tokenizerConfig);
              __publicField(this, "padding_side", "left");
              this.legacy = tokenizerConfig.legacy ?? true;
              if (!this.legacy) {
                this.normalizer = null;
                this.pre_tokenizer = new MetaspacePreTokenizer({
                  replacement: SPIECE_UNDERLINE,
                  add_prefix_space: true,
                  prepend_scheme: "first"
                });
              }
            }
            /**
             * Helper function to handle legacy encoding of SPM tokenizers.
             * Adapted from https://github.com/huggingface/transformers/blob/e6dcf8abd6f65bb4b6dfc1831b20d9ba49ce00e2/src/transformers/models/t5/tokenization_t5.py#L374-L387
             * @param {string} text The text to encode.
             * @returns {string[]} The encoded tokens.
             */
            _encode_text(text) {
              if (text === null)
                return null;
              if (this.legacy || text.length === 0) {
                return super._encode_text(text);
              }
              let tokens = super._encode_text(SPIECE_UNDERLINE + text.replaceAll(SPIECE_UNDERLINE, " "));
              if (tokens.length > 1 && tokens[0] === SPIECE_UNDERLINE && this.special_tokens.includes(tokens[1])) {
                tokens = tokens.slice(1);
              }
              return tokens;
            }
          }
          class CodeLlamaTokenizer extends PreTrainedTokenizer {
          }
          class XLMRobertaTokenizer extends PreTrainedTokenizer {
          }
          class MPNetTokenizer extends PreTrainedTokenizer {
          }
          class FalconTokenizer extends PreTrainedTokenizer {
          }
          class GPTNeoXTokenizer extends PreTrainedTokenizer {
          }
          class EsmTokenizer extends PreTrainedTokenizer {
          }
          class Qwen2Tokenizer extends PreTrainedTokenizer {
          }
          class GemmaTokenizer extends PreTrainedTokenizer {
          }
          class Grok1Tokenizer extends PreTrainedTokenizer {
          }
          function _build_translation_inputs(self2, raw_inputs, tokenizer_options, generate_kwargs) {
            if (!("language_codes" in self2) || !Array.isArray(self2.language_codes)) {
              throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");
            }
            if (!("languageRegex" in self2) || !(self2.languageRegex instanceof RegExp)) {
              throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");
            }
            if (!("lang_to_token" in self2) || typeof self2.lang_to_token !== "function") {
              throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");
            }
            const src_lang_token = generate_kwargs.src_lang;
            const tgt_lang_token = generate_kwargs.tgt_lang;
            if (!self2.language_codes.includes(tgt_lang_token)) {
              throw new Error(`Target language code "${tgt_lang_token}" is not valid. Must be one of: {${self2.language_codes.join(", ")}}`);
            }
            if (src_lang_token !== void 0) {
              if (!self2.language_codes.includes(src_lang_token)) {
                throw new Error(`Source language code "${src_lang_token}" is not valid. Must be one of: {${self2.language_codes.join(", ")}}`);
              }
              for (const item of self2.post_processor.config.single) {
                if ("SpecialToken" in item && self2.languageRegex.test(item.SpecialToken.id)) {
                  item.SpecialToken.id = self2.lang_to_token(src_lang_token);
                  break;
                }
              }
            }
            generate_kwargs.forced_bos_token_id = self2.model.convert_tokens_to_ids([self2.lang_to_token(tgt_lang_token)])[0];
            return self2._call(raw_inputs, tokenizer_options);
          }
          class NllbTokenizer extends PreTrainedTokenizer {
            constructor(tokenizerJSON, tokenizerConfig) {
              super(tokenizerJSON, tokenizerConfig);
              this.languageRegex = /^[a-z]{3}_[A-Z][a-z]{3}$/;
              this.language_codes = this.special_tokens.filter((x2) => this.languageRegex.test(x2));
              this.lang_to_token = (x2) => x2;
            }
            /**
             * Helper function to build translation inputs for an `NllbTokenizer`.
             * @param {string|string[]} raw_inputs The text to tokenize.
             * @param {Object} tokenizer_options Options to be sent to the tokenizer
             * @param {Object} generate_kwargs Generation options.
             * @returns {Object} Object to be passed to the model.
             */
            _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {
              return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);
            }
          }
          class M2M100Tokenizer extends PreTrainedTokenizer {
            constructor(tokenizerJSON, tokenizerConfig) {
              super(tokenizerJSON, tokenizerConfig);
              this.languageRegex = /^__[a-z]{2,3}__$/;
              this.language_codes = this.special_tokens.filter((x2) => this.languageRegex.test(x2)).map((x2) => x2.slice(2, -2));
              this.lang_to_token = (x2) => `__${x2}__`;
            }
            /**
             * Helper function to build translation inputs for an `M2M100Tokenizer`.
             * @param {string|string[]} raw_inputs The text to tokenize.
             * @param {Object} tokenizer_options Options to be sent to the tokenizer
             * @param {Object} generate_kwargs Generation options.
             * @returns {Object} Object to be passed to the model.
             */
            _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {
              return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);
            }
          }
          class WhisperTokenizer extends PreTrainedTokenizer {
            get timestamp_begin() {
              return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0] + 1;
            }
            /**
             * Decodes automatic speech recognition (ASR) sequences.
             * @param {Array<{tokens: bigint[], token_timestamps?: number[], stride: number[]}>} sequences The sequences to decode.
             * @param {Object} options The options to use for decoding.
             * @returns {Array<string|{chunks?: undefined|Array<{language: string|null, timestamp: Array<number|null>, text: string}>}>} The decoded sequences.
             */
            _decode_asr(sequences, {
              return_timestamps = false,
              return_language = false,
              time_precision = null,
              force_full_sequences = true
            } = {}) {
              if (time_precision === null) {
                throw Error("Must specify time_precision");
              }
              let last_language = null;
              const returnWordTimestamps = return_timestamps === "word";
              function new_chunk() {
                return { "language": last_language, "timestamp": [null, null], "text": "" };
              }
              const chunks = [];
              let chunk = new_chunk();
              let time_offset = 0;
              const timestamp_begin = this.timestamp_begin;
              const total_timestamp_tokens = 1500;
              const timestamp_end = timestamp_begin + total_timestamp_tokens;
              let previous_tokens = [];
              let previous_token_timestamps = [];
              let skip = false;
              let right_stride_start = null;
              const all_special_ids = new Set(this.all_special_ids);
              for (const output of sequences) {
                const token_ids = output.tokens;
                const token_timestamps = returnWordTimestamps ? output.token_timestamps : null;
                let last_timestamp = null;
                let first_timestamp = timestamp_begin;
                if ("stride" in output) {
                  const [chunk_len, stride_left, stride_right] = output.stride;
                  time_offset -= stride_left;
                  right_stride_start = chunk_len - stride_right;
                  if (stride_left) {
                    first_timestamp = stride_left / time_precision + timestamp_begin;
                  }
                  if (stride_right) {
                    for (let i = token_ids.length - 1; i >= 0; --i) {
                      const token = Number(token_ids[i]);
                      if (token >= timestamp_begin) {
                        if (last_timestamp !== null && (token - timestamp_begin) * time_precision < right_stride_start) {
                          break;
                        }
                        last_timestamp = token;
                      }
                    }
                  }
                }
                let current_tokens = [];
                let current_token_timestamps = [];
                for (let i = 0; i < token_ids.length; ++i) {
                  const token = Number(token_ids[i]);
                  if (all_special_ids.has(token)) {
                    const text = this.decode([token]);
                    const language = _models_whisper_common_whisper_js__WEBPACK_IMPORTED_MODULE_7__.WHISPER_LANGUAGE_MAPPING.get(text.slice(2, -2));
                    if (language !== void 0) {
                      if (last_language !== null && language !== last_language && !return_timestamps) {
                        previous_tokens.push(current_tokens);
                        const resolved_tokens = this.findLongestCommonSequence(previous_tokens)[0];
                        const resolved_text = this.decode(resolved_tokens);
                        chunk.text = resolved_text;
                        chunks.push(chunk);
                        previous_tokens = [];
                        current_tokens = [];
                        chunk = new_chunk();
                      }
                      last_language = chunk.language = language;
                    } else {
                    }
                  } else if (token >= timestamp_begin && token <= timestamp_end) {
                    const time = (token - timestamp_begin) * time_precision + time_offset;
                    const rounded_time = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.round)(time, 2);
                    if (last_timestamp !== null && token >= last_timestamp) {
                      skip = true;
                    } else if (skip || previous_tokens.length > 0 && token < first_timestamp) {
                      skip = false;
                    } else if (chunk.timestamp[0] === null) {
                      chunk.timestamp[0] = rounded_time;
                    } else {
                      if (rounded_time === chunk.timestamp[0]) {
                      } else {
                        chunk.timestamp[1] = rounded_time;
                        previous_tokens.push(current_tokens);
                        if (returnWordTimestamps) {
                          previous_token_timestamps.push(current_token_timestamps);
                        }
                        const [resolved_tokens, resolved_token_timestamps] = this.findLongestCommonSequence(
                          previous_tokens,
                          previous_token_timestamps
                        );
                        const resolved_text = this.decode(resolved_tokens);
                        chunk.text = resolved_text;
                        if (returnWordTimestamps) {
                          chunk.words = this.collateWordTimestamps(
                            resolved_tokens,
                            resolved_token_timestamps,
                            last_language
                          );
                        }
                        chunks.push(chunk);
                        previous_tokens = [];
                        current_tokens = [];
                        previous_token_timestamps = [];
                        current_token_timestamps = [];
                        chunk = new_chunk();
                      }
                    }
                  } else {
                    current_tokens.push(token);
                    if (returnWordTimestamps) {
                      let start_time = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.round)(token_timestamps[i] + time_offset, 2);
                      let end_time;
                      if (i + 1 < token_timestamps.length) {
                        end_time = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.round)(token_timestamps[i + 1] + time_offset, 2);
                        const decoded_text = this.decode([token]);
                        if (PUNCTUATION_ONLY_REGEX.test(decoded_text)) {
                          end_time = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.round)(Math.min(start_time + time_precision, end_time), 2);
                        }
                      } else {
                        end_time = null;
                      }
                      current_token_timestamps.push([start_time, end_time]);
                    }
                  }
                }
                if ("stride" in output) {
                  const [chunk_len, stride_left, stride_right] = output.stride;
                  time_offset += chunk_len - stride_right;
                }
                if (current_tokens.length > 0) {
                  previous_tokens.push(current_tokens);
                  if (returnWordTimestamps) {
                    previous_token_timestamps.push(current_token_timestamps);
                  }
                } else if (previous_tokens.every((p) => p.length === 0)) {
                  chunk = new_chunk();
                  previous_tokens = [];
                  current_tokens = [];
                  previous_token_timestamps = [];
                  current_token_timestamps = [];
                }
              }
              if (previous_tokens.length > 0) {
                if (force_full_sequences && return_timestamps) {
                  throw new Error(
                    "Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation."
                  );
                }
                const [resolved_tokens, resolved_token_timestamps] = this.findLongestCommonSequence(previous_tokens, previous_token_timestamps);
                const resolved_text = this.decode(resolved_tokens);
                chunk.text = resolved_text;
                if (returnWordTimestamps) {
                  chunk.words = this.collateWordTimestamps(
                    resolved_tokens,
                    resolved_token_timestamps,
                    last_language
                  );
                }
                chunks.push(chunk);
              }
              let optional = /* @__PURE__ */ Object.create(null);
              const full_text = chunks.map((chunk2) => chunk2.text).join("");
              if (return_timestamps || return_language) {
                for (let i = 0; i < chunks.length; ++i) {
                  const chunk2 = chunks[i];
                  if (!return_timestamps) {
                    delete chunk2["timestamp"];
                  }
                  if (!return_language) {
                    delete chunk2["language"];
                  }
                }
                if (returnWordTimestamps) {
                  const new_chunks = [];
                  for (const chunk2 of chunks) {
                    for (const word of chunk2.words) {
                      new_chunks.push(word);
                    }
                  }
                  optional = { "chunks": new_chunks };
                } else {
                  optional = { "chunks": chunks };
                }
              }
              return [full_text, optional];
            }
            /**
             * Finds the longest common sequence among the provided sequences.
             * @param {number[][]} sequences An array of sequences of token ids to compare.
             * @returns {number[][]} The longest common sequence found.
             * @throws {Error} If there is a bug within the function.
             * @private
             */
            findLongestCommonSequence(sequences, token_timestamp_sequences = null) {
              let leftSequence = sequences[0];
              let leftLength = leftSequence.length;
              let totalSequence = [];
              const use_token_timestamp_sequences = Array.isArray(token_timestamp_sequences) && token_timestamp_sequences.length > 0;
              let total_token_timestamp_sequence = use_token_timestamp_sequences ? [] : null;
              let left_token_timestamp_sequence = use_token_timestamp_sequences ? token_timestamp_sequences[0] : null;
              for (let i = 1; i < sequences.length; ++i) {
                const rightSequence = sequences[i];
                let max = 0;
                let maxIndices = [leftLength, leftLength, 0, 0];
                const rightLength = rightSequence.length;
                for (let j = 1; j < leftLength + rightLength; ++j) {
                  const leftStart2 = Math.max(0, leftLength - j);
                  const leftStop2 = Math.min(leftLength, leftLength + rightLength - j);
                  const left = leftSequence.slice(leftStart2, leftStop2);
                  const rightStart2 = Math.max(0, j - leftLength);
                  const rightStop2 = Math.min(rightLength, j);
                  const right = rightSequence.slice(rightStart2, rightStop2);
                  if (left.length !== right.length) {
                    throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");
                  }
                  let matches;
                  if (use_token_timestamp_sequences) {
                    matches = left.filter((elem, idx) => elem === right[idx] && left_token_timestamp_sequence[leftStart2 + idx] <= token_timestamp_sequences[i][rightStart2 + idx]).length;
                  } else {
                    matches = left.filter((elem, idx) => elem === right[idx]).length;
                  }
                  const eps = j / 1e4;
                  const matching = matches / j + eps;
                  if (matches > 1 && matching > max) {
                    max = matching;
                    maxIndices = [leftStart2, leftStop2, rightStart2, rightStop2];
                  }
                }
                const [leftStart, leftStop, rightStart, rightStop] = maxIndices;
                const leftMid = Math.floor((leftStop + leftStart) / 2);
                const rightMid = Math.floor((rightStop + rightStart) / 2);
                totalSequence.push(...leftSequence.slice(0, leftMid));
                leftSequence = rightSequence.slice(rightMid);
                leftLength = leftSequence.length;
                if (use_token_timestamp_sequences) {
                  total_token_timestamp_sequence.push(...left_token_timestamp_sequence.slice(0, leftMid));
                  left_token_timestamp_sequence = token_timestamp_sequences[i].slice(rightMid);
                }
              }
              totalSequence.push(...leftSequence);
              if (use_token_timestamp_sequences) {
                total_token_timestamp_sequence.push(...left_token_timestamp_sequence);
                return [totalSequence, total_token_timestamp_sequence];
              } else {
                return [totalSequence, []];
              }
            }
            /** @private */
            collateWordTimestamps(tokens, token_timestamps, language) {
              const [words, _2, token_indices] = this.combineTokensIntoWords(tokens, language);
              const timings = [];
              for (let i = 0; i < words.length; ++i) {
                const indices = token_indices[i];
                timings.push({
                  text: words[i],
                  timestamp: [
                    token_timestamps[indices.at(0)][0],
                    token_timestamps[indices.at(-1)][1]
                  ]
                });
              }
              return timings;
            }
            /**
             * Groups tokens by word. Returns a tuple containing a list of strings with the words,
             * and a list of `token_id` sequences with the tokens making up each word.
             * @param {number[]} tokens 
             * @param {string} [language] 
             * @param {string} prepend_punctionations 
             * @param {string} append_punctuations 
             * 
             * @private
             */
            combineTokensIntoWords(tokens, language, prepend_punctionations = `"'\u201C\xA1\xBF([{-`, append_punctuations = `"'.\u3002,\uFF0C!\uFF01?\uFF1F:\uFF1A\u201D)]}\u3001`) {
              language = language ?? "english";
              let words, word_tokens, token_indices;
              if (["chinese", "japanese", "thai", "lao", "myanmar"].includes(language)) {
                [words, word_tokens, token_indices] = this.splitTokensOnUnicode(tokens);
              } else {
                [words, word_tokens, token_indices] = this.splitTokensOnSpaces(tokens);
              }
              return this.mergePunctuations(words, word_tokens, token_indices, prepend_punctionations, append_punctuations);
            }
            /** @type {PreTrainedTokenizer['decode']} */
            decode(token_ids, decode_args) {
              let text;
              if (decode_args?.decode_with_timestamps) {
                if (token_ids instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor) {
                  token_ids = prepareTensorForDecode(token_ids);
                }
                text = this.decodeWithTimestamps(token_ids, decode_args);
              } else {
                text = super.decode(token_ids, decode_args);
              }
              return text;
            }
            /**
             * @param {number[]|bigint[]} token_ids List of token IDs to decode.
             * @param {Object} decode_args Optional arguments for decoding
             * @private
             */
            decodeWithTimestamps(token_ids, decode_args) {
              const time_precision = decode_args?.time_precision ?? 0.02;
              const timestamp_begin = Array.from(this.all_special_ids).at(-1) + 1;
              let outputs = [[]];
              for (let token of token_ids) {
                token = Number(token);
                if (token >= timestamp_begin) {
                  const timestamp = ((token - timestamp_begin) * time_precision).toFixed(2);
                  outputs.push(`<|${timestamp}|>`);
                  outputs.push([]);
                } else {
                  outputs[outputs.length - 1].push(token);
                }
              }
              outputs = outputs.map(
                (s) => typeof s === "string" ? s : super.decode(s, decode_args)
              );
              return outputs.join("");
            }
            /**
             * Combine tokens into words by splitting at any position where the tokens are decoded as valid unicode points.
             * @param {number[]} tokens 
             * @returns {*}
             * @private
             */
            splitTokensOnUnicode(tokens) {
              const decoded_full = this.decode(tokens, {
                // @ts-ignore
                decode_with_timestamps: true
              });
              const replacement_char = "\uFFFD";
              const words = [];
              const word_tokens = [];
              const token_indices = [];
              let current_tokens = [];
              let current_indices = [];
              let unicode_offset = 0;
              for (let token_idx = 0; token_idx < tokens.length; ++token_idx) {
                const token = tokens[token_idx];
                current_tokens.push(token);
                current_indices.push(token_idx);
                const decoded = this.decode(current_tokens, {
                  // @ts-ignore
                  decode_with_timestamps: true
                });
                if (!decoded.includes(replacement_char) || decoded_full[unicode_offset + decoded.indexOf(replacement_char)] === replacement_char) {
                  words.push(decoded);
                  word_tokens.push(current_tokens);
                  token_indices.push(current_indices);
                  current_tokens = [];
                  current_indices = [];
                  unicode_offset += decoded.length;
                }
              }
              return [words, word_tokens, token_indices];
            }
            /**
             * Combine tokens into words by splitting at whitespace and punctuation tokens.
             * @param {number[]} tokens 
             * @private
             */
            splitTokensOnSpaces(tokens) {
              const [subwords, subword_tokens_list, subword_indices_list] = this.splitTokensOnUnicode(tokens);
              const words = [];
              const word_tokens = [];
              const token_indices = [];
              const punctuationRegex = new RegExp(`^[${PUNCTUATION_REGEX}]$`, "gu");
              for (let i = 0; i < subwords.length; ++i) {
                const subword = subwords[i];
                const subword_tokens = subword_tokens_list[i];
                const subword_indices = subword_indices_list[i];
                const special = subword_tokens[0] >= this.model.tokens_to_ids.get("<|endoftext|>");
                const with_space = subword.startsWith(" ");
                const trimmed = subword.trim();
                const punctuation = punctuationRegex.test(trimmed);
                if (special || with_space || punctuation || words.length === 0) {
                  words.push(subword);
                  word_tokens.push(subword_tokens);
                  token_indices.push(subword_indices);
                } else {
                  const ix = words.length - 1;
                  words[ix] += subword;
                  word_tokens[ix].push(...subword_tokens);
                  token_indices[ix].push(...subword_indices);
                }
              }
              return [words, word_tokens, token_indices];
            }
            /**
             * Merges punctuation tokens with neighboring words.
             * @param {string[]} words 
             * @param {number[][]} tokens 
             * @param {number[][]} indices 
             * @param {string} prepended 
             * @param {string} appended 
             * @private
             */
            mergePunctuations(words, tokens, indices, prepended, appended) {
              const newWords = structuredClone(words);
              const newTokens = structuredClone(tokens);
              const newIndices = structuredClone(indices);
              let i = newWords.length - 2;
              let j = newWords.length - 1;
              while (i >= 0) {
                if (newWords[i].startsWith(" ") && prepended.includes(newWords[i].trim())) {
                  newWords[j] = newWords[i] + newWords[j];
                  newTokens[j] = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(newTokens[i], newTokens[j]);
                  newIndices[j] = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(newIndices[i], newIndices[j]);
                  newWords[i] = "";
                  newTokens[i] = [];
                  newIndices[i] = [];
                } else {
                  j = i;
                }
                --i;
              }
              i = 0;
              j = 1;
              while (j < newWords.length) {
                if (!newWords[i].endsWith(" ") && appended.includes(newWords[j])) {
                  newWords[i] += newWords[j];
                  newTokens[i] = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(newTokens[i], newTokens[j]);
                  newIndices[i] = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(newIndices[i], newIndices[j]);
                  newWords[j] = "";
                  newTokens[j] = [];
                  newIndices[j] = [];
                } else {
                  i = j;
                }
                ++j;
              }
              return [
                newWords.filter((x2) => x2),
                newTokens.filter((x2) => x2.length > 0),
                newIndices.filter((x2) => x2.length > 0)
              ];
            }
          }
          class CodeGenTokenizer extends PreTrainedTokenizer {
          }
          class CLIPTokenizer extends PreTrainedTokenizer {
          }
          class SiglipTokenizer extends PreTrainedTokenizer {
          }
          class MarianTokenizer extends PreTrainedTokenizer {
            /**
             * Create a new MarianTokenizer instance.
             * @param {Object} tokenizerJSON The JSON of the tokenizer.
             * @param {Object} tokenizerConfig The config of the tokenizer.
             */
            constructor(tokenizerJSON, tokenizerConfig) {
              super(tokenizerJSON, tokenizerConfig);
              this.languageRegex = /^(>>\w+<<)\s*/g;
              this.supported_language_codes = this.model.vocab.filter(
                (x2) => this.languageRegex.test(x2)
              );
              console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.');
            }
            /**
             * Encodes a single text. Overriding this method is necessary since the language codes
             * must be removed before encoding with sentencepiece model.
             * @see https://github.com/huggingface/transformers/blob/12d51db243a00726a548a43cc333390ebae731e3/src/transformers/models/marian/tokenization_marian.py#L204-L213
             *
             * @param {string|null} text The text to encode.
             * @returns {Array} The encoded tokens.
             */
            _encode_text(text) {
              if (text === null)
                return null;
              const [matchInfo, ...remainder] = text.trim().split(this.languageRegex);
              if (remainder.length === 0) {
                return super._encode_text(matchInfo);
              } else if (remainder.length === 2) {
                const [language, text2] = remainder;
                if (!this.supported_language_codes.includes(language)) {
                  console.warn(`Unsupported language code "${language}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`);
                }
                return (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)([language], super._encode_text(text2));
              }
            }
          }
          class Wav2Vec2CTCTokenizer extends PreTrainedTokenizer {
          }
          class BlenderbotTokenizer extends PreTrainedTokenizer {
          }
          class BlenderbotSmallTokenizer extends PreTrainedTokenizer {
          }
          class SpeechT5Tokenizer extends PreTrainedTokenizer {
          }
          class NougatTokenizer extends PreTrainedTokenizer {
          }
          class VitsTokenizer extends PreTrainedTokenizer {
            constructor(tokenizerJSON, tokenizerConfig) {
              super(tokenizerJSON, tokenizerConfig);
              this.decoder = new VitsDecoder({});
            }
          }
          class CohereTokenizer extends PreTrainedTokenizer {
          }
          class MgpstrTokenizer extends PreTrainedTokenizer {
          }
          class AutoTokenizer {
            /**
             * Instantiate one of the tokenizer classes of the library from a pretrained model.
             * 
             * The tokenizer class to instantiate is selected based on the `tokenizer_class` property of the config object
             * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)
             * 
             * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:
             * - A string, the *model id* of a pretrained tokenizer hosted inside a model repo on huggingface.co.
             *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a
             *   user or organization name, like `dbmdz/bert-base-german-cased`.
             * - A path to a *directory* containing tokenizer files, e.g., `./my_model_directory/`.
             * @param {PretrainedTokenizerOptions} options Additional options for loading the tokenizer.
             * 
             * @returns {Promise<PreTrainedTokenizer>} A new instance of the PreTrainedTokenizer class.
             */
            static async from_pretrained(pretrained_model_name_or_path, {
              progress_callback = null,
              config = null,
              cache_dir = null,
              local_files_only = false,
              revision = "main",
              legacy = null
            } = {}) {
              const [tokenizerJSON, tokenizerConfig] = await loadTokenizer(pretrained_model_name_or_path, {
                progress_callback,
                config,
                cache_dir,
                local_files_only,
                revision,
                legacy
              });
              const tokenizerName = tokenizerConfig.tokenizer_class?.replace(/Fast$/, "") ?? "PreTrainedTokenizer";
              let cls = this.TOKENIZER_CLASS_MAPPING[tokenizerName];
              if (!cls) {
                console.warn(`Unknown tokenizer class "${tokenizerName}", attempting to construct from base class.`);
                cls = PreTrainedTokenizer;
              }
              return new cls(tokenizerJSON, tokenizerConfig);
            }
          }
          __publicField(AutoTokenizer, "TOKENIZER_CLASS_MAPPING", {
            T5Tokenizer,
            DistilBertTokenizer,
            CamembertTokenizer,
            DebertaTokenizer,
            DebertaV2Tokenizer,
            BertTokenizer,
            HerbertTokenizer,
            ConvBertTokenizer,
            RoFormerTokenizer,
            XLMTokenizer,
            ElectraTokenizer,
            MobileBertTokenizer,
            SqueezeBertTokenizer,
            AlbertTokenizer,
            GPT2Tokenizer,
            BartTokenizer,
            MBartTokenizer,
            MBart50Tokenizer,
            RobertaTokenizer,
            WhisperTokenizer,
            CodeGenTokenizer,
            CLIPTokenizer,
            SiglipTokenizer,
            MarianTokenizer,
            BloomTokenizer,
            NllbTokenizer,
            M2M100Tokenizer,
            LlamaTokenizer,
            CodeLlamaTokenizer,
            XLMRobertaTokenizer,
            MPNetTokenizer,
            FalconTokenizer,
            GPTNeoXTokenizer,
            EsmTokenizer,
            Wav2Vec2CTCTokenizer,
            BlenderbotTokenizer,
            BlenderbotSmallTokenizer,
            SpeechT5Tokenizer,
            NougatTokenizer,
            VitsTokenizer,
            Qwen2Tokenizer,
            GemmaTokenizer,
            Grok1Tokenizer,
            CohereTokenizer,
            MgpstrTokenizer,
            // Base case:
            PreTrainedTokenizer
          });
        }
      ),
      /***/
      "./src/utils/audio.js": (
        /*!****************************!*\
          !*** ./src/utils/audio.js ***!
          \****************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            RawAudio: () => (
              /* binding */
              RawAudio
            ),
            /* harmony export */
            hamming: () => (
              /* binding */
              hamming
            ),
            /* harmony export */
            hanning: () => (
              /* binding */
              hanning
            ),
            /* harmony export */
            mel_filter_bank: () => (
              /* binding */
              mel_filter_bank
            ),
            /* harmony export */
            read_audio: () => (
              /* binding */
              read_audio
            ),
            /* harmony export */
            spectrogram: () => (
              /* binding */
              spectrogram
            ),
            /* harmony export */
            window_function: () => (
              /* binding */
              window_function
            )
            /* harmony export */
          });
          var _hub_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ./hub.js */
            "./src/utils/hub.js"
          );
          var _maths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ./maths.js */
            "./src/utils/maths.js"
          );
          var _core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ./core.js */
            "./src/utils/core.js"
          );
          var _env_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ../env.js */
            "./src/env.js"
          );
          var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
            /*! fs */
            "fs"
          );
          var _tensor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
            /*! ./tensor.js */
            "./src/utils/tensor.js"
          );
          async function read_audio(url, sampling_rate) {
            if (typeof AudioContext === "undefined") {
              throw Error(
                "Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing."
              );
            }
            const response = await (await (0, _hub_js__WEBPACK_IMPORTED_MODULE_0__.getFile)(url)).arrayBuffer();
            const audioCTX = new AudioContext({ sampleRate: sampling_rate });
            if (typeof sampling_rate === "undefined") {
              console.warn(`No sampling rate provided, using default of ${audioCTX.sampleRate}Hz.`);
            }
            const decoded = await audioCTX.decodeAudioData(response);
            let audio;
            if (decoded.numberOfChannels === 2) {
              const SCALING_FACTOR = Math.sqrt(2);
              const left = decoded.getChannelData(0);
              const right = decoded.getChannelData(1);
              audio = new Float32Array(left.length);
              for (let i = 0; i < decoded.length; ++i) {
                audio[i] = SCALING_FACTOR * (left[i] + right[i]) / 2;
              }
            } else {
              audio = decoded.getChannelData(0);
            }
            return audio;
          }
          function generalized_cosine_window(M, a_0) {
            if (M < 1) {
              return new Float64Array();
            }
            if (M === 1) {
              return new Float64Array([1]);
            }
            const a_1 = 1 - a_0;
            const factor = 2 * Math.PI / (M - 1);
            const cos_vals = new Float64Array(M);
            for (let i = 0; i < M; ++i) {
              cos_vals[i] = a_0 - a_1 * Math.cos(i * factor);
            }
            return cos_vals;
          }
          function hanning(M) {
            return generalized_cosine_window(M, 0.5);
          }
          function hamming(M) {
            return generalized_cosine_window(M, 0.54);
          }
          const HERTZ_TO_MEL_MAPPING = {
            "htk": (freq) => 2595 * Math.log10(1 + freq / 700),
            "kaldi": (freq) => 1127 * Math.log(1 + freq / 700),
            "slaney": (freq, min_log_hertz = 1e3, min_log_mel = 15, logstep = 27 / Math.log(6.4)) => freq >= min_log_hertz ? min_log_mel + Math.log(freq / min_log_hertz) * logstep : 3 * freq / 200
          };
          function hertz_to_mel(freq, mel_scale = "htk") {
            const fn = HERTZ_TO_MEL_MAPPING[mel_scale];
            if (!fn) {
              throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');
            }
            return typeof freq === "number" ? fn(freq) : freq.map((x2) => fn(x2));
          }
          const MEL_TO_HERTZ_MAPPING = {
            "htk": (mels) => 700 * (10 ** (mels / 2595) - 1),
            "kaldi": (mels) => 700 * (Math.exp(mels / 1127) - 1),
            "slaney": (mels, min_log_hertz = 1e3, min_log_mel = 15, logstep = Math.log(6.4) / 27) => mels >= min_log_mel ? min_log_hertz * Math.exp(logstep * (mels - min_log_mel)) : 200 * mels / 3
          };
          function mel_to_hertz(mels, mel_scale = "htk") {
            const fn = MEL_TO_HERTZ_MAPPING[mel_scale];
            if (!fn) {
              throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');
            }
            return typeof mels === "number" ? fn(mels) : mels.map((x2) => fn(x2));
          }
          function _create_triangular_filter_bank(fft_freqs, filter_freqs) {
            const filter_diff = Float64Array.from(
              { length: filter_freqs.length - 1 },
              (_2, i) => filter_freqs[i + 1] - filter_freqs[i]
            );
            const slopes = Array.from({
              length: fft_freqs.length
            }, () => new Array(filter_freqs.length));
            for (let j = 0; j < fft_freqs.length; ++j) {
              const slope = slopes[j];
              for (let i = 0; i < filter_freqs.length; ++i) {
                slope[i] = filter_freqs[i] - fft_freqs[j];
              }
            }
            const numFreqs = filter_freqs.length - 2;
            const ret = Array.from({ length: numFreqs }, () => new Array(fft_freqs.length));
            for (let j = 0; j < fft_freqs.length; ++j) {
              const slope = slopes[j];
              for (let i = 0; i < numFreqs; ++i) {
                const down = -slope[i] / filter_diff[i];
                const up = slope[i + 2] / filter_diff[i + 1];
                ret[i][j] = Math.max(0, Math.min(down, up));
              }
            }
            return ret;
          }
          function linspace(start, end, num) {
            const step = (end - start) / (num - 1);
            return Float64Array.from({ length: num }, (_2, i) => start + step * i);
          }
          function mel_filter_bank(num_frequency_bins, num_mel_filters, min_frequency, max_frequency, sampling_rate, norm = null, mel_scale = "htk", triangularize_in_mel_space = false) {
            if (norm !== null && norm !== "slaney") {
              throw new Error('norm must be one of null or "slaney"');
            }
            if (num_frequency_bins < 2) {
              throw new Error(`Require num_frequency_bins: ${num_frequency_bins} >= 2`);
            }
            if (min_frequency > max_frequency) {
              throw new Error(`Require min_frequency: ${min_frequency} <= max_frequency: ${max_frequency}`);
            }
            const mel_min = hertz_to_mel(min_frequency, mel_scale);
            const mel_max = hertz_to_mel(max_frequency, mel_scale);
            const mel_freqs = linspace(mel_min, mel_max, num_mel_filters + 2);
            let filter_freqs = mel_to_hertz(mel_freqs, mel_scale);
            let fft_freqs;
            if (triangularize_in_mel_space) {
              const fft_bin_width = sampling_rate / ((num_frequency_bins - 1) * 2);
              fft_freqs = hertz_to_mel(Float64Array.from({ length: num_frequency_bins }, (_2, i) => i * fft_bin_width), mel_scale);
              filter_freqs = mel_freqs;
            } else {
              fft_freqs = linspace(0, Math.floor(sampling_rate / 2), num_frequency_bins);
            }
            const mel_filters = _create_triangular_filter_bank(fft_freqs, filter_freqs);
            if (norm !== null && norm === "slaney") {
              for (let i = 0; i < num_mel_filters; ++i) {
                const filter = mel_filters[i];
                const enorm = 2 / (filter_freqs[i + 2] - filter_freqs[i]);
                for (let j = 0; j < num_frequency_bins; ++j) {
                  filter[j] *= enorm;
                }
              }
            }
            return mel_filters;
          }
          function padReflect(array, left, right) {
            const padded = new array.constructor(array.length + left + right);
            const w2 = array.length - 1;
            for (let i = 0; i < array.length; ++i) {
              padded[left + i] = array[i];
            }
            for (let i = 1; i <= left; ++i) {
              padded[left - i] = array[(0, _core_js__WEBPACK_IMPORTED_MODULE_2__.calculateReflectOffset)(i, w2)];
            }
            for (let i = 1; i <= right; ++i) {
              padded[w2 + left + i] = array[(0, _core_js__WEBPACK_IMPORTED_MODULE_2__.calculateReflectOffset)(w2 - i, w2)];
            }
            return padded;
          }
          function _db_conversion_helper(spectrogram2, factor, reference, min_value, db_range) {
            if (reference <= 0) {
              throw new Error("reference must be greater than zero");
            }
            if (min_value <= 0) {
              throw new Error("min_value must be greater than zero");
            }
            reference = Math.max(min_value, reference);
            const logReference = Math.log10(reference);
            for (let i = 0; i < spectrogram2.length; ++i) {
              spectrogram2[i] = factor * Math.log10(Math.max(min_value, spectrogram2[i]) - logReference);
            }
            if (db_range !== null) {
              if (db_range <= 0) {
                throw new Error("db_range must be greater than zero");
              }
              const maxValue = (0, _maths_js__WEBPACK_IMPORTED_MODULE_1__.max)(spectrogram2)[0] - db_range;
              for (let i = 0; i < spectrogram2.length; ++i) {
                spectrogram2[i] = Math.max(spectrogram2[i], maxValue);
              }
            }
            return spectrogram2;
          }
          function amplitude_to_db(spectrogram2, reference = 1, min_value = 1e-5, db_range = null) {
            return _db_conversion_helper(spectrogram2, 20, reference, min_value, db_range);
          }
          function power_to_db(spectrogram2, reference = 1, min_value = 1e-10, db_range = null) {
            return _db_conversion_helper(spectrogram2, 10, reference, min_value, db_range);
          }
          async function spectrogram(waveform, window2, frame_length, hop_length, {
            fft_length = null,
            power = 1,
            center = true,
            pad_mode = "reflect",
            onesided = true,
            preemphasis = null,
            mel_filters = null,
            mel_floor = 1e-10,
            log_mel = null,
            reference = 1,
            min_value = 1e-10,
            db_range = null,
            remove_dc_offset = null,
            // Custom parameters for efficiency reasons
            min_num_frames = null,
            max_num_frames = null,
            do_pad = true,
            transpose = false
          } = {}) {
            const window_length = window2.length;
            if (fft_length === null) {
              fft_length = frame_length;
            }
            if (frame_length > fft_length) {
              throw Error(`frame_length (${frame_length}) may not be larger than fft_length (${fft_length})`);
            }
            if (window_length !== frame_length) {
              throw new Error(`Length of the window (${window_length}) must equal frame_length (${frame_length})`);
            }
            if (hop_length <= 0) {
              throw new Error("hop_length must be greater than zero");
            }
            if (power === null && mel_filters !== null) {
              throw new Error(
                "You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue."
              );
            }
            if (center) {
              if (pad_mode !== "reflect") {
                throw new Error(`pad_mode="${pad_mode}" not implemented yet.`);
              }
              const half_window = Math.floor((fft_length - 1) / 2) + 1;
              waveform = padReflect(waveform, half_window, half_window);
            }
            let num_frames = Math.floor(1 + Math.floor((waveform.length - frame_length) / hop_length));
            if (min_num_frames !== null && num_frames < min_num_frames) {
              num_frames = min_num_frames;
            }
            const num_frequency_bins = onesided ? Math.floor(fft_length / 2) + 1 : fft_length;
            let d1 = num_frames;
            let d1Max = num_frames;
            if (max_num_frames !== null) {
              if (max_num_frames > num_frames) {
                if (do_pad) {
                  d1Max = max_num_frames;
                }
              } else {
                d1Max = d1 = max_num_frames;
              }
            }
            const fft = new _maths_js__WEBPACK_IMPORTED_MODULE_1__.FFT(fft_length);
            const inputBuffer = new Float64Array(fft_length);
            const outputBuffer = new Float64Array(fft.outputBufferSize);
            const transposedMagnitudeData = new Float32Array(num_frequency_bins * d1Max);
            for (let i = 0; i < d1; ++i) {
              const offset = i * hop_length;
              const buffer_size = Math.min(waveform.length - offset, frame_length);
              if (buffer_size !== frame_length) {
                inputBuffer.fill(0, 0, frame_length);
              }
              for (let j = 0; j < buffer_size; ++j) {
                inputBuffer[j] = waveform[offset + j];
              }
              if (remove_dc_offset) {
                let sum = 0;
                for (let j = 0; j < buffer_size; ++j) {
                  sum += inputBuffer[j];
                }
                const mean = sum / buffer_size;
                for (let j = 0; j < buffer_size; ++j) {
                  inputBuffer[j] -= mean;
                }
              }
              if (preemphasis !== null) {
                for (let j = buffer_size - 1; j >= 1; --j) {
                  inputBuffer[j] -= preemphasis * inputBuffer[j - 1];
                }
                inputBuffer[0] *= 1 - preemphasis;
              }
              for (let j = 0; j < window2.length; ++j) {
                inputBuffer[j] *= window2[j];
              }
              fft.realTransform(outputBuffer, inputBuffer);
              for (let j = 0; j < num_frequency_bins; ++j) {
                const j2 = j << 1;
                transposedMagnitudeData[j * d1Max + i] = outputBuffer[j2] ** 2 + outputBuffer[j2 + 1] ** 2;
              }
            }
            if (power !== null && power !== 2) {
              const pow = 2 / power;
              for (let i = 0; i < transposedMagnitudeData.length; ++i) {
                transposedMagnitudeData[i] **= pow;
              }
            }
            const num_mel_filters = mel_filters.length;
            let mel_spec = await (0, _tensor_js__WEBPACK_IMPORTED_MODULE_5__.matmul)(
              // TODO: Make `mel_filters` a Tensor during initialization
              new _tensor_js__WEBPACK_IMPORTED_MODULE_5__.Tensor("float32", mel_filters.flat(), [num_mel_filters, num_frequency_bins]),
              new _tensor_js__WEBPACK_IMPORTED_MODULE_5__.Tensor("float32", transposedMagnitudeData, [num_frequency_bins, d1Max])
            );
            if (transpose) {
              mel_spec = mel_spec.transpose(1, 0);
            }
            const mel_spec_data = (
              /** @type {Float32Array} */
              mel_spec.data
            );
            for (let i = 0; i < mel_spec_data.length; ++i) {
              mel_spec_data[i] = Math.max(mel_floor, mel_spec_data[i]);
            }
            if (power !== null && log_mel !== null) {
              const o = Math.min(mel_spec_data.length, d1 * num_mel_filters);
              switch (log_mel) {
                case "log":
                  for (let i = 0; i < o; ++i) {
                    mel_spec_data[i] = Math.log(mel_spec_data[i]);
                  }
                  break;
                case "log10":
                  for (let i = 0; i < o; ++i) {
                    mel_spec_data[i] = Math.log10(mel_spec_data[i]);
                  }
                  break;
                case "dB":
                  if (power === 1) {
                    amplitude_to_db(mel_spec_data, reference, min_value, db_range);
                  } else if (power === 2) {
                    power_to_db(mel_spec_data, reference, min_value, db_range);
                  } else {
                    throw new Error(`Cannot use log_mel option '${log_mel}' with power ${power}`);
                  }
                  break;
                default:
                  throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${log_mel}'`);
              }
            }
            return mel_spec;
          }
          function window_function(window_length, name, {
            periodic = true,
            frame_length = null,
            center = true
          } = {}) {
            const length = periodic ? window_length + 1 : window_length;
            let window2;
            switch (name) {
              case "boxcar":
                window2 = new Float64Array(length).fill(1);
                break;
              case "hann":
              case "hann_window":
                window2 = hanning(length);
                break;
              case "hamming":
                window2 = hamming(length);
                break;
              case "povey":
                window2 = hanning(length).map((x2) => Math.pow(x2, 0.85));
                break;
              default:
                throw new Error(`Unknown window type ${name}.`);
            }
            if (periodic) {
              window2 = window2.subarray(0, window_length);
            }
            if (frame_length === null) {
              return window2;
            }
            if (window_length > frame_length) {
              throw new Error(`Length of the window (${window_length}) may not be larger than frame_length (${frame_length})`);
            }
            return window2;
          }
          function encodeWAV(samples, rate) {
            let offset = 44;
            const buffer = new ArrayBuffer(offset + samples.length * 4);
            const view = new DataView(buffer);
            writeString(view, 0, "RIFF");
            view.setUint32(4, 36 + samples.length * 4, true);
            writeString(view, 8, "WAVE");
            writeString(view, 12, "fmt ");
            view.setUint32(16, 16, true);
            view.setUint16(20, 3, true);
            view.setUint16(22, 1, true);
            view.setUint32(24, rate, true);
            view.setUint32(28, rate * 4, true);
            view.setUint16(32, 4, true);
            view.setUint16(34, 32, true);
            writeString(view, 36, "data");
            view.setUint32(40, samples.length * 4, true);
            for (let i = 0; i < samples.length; ++i, offset += 4) {
              view.setFloat32(offset, samples[i], true);
            }
            return buffer;
          }
          function writeString(view, offset, string) {
            for (let i = 0; i < string.length; ++i) {
              view.setUint8(offset + i, string.charCodeAt(i));
            }
          }
          class RawAudio {
            /**
             * Create a new `RawAudio` object.
             * @param {Float32Array} audio Audio data
             * @param {number} sampling_rate Sampling rate of the audio data
             */
            constructor(audio, sampling_rate) {
              this.audio = audio;
              this.sampling_rate = sampling_rate;
            }
            /**
             * Convert the audio to a wav file buffer.
             * @returns {ArrayBuffer} The WAV file.
             */
            toWav() {
              return encodeWAV(this.audio, this.sampling_rate);
            }
            /**
             * Convert the audio to a blob.
             * @returns {Blob}
             */
            toBlob() {
              const wav = this.toWav();
              const blob = new Blob([wav], { type: "audio/wav" });
              return blob;
            }
            /**
             * Save the audio to a wav file.
             * @param {string} path
             */
            async save(path) {
              let fn;
              if (_env_js__WEBPACK_IMPORTED_MODULE_3__.apis.IS_BROWSER_ENV) {
                if (_env_js__WEBPACK_IMPORTED_MODULE_3__.apis.IS_WEBWORKER_ENV) {
                  throw new Error("Unable to save a file from a Web Worker.");
                }
                fn = _core_js__WEBPACK_IMPORTED_MODULE_2__.saveBlob;
              } else if (_env_js__WEBPACK_IMPORTED_MODULE_3__.apis.IS_FS_AVAILABLE) {
                fn = async (path2, blob) => {
                  let buffer = await blob.arrayBuffer();
                  fs__WEBPACK_IMPORTED_MODULE_4__["default"].writeFileSync(path2, Buffer.from(buffer));
                };
              } else {
                throw new Error("Unable to save because filesystem is disabled in this environment.");
              }
              await fn(path, this.toBlob());
            }
          }
        }
      ),
      /***/
      "./src/utils/constants.js": (
        /*!********************************!*\
          !*** ./src/utils/constants.js ***!
          \********************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            CHAT_TEMPLATE_NAME: () => (
              /* binding */
              CHAT_TEMPLATE_NAME
            ),
            /* harmony export */
            CONFIG_NAME: () => (
              /* binding */
              CONFIG_NAME
            ),
            /* harmony export */
            FEATURE_EXTRACTOR_NAME: () => (
              /* binding */
              FEATURE_EXTRACTOR_NAME
            ),
            /* harmony export */
            GENERATION_CONFIG_NAME: () => (
              /* binding */
              GENERATION_CONFIG_NAME
            ),
            /* harmony export */
            GITHUB_ISSUE_URL: () => (
              /* binding */
              GITHUB_ISSUE_URL
            ),
            /* harmony export */
            IMAGE_PROCESSOR_NAME: () => (
              /* binding */
              IMAGE_PROCESSOR_NAME
            ),
            /* harmony export */
            PROCESSOR_NAME: () => (
              /* binding */
              PROCESSOR_NAME
            )
            /* harmony export */
          });
          const GITHUB_ISSUE_URL = "https://github.com/huggingface/transformers.js/issues/new/choose";
          const CONFIG_NAME = "config.json";
          const FEATURE_EXTRACTOR_NAME = "preprocessor_config.json";
          const IMAGE_PROCESSOR_NAME = FEATURE_EXTRACTOR_NAME;
          const PROCESSOR_NAME = "processor_config.json";
          const CHAT_TEMPLATE_NAME = "chat_template.json";
          const GENERATION_CONFIG_NAME = "generation_config.json";
        }
      ),
      /***/
      "./src/utils/core.js": (
        /*!***************************!*\
          !*** ./src/utils/core.js ***!
          \***************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            calculateDimensions: () => (
              /* binding */
              calculateDimensions
            ),
            /* harmony export */
            calculateReflectOffset: () => (
              /* binding */
              calculateReflectOffset
            ),
            /* harmony export */
            count: () => (
              /* binding */
              count
            ),
            /* harmony export */
            dispatchCallback: () => (
              /* binding */
              dispatchCallback
            ),
            /* harmony export */
            escapeRegExp: () => (
              /* binding */
              escapeRegExp
            ),
            /* harmony export */
            isIntegralNumber: () => (
              /* binding */
              isIntegralNumber
            ),
            /* harmony export */
            isNullishDimension: () => (
              /* binding */
              isNullishDimension
            ),
            /* harmony export */
            isTypedArray: () => (
              /* binding */
              isTypedArray
            ),
            /* harmony export */
            len: () => (
              /* binding */
              len
            ),
            /* harmony export */
            mergeArrays: () => (
              /* binding */
              mergeArrays
            ),
            /* harmony export */
            pick: () => (
              /* binding */
              pick
            ),
            /* harmony export */
            pop: () => (
              /* binding */
              pop
            ),
            /* harmony export */
            product: () => (
              /* binding */
              product
            ),
            /* harmony export */
            reverseDictionary: () => (
              /* binding */
              reverseDictionary
            ),
            /* harmony export */
            saveBlob: () => (
              /* binding */
              saveBlob
            )
            /* harmony export */
          });
          function dispatchCallback(progress_callback, data) {
            if (progress_callback)
              progress_callback(data);
          }
          function reverseDictionary(data) {
            return Object.fromEntries(Object.entries(data).map(([key, value]) => [value, key]));
          }
          function escapeRegExp(string) {
            return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
          }
          function isTypedArray(val) {
            return val?.prototype?.__proto__?.constructor?.name === "TypedArray";
          }
          function isIntegralNumber(x2) {
            return Number.isInteger(x2) || typeof x2 === "bigint";
          }
          function isNullishDimension(x2) {
            return x2 === null || x2 === void 0 || x2 === -1;
          }
          function calculateDimensions(arr) {
            const dimensions = [];
            let current = arr;
            while (Array.isArray(current)) {
              dimensions.push(current.length);
              current = current[0];
            }
            return dimensions;
          }
          function pop(obj, key, defaultValue = void 0) {
            const value = obj[key];
            if (value !== void 0) {
              delete obj[key];
              return value;
            }
            if (defaultValue === void 0) {
              throw Error(`Key ${key} does not exist in object.`);
            }
            return defaultValue;
          }
          function mergeArrays(...arrs) {
            return Array.prototype.concat.apply([], arrs);
          }
          function product(...a) {
            return a.reduce((a2, b) => a2.flatMap((d) => b.map((e) => [d, e])));
          }
          function calculateReflectOffset(i, w2) {
            return Math.abs((i + w2) % (2 * w2) - w2);
          }
          function saveBlob(path, blob) {
            const dataURL = URL.createObjectURL(blob);
            const downloadLink = document.createElement("a");
            downloadLink.href = dataURL;
            downloadLink.download = path;
            downloadLink.click();
            downloadLink.remove();
            URL.revokeObjectURL(dataURL);
          }
          function pick(o, props) {
            return Object.assign(
              {},
              ...props.map((prop) => {
                if (o[prop] !== void 0) {
                  return { [prop]: o[prop] };
                }
              })
            );
          }
          function len(s) {
            let length = 0;
            for (const c of s)
              ++length;
            return length;
          }
          function count(arr, value) {
            let count2 = 0;
            for (const v of arr) {
              if (v === value)
                ++count2;
            }
            return count2;
          }
        }
      ),
      /***/
      "./src/utils/data-structures.js": (
        /*!**************************************!*\
          !*** ./src/utils/data-structures.js ***!
          \**************************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            CharTrie: () => (
              /* binding */
              CharTrie
            ),
            /* harmony export */
            DictionarySplitter: () => (
              /* binding */
              DictionarySplitter
            ),
            /* harmony export */
            LRUCache: () => (
              /* binding */
              LRUCache
            ),
            /* harmony export */
            PriorityQueue: () => (
              /* binding */
              PriorityQueue
            ),
            /* harmony export */
            TokenLattice: () => (
              /* binding */
              TokenLattice
            )
            /* harmony export */
          });
          class PriorityQueue {
            /**
             * Create a new PriorityQueue.
             * @param {function(any, any): boolean} comparator Comparator function to determine priority. Defaults to a MaxHeap.
             */
            constructor(comparator = (a, b) => a > b, maxSize = Infinity) {
              this._heap = [];
              this._comparator = comparator;
              this._maxSize = maxSize;
            }
            /**
             * The size of the queue
             */
            get size() {
              return this._heap.length;
            }
            /**
             * Check if the queue is empty.
             * @returns {boolean} `true` if the queue is empty, `false` otherwise.
             */
            isEmpty() {
              return this.size === 0;
            }
            /**
             * Return the element with the highest priority in the queue.
             * @returns {any} The highest priority element in the queue.
             */
            peek() {
              return this._heap[0];
            }
            /**
             * Add one or more elements to the queue.
             * @param  {...any} values The values to push into the queue.
             * @returns {number} The new size of the queue.
             */
            push(...values) {
              return this.extend(values);
            }
            /**
             * Add multiple elements to the queue.
             * @param {any[]} values The values to push into the queue.
             * @returns {number} The new size of the queue.
             */
            extend(values) {
              for (const value of values) {
                if (this.size < this._maxSize) {
                  this._heap.push(value);
                  this._siftUp();
                } else {
                  const smallest = this._smallest();
                  if (this._comparator(value, this._heap[smallest])) {
                    this._heap[smallest] = value;
                    this._siftUpFrom(smallest);
                  }
                }
              }
              return this.size;
            }
            /**
             * Remove and return the element with the highest priority in the queue.
             * @returns {any} The element with the highest priority in the queue.
             */
            pop() {
              const poppedValue = this.peek();
              const bottom = this.size - 1;
              if (bottom > 0) {
                this._swap(0, bottom);
              }
              this._heap.pop();
              this._siftDown();
              return poppedValue;
            }
            /**
             * Replace the element with the highest priority in the queue with a new value.
             * @param {*} value The new value.
             * @returns {*} The replaced value.
             */
            replace(value) {
              const replacedValue = this.peek();
              this._heap[0] = value;
              this._siftDown();
              return replacedValue;
            }
            /**
             * Compute the index for the parent of the node at index `i`.
             * @param {number} i The index of the node to get the parent of.
             * @returns {number} The index of the parent node.
             * @private
             */
            _parent(i) {
              return (i + 1 >>> 1) - 1;
            }
            /**
             * Compute the index for the left child of the node at index `i`.
             * @param {number} i The index of the node to get the left child of.
             * @returns {number} The index of the left child.
             * @private
             */
            _left(i) {
              return (i << 1) + 1;
            }
            /**
             * Compute the index for the right child of the node at index `i`.
             * @param {number} i The index of the node to get the right child of.
             * @returns {number} The index of the right child.
             * @private
             */
            _right(i) {
              return i + 1 << 1;
            }
            /**
             * Check if the element at index `i` is greater than the element at index `j`.
             * @param {number} i The index of the first element to compare.
             * @param {number} j The index of the second element to compare.
             * @returns {boolean} `true` if the element at index `i` is greater than the element at index `j`, `false` otherwise.
             * @private
             */
            _greater(i, j) {
              return this._comparator(this._heap[i], this._heap[j]);
            }
            /**
             * Swap the elements at indices `i` and `j`.
             * @param {number} i The index of the first element to swap.
             * @param {number} j The index of the second element to swap.
             * @private
             */
            _swap(i, j) {
              const temp = this._heap[i];
              this._heap[i] = this._heap[j];
              this._heap[j] = temp;
            }
            /**
             * Maintain the heap property by updating positions in the heap,
             * starting at the last element and moving up the heap.
             * @private
             */
            _siftUp() {
              this._siftUpFrom(this.size - 1);
            }
            /**
             * Helper function to sift up from a given node.
             * @param {number} node The index of the node to start sifting up from.
             */
            _siftUpFrom(node) {
              while (node > 0 && this._greater(node, this._parent(node))) {
                this._swap(node, this._parent(node));
                node = this._parent(node);
              }
            }
            /**
             * Maintain the heap property by updating positions in the heap,
             * starting at the first element and moving down the heap.
             * @private
             */
            _siftDown() {
              let node = 0;
              while (this._left(node) < this.size && this._greater(this._left(node), node) || this._right(node) < this.size && this._greater(this._right(node), node)) {
                const maxChild = this._right(node) < this.size && this._greater(this._right(node), this._left(node)) ? this._right(node) : this._left(node);
                this._swap(node, maxChild);
                node = maxChild;
              }
            }
            /**
             * Get the index of the smallest element in the heap. Since we use an array-based heap,
             * the index can be computed without needing to traverse the heap.
             * @private
             */
            _smallest() {
              return 2 ** Math.floor(Math.log2(this.size)) - 1;
            }
          }
          class CharTrie {
            constructor() {
              this.root = CharTrieNode.default();
            }
            /**
             * Adds one or more `texts` to the trie.
             * @param {string[]} texts The strings to add to the trie.
             */
            extend(texts) {
              for (const text of texts) {
                this.push(text);
              }
            }
            /**
             * Adds text to the trie.
             * @param {string} text The string to add to the trie.
             */
            push(text) {
              let node = this.root;
              for (const ch of text) {
                let child = node.children.get(ch);
                if (child === void 0) {
                  child = CharTrieNode.default();
                  node.children.set(ch, child);
                }
                node = child;
              }
              node.isLeaf = true;
            }
            /**
             * Searches the trie for all strings with a common prefix of `text`.
             * @param {string} text The common prefix to search for.
             * @yields {string} Each string in the trie that has `text` as a prefix.
             */
            *commonPrefixSearch(text) {
              let node = this.root;
              if (node === void 0)
                return;
              let prefix = "";
              for (const ch of text) {
                prefix += ch;
                node = node.children.get(ch);
                if (node === void 0)
                  return;
                if (node.isLeaf) {
                  yield prefix;
                }
              }
            }
          }
          class CharTrieNode {
            /**
             * Create a new CharTrieNode.
             * @param {boolean} isLeaf Whether the node is a leaf node or not.
             * @param {Map<string, CharTrieNode>} children A map containing the node's children, where the key is a character and the value is a `CharTrieNode`.
             */
            constructor(isLeaf, children) {
              this.isLeaf = isLeaf;
              this.children = children;
            }
            /**
             * Returns a new `CharTrieNode` instance with default values.
             * @returns {CharTrieNode} A new `CharTrieNode` instance with `isLeaf` set to `false` and an empty `children` map.
             */
            static default() {
              return new CharTrieNode(false, /* @__PURE__ */ new Map());
            }
          }
          class TokenLattice {
            /**
             * Creates a new TokenLattice instance.
             *
             * @param {string} sentence The input sentence to be tokenized.
             * @param {number} bosTokenId The beginning-of-sequence token ID.
             * @param {number} eosTokenId The end-of-sequence token ID.
             */
            constructor(sentence, bosTokenId, eosTokenId) {
              this.chars = Array.from(sentence);
              this.len = this.chars.length;
              this.bosTokenId = bosTokenId;
              this.eosTokenId = eosTokenId;
              this.nodes = [];
              this.beginNodes = Array.from({ length: this.len + 1 }, () => []);
              this.endNodes = Array.from({ length: this.len + 1 }, () => []);
              const bos = new TokenLatticeNode(this.bosTokenId, 0, 0, 0, 0);
              const eos = new TokenLatticeNode(this.eosTokenId, 1, this.len, 0, 0);
              this.nodes.push(bos.clone());
              this.nodes.push(eos.clone());
              this.beginNodes[this.len].push(eos);
              this.endNodes[0].push(bos);
            }
            /**
             * Inserts a new token node into the token lattice.
             *
             * @param {number} pos The starting position of the token.
             * @param {number} length The length of the token.
             * @param {number} score The score of the token.
             * @param {number} tokenId The token ID of the token.
             */
            insert(pos, length, score, tokenId) {
              const nodeId = this.nodes.length;
              const node = new TokenLatticeNode(tokenId, nodeId, pos, length, score);
              this.beginNodes[pos].push(node);
              this.endNodes[pos + length].push(node);
              this.nodes.push(node);
            }
            /**
             * Implements the Viterbi algorithm to compute the most likely sequence of tokens.
             *
             * @returns {TokenLatticeNode[]} The most likely sequence of tokens.
             */
            viterbi() {
              const len = this.len;
              let pos = 0;
              while (pos <= len) {
                if (this.beginNodes[pos].length == 0) {
                  return [];
                }
                for (let rnode of this.beginNodes[pos]) {
                  rnode.prev = null;
                  let bestScore = 0;
                  let bestNode = null;
                  for (let lnode of this.endNodes[pos]) {
                    const score = lnode.backtraceScore + rnode.score;
                    if (bestNode === null || score > bestScore) {
                      bestNode = lnode.clone();
                      bestScore = score;
                    }
                  }
                  if (bestNode !== null) {
                    rnode.prev = bestNode;
                    rnode.backtraceScore = bestScore;
                  } else {
                    return [];
                  }
                }
                ++pos;
              }
              const results = [];
              const root = this.beginNodes[len][0];
              const prev = root.prev;
              if (prev === null) {
                return [];
              }
              let node = prev.clone();
              while (node.prev !== null) {
                results.push(node.clone());
                const n = node.clone();
                node = n.prev.clone();
              }
              results.reverse();
              return results;
            }
            /**
             * @param {TokenLatticeNode} node
             * @returns {string} The array of nodes representing the most likely sequence of tokens.
             */
            piece(node) {
              return this.chars.slice(node.pos, node.pos + node.length).join("");
            }
            /**
             * @returns {string[]} The most likely sequence of tokens.
             */
            tokens() {
              const nodes = this.viterbi();
              return nodes.map((x2) => this.piece(x2));
            }
            /**
             * @returns {number[]} The most likely sequence of token ids.
             */
            tokenIds() {
              const nodes = this.viterbi();
              return nodes.map((x2) => x2.tokenId);
            }
          }
          class TokenLatticeNode {
            /**
             * Represents a node in a token lattice for a given sentence.
             * @param {number} tokenId The ID of the token associated with this node.
             * @param {number} nodeId The ID of this node.
             * @param {number} pos The starting position of the token in the sentence.
             * @param {number} length The length of the token.
             * @param {number} score The score associated with the token.
             */
            constructor(tokenId, nodeId, pos, length, score) {
              this.tokenId = tokenId;
              this.nodeId = nodeId;
              this.pos = pos;
              this.length = length;
              this.score = score;
              this.prev = null;
              this.backtraceScore = 0;
            }
            /**
             * Returns a clone of this node.
             * @returns {TokenLatticeNode} A clone of this node.
             */
            clone() {
              const n = new TokenLatticeNode(this.tokenId, this.nodeId, this.pos, this.length, this.score);
              n.prev = this.prev;
              n.backtraceScore = this.backtraceScore;
              return n;
            }
          }
          class DictionarySplitter {
            /**
             * @param {string[]} dictionary The dictionary of words to use for splitting.
             */
            constructor(dictionary) {
              this.trie = this._buildTrie(dictionary);
            }
            /**
             * Builds a trie from the given dictionary.
             * @param {string[]} dictionary The dictionary of words to build the trie from.
             * @returns {Object} The root node of the trie.
             * @private
             */
            _buildTrie(dictionary) {
              var _a;
              const trie = /* @__PURE__ */ Object.create(null);
              for (const word of dictionary) {
                let node = trie;
                for (let i = 0; i < word.length; ++i) {
                  node = node[_a = word[i]] ?? (node[_a] = /* @__PURE__ */ Object.create(null));
                }
                node.end = word;
              }
              return trie;
            }
            /**
             * Splits the input text into tokens based on the dictionary.
             * @param {string} text The input text to split.
             * @returns {string[]} An array of tokens.
             */
            split(text) {
              const result = [];
              const n = text.length;
              let start = 0;
              let i = 0;
              while (i < n) {
                let node = this.trie;
                let match = null;
                let j = i;
                while (j < n && (node = node[text[j]])) {
                  if (node.end) {
                    match = node.end;
                  }
                  ++j;
                }
                if (match) {
                  if (i > start) {
                    result.push(text.slice(start, i));
                  }
                  result.push(match);
                  i += match.length;
                  start = i;
                } else {
                  ++i;
                }
              }
              if (start < n) {
                result.push(text.slice(start));
              }
              return result;
            }
          }
          class LRUCache {
            /**
             * Creates an LRUCache instance.
             * @param {number} capacity The maximum number of items the cache can hold.
             */
            constructor(capacity) {
              this.capacity = capacity;
              this.cache = /* @__PURE__ */ new Map();
            }
            /**
             * Retrieves the value associated with the given key and marks the key as recently used.
             * @param {any} key The key to retrieve.
             * @returns {any} The value associated with the key, or undefined if the key does not exist.
             */
            get(key) {
              if (!this.cache.has(key))
                return void 0;
              const value = this.cache.get(key);
              this.cache.delete(key);
              this.cache.set(key, value);
              return value;
            }
            /**
             * Inserts or updates the key-value pair in the cache.
             * If the key already exists, it is updated and marked as recently used.
             * If the cache exceeds its capacity, the least recently used item is evicted.
             * @param {any} key The key to add or update.
             * @param {any} value The value to associate with the key.
             */
            put(key, value) {
              if (this.cache.has(key)) {
                this.cache.delete(key);
              }
              this.cache.set(key, value);
              if (this.cache.size > this.capacity) {
                this.cache.delete(this.cache.keys().next().value);
              }
            }
            /**
             * Clears the cache.
             */
            clear() {
              this.cache.clear();
            }
          }
        }
      ),
      /***/
      "./src/utils/devices.js": (
        /*!******************************!*\
          !*** ./src/utils/devices.js ***!
          \******************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            DEVICE_TYPES: () => (
              /* binding */
              DEVICE_TYPES
            )
            /* harmony export */
          });
          const DEVICE_TYPES = Object.freeze({
            auto: "auto",
            // Auto-detect based on device and environment
            gpu: "gpu",
            // Auto-detect GPU
            cpu: "cpu",
            // CPU
            wasm: "wasm",
            // WebAssembly
            webgpu: "webgpu",
            // WebGPU
            cuda: "cuda",
            // CUDA
            dml: "dml",
            // DirectML
            webnn: "webnn",
            // WebNN (default)
            "webnn-npu": "webnn-npu",
            // WebNN NPU
            "webnn-gpu": "webnn-gpu",
            // WebNN GPU
            "webnn-cpu": "webnn-cpu"
            // WebNN CPU
          });
        }
      ),
      /***/
      "./src/utils/dtypes.js": (
        /*!*****************************!*\
          !*** ./src/utils/dtypes.js ***!
          \*****************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            DATA_TYPES: () => (
              /* binding */
              DATA_TYPES
            ),
            /* harmony export */
            DEFAULT_DEVICE_DTYPE_MAPPING: () => (
              /* binding */
              DEFAULT_DEVICE_DTYPE_MAPPING
            ),
            /* harmony export */
            DEFAULT_DTYPE_SUFFIX_MAPPING: () => (
              /* binding */
              DEFAULT_DTYPE_SUFFIX_MAPPING
            ),
            /* harmony export */
            isWebGpuFp16Supported: () => (
              /* binding */
              isWebGpuFp16Supported
            )
            /* harmony export */
          });
          var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ../env.js */
            "./src/env.js"
          );
          var _devices_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ./devices.js */
            "./src/utils/devices.js"
          );
          const isWebGpuFp16Supported = function() {
            let cachedResult;
            return async function() {
              if (cachedResult === void 0) {
                if (!_env_js__WEBPACK_IMPORTED_MODULE_0__.apis.IS_WEBGPU_AVAILABLE) {
                  cachedResult = false;
                } else {
                  try {
                    const adapter = await navigator.gpu.requestAdapter();
                    cachedResult = adapter.features.has("shader-f16");
                  } catch (e) {
                    cachedResult = false;
                  }
                }
              }
              return cachedResult;
            };
          }();
          const DATA_TYPES = Object.freeze({
            auto: "auto",
            // Auto-detect based on environment
            fp32: "fp32",
            fp16: "fp16",
            q8: "q8",
            int8: "int8",
            uint8: "uint8",
            q4: "q4",
            bnb4: "bnb4",
            q4f16: "q4f16"
            // fp16 model with int4 block weight quantization
          });
          const DEFAULT_DEVICE_DTYPE_MAPPING = Object.freeze({
            // NOTE: If not specified, will default to fp32
            [_devices_js__WEBPACK_IMPORTED_MODULE_1__.DEVICE_TYPES.wasm]: DATA_TYPES.q8
          });
          const DEFAULT_DTYPE_SUFFIX_MAPPING = Object.freeze({
            [DATA_TYPES.fp32]: "",
            [DATA_TYPES.fp16]: "_fp16",
            [DATA_TYPES.int8]: "_int8",
            [DATA_TYPES.uint8]: "_uint8",
            [DATA_TYPES.q8]: "_quantized",
            [DATA_TYPES.q4]: "_q4",
            [DATA_TYPES.q4f16]: "_q4f16",
            [DATA_TYPES.bnb4]: "_bnb4"
          });
        }
      ),
      /***/
      "./src/utils/generic.js": (
        /*!******************************!*\
          !*** ./src/utils/generic.js ***!
          \******************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            Callable: () => (
              /* binding */
              Callable
            )
            /* harmony export */
          });
          const Callable = (
            /** @type {any} */
            class {
              /**
              * Creates a new instance of the Callable class.
              */
              constructor() {
                let closure = function(...args) {
                  return closure._call(...args);
                };
                return Object.setPrototypeOf(closure, new.target.prototype);
              }
              /**
               * This method should be implemented in subclasses to provide the
               * functionality of the callable object.
               *
               * @param {any[]} args
               * @throws {Error} If the subclass does not implement the `_call` method.
               */
              _call(...args) {
                throw Error("Must implement _call method in subclass");
              }
            }
          );
        }
      ),
      /***/
      "./src/utils/hub.js": (
        /*!**************************!*\
          !*** ./src/utils/hub.js ***!
          \**************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            MAX_EXTERNAL_DATA_CHUNKS: () => (
              /* binding */
              MAX_EXTERNAL_DATA_CHUNKS
            ),
            /* harmony export */
            getFile: () => (
              /* binding */
              getFile
            ),
            /* harmony export */
            getModelFile: () => (
              /* binding */
              getModelFile
            ),
            /* harmony export */
            getModelJSON: () => (
              /* binding */
              getModelJSON
            )
            /* harmony export */
          });
          var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! fs */
            "fs"
          );
          var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! path */
            "path"
          );
          var _env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../env.js */
            "./src/env.js"
          );
          var _core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ./core.js */
            "./src/utils/core.js"
          );
          const MAX_EXTERNAL_DATA_CHUNKS = 100;
          const CONTENT_TYPE_MAP = {
            "txt": "text/plain",
            "html": "text/html",
            "css": "text/css",
            "js": "text/javascript",
            "json": "application/json",
            "png": "image/png",
            "jpg": "image/jpeg",
            "jpeg": "image/jpeg",
            "gif": "image/gif"
          };
          class FileResponse {
            /**
             * Creates a new `FileResponse` object.
             * @param {string} filePath
             */
            constructor(filePath) {
              this.filePath = filePath;
              this.headers = new Headers();
              this.exists = fs__WEBPACK_IMPORTED_MODULE_0__["default"].existsSync(filePath);
              if (this.exists) {
                this.status = 200;
                this.statusText = "OK";
                let stats = fs__WEBPACK_IMPORTED_MODULE_0__["default"].statSync(filePath);
                this.headers.set("content-length", stats.size.toString());
                this.updateContentType();
                const stream = fs__WEBPACK_IMPORTED_MODULE_0__["default"].createReadStream(filePath);
                this.body = new ReadableStream({
                  start(controller) {
                    stream.on("data", (chunk) => controller.enqueue(chunk));
                    stream.on("end", () => controller.close());
                    stream.on("error", (err) => controller.error(err));
                  },
                  cancel() {
                    stream.destroy();
                  }
                });
              } else {
                this.status = 404;
                this.statusText = "Not Found";
                this.body = null;
              }
            }
            /**
             * Updates the 'content-type' header property of the response based on the extension of
             * the file specified by the filePath property of the current object.
             * @returns {void}
             */
            updateContentType() {
              const extension = this.filePath.toString().split(".").pop().toLowerCase();
              this.headers.set("content-type", CONTENT_TYPE_MAP[extension] ?? "application/octet-stream");
            }
            /**
             * Clone the current FileResponse object.
             * @returns {FileResponse} A new FileResponse object with the same properties as the current object.
             */
            clone() {
              let response = new FileResponse(this.filePath);
              response.exists = this.exists;
              response.status = this.status;
              response.statusText = this.statusText;
              response.headers = new Headers(this.headers);
              return response;
            }
            /**
             * Reads the contents of the file specified by the filePath property and returns a Promise that
             * resolves with an ArrayBuffer containing the file's contents.
             * @returns {Promise<ArrayBuffer>} A Promise that resolves with an ArrayBuffer containing the file's contents.
             * @throws {Error} If the file cannot be read.
             */
            async arrayBuffer() {
              const data = await fs__WEBPACK_IMPORTED_MODULE_0__["default"].promises.readFile(this.filePath);
              return (
                /** @type {ArrayBuffer} */
                data.buffer
              );
            }
            /**
             * Reads the contents of the file specified by the filePath property and returns a Promise that
             * resolves with a Blob containing the file's contents.
             * @returns {Promise<Blob>} A Promise that resolves with a Blob containing the file's contents.
             * @throws {Error} If the file cannot be read.
             */
            async blob() {
              const data = await fs__WEBPACK_IMPORTED_MODULE_0__["default"].promises.readFile(this.filePath);
              return new Blob([data], { type: this.headers.get("content-type") });
            }
            /**
             * Reads the contents of the file specified by the filePath property and returns a Promise that
             * resolves with a string containing the file's contents.
             * @returns {Promise<string>} A Promise that resolves with a string containing the file's contents.
             * @throws {Error} If the file cannot be read.
             */
            async text() {
              const data = await fs__WEBPACK_IMPORTED_MODULE_0__["default"].promises.readFile(this.filePath, "utf8");
              return data;
            }
            /**
             * Reads the contents of the file specified by the filePath property and returns a Promise that
             * resolves with a parsed JavaScript object containing the file's contents.
             *
             * @returns {Promise<Object>} A Promise that resolves with a parsed JavaScript object containing the file's contents.
             * @throws {Error} If the file cannot be read.
             */
            async json() {
              return JSON.parse(await this.text());
            }
          }
          function isValidUrl(string, protocols = null, validHosts = null) {
            let url;
            try {
              url = new URL(string);
            } catch (_2) {
              return false;
            }
            if (protocols && !protocols.includes(url.protocol)) {
              return false;
            }
            if (validHosts && !validHosts.includes(url.hostname)) {
              return false;
            }
            return true;
          }
          const REPO_ID_REGEX = /^(\b[\w\-.]+\b\/)?\b[\w\-.]{1,96}\b$/;
          function isValidHfModelId(string) {
            if (!REPO_ID_REGEX.test(string))
              return false;
            if (string.includes("..") || string.includes("--"))
              return false;
            if (string.endsWith(".git") || string.endsWith(".ipynb"))
              return false;
            return true;
          }
          async function getFile(urlOrPath) {
            if (_env_js__WEBPACK_IMPORTED_MODULE_2__.env.useFS && !isValidUrl(urlOrPath, ["http:", "https:", "blob:"])) {
              return new FileResponse(
                urlOrPath instanceof URL ? urlOrPath.protocol === "file:" ? urlOrPath.pathname : urlOrPath.toString() : urlOrPath
              );
            } else if (typeof process !== "undefined" && process?.release?.name === "node") {
              const IS_CI = !!process.env?.TESTING_REMOTELY;
              const version2 = _env_js__WEBPACK_IMPORTED_MODULE_2__.env.version;
              const headers = new Headers();
              headers.set("User-Agent", `transformers.js/${version2}; is_ci/${IS_CI};`);
              const isHFURL = isValidUrl(urlOrPath, ["http:", "https:"], ["huggingface.co", "hf.co"]);
              if (isHFURL) {
                const token = process.env?.HF_TOKEN ?? process.env?.HF_ACCESS_TOKEN;
                if (token) {
                  headers.set("Authorization", `Bearer ${token}`);
                }
              }
              return fetch(urlOrPath, { headers });
            } else {
              return fetch(urlOrPath);
            }
          }
          const ERROR_MAPPING = {
            // 4xx errors (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses)
            400: "Bad request error occurred while trying to load file",
            401: "Unauthorized access to file",
            403: "Forbidden access to file",
            404: "Could not locate file",
            408: "Request timeout error occurred while trying to load file",
            // 5xx errors (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses)
            500: "Internal server error error occurred while trying to load file",
            502: "Bad gateway error occurred while trying to load file",
            503: "Service unavailable error occurred while trying to load file",
            504: "Gateway timeout error occurred while trying to load file"
          };
          function handleError(status, remoteURL, fatal) {
            if (!fatal) {
              return null;
            }
            const message = ERROR_MAPPING[status] ?? `Error (${status}) occurred while trying to load file`;
            throw Error(`${message}: "${remoteURL}".`);
          }
          class FileCache {
            /**
             * Instantiate a `FileCache` object.
             * @param {string} path
             */
            constructor(path) {
              this.path = path;
            }
            /**
             * Checks whether the given request is in the cache.
             * @param {string} request
             * @returns {Promise<FileResponse | undefined>}
             */
            async match(request) {
              let filePath = path__WEBPACK_IMPORTED_MODULE_1__["default"].join(this.path, request);
              let file = new FileResponse(filePath);
              if (file.exists) {
                return file;
              } else {
                return void 0;
              }
            }
            /**
             * Adds the given response to the cache.
             * @param {string} request
             * @param {Response} response
             * @param {(data: {progress: number, loaded: number, total: number}) => void} [progress_callback] Optional.
             * The function to call with progress updates
             * @returns {Promise<void>}
             */
            async put(request, response, progress_callback = void 0) {
              let filePath = path__WEBPACK_IMPORTED_MODULE_1__["default"].join(this.path, request);
              try {
                const contentLength = response.headers.get("Content-Length");
                const total = parseInt(contentLength ?? "0");
                let loaded = 0;
                await fs__WEBPACK_IMPORTED_MODULE_0__["default"].promises.mkdir(path__WEBPACK_IMPORTED_MODULE_1__["default"].dirname(filePath), { recursive: true });
                const fileStream = fs__WEBPACK_IMPORTED_MODULE_0__["default"].createWriteStream(filePath);
                const reader = response.body.getReader();
                while (true) {
                  const { done, value } = await reader.read();
                  if (done) {
                    break;
                  }
                  await new Promise((resolve, reject) => {
                    fileStream.write(value, (err) => {
                      if (err) {
                        reject(err);
                        return;
                      }
                      resolve();
                    });
                  });
                  loaded += value.length;
                  const progress = total ? loaded / total * 100 : 0;
                  progress_callback?.({ progress, loaded, total });
                }
                fileStream.close();
              } catch (error) {
                try {
                  await fs__WEBPACK_IMPORTED_MODULE_0__["default"].promises.unlink(filePath);
                } catch {
                }
                throw error;
              }
            }
            // TODO add the rest?
            // addAll(requests: RequestInfo[]): Promise<void>;
            // delete(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<boolean>;
            // keys(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Request>>;
            // match(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<Response | undefined>;
            // matchAll(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Response>>;
          }
          async function tryCache(cache, ...names) {
            for (let name of names) {
              try {
                let result = await cache.match(name);
                if (result)
                  return result;
              } catch (e) {
                continue;
              }
            }
            return void 0;
          }
          async function getModelFile(path_or_repo_id, filename, fatal = true, options = {}, return_path = false) {
            if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowLocalModels) {
              if (options.local_files_only) {
                throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");
              } else if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowRemoteModels) {
                throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.");
              }
            }
            (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options.progress_callback, {
              status: "initiate",
              name: path_or_repo_id,
              file: filename
            });
            let cache;
            if (!cache && _env_js__WEBPACK_IMPORTED_MODULE_2__.env.useCustomCache) {
              if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.customCache) {
                throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");
              }
              if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.customCache.match || !_env_js__WEBPACK_IMPORTED_MODULE_2__.env.customCache.put) {
                throw new Error(
                  "`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache"
                );
              }
              cache = _env_js__WEBPACK_IMPORTED_MODULE_2__.env.customCache;
            }
            if (!cache && _env_js__WEBPACK_IMPORTED_MODULE_2__.env.useBrowserCache) {
              if (typeof caches === "undefined") {
                throw Error("Browser cache is not available in this environment.");
              }
              try {
                cache = await caches.open("transformers-cache");
              } catch (e) {
                console.warn("An error occurred while opening the browser cache:", e);
              }
            }
            if (!cache && _env_js__WEBPACK_IMPORTED_MODULE_2__.env.useFSCache) {
              if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_FS_AVAILABLE) {
                throw Error("File System Cache is not available in this environment.");
              }
              cache = new FileCache(options.cache_dir ?? _env_js__WEBPACK_IMPORTED_MODULE_2__.env.cacheDir);
            }
            const revision = options.revision ?? "main";
            const requestURL = pathJoin(path_or_repo_id, filename);
            const validModelId = isValidHfModelId(path_or_repo_id);
            const localPath = validModelId ? pathJoin(_env_js__WEBPACK_IMPORTED_MODULE_2__.env.localModelPath, requestURL) : requestURL;
            const remoteURL = pathJoin(
              _env_js__WEBPACK_IMPORTED_MODULE_2__.env.remoteHost,
              _env_js__WEBPACK_IMPORTED_MODULE_2__.env.remotePathTemplate.replaceAll("{model}", path_or_repo_id).replaceAll("{revision}", encodeURIComponent(revision)),
              filename
            );
            let cacheKey;
            const proposedCacheKey = cache instanceof FileCache ? revision === "main" ? requestURL : pathJoin(path_or_repo_id, revision, filename) : remoteURL;
            let toCacheResponse = false;
            let response;
            if (cache) {
              response = await tryCache(cache, localPath, proposedCacheKey);
            }
            const cacheHit = response !== void 0;
            if (response === void 0) {
              if (_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowLocalModels) {
                const isURL = isValidUrl(requestURL, ["http:", "https:"]);
                if (!isURL) {
                  try {
                    response = await getFile(localPath);
                    cacheKey = localPath;
                  } catch (e) {
                    console.warn(`Unable to load from local path "${localPath}": "${e}"`);
                  }
                } else if (options.local_files_only) {
                  throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${requestURL}.`);
                } else if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowRemoteModels) {
                  throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${requestURL}.`);
                }
              }
              if (response === void 0 || response.status === 404) {
                if (options.local_files_only || !_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowRemoteModels) {
                  if (fatal) {
                    throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${localPath}".`);
                  } else {
                    return null;
                  }
                }
                if (!validModelId) {
                  throw Error(`Local file missing at "${localPath}" and download aborted due to invalid model ID "${path_or_repo_id}".`);
                }
                response = await getFile(remoteURL);
                if (response.status !== 200) {
                  return handleError(response.status, remoteURL, fatal);
                }
                cacheKey = proposedCacheKey;
              }
              toCacheResponse = cache && typeof Response !== "undefined" && response instanceof Response && response.status === 200;
            }
            (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options.progress_callback, {
              status: "download",
              name: path_or_repo_id,
              file: filename
            });
            let result;
            if (!(_env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_NODE_ENV && return_path)) {
              let buffer;
              if (!options.progress_callback) {
                buffer = new Uint8Array(await response.arrayBuffer());
              } else if (cacheHit && typeof navigator !== "undefined" && /firefox/i.test(navigator.userAgent)) {
                buffer = new Uint8Array(await response.arrayBuffer());
                (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options.progress_callback, {
                  status: "progress",
                  name: path_or_repo_id,
                  file: filename,
                  progress: 100,
                  loaded: buffer.length,
                  total: buffer.length
                });
              } else {
                buffer = await readResponse(response, (data) => {
                  (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options.progress_callback, {
                    status: "progress",
                    name: path_or_repo_id,
                    file: filename,
                    ...data
                  });
                });
              }
              result = buffer;
            }
            if (
              // Only cache web responses
              // i.e., do not cache FileResponses (prevents duplication)
              toCacheResponse && cacheKey && // Check again whether request is in cache. If not, we add the response to the cache
              await cache.match(cacheKey) === void 0
            ) {
              if (!result) {
                await cache.put(
                  cacheKey,
                  /** @type {Response} */
                  response,
                  options.progress_callback
                );
              } else {
                await cache.put(cacheKey, new Response(result, {
                  headers: response.headers
                })).catch((err) => {
                  console.warn(`Unable to add response to browser cache: ${err}.`);
                });
              }
            }
            (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options.progress_callback, {
              status: "done",
              name: path_or_repo_id,
              file: filename
            });
            if (result) {
              if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_NODE_ENV && return_path) {
                throw new Error("Cannot return path in a browser environment.");
              }
              return result;
            }
            if (response instanceof FileResponse) {
              return response.filePath;
            }
            const cachedResponse = await cache?.match(cacheKey);
            if (cachedResponse instanceof FileResponse) {
              return cachedResponse.filePath;
            } else if (cachedResponse instanceof Response) {
              return new Uint8Array(await cachedResponse.arrayBuffer());
            } else if (typeof cachedResponse === "string") {
              return cachedResponse;
            }
            throw new Error("Unable to get model file path or buffer.");
          }
          async function getModelJSON(modelPath, fileName, fatal = true, options = {}) {
            const buffer = await getModelFile(modelPath, fileName, fatal, options, false);
            if (buffer === null) {
              return {};
            }
            const decoder = new TextDecoder("utf-8");
            const jsonData = decoder.decode(
              /** @type {Uint8Array} */
              buffer
            );
            return JSON.parse(jsonData);
          }
          async function readResponse(response, progress_callback) {
            const contentLength = response.headers.get("Content-Length");
            if (contentLength === null) {
              console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");
            }
            let total = parseInt(contentLength ?? "0");
            let buffer = new Uint8Array(total);
            let loaded = 0;
            const reader = response.body.getReader();
            async function read() {
              const { done, value } = await reader.read();
              if (done)
                return;
              const newLoaded = loaded + value.length;
              if (newLoaded > total) {
                total = newLoaded;
                const newBuffer = new Uint8Array(total);
                newBuffer.set(buffer);
                buffer = newBuffer;
              }
              buffer.set(value, loaded);
              loaded = newLoaded;
              const progress = loaded / total * 100;
              progress_callback({ progress, loaded, total });
              return read();
            }
            await read();
            return buffer;
          }
          function pathJoin(...parts) {
            parts = parts.map((part, index) => {
              if (index) {
                part = part.replace(new RegExp("^/"), "");
              }
              if (index !== parts.length - 1) {
                part = part.replace(new RegExp("/$"), "");
              }
              return part;
            });
            return parts.join("/");
          }
        }
      ),
      /***/
      "./src/utils/image.js": (
        /*!****************************!*\
          !*** ./src/utils/image.js ***!
          \****************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            RawImage: () => (
              /* binding */
              RawImage
            ),
            /* harmony export */
            load_image: () => (
              /* binding */
              load_image
            )
            /* harmony export */
          });
          var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ./core.js */
            "./src/utils/core.js"
          );
          var _hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ./hub.js */
            "./src/utils/hub.js"
          );
          var _env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../env.js */
            "./src/env.js"
          );
          var _tensor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
            /*! ./tensor.js */
            "./src/utils/tensor.js"
          );
          var sharp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
            /*! sharp */
            "sharp"
          );
          let createCanvasFunction;
          let ImageDataClass;
          let loadImageFunction;
          const IS_BROWSER_OR_WEBWORKER = _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_BROWSER_ENV || _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_WEBWORKER_ENV;
          if (IS_BROWSER_OR_WEBWORKER) {
            createCanvasFunction = (width, height) => {
              if (!self.OffscreenCanvas) {
                throw new Error("OffscreenCanvas not supported by this browser.");
              }
              return new self.OffscreenCanvas(width, height);
            };
            loadImageFunction = self.createImageBitmap;
            ImageDataClass = self.ImageData;
          } else if (sharp__WEBPACK_IMPORTED_MODULE_4__["default"]) {
            loadImageFunction = async (img) => {
              const metadata = await img.metadata();
              const rawChannels = metadata.channels;
              const { data, info } = await img.rotate().raw().toBuffer({ resolveWithObject: true });
              const newImage = new RawImage(new Uint8ClampedArray(data), info.width, info.height, info.channels);
              if (rawChannels !== void 0 && rawChannels !== info.channels) {
                newImage.convert(rawChannels);
              }
              return newImage;
            };
          } else {
            throw new Error("Unable to load image processing library.");
          }
          const RESAMPLING_MAPPING = {
            0: "nearest",
            1: "lanczos",
            2: "bilinear",
            3: "bicubic",
            4: "box",
            5: "hamming"
          };
          const CONTENT_TYPE_MAP = /* @__PURE__ */ new Map([
            ["png", "image/png"],
            ["jpg", "image/jpeg"],
            ["jpeg", "image/jpeg"],
            ["gif", "image/gif"]
          ]);
          class RawImage {
            /**
             * Create a new `RawImage` object.
             * @param {Uint8ClampedArray|Uint8Array} data The pixel data.
             * @param {number} width The width of the image.
             * @param {number} height The height of the image.
             * @param {1|2|3|4} channels The number of channels.
             */
            constructor(data, width, height, channels) {
              this.data = data;
              this.width = width;
              this.height = height;
              this.channels = channels;
            }
            /**
             * Returns the size of the image (width, height).
             * @returns {[number, number]} The size of the image (width, height).
             */
            get size() {
              return [this.width, this.height];
            }
            /**
             * Helper method for reading an image from a variety of input types.
             * @param {RawImage|string|URL|Blob|HTMLCanvasElement|OffscreenCanvas} input
             * @returns The image object.
             *
             * **Example:** Read image from a URL.
             * ```javascript
             * let image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');
             * // RawImage {
             * //   "data": Uint8ClampedArray [ 25, 25, 25, 19, 19, 19, ... ],
             * //   "width": 800,
             * //   "height": 533,
             * //   "channels": 3
             * // }
             * ```
             */
            static async read(input) {
              if (input instanceof RawImage) {
                return input;
              } else if (typeof input === "string" || input instanceof URL) {
                return await this.fromURL(input);
              } else if (input instanceof Blob) {
                return await this.fromBlob(input);
              } else if (typeof HTMLCanvasElement !== "undefined" && input instanceof HTMLCanvasElement || typeof OffscreenCanvas !== "undefined" && input instanceof OffscreenCanvas) {
                return this.fromCanvas(input);
              } else {
                throw new Error(`Unsupported input type: ${typeof input}`);
              }
            }
            /**
             * Read an image from a canvas.
             * @param {HTMLCanvasElement|OffscreenCanvas} canvas The canvas to read the image from.
             * @returns {RawImage} The image object.
             */
            static fromCanvas(canvas) {
              if (!IS_BROWSER_OR_WEBWORKER) {
                throw new Error("fromCanvas() is only supported in browser environments.");
              }
              const ctx = canvas.getContext("2d");
              const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
              return new RawImage(data, canvas.width, canvas.height, 4);
            }
            /**
             * Read an image from a URL or file path.
             * @param {string|URL} url The URL or file path to read the image from.
             * @returns {Promise<RawImage>} The image object.
             */
            static async fromURL(url) {
              const response = await (0, _hub_js__WEBPACK_IMPORTED_MODULE_1__.getFile)(url);
              if (response.status !== 200) {
                throw new Error(`Unable to read image from "${url}" (${response.status} ${response.statusText})`);
              }
              const blob = await response.blob();
              return this.fromBlob(blob);
            }
            /**
             * Helper method to create a new Image from a blob.
             * @param {Blob} blob The blob to read the image from.
             * @returns {Promise<RawImage>} The image object.
             */
            static async fromBlob(blob) {
              if (IS_BROWSER_OR_WEBWORKER) {
                const img = await loadImageFunction(blob);
                const ctx = createCanvasFunction(img.width, img.height).getContext("2d");
                ctx.drawImage(img, 0, 0);
                return new this(ctx.getImageData(0, 0, img.width, img.height).data, img.width, img.height, 4);
              } else {
                const img = (0, sharp__WEBPACK_IMPORTED_MODULE_4__["default"])(await blob.arrayBuffer());
                return await loadImageFunction(img);
              }
            }
            /**
             * Helper method to create a new Image from a tensor
             * @param {Tensor} tensor
             */
            static fromTensor(tensor, channel_format = "CHW") {
              if (tensor.dims.length !== 3) {
                throw new Error(`Tensor should have 3 dimensions, but has ${tensor.dims.length} dimensions.`);
              }
              if (channel_format === "CHW") {
                tensor = tensor.transpose(1, 2, 0);
              } else if (channel_format === "HWC") {
              } else {
                throw new Error(`Unsupported channel format: ${channel_format}`);
              }
              if (!(tensor.data instanceof Uint8ClampedArray || tensor.data instanceof Uint8Array)) {
                throw new Error(`Unsupported tensor type: ${tensor.type}`);
              }
              switch (tensor.dims[2]) {
                case 1:
                case 2:
                case 3:
                case 4:
                  return new RawImage(tensor.data, tensor.dims[1], tensor.dims[0], tensor.dims[2]);
                default:
                  throw new Error(`Unsupported number of channels: ${tensor.dims[2]}`);
              }
            }
            /**
             * Convert the image to grayscale format.
             * @returns {RawImage} `this` to support chaining.
             */
            grayscale() {
              if (this.channels === 1) {
                return this;
              }
              const newData = new Uint8ClampedArray(this.width * this.height * 1);
              switch (this.channels) {
                case 3:
                case 4:
                  for (let i = 0, offset = 0; i < this.data.length; i += this.channels) {
                    const red = this.data[i];
                    const green = this.data[i + 1];
                    const blue = this.data[i + 2];
                    newData[offset++] = Math.round(0.2989 * red + 0.587 * green + 0.114 * blue);
                  }
                  break;
                default:
                  throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
              }
              return this._update(newData, this.width, this.height, 1);
            }
            /**
             * Convert the image to RGB format.
             * @returns {RawImage} `this` to support chaining.
             */
            rgb() {
              if (this.channels === 3) {
                return this;
              }
              const newData = new Uint8ClampedArray(this.width * this.height * 3);
              switch (this.channels) {
                case 1:
                  for (let i = 0, offset = 0; i < this.data.length; ++i) {
                    newData[offset++] = this.data[i];
                    newData[offset++] = this.data[i];
                    newData[offset++] = this.data[i];
                  }
                  break;
                case 4:
                  for (let i = 0, offset = 0; i < this.data.length; i += 4) {
                    newData[offset++] = this.data[i];
                    newData[offset++] = this.data[i + 1];
                    newData[offset++] = this.data[i + 2];
                  }
                  break;
                default:
                  throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
              }
              return this._update(newData, this.width, this.height, 3);
            }
            /**
             * Convert the image to RGBA format.
             * @returns {RawImage} `this` to support chaining.
             */
            rgba() {
              if (this.channels === 4) {
                return this;
              }
              const newData = new Uint8ClampedArray(this.width * this.height * 4);
              switch (this.channels) {
                case 1:
                  for (let i = 0, offset = 0; i < this.data.length; ++i) {
                    newData[offset++] = this.data[i];
                    newData[offset++] = this.data[i];
                    newData[offset++] = this.data[i];
                    newData[offset++] = 255;
                  }
                  break;
                case 3:
                  for (let i = 0, offset = 0; i < this.data.length; i += 3) {
                    newData[offset++] = this.data[i];
                    newData[offset++] = this.data[i + 1];
                    newData[offset++] = this.data[i + 2];
                    newData[offset++] = 255;
                  }
                  break;
                default:
                  throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
              }
              return this._update(newData, this.width, this.height, 4);
            }
            /**
             * Apply an alpha mask to the image. Operates in place.
             * @param {RawImage} mask The mask to apply. It should have a single channel.
             * @returns {RawImage} The masked image.
             * @throws {Error} If the mask is not the same size as the image.
             * @throws {Error} If the image does not have 4 channels.
             * @throws {Error} If the mask is not a single channel.
             */
            putAlpha(mask) {
              if (mask.width !== this.width || mask.height !== this.height) {
                throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${mask.width}x${mask.height}`);
              }
              if (mask.channels !== 1) {
                throw new Error(`Expected mask to have 1 channel, but got ${mask.channels}`);
              }
              const this_data = this.data;
              const mask_data = mask.data;
              const num_pixels = this.width * this.height;
              if (this.channels === 3) {
                const newData = new Uint8ClampedArray(num_pixels * 4);
                for (let i = 0, in_offset = 0, out_offset = 0; i < num_pixels; ++i) {
                  newData[out_offset++] = this_data[in_offset++];
                  newData[out_offset++] = this_data[in_offset++];
                  newData[out_offset++] = this_data[in_offset++];
                  newData[out_offset++] = mask_data[i];
                }
                return this._update(newData, this.width, this.height, 4);
              } else if (this.channels === 4) {
                for (let i = 0; i < num_pixels; ++i) {
                  this_data[4 * i + 3] = mask_data[i];
                }
                return this;
              }
              throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`);
            }
            /**
             * Resize the image to the given dimensions. This method uses the canvas API to perform the resizing.
             * @param {number} width The width of the new image. `null` or `-1` will preserve the aspect ratio.
             * @param {number} height The height of the new image. `null` or `-1` will preserve the aspect ratio.
             * @param {Object} options Additional options for resizing.
             * @param {0|1|2|3|4|5|string} [options.resample] The resampling method to use.
             * @returns {Promise<RawImage>} `this` to support chaining.
             */
            async resize(width, height, {
              resample = 2
            } = {}) {
              if (this.width === width && this.height === height) {
                return this;
              }
              let resampleMethod = RESAMPLING_MAPPING[resample] ?? resample;
              const nullish_width = (0, _core_js__WEBPACK_IMPORTED_MODULE_0__.isNullishDimension)(width);
              const nullish_height = (0, _core_js__WEBPACK_IMPORTED_MODULE_0__.isNullishDimension)(height);
              if (nullish_width && nullish_height) {
                return this;
              } else if (nullish_width) {
                width = height / this.height * this.width;
              } else if (nullish_height) {
                height = width / this.width * this.height;
              }
              if (IS_BROWSER_OR_WEBWORKER) {
                const numChannels = this.channels;
                const canvas = this.toCanvas();
                const ctx = createCanvasFunction(width, height).getContext("2d");
                ctx.drawImage(canvas, 0, 0, width, height);
                const resizedImage = new RawImage(ctx.getImageData(0, 0, width, height).data, width, height, 4);
                return resizedImage.convert(numChannels);
              } else {
                let img = this.toSharp();
                switch (resampleMethod) {
                  case "box":
                  case "hamming":
                    if (resampleMethod === "box" || resampleMethod === "hamming") {
                      console.warn(`Resampling method ${resampleMethod} is not yet supported. Using bilinear instead.`);
                      resampleMethod = "bilinear";
                    }
                  case "nearest":
                  case "bilinear":
                  case "bicubic":
                    img = img.affine([width / this.width, 0, 0, height / this.height], {
                      interpolator: resampleMethod
                    });
                    break;
                  case "lanczos":
                    img = img.resize({
                      width,
                      height,
                      fit: "fill",
                      kernel: "lanczos3"
                      // PIL Lanczos uses a kernel size of 3
                    });
                    break;
                  default:
                    throw new Error(`Resampling method ${resampleMethod} is not supported.`);
                }
                return await loadImageFunction(img);
              }
            }
            async pad([left, right, top, bottom]) {
              left = Math.max(left, 0);
              right = Math.max(right, 0);
              top = Math.max(top, 0);
              bottom = Math.max(bottom, 0);
              if (left === 0 && right === 0 && top === 0 && bottom === 0) {
                return this;
              }
              if (IS_BROWSER_OR_WEBWORKER) {
                const numChannels = this.channels;
                const canvas = this.toCanvas();
                const newWidth = this.width + left + right;
                const newHeight = this.height + top + bottom;
                const ctx = createCanvasFunction(newWidth, newHeight).getContext("2d");
                ctx.drawImage(
                  canvas,
                  0,
                  0,
                  this.width,
                  this.height,
                  left,
                  top,
                  this.width,
                  this.height
                );
                const paddedImage = new RawImage(
                  ctx.getImageData(0, 0, newWidth, newHeight).data,
                  newWidth,
                  newHeight,
                  4
                );
                return paddedImage.convert(numChannels);
              } else {
                const img = this.toSharp().extend({ left, right, top, bottom });
                return await loadImageFunction(img);
              }
            }
            async crop([x_min, y_min, x_max, y_max]) {
              x_min = Math.max(x_min, 0);
              y_min = Math.max(y_min, 0);
              x_max = Math.min(x_max, this.width - 1);
              y_max = Math.min(y_max, this.height - 1);
              if (x_min === 0 && y_min === 0 && x_max === this.width - 1 && y_max === this.height - 1) {
                return this;
              }
              const crop_width = x_max - x_min + 1;
              const crop_height = y_max - y_min + 1;
              if (IS_BROWSER_OR_WEBWORKER) {
                const numChannels = this.channels;
                const canvas = this.toCanvas();
                const ctx = createCanvasFunction(crop_width, crop_height).getContext("2d");
                ctx.drawImage(
                  canvas,
                  x_min,
                  y_min,
                  crop_width,
                  crop_height,
                  0,
                  0,
                  crop_width,
                  crop_height
                );
                const resizedImage = new RawImage(ctx.getImageData(0, 0, crop_width, crop_height).data, crop_width, crop_height, 4);
                return resizedImage.convert(numChannels);
              } else {
                const img = this.toSharp().extract({
                  left: x_min,
                  top: y_min,
                  width: crop_width,
                  height: crop_height
                });
                return await loadImageFunction(img);
              }
            }
            async center_crop(crop_width, crop_height) {
              if (this.width === crop_width && this.height === crop_height) {
                return this;
              }
              const width_offset = (this.width - crop_width) / 2;
              const height_offset = (this.height - crop_height) / 2;
              if (IS_BROWSER_OR_WEBWORKER) {
                const numChannels = this.channels;
                const canvas = this.toCanvas();
                const ctx = createCanvasFunction(crop_width, crop_height).getContext("2d");
                let sourceX = 0;
                let sourceY = 0;
                let destX = 0;
                let destY = 0;
                if (width_offset >= 0) {
                  sourceX = width_offset;
                } else {
                  destX = -width_offset;
                }
                if (height_offset >= 0) {
                  sourceY = height_offset;
                } else {
                  destY = -height_offset;
                }
                ctx.drawImage(
                  canvas,
                  sourceX,
                  sourceY,
                  crop_width,
                  crop_height,
                  destX,
                  destY,
                  crop_width,
                  crop_height
                );
                const resizedImage = new RawImage(ctx.getImageData(0, 0, crop_width, crop_height).data, crop_width, crop_height, 4);
                return resizedImage.convert(numChannels);
              } else {
                let img = this.toSharp();
                if (width_offset >= 0 && height_offset >= 0) {
                  img = img.extract({
                    left: Math.floor(width_offset),
                    top: Math.floor(height_offset),
                    width: crop_width,
                    height: crop_height
                  });
                } else if (width_offset <= 0 && height_offset <= 0) {
                  const top = Math.floor(-height_offset);
                  const left = Math.floor(-width_offset);
                  img = img.extend({
                    top,
                    left,
                    // Ensures the resulting image has the desired dimensions
                    right: crop_width - this.width - left,
                    bottom: crop_height - this.height - top
                  });
                } else {
                  let y_padding = [0, 0];
                  let y_extract = 0;
                  if (height_offset < 0) {
                    y_padding[0] = Math.floor(-height_offset);
                    y_padding[1] = crop_height - this.height - y_padding[0];
                  } else {
                    y_extract = Math.floor(height_offset);
                  }
                  let x_padding = [0, 0];
                  let x_extract = 0;
                  if (width_offset < 0) {
                    x_padding[0] = Math.floor(-width_offset);
                    x_padding[1] = crop_width - this.width - x_padding[0];
                  } else {
                    x_extract = Math.floor(width_offset);
                  }
                  img = img.extend({
                    top: y_padding[0],
                    bottom: y_padding[1],
                    left: x_padding[0],
                    right: x_padding[1]
                  }).extract({
                    left: x_extract,
                    top: y_extract,
                    width: crop_width,
                    height: crop_height
                  });
                }
                return await loadImageFunction(img);
              }
            }
            async toBlob(type = "image/png", quality = 1) {
              if (!IS_BROWSER_OR_WEBWORKER) {
                throw new Error("toBlob() is only supported in browser environments.");
              }
              const canvas = this.toCanvas();
              return await canvas.convertToBlob({ type, quality });
            }
            toTensor(channel_format = "CHW") {
              let tensor = new _tensor_js__WEBPACK_IMPORTED_MODULE_3__.Tensor(
                "uint8",
                new Uint8Array(this.data),
                [this.height, this.width, this.channels]
              );
              if (channel_format === "HWC") {
              } else if (channel_format === "CHW") {
                tensor = tensor.permute(2, 0, 1);
              } else {
                throw new Error(`Unsupported channel format: ${channel_format}`);
              }
              return tensor;
            }
            toCanvas() {
              if (!IS_BROWSER_OR_WEBWORKER) {
                throw new Error("toCanvas() is only supported in browser environments.");
              }
              const cloned = this.clone().rgba();
              const clonedCanvas = createCanvasFunction(cloned.width, cloned.height);
              const data = new ImageDataClass(cloned.data, cloned.width, cloned.height);
              clonedCanvas.getContext("2d").putImageData(data, 0, 0);
              return clonedCanvas;
            }
            /**
             * Split this image into individual bands. This method returns an array of individual image bands from an image.
             * For example, splitting an "RGB" image creates three new images each containing a copy of one of the original bands (red, green, blue).
             * 
             * Inspired by PIL's `Image.split()` [function](https://pillow.readthedocs.io/en/latest/reference/Image.html#PIL.Image.Image.split).
             * @returns {RawImage[]} An array containing bands.
             */
            split() {
              const { data, width, height, channels } = this;
              const data_type = (
                /** @type {any} */
                data.constructor
              );
              const per_channel_length = data.length / channels;
              const split_data = Array.from(
                { length: channels },
                () => new data_type(per_channel_length)
              );
              for (let i = 0; i < per_channel_length; ++i) {
                const data_offset = channels * i;
                for (let j = 0; j < channels; ++j) {
                  split_data[j][i] = data[data_offset + j];
                }
              }
              return split_data.map((data2) => new RawImage(data2, width, height, 1));
            }
            /**
             * Helper method to update the image data.
             * @param {Uint8ClampedArray} data The new image data.
             * @param {number} width The new width of the image.
             * @param {number} height The new height of the image.
             * @param {1|2|3|4|null} [channels] The new number of channels of the image.
             * @private
             */
            _update(data, width, height, channels = null) {
              this.data = data;
              this.width = width;
              this.height = height;
              if (channels !== null) {
                this.channels = channels;
              }
              return this;
            }
            /**
             * Clone the image
             * @returns {RawImage} The cloned image
             */
            clone() {
              return new RawImage(this.data.slice(), this.width, this.height, this.channels);
            }
            /**
             * Helper method for converting image to have a certain number of channels
             * @param {number} numChannels The number of channels. Must be 1, 3, or 4.
             * @returns {RawImage} `this` to support chaining.
             */
            convert(numChannels) {
              if (this.channels === numChannels)
                return this;
              switch (numChannels) {
                case 1:
                  this.grayscale();
                  break;
                case 3:
                  this.rgb();
                  break;
                case 4:
                  this.rgba();
                  break;
                default:
                  throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
              }
              return this;
            }
            /**
             * Save the image to the given path.
             * @param {string} path The path to save the image to.
             */
            async save(path) {
              if (IS_BROWSER_OR_WEBWORKER) {
                if (_env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_WEBWORKER_ENV) {
                  throw new Error("Unable to save an image from a Web Worker.");
                }
                const extension = path.split(".").pop().toLowerCase();
                const mime = CONTENT_TYPE_MAP.get(extension) ?? "image/png";
                const blob = await this.toBlob(mime);
                (0, _core_js__WEBPACK_IMPORTED_MODULE_0__.saveBlob)(path, blob);
              } else if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_FS_AVAILABLE) {
                throw new Error("Unable to save the image because filesystem is disabled in this environment.");
              } else {
                const img = this.toSharp();
                return await img.toFile(path);
              }
            }
            toSharp() {
              if (IS_BROWSER_OR_WEBWORKER) {
                throw new Error("toSharp() is only supported in server-side environments.");
              }
              return (0, sharp__WEBPACK_IMPORTED_MODULE_4__["default"])(this.data, {
                raw: {
                  width: this.width,
                  height: this.height,
                  channels: this.channels
                }
              });
            }
          }
          const load_image = RawImage.read.bind(RawImage);
        }
      ),
      /***/
      "./src/utils/maths.js": (
        /*!****************************!*\
          !*** ./src/utils/maths.js ***!
          \****************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            FFT: () => (
              /* binding */
              FFT
            ),
            /* harmony export */
            bankers_round: () => (
              /* binding */
              bankers_round
            ),
            /* harmony export */
            cos_sim: () => (
              /* binding */
              cos_sim
            ),
            /* harmony export */
            dot: () => (
              /* binding */
              dot
            ),
            /* harmony export */
            dynamic_time_warping: () => (
              /* binding */
              dynamic_time_warping
            ),
            /* harmony export */
            interpolate_data: () => (
              /* binding */
              interpolate_data
            ),
            /* harmony export */
            log_softmax: () => (
              /* binding */
              log_softmax
            ),
            /* harmony export */
            magnitude: () => (
              /* binding */
              magnitude
            ),
            /* harmony export */
            max: () => (
              /* binding */
              max
            ),
            /* harmony export */
            medianFilter: () => (
              /* binding */
              medianFilter
            ),
            /* harmony export */
            min: () => (
              /* binding */
              min
            ),
            /* harmony export */
            permute_data: () => (
              /* binding */
              permute_data
            ),
            /* harmony export */
            round: () => (
              /* binding */
              round
            ),
            /* harmony export */
            softmax: () => (
              /* binding */
              softmax
            )
            /* harmony export */
          });
          function interpolate_data(input, [in_channels, in_height, in_width], [out_height, out_width], mode = "bilinear", align_corners = false) {
            const x_scale = out_width / in_width;
            const y_scale = out_height / in_height;
            const out_img = new input.constructor(out_height * out_width * in_channels);
            const inStride = in_height * in_width;
            const outStride = out_height * out_width;
            for (let i = 0; i < out_height; ++i) {
              for (let j = 0; j < out_width; ++j) {
                const outOffset = i * out_width + j;
                const x2 = (j + 0.5) / x_scale - 0.5;
                const y2 = (i + 0.5) / y_scale - 0.5;
                let x1 = Math.floor(x2);
                let y1 = Math.floor(y2);
                const x22 = Math.min(x1 + 1, in_width - 1);
                const y22 = Math.min(y1 + 1, in_height - 1);
                x1 = Math.max(x1, 0);
                y1 = Math.max(y1, 0);
                const s = x2 - x1;
                const t = y2 - y1;
                const w1 = (1 - s) * (1 - t);
                const w2 = s * (1 - t);
                const w3 = (1 - s) * t;
                const w4 = s * t;
                const yStride = y1 * in_width;
                const xStride = y22 * in_width;
                const idx1 = yStride + x1;
                const idx2 = yStride + x22;
                const idx3 = xStride + x1;
                const idx4 = xStride + x22;
                for (let k = 0; k < in_channels; ++k) {
                  const cOffset = k * inStride;
                  out_img[k * outStride + outOffset] = w1 * input[cOffset + idx1] + w2 * input[cOffset + idx2] + w3 * input[cOffset + idx3] + w4 * input[cOffset + idx4];
                }
              }
            }
            return out_img;
          }
          function permute_data(array, dims, axes) {
            const shape = new Array(axes.length);
            const stride = new Array(axes.length);
            for (let i = axes.length - 1, s = 1; i >= 0; --i) {
              stride[i] = s;
              shape[i] = dims[axes[i]];
              s *= shape[i];
            }
            const invStride = axes.map((_2, i) => stride[axes.indexOf(i)]);
            const permutedData = new array.constructor(array.length);
            for (let i = 0; i < array.length; ++i) {
              let newIndex = 0;
              for (let j = dims.length - 1, k = i; j >= 0; --j) {
                newIndex += k % dims[j] * invStride[j];
                k = Math.floor(k / dims[j]);
              }
              permutedData[newIndex] = array[i];
            }
            return [permutedData, shape];
          }
          function softmax(arr) {
            const maxVal = max(arr)[0];
            const exps = arr.map((x2) => Math.exp(x2 - maxVal));
            const sumExps = exps.reduce((acc, val) => acc + val, 0);
            const softmaxArr = exps.map((x2) => x2 / sumExps);
            return (
              /** @type {T} */
              softmaxArr
            );
          }
          function log_softmax(arr) {
            const maxVal = max(arr)[0];
            let sumExps = 0;
            for (let i = 0; i < arr.length; ++i) {
              sumExps += Math.exp(arr[i] - maxVal);
            }
            const logSum = Math.log(sumExps);
            const logSoftmaxArr = arr.map((x2) => x2 - maxVal - logSum);
            return (
              /** @type {T} */
              logSoftmaxArr
            );
          }
          function dot(arr1, arr2) {
            let result = 0;
            for (let i = 0; i < arr1.length; ++i) {
              result += arr1[i] * arr2[i];
            }
            return result;
          }
          function cos_sim(arr1, arr2) {
            const dotProduct = dot(arr1, arr2);
            const magnitudeA = magnitude(arr1);
            const magnitudeB = magnitude(arr2);
            const cosineSimilarity = dotProduct / (magnitudeA * magnitudeB);
            return cosineSimilarity;
          }
          function magnitude(arr) {
            return Math.sqrt(arr.reduce((acc, val) => acc + val * val, 0));
          }
          function min(arr) {
            if (arr.length === 0)
              throw Error("Array must not be empty");
            let min2 = arr[0];
            let indexOfMin = 0;
            for (let i = 1; i < arr.length; ++i) {
              if (arr[i] < min2) {
                min2 = arr[i];
                indexOfMin = i;
              }
            }
            return (
              /** @type {T extends bigint[]|BigTypedArray ? [bigint, number] : [number, number]} */
              [min2, indexOfMin]
            );
          }
          function max(arr) {
            if (arr.length === 0)
              throw Error("Array must not be empty");
            let max2 = arr[0];
            let indexOfMax = 0;
            for (let i = 1; i < arr.length; ++i) {
              if (arr[i] > max2) {
                max2 = arr[i];
                indexOfMax = i;
              }
            }
            return (
              /** @type {T extends bigint[]|BigTypedArray ? [bigint, number] : [number, number]} */
              [max2, indexOfMax]
            );
          }
          function isPowerOfTwo(number) {
            return number > 0 && (number & number - 1) === 0;
          }
          class P2FFT {
            /**
             * @param {number} size The size of the input array. Must be a power of two larger than 1.
             * @throws {Error} FFT size must be a power of two larger than 1.
             */
            constructor(size) {
              this.size = size | 0;
              if (this.size <= 1 || !isPowerOfTwo(this.size))
                throw new Error("FFT size must be a power of two larger than 1");
              this._csize = size << 1;
              this.table = new Float64Array(this.size * 2);
              for (let i = 0; i < this.table.length; i += 2) {
                const angle = Math.PI * i / this.size;
                this.table[i] = Math.cos(angle);
                this.table[i + 1] = -Math.sin(angle);
              }
              let power = 0;
              for (let t = 1; this.size > t; t <<= 1)
                ++power;
              this._width = power % 2 === 0 ? power - 1 : power;
              this._bitrev = new Int32Array(1 << this._width);
              for (let j = 0; j < this._bitrev.length; ++j) {
                this._bitrev[j] = 0;
                for (let shift = 0; shift < this._width; shift += 2) {
                  const revShift = this._width - shift - 2;
                  this._bitrev[j] |= (j >>> shift & 3) << revShift;
                }
              }
            }
            /**
             * Create a complex number array with size `2 * size`
             *
             * @returns {Float64Array} A complex number array with size `2 * size`
             */
            createComplexArray() {
              return new Float64Array(this._csize);
            }
            /**
             * Converts a complex number representation stored in a Float64Array to an array of real numbers.
             * 
             * @param {Float64Array} complex The complex number representation to be converted.
             * @param {number[]} [storage] An optional array to store the result in.
             * @returns {number[]} An array of real numbers representing the input complex number representation.
             */
            fromComplexArray(complex, storage) {
              const res = storage || new Array(complex.length >>> 1);
              for (let i = 0; i < complex.length; i += 2)
                res[i >>> 1] = complex[i];
              return res;
            }
            /**
             * Convert a real-valued input array to a complex-valued output array.
             * @param {Float64Array} input The real-valued input array.
             * @param {Float64Array} [storage] Optional buffer to store the output array.
             * @returns {Float64Array} The complex-valued output array.
             */
            toComplexArray(input, storage) {
              const res = storage || this.createComplexArray();
              for (let i = 0; i < res.length; i += 2) {
                res[i] = input[i >>> 1];
                res[i + 1] = 0;
              }
              return res;
            }
            /**
             * Performs a Fast Fourier Transform (FFT) on the given input data and stores the result in the output buffer.
             * 
             * @param {Float64Array} out The output buffer to store the result.
             * @param {Float64Array} data The input data to transform.
             * 
             * @throws {Error} Input and output buffers must be different.
             * 
             * @returns {void}
             */
            transform(out, data) {
              if (out === data)
                throw new Error("Input and output buffers must be different");
              this._transform4(
                out,
                data,
                1
                /* DONE */
              );
            }
            /**
             * Performs a real-valued forward FFT on the given input buffer and stores the result in the given output buffer.
             * The input buffer must contain real values only, while the output buffer will contain complex values. The input and
             * output buffers must be different.
             *
             * @param {Float64Array} out The output buffer.
             * @param {Float64Array} data The input buffer containing real values.
             *
             * @throws {Error} If the input and output buffers are the same.
             */
            realTransform(out, data) {
              if (out === data)
                throw new Error("Input and output buffers must be different");
              this._realTransform4(
                out,
                data,
                1
                /* DONE */
              );
            }
            /**
             * Performs an inverse FFT transformation on the given `data` array, and stores the result in `out`.
             * The `out` array must be a different buffer than the `data` array. The `out` array will contain the
             * result of the transformation. The `data` array will not be modified.
             * 
             * @param {Float64Array} out The output buffer for the transformed data.
             * @param {Float64Array} data The input data to transform.
             * @throws {Error} If `out` and `data` refer to the same buffer.
             * @returns {void}
             */
            inverseTransform(out, data) {
              if (out === data)
                throw new Error("Input and output buffers must be different");
              this._transform4(
                out,
                data,
                -1
                /* DONE */
              );
              for (let i = 0; i < out.length; ++i)
                out[i] /= this.size;
            }
            /**
             * Performs a radix-4 implementation of a discrete Fourier transform on a given set of data.
             *
             * @param {Float64Array} out The output buffer for the transformed data.
             * @param {Float64Array} data The input buffer of data to be transformed.
             * @param {number} inv A scaling factor to apply to the transform.
             * @returns {void}
             */
            _transform4(out, data, inv) {
              const size = this._csize;
              const width = this._width;
              let step = 1 << width;
              let len = size / step << 1;
              let outOff;
              let t;
              const bitrev = this._bitrev;
              if (len === 4) {
                for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {
                  const off = bitrev[t];
                  this._singleTransform2(data, out, outOff, off, step);
                }
              } else {
                for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {
                  const off = bitrev[t];
                  this._singleTransform4(data, out, outOff, off, step, inv);
                }
              }
              const table = this.table;
              for (step >>= 2; step >= 2; step >>= 2) {
                len = size / step << 1;
                const quarterLen = len >>> 2;
                for (outOff = 0; outOff < size; outOff += len) {
                  const limit = outOff + quarterLen - 1;
                  for (let i = outOff, k = 0; i < limit; i += 2, k += step) {
                    const A2 = i;
                    const B2 = A2 + quarterLen;
                    const C2 = B2 + quarterLen;
                    const D2 = C2 + quarterLen;
                    const Ar = out[A2];
                    const Ai = out[A2 + 1];
                    const Br = out[B2];
                    const Bi = out[B2 + 1];
                    const Cr = out[C2];
                    const Ci = out[C2 + 1];
                    const Dr = out[D2];
                    const Di = out[D2 + 1];
                    const tableBr = table[k];
                    const tableBi = inv * table[k + 1];
                    const MBr = Br * tableBr - Bi * tableBi;
                    const MBi = Br * tableBi + Bi * tableBr;
                    const tableCr = table[2 * k];
                    const tableCi = inv * table[2 * k + 1];
                    const MCr = Cr * tableCr - Ci * tableCi;
                    const MCi = Cr * tableCi + Ci * tableCr;
                    const tableDr = table[3 * k];
                    const tableDi = inv * table[3 * k + 1];
                    const MDr = Dr * tableDr - Di * tableDi;
                    const MDi = Dr * tableDi + Di * tableDr;
                    const T0r = Ar + MCr;
                    const T0i = Ai + MCi;
                    const T1r = Ar - MCr;
                    const T1i = Ai - MCi;
                    const T2r = MBr + MDr;
                    const T2i = MBi + MDi;
                    const T3r = inv * (MBr - MDr);
                    const T3i = inv * (MBi - MDi);
                    out[A2] = T0r + T2r;
                    out[A2 + 1] = T0i + T2i;
                    out[B2] = T1r + T3i;
                    out[B2 + 1] = T1i - T3r;
                    out[C2] = T0r - T2r;
                    out[C2 + 1] = T0i - T2i;
                    out[D2] = T1r - T3i;
                    out[D2 + 1] = T1i + T3r;
                  }
                }
              }
            }
            /**
             * Performs a radix-2 implementation of a discrete Fourier transform on a given set of data.
             *
             * @param {Float64Array} data The input buffer of data to be transformed.
             * @param {Float64Array} out The output buffer for the transformed data.
             * @param {number} outOff The offset at which to write the output data.
             * @param {number} off The offset at which to begin reading the input data.
             * @param {number} step The step size for indexing the input data.
             * @returns {void}
             */
            _singleTransform2(data, out, outOff, off, step) {
              const evenR = data[off];
              const evenI = data[off + 1];
              const oddR = data[off + step];
              const oddI = data[off + step + 1];
              out[outOff] = evenR + oddR;
              out[outOff + 1] = evenI + oddI;
              out[outOff + 2] = evenR - oddR;
              out[outOff + 3] = evenI - oddI;
            }
            /**
             * Performs radix-4 transformation on input data of length 8
             *
             * @param {Float64Array} data Input data array of length 8
             * @param {Float64Array} out Output data array of length 8
             * @param {number} outOff Index of output array to start writing from
             * @param {number} off Index of input array to start reading from
             * @param {number} step Step size between elements in input array
             * @param {number} inv Scaling factor for inverse transform
             * 
             * @returns {void}
             */
            _singleTransform4(data, out, outOff, off, step, inv) {
              const step2 = step * 2;
              const step3 = step * 3;
              const Ar = data[off];
              const Ai = data[off + 1];
              const Br = data[off + step];
              const Bi = data[off + step + 1];
              const Cr = data[off + step2];
              const Ci = data[off + step2 + 1];
              const Dr = data[off + step3];
              const Di = data[off + step3 + 1];
              const T0r = Ar + Cr;
              const T0i = Ai + Ci;
              const T1r = Ar - Cr;
              const T1i = Ai - Ci;
              const T2r = Br + Dr;
              const T2i = Bi + Di;
              const T3r = inv * (Br - Dr);
              const T3i = inv * (Bi - Di);
              out[outOff] = T0r + T2r;
              out[outOff + 1] = T0i + T2i;
              out[outOff + 2] = T1r + T3i;
              out[outOff + 3] = T1i - T3r;
              out[outOff + 4] = T0r - T2r;
              out[outOff + 5] = T0i - T2i;
              out[outOff + 6] = T1r - T3i;
              out[outOff + 7] = T1i + T3r;
            }
            /**
             * Real input radix-4 implementation
             * @param {Float64Array} out Output array for the transformed data
             * @param {Float64Array} data Input array of real data to be transformed
             * @param {number} inv The scale factor used to normalize the inverse transform
             */
            _realTransform4(out, data, inv) {
              const size = this._csize;
              const width = this._width;
              let step = 1 << width;
              let len = size / step << 1;
              let outOff;
              let t;
              const bitrev = this._bitrev;
              if (len === 4) {
                for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {
                  const off = bitrev[t];
                  this._singleRealTransform2(data, out, outOff, off >>> 1, step >>> 1);
                }
              } else {
                for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {
                  const off = bitrev[t];
                  this._singleRealTransform4(data, out, outOff, off >>> 1, step >>> 1, inv);
                }
              }
              const table = this.table;
              for (step >>= 2; step >= 2; step >>= 2) {
                len = size / step << 1;
                const halfLen = len >>> 1;
                const quarterLen = halfLen >>> 1;
                const hquarterLen = quarterLen >>> 1;
                for (outOff = 0; outOff < size; outOff += len) {
                  for (let i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {
                    const A2 = outOff + i;
                    const B2 = A2 + quarterLen;
                    const C2 = B2 + quarterLen;
                    const D2 = C2 + quarterLen;
                    const Ar = out[A2];
                    const Ai = out[A2 + 1];
                    const Br = out[B2];
                    const Bi = out[B2 + 1];
                    const Cr = out[C2];
                    const Ci = out[C2 + 1];
                    const Dr = out[D2];
                    const Di = out[D2 + 1];
                    const MAr = Ar;
                    const MAi = Ai;
                    const tableBr = table[k];
                    const tableBi = inv * table[k + 1];
                    const MBr = Br * tableBr - Bi * tableBi;
                    const MBi = Br * tableBi + Bi * tableBr;
                    const tableCr = table[2 * k];
                    const tableCi = inv * table[2 * k + 1];
                    const MCr = Cr * tableCr - Ci * tableCi;
                    const MCi = Cr * tableCi + Ci * tableCr;
                    const tableDr = table[3 * k];
                    const tableDi = inv * table[3 * k + 1];
                    const MDr = Dr * tableDr - Di * tableDi;
                    const MDi = Dr * tableDi + Di * tableDr;
                    const T0r = MAr + MCr;
                    const T0i = MAi + MCi;
                    const T1r = MAr - MCr;
                    const T1i = MAi - MCi;
                    const T2r = MBr + MDr;
                    const T2i = MBi + MDi;
                    const T3r = inv * (MBr - MDr);
                    const T3i = inv * (MBi - MDi);
                    out[A2] = T0r + T2r;
                    out[A2 + 1] = T0i + T2i;
                    out[B2] = T1r + T3i;
                    out[B2 + 1] = T1i - T3r;
                    if (i === 0) {
                      out[C2] = T0r - T2r;
                      out[C2 + 1] = T0i - T2i;
                      continue;
                    }
                    if (i === hquarterLen)
                      continue;
                    const SA = outOff + quarterLen - i;
                    const SB = outOff + halfLen - i;
                    out[SA] = T1r - inv * T3i;
                    out[SA + 1] = -T1i - inv * T3r;
                    out[SB] = T0r - inv * T2r;
                    out[SB + 1] = -T0i + inv * T2i;
                  }
                }
              }
              const half = size >>> 1;
              for (let i = 2; i < half; i += 2) {
                out[size - i] = out[i];
                out[size - i + 1] = -out[i + 1];
              }
            }
            /**
             * Performs a single real input radix-2 transformation on the provided data
             * 
             * @param {Float64Array} data The input data array
             * @param {Float64Array} out The output data array
             * @param {number} outOff The output offset
             * @param {number} off The input offset
             * @param {number} step The step
             * 
             * @returns {void}
             */
            _singleRealTransform2(data, out, outOff, off, step) {
              const evenR = data[off];
              const oddR = data[off + step];
              out[outOff] = evenR + oddR;
              out[outOff + 1] = 0;
              out[outOff + 2] = evenR - oddR;
              out[outOff + 3] = 0;
            }
            /**
             * Computes a single real-valued transform using radix-4 algorithm.
             * This method is only called for len=8.
             *
             * @param {Float64Array} data The input data array.
             * @param {Float64Array} out The output data array.
             * @param {number} outOff The offset into the output array.
             * @param {number} off The offset into the input array.
             * @param {number} step The step size for the input array.
             * @param {number} inv The value of inverse.
             */
            _singleRealTransform4(data, out, outOff, off, step, inv) {
              const step2 = step * 2;
              const step3 = step * 3;
              const Ar = data[off];
              const Br = data[off + step];
              const Cr = data[off + step2];
              const Dr = data[off + step3];
              const T0r = Ar + Cr;
              const T1r = Ar - Cr;
              const T2r = Br + Dr;
              const T3r = inv * (Br - Dr);
              out[outOff] = T0r + T2r;
              out[outOff + 1] = 0;
              out[outOff + 2] = T1r;
              out[outOff + 3] = -T3r;
              out[outOff + 4] = T0r - T2r;
              out[outOff + 5] = 0;
              out[outOff + 6] = T1r;
              out[outOff + 7] = T3r;
            }
          }
          class NP2FFT {
            /**
             * Constructs a new NP2FFT object.
             * @param {number} fft_length The length of the FFT
             */
            constructor(fft_length) {
              const a = 2 * (fft_length - 1);
              const b = 2 * (2 * fft_length - 1);
              const nextP2 = 2 ** Math.ceil(Math.log2(b));
              this.bufferSize = nextP2;
              this._a = a;
              const chirp = new Float64Array(b);
              const ichirp = new Float64Array(nextP2);
              this._chirpBuffer = new Float64Array(nextP2);
              this._buffer1 = new Float64Array(nextP2);
              this._buffer2 = new Float64Array(nextP2);
              this._outBuffer1 = new Float64Array(nextP2);
              this._outBuffer2 = new Float64Array(nextP2);
              const theta = -2 * Math.PI / fft_length;
              const baseR = Math.cos(theta);
              const baseI = Math.sin(theta);
              for (let i = 0; i < b >> 1; ++i) {
                const e = (i + 1 - fft_length) ** 2 / 2;
                const result_mod = Math.sqrt(baseR ** 2 + baseI ** 2) ** e;
                const result_arg = e * Math.atan2(baseI, baseR);
                const i2 = 2 * i;
                chirp[i2] = result_mod * Math.cos(result_arg);
                chirp[i2 + 1] = result_mod * Math.sin(result_arg);
                ichirp[i2] = chirp[i2];
                ichirp[i2 + 1] = -chirp[i2 + 1];
              }
              this._slicedChirpBuffer = chirp.subarray(a, b);
              this._f = new P2FFT(nextP2 >> 1);
              this._f.transform(this._chirpBuffer, ichirp);
            }
            _transform(output, input, real) {
              const ib1 = this._buffer1;
              const ib2 = this._buffer2;
              const ob2 = this._outBuffer1;
              const ob3 = this._outBuffer2;
              const cb = this._chirpBuffer;
              const sb = this._slicedChirpBuffer;
              const a = this._a;
              if (real) {
                for (let j = 0; j < sb.length; j += 2) {
                  const j2 = j + 1;
                  const j3 = j >> 1;
                  const a_real = input[j3];
                  ib1[j] = a_real * sb[j];
                  ib1[j2] = a_real * sb[j2];
                }
              } else {
                for (let j = 0; j < sb.length; j += 2) {
                  const j2 = j + 1;
                  ib1[j] = input[j] * sb[j] - input[j2] * sb[j2];
                  ib1[j2] = input[j] * sb[j2] + input[j2] * sb[j];
                }
              }
              this._f.transform(ob2, ib1);
              for (let j = 0; j < cb.length; j += 2) {
                const j2 = j + 1;
                ib2[j] = ob2[j] * cb[j] - ob2[j2] * cb[j2];
                ib2[j2] = ob2[j] * cb[j2] + ob2[j2] * cb[j];
              }
              this._f.inverseTransform(ob3, ib2);
              for (let j = 0; j < ob3.length; j += 2) {
                const a_real = ob3[j + a];
                const a_imag = ob3[j + a + 1];
                const b_real = sb[j];
                const b_imag = sb[j + 1];
                output[j] = a_real * b_real - a_imag * b_imag;
                output[j + 1] = a_real * b_imag + a_imag * b_real;
              }
            }
            transform(output, input) {
              this._transform(output, input, false);
            }
            realTransform(output, input) {
              this._transform(output, input, true);
            }
          }
          class FFT {
            constructor(fft_length) {
              this.fft_length = fft_length;
              this.isPowerOfTwo = isPowerOfTwo(fft_length);
              if (this.isPowerOfTwo) {
                this.fft = new P2FFT(fft_length);
                this.outputBufferSize = 2 * fft_length;
              } else {
                this.fft = new NP2FFT(fft_length);
                this.outputBufferSize = this.fft.bufferSize;
              }
            }
            realTransform(out, input) {
              this.fft.realTransform(out, input);
            }
            transform(out, input) {
              this.fft.transform(out, input);
            }
          }
          function medianFilter(data, windowSize) {
            if (windowSize % 2 === 0 || windowSize <= 0) {
              throw new Error("Window size must be a positive odd number");
            }
            const outputArray = new data.constructor(data.length);
            const buffer = new data.constructor(windowSize);
            const halfWindowSize = Math.floor(windowSize / 2);
            for (let i = 0; i < data.length; ++i) {
              let valuesIndex = 0;
              for (let j = -halfWindowSize; j <= halfWindowSize; ++j) {
                let index = i + j;
                if (index < 0) {
                  index = Math.abs(index);
                } else if (index >= data.length) {
                  index = 2 * (data.length - 1) - index;
                }
                buffer[valuesIndex++] = data[index];
              }
              buffer.sort();
              outputArray[i] = buffer[halfWindowSize];
            }
            return outputArray;
          }
          function round(num, decimals) {
            const pow = Math.pow(10, decimals);
            return Math.round(num * pow) / pow;
          }
          function bankers_round(x2) {
            const r = Math.round(x2);
            const br = Math.abs(x2) % 1 === 0.5 ? r % 2 === 0 ? r : r - 1 : r;
            return br;
          }
          function dynamic_time_warping(matrix) {
            const output_length = matrix.length;
            const input_length = matrix[0].length;
            const outputShape = [output_length + 1, input_length + 1];
            const cost = Array.from(
              { length: outputShape[0] },
              () => Array(outputShape[1]).fill(Infinity)
            );
            cost[0][0] = 0;
            const trace = Array.from(
              { length: outputShape[0] },
              () => Array(outputShape[1]).fill(-1)
            );
            for (let j2 = 1; j2 < outputShape[1]; ++j2) {
              for (let i2 = 1; i2 < outputShape[0]; ++i2) {
                const c0 = cost[i2 - 1][j2 - 1];
                const c1 = cost[i2 - 1][j2];
                const c2 = cost[i2][j2 - 1];
                let c, t;
                if (c0 < c1 && c0 < c2) {
                  c = c0;
                  t = 0;
                } else if (c1 < c0 && c1 < c2) {
                  c = c1;
                  t = 1;
                } else {
                  c = c2;
                  t = 2;
                }
                cost[i2][j2] = matrix[i2 - 1][j2 - 1] + c;
                trace[i2][j2] = t;
              }
            }
            for (let i2 = 0; i2 < outputShape[1]; ++i2) {
              trace[0][i2] = 2;
            }
            for (let i2 = 0; i2 < outputShape[0]; ++i2) {
              trace[i2][0] = 1;
            }
            let i = output_length;
            let j = input_length;
            let text_indices = [];
            let time_indices = [];
            while (i > 0 || j > 0) {
              text_indices.push(i - 1);
              time_indices.push(j - 1);
              switch (trace[i][j]) {
                case 0:
                  --i;
                  --j;
                  break;
                case 1:
                  --i;
                  break;
                case 2:
                  --j;
                  break;
                default:
                  throw new Error(
                    `Internal error in dynamic time warping. Unexpected trace[${i}, ${j}]. Please file a bug report.`
                  );
              }
            }
            text_indices.reverse();
            time_indices.reverse();
            return [text_indices, time_indices];
          }
        }
      ),
      /***/
      "./src/utils/tensor.js": (
        /*!*****************************!*\
          !*** ./src/utils/tensor.js ***!
          \*****************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            DataTypeMap: () => (
              /* binding */
              DataTypeMap
            ),
            /* harmony export */
            Tensor: () => (
              /* binding */
              Tensor3
            ),
            /* harmony export */
            cat: () => (
              /* binding */
              cat
            ),
            /* harmony export */
            full: () => (
              /* binding */
              full
            ),
            /* harmony export */
            full_like: () => (
              /* binding */
              full_like
            ),
            /* harmony export */
            interpolate: () => (
              /* binding */
              interpolate
            ),
            /* harmony export */
            interpolate_4d: () => (
              /* binding */
              interpolate_4d
            ),
            /* harmony export */
            layer_norm: () => (
              /* binding */
              layer_norm
            ),
            /* harmony export */
            matmul: () => (
              /* binding */
              matmul
            ),
            /* harmony export */
            mean: () => (
              /* binding */
              mean
            ),
            /* harmony export */
            mean_pooling: () => (
              /* binding */
              mean_pooling
            ),
            /* harmony export */
            ones: () => (
              /* binding */
              ones
            ),
            /* harmony export */
            ones_like: () => (
              /* binding */
              ones_like
            ),
            /* harmony export */
            permute: () => (
              /* binding */
              permute
            ),
            /* harmony export */
            quantize_embeddings: () => (
              /* binding */
              quantize_embeddings
            ),
            /* harmony export */
            rand: () => (
              /* binding */
              rand
            ),
            /* harmony export */
            rfft: () => (
              /* binding */
              rfft
            ),
            /* harmony export */
            slice: () => (
              /* binding */
              slice
            ),
            /* harmony export */
            stack: () => (
              /* binding */
              stack
            ),
            /* harmony export */
            std_mean: () => (
              /* binding */
              std_mean
            ),
            /* harmony export */
            topk: () => (
              /* binding */
              topk
            ),
            /* harmony export */
            zeros: () => (
              /* binding */
              zeros
            ),
            /* harmony export */
            zeros_like: () => (
              /* binding */
              zeros_like
            )
            /* harmony export */
          });
          var _maths_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ./maths.js */
            "./src/utils/maths.js"
          );
          var _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../backends/onnx.js */
            "./src/backends/onnx.js"
          );
          var _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
            /*! ../ops/registry.js */
            "./src/ops/registry.js"
          );
          const DataTypeMap = Object.freeze({
            float32: Float32Array,
            // @ts-ignore ts(2552) Limited availability of Float16Array across browsers:
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array
            float16: typeof Float16Array !== "undefined" ? Float16Array : Uint16Array,
            float64: Float64Array,
            string: Array,
            // string[]
            int8: Int8Array,
            uint8: Uint8Array,
            int16: Int16Array,
            uint16: Uint16Array,
            int32: Int32Array,
            uint32: Uint32Array,
            int64: BigInt64Array,
            uint64: BigUint64Array,
            bool: Uint8Array,
            uint4: Uint8Array,
            int4: Int8Array
          });
          class Tensor3 {
            /**
             * Create a new Tensor or copy an existing Tensor.
             * @param {[DataType, DataArray, number[]]|[ONNXTensor]} args
             */
            constructor(...args) {
              __publicField(this, "ort_tensor");
              if ((0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.isONNXTensor)(args[0])) {
                this.ort_tensor = /** @type {ONNXTensor} */
                args[0];
              } else {
                this.ort_tensor = new _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(
                  /** @type {DataType} */
                  args[0],
                  // @ts-expect-error ts(2769) Type 'number' is not assignable to type 'bigint'.
                  /** @type {Exclude<import('./maths.js').AnyTypedArray, Uint8ClampedArray>} */
                  args[1],
                  args[2]
                );
              }
              return new Proxy(this, {
                get: (obj, key) => {
                  if (typeof key === "string") {
                    let index = Number(key);
                    if (Number.isInteger(index)) {
                      return obj._getitem(index);
                    }
                  }
                  return obj[key];
                },
                set: (obj, key, value) => {
                  return obj[key] = value;
                }
              });
            }
            /** @type {number[]} Dimensions of the tensor. */
            get dims() {
              return this.ort_tensor.dims;
            }
            set dims(value) {
              this.ort_tensor.dims = value;
            }
            /** @type {DataType} Type of the tensor. */
            get type() {
              return this.ort_tensor.type;
            }
            /** @type {DataArray} The data stored in the tensor. */
            get data() {
              return this.ort_tensor.data;
            }
            /** @type {number} The number of elements in the tensor. */
            get size() {
              return this.ort_tensor.size;
            }
            /** @type {string} The location of the tensor data. */
            get location() {
              return this.ort_tensor.location;
            }
            dispose() {
              this.ort_tensor.dispose();
            }
            /**
             * Returns an iterator object for iterating over the tensor data in row-major order.
             * If the tensor has more than one dimension, the iterator will yield subarrays.
             * @returns {Iterator} An iterator object for iterating over the tensor data in row-major order.
             */
            *[Symbol.iterator]() {
              const [iterLength, ...iterDims] = this.dims;
              if (iterDims.length > 0) {
                const iterSize = iterDims.reduce((a, b) => a * b);
                for (let i = 0; i < iterLength; ++i) {
                  yield this._subarray(i, iterSize, iterDims);
                }
              } else {
                yield* this.data;
              }
            }
            /**
             * Index into a Tensor object.
             * @param {number} index The index to access.
             * @returns {Tensor} The data at the specified index.
             */
            _getitem(index) {
              const [iterLength, ...iterDims] = this.dims;
              index = safeIndex(index, iterLength);
              if (iterDims.length > 0) {
                const iterSize = iterDims.reduce((a, b) => a * b);
                return this._subarray(index, iterSize, iterDims);
              } else {
                return new Tensor3(this.type, [this.data[index]], iterDims);
              }
            }
            /**
             * @param {number|bigint} item The item to search for in the tensor
             * @returns {number} The index of the first occurrence of item in the tensor data.
             */
            indexOf(item) {
              const this_data = this.data;
              for (let index = 0; index < this_data.length; ++index) {
                if (this_data[index] == item) {
                  return index;
                }
              }
              return -1;
            }
            /**
             * @param {number} index
             * @param {number} iterSize
             * @param {any} iterDims
             * @returns {Tensor}
             */
            _subarray(index, iterSize, iterDims) {
              const o1 = index * iterSize;
              const o2 = (index + 1) * iterSize;
              const data = "subarray" in this.data ? this.data.subarray(o1, o2) : this.data.slice(o1, o2);
              return new Tensor3(this.type, data, iterDims);
            }
            /**
             * Returns the value of this tensor as a standard JavaScript Number. This only works
             * for tensors with one element. For other cases, see `Tensor.tolist()`.
             * @returns {number|bigint} The value of this tensor as a standard JavaScript Number.
             * @throws {Error} If the tensor has more than one element.
             */
            item() {
              const this_data = this.data;
              if (this_data.length !== 1) {
                throw new Error(`a Tensor with ${this_data.length} elements cannot be converted to Scalar`);
              }
              return this_data[0];
            }
            /**
             * Convert tensor data to a n-dimensional JS list
             * @returns {Array}
             */
            tolist() {
              return reshape(this.data, this.dims);
            }
            /**
             * Return a new Tensor with the sigmoid function applied to each element.
             * @returns {Tensor} The tensor with the sigmoid function applied.
             */
            sigmoid() {
              return this.clone().sigmoid_();
            }
            /**
             * Applies the sigmoid function to the tensor in place.
             * @returns {Tensor} Returns `this`.
             */
            sigmoid_() {
              const this_data = this.data;
              for (let i = 0; i < this_data.length; ++i) {
                this_data[i] = 1 / (1 + Math.exp(-this_data[i]));
              }
              return this;
            }
            /**
             * Return a new Tensor with a callback function applied to each element.
             * @param {Function} callback - The function to apply to each element. It should take three arguments:
             *                              the current element, its index, and the tensor's data array.
             * @returns {Tensor} A new Tensor with the callback function applied to each element.
             */
            map(callback) {
              return this.clone().map_(callback);
            }
            /**
             * Apply a callback function to each element of the tensor in place.
             * @param {Function} callback - The function to apply to each element. It should take three arguments:
             *                              the current element, its index, and the tensor's data array.
             * @returns {Tensor} Returns `this`.
             */
            map_(callback) {
              const this_data = this.data;
              for (let i = 0; i < this_data.length; ++i) {
                this_data[i] = callback(this_data[i], i, this_data);
              }
              return this;
            }
            /**
             * Return a new Tensor with every element multiplied by a constant.
             * @param {number} val The value to multiply by.
             * @returns {Tensor} The new tensor.
             */
            mul(val) {
              return this.clone().mul_(val);
            }
            /**
             * Multiply the tensor by a constant in place.
             * @param {number} val The value to multiply by.
             * @returns {Tensor} Returns `this`.
             */
            mul_(val) {
              const this_data = this.data;
              for (let i = 0; i < this_data.length; ++i) {
                this_data[i] *= val;
              }
              return this;
            }
            /**
             * Return a new Tensor with every element divided by a constant.
             * @param {number} val The value to divide by.
             * @returns {Tensor} The new tensor.
             */
            div(val) {
              return this.clone().div_(val);
            }
            /**
             * Divide the tensor by a constant in place.
             * @param {number} val The value to divide by.
             * @returns {Tensor} Returns `this`.
             */
            div_(val) {
              const this_data = this.data;
              for (let i = 0; i < this_data.length; ++i) {
                this_data[i] /= val;
              }
              return this;
            }
            /**
             * Return a new Tensor with every element added by a constant.
             * @param {number} val The value to add by.
             * @returns {Tensor} The new tensor.
             */
            add(val) {
              return this.clone().add_(val);
            }
            /**
             * Add the tensor by a constant in place.
             * @param {number} val The value to add by.
             * @returns {Tensor} Returns `this`.
             */
            add_(val) {
              const this_data = this.data;
              for (let i = 0; i < this_data.length; ++i) {
                this_data[i] += val;
              }
              return this;
            }
            /**
             * Return a new Tensor with every element subtracted by a constant.
             * @param {number} val The value to subtract by.
             * @returns {Tensor} The new tensor.
             */
            sub(val) {
              return this.clone().sub_(val);
            }
            /**
             * Subtract the tensor by a constant in place.
             * @param {number} val The value to subtract by.
             * @returns {Tensor} Returns `this`.
             */
            sub_(val) {
              const this_data = this.data;
              for (let i = 0; i < this_data.length; ++i) {
                this_data[i] -= val;
              }
              return this;
            }
            /**
             * Creates a deep copy of the current Tensor.
             * @returns {Tensor} A new Tensor with the same type, data, and dimensions as the original.
             */
            clone() {
              return new Tensor3(this.type, this.data.slice(), this.dims.slice());
            }
            /**
             * Performs a slice operation on the Tensor along specified dimensions.
             *
             * Consider a Tensor that has a dimension of [4, 7]:
             * ```
             * [ 1,  2,  3,  4,  5,  6,  7]
             * [ 8,  9, 10, 11, 12, 13, 14]
             * [15, 16, 17, 18, 19, 20, 21]
             * [22, 23, 24, 25, 26, 27, 28]
             * ```
             * We can slice against the two dims of row and column, for instance in this
             * case we can start at the second element, and return to the second last,
             * like this:
             * ```
             * tensor.slice([1, -1], [1, -1]);
             * ```
             * which would return:
             * ```
             * [  9, 10, 11, 12, 13 ]
             * [ 16, 17, 18, 19, 20 ]
             * ```
             *
             * @param {...(number|number[]|null)} slices The slice specifications for each dimension.
             * - If a number is given, then a single element is selected.
             * - If an array of two numbers is given, then a range of elements [start, end (exclusive)] is selected.
             * - If null is given, then the entire dimension is selected.
             * @returns {Tensor} A new Tensor containing the selected elements.
             * @throws {Error} If the slice input is invalid.
             */
            slice(...slices) {
              const newTensorDims = [];
              const newOffsets = [];
              for (let sliceIndex = 0; sliceIndex < this.dims.length; ++sliceIndex) {
                let slice2 = slices[sliceIndex];
                if (slice2 === null || slice2 === void 0) {
                  newOffsets.push([0, this.dims[sliceIndex]]);
                  newTensorDims.push(this.dims[sliceIndex]);
                } else if (typeof slice2 === "number") {
                  slice2 = safeIndex(slice2, this.dims[sliceIndex], sliceIndex);
                  newOffsets.push([slice2, slice2 + 1]);
                } else if (Array.isArray(slice2) && slice2.length === 2) {
                  let [start, end] = slice2;
                  start = start === null ? 0 : safeIndex(start, this.dims[sliceIndex], sliceIndex, false);
                  end = end === null ? this.dims[sliceIndex] : safeIndex(end, this.dims[sliceIndex], sliceIndex, false);
                  if (start > end) {
                    throw new Error(`Invalid slice: ${slice2}`);
                  }
                  const offsets = [
                    Math.max(start, 0),
                    Math.min(end, this.dims[sliceIndex])
                  ];
                  newOffsets.push(offsets);
                  newTensorDims.push(offsets[1] - offsets[0]);
                } else {
                  throw new Error(`Invalid slice: ${slice2}`);
                }
              }
              const newDims = newOffsets.map(([start, end]) => end - start);
              const newBufferSize = newDims.reduce((a, b) => a * b);
              const this_data = this.data;
              const data = new this_data.constructor(newBufferSize);
              const stride = this.stride();
              for (let i = 0; i < newBufferSize; ++i) {
                let originalIndex = 0;
                for (let j = newDims.length - 1, num = i; j >= 0; --j) {
                  const size = newDims[j];
                  originalIndex += (num % size + newOffsets[j][0]) * stride[j];
                  num = Math.floor(num / size);
                }
                data[i] = this_data[originalIndex];
              }
              return new Tensor3(this.type, data, newTensorDims);
            }
            /**
             * Return a permuted version of this Tensor, according to the provided dimensions.
             * @param  {...number} dims Dimensions to permute.
             * @returns {Tensor} The permuted tensor.
             */
            permute(...dims) {
              return permute(this, dims);
            }
            // TODO: implement transpose. For now (backwards compatibility), it's just an alias for permute()
            transpose(...dims) {
              return this.permute(...dims);
            }
            /**
             * Returns the sum of each row of the input tensor in the given dimension dim.
             *
             * @param {number} [dim=null] The dimension or dimensions to reduce. If `null`, all dimensions are reduced.
             * @param {boolean} keepdim Whether the output tensor has `dim` retained or not.
             * @returns The summed tensor
             */
            sum(dim = null, keepdim = false) {
              return this.norm(1, dim, keepdim);
            }
            /**
             * Returns the matrix norm or vector norm of a given tensor.
             * @param {number|string} [p='fro'] The order of norm
             * @param {number} [dim=null] Specifies which dimension of the tensor to calculate the norm across.
             * If dim is None, the norm will be calculated across all dimensions of input.
             * @param {boolean} [keepdim=false] Whether the output tensors have dim retained or not.
             * @returns {Tensor} The norm of the tensor.
             */
            norm(p = "fro", dim = null, keepdim = false) {
              if (p === "fro") {
                p = 2;
              } else if (typeof p === "string") {
                throw Error(`Unsupported norm: ${p}`);
              }
              const this_data = this.data;
              const fn = (a, b) => a + b ** p;
              if (dim === null) {
                const val = this_data.reduce(fn, 0) ** (1 / p);
                return new Tensor3(this.type, [val], []);
              }
              const [type, result, resultDims] = reduce_helper(fn, this, dim, keepdim);
              if (p !== 1) {
                for (let i = 0; i < result.length; ++i) {
                  result[i] = result[i] ** (1 / p);
                }
              }
              return new Tensor3(type, result, resultDims);
            }
            /**
             * Performs `L_p` normalization of inputs over specified dimension. Operates in place.
             * @param {number} [p=2] The exponent value in the norm formulation
             * @param {number} [dim=1] The dimension to reduce
             * @returns {Tensor} `this` for operation chaining.
             */
            normalize_(p = 2, dim = 1) {
              dim = safeIndex(dim, this.dims.length);
              const norm = this.norm(p, dim, true);
              const this_data = this.data;
              const norm_data = norm.data;
              for (let i = 0; i < this_data.length; ++i) {
                let resultIndex = 0;
                for (let j = this.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
                  const size = this.dims[j];
                  if (j !== dim) {
                    const index = num % size;
                    resultIndex += index * resultMultiplier;
                    resultMultiplier *= this.dims[j];
                  }
                  num = Math.floor(num / size);
                }
                this_data[i] /= norm_data[resultIndex];
              }
              return this;
            }
            /**
             * Performs `L_p` normalization of inputs over specified dimension.
             * @param {number} [p=2] The exponent value in the norm formulation
             * @param {number} [dim=1] The dimension to reduce
             * @returns {Tensor} The normalized tensor.
             */
            normalize(p = 2, dim = 1) {
              return this.clone().normalize_(p, dim);
            }
            /**
             * Compute and return the stride of this tensor.
             * Stride is the jump necessary to go from one element to the next one in the specified dimension dim.
             * @returns {number[]} The stride of this tensor.
             */
            stride() {
              return dimsToStride(this.dims);
            }
            /**
             * Returns a tensor with all specified dimensions of input of size 1 removed.
             *
             * NOTE: The returned tensor shares the storage with the input tensor, so changing the contents of one will change the contents of the other.
             * If you would like a copy, use `tensor.clone()` before squeezing.
             *
             * @param {number|number[]} [dim=null] If given, the input will be squeezed only in the specified dimensions.
             * @returns {Tensor} The squeezed tensor
             */
            squeeze(dim = null) {
              return new Tensor3(
                this.type,
                this.data,
                calc_squeeze_dims(this.dims, dim)
              );
            }
            /**
             * In-place version of @see {@link Tensor.squeeze}
             */
            squeeze_(dim = null) {
              this.dims = calc_squeeze_dims(this.dims, dim);
              return this;
            }
            /**
             * Returns a new tensor with a dimension of size one inserted at the specified position.
             *
             * NOTE: The returned tensor shares the same underlying data with this tensor.
             *
             * @param {number} dim The index at which to insert the singleton dimension
             * @returns {Tensor} The unsqueezed tensor
             */
            unsqueeze(dim = null) {
              return new Tensor3(
                this.type,
                this.data,
                calc_unsqueeze_dims(this.dims, dim)
              );
            }
            /**
             * In-place version of @see {@link Tensor.unsqueeze}
             */
            unsqueeze_(dim = null) {
              this.dims = calc_unsqueeze_dims(this.dims, dim);
              return this;
            }
            /**
             * In-place version of @see {@link Tensor.flatten}
             */
            flatten_(start_dim = 0, end_dim = -1) {
              end_dim = (end_dim + this.dims.length) % this.dims.length;
              let dimsToKeepBefore = this.dims.slice(0, start_dim);
              let dimsToFlatten = this.dims.slice(start_dim, end_dim + 1);
              let dimsToKeepAfter = this.dims.slice(end_dim + 1);
              this.dims = [...dimsToKeepBefore, dimsToFlatten.reduce((a, b) => a * b, 1), ...dimsToKeepAfter];
              return this;
            }
            /**
             * Flattens input by reshaping it into a one-dimensional tensor.
             * If `start_dim` or `end_dim` are passed, only dimensions starting with `start_dim`
             * and ending with `end_dim` are flattened. The order of elements in input is unchanged.
             * @param {number} start_dim the first dim to flatten
             * @param {number} end_dim the last dim to flatten
             * @returns {Tensor} The flattened tensor.
             */
            flatten(start_dim = 0, end_dim = -1) {
              return this.clone().flatten_(start_dim, end_dim);
            }
            /**
             * Returns a new tensor with the same data as the `self` tensor but of a different `shape`.
             * @param  {...number} dims the desired size
             * @returns {Tensor} The tensor with the same data but different shape
             */
            view(...dims) {
              let inferredIndex = -1;
              for (let i = 0; i < dims.length; ++i) {
                if (dims[i] === -1) {
                  if (inferredIndex !== -1) {
                    throw new Error("Only one dimension can be inferred");
                  }
                  inferredIndex = i;
                }
              }
              const this_data = this.data;
              if (inferredIndex !== -1) {
                const productOther = dims.reduce((product, curr, index) => {
                  return index !== inferredIndex ? product * curr : product;
                }, 1);
                dims[inferredIndex] = this_data.length / productOther;
              }
              return new Tensor3(this.type, this_data, dims);
            }
            neg_() {
              const this_data = this.data;
              for (let i = 0; i < this_data.length; ++i) {
                this_data[i] = -this_data[i];
              }
              return this;
            }
            neg() {
              return this.clone().neg_();
            }
            /**
             * Computes input > val element-wise.
             * @param {number} val The value to compare with.
             * @returns {Tensor} A boolean tensor that is `true` where input is greater than other and `false` elsewhere.
             */
            gt(val) {
              const mask = new Uint8Array(this.data.length);
              const this_data = this.data;
              for (let i = 0; i < this_data.length; ++i) {
                mask[i] = this_data[i] > val ? 1 : 0;
              }
              return new Tensor3("bool", mask, this.dims);
            }
            /**
             * Computes input < val element-wise.
             * @param {number} val The value to compare with.
             * @returns {Tensor} A boolean tensor that is `true` where input is less than other and `false` elsewhere.
             */
            lt(val) {
              const mask = new Uint8Array(this.data.length);
              const this_data = this.data;
              for (let i = 0; i < this_data.length; ++i) {
                mask[i] = this_data[i] < val ? 1 : 0;
              }
              return new Tensor3("bool", mask, this.dims);
            }
            /**
             * In-place version of @see {@link Tensor.clamp}
             */
            clamp_(min, max) {
              const this_data = this.data;
              for (let i = 0; i < this_data.length; ++i) {
                this_data[i] = Math.min(Math.max(this_data[i], min), max);
              }
              return this;
            }
            /**
             * Clamps all elements in input into the range [ min, max ]
             * @param {number} min lower-bound of the range to be clamped to
             * @param {number} max upper-bound of the range to be clamped to
             * @returns {Tensor} the output tensor.
             */
            clamp(min, max) {
              return this.clone().clamp_(min, max);
            }
            /**
             * In-place version of @see {@link Tensor.round}
             */
            round_() {
              const this_data = this.data;
              for (let i = 0; i < this_data.length; ++i) {
                this_data[i] = Math.round(this_data[i]);
              }
              return this;
            }
            /**
             * Rounds elements of input to the nearest integer.
             * @returns {Tensor} the output tensor.
             */
            round() {
              return this.clone().round_();
            }
            mean(dim = null, keepdim = false) {
              return mean(this, dim, keepdim);
            }
            min(dim = null, keepdim = false) {
              if (dim === null) {
                const val = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.min)(this.data)[0];
                return new Tensor3(this.type, [val], [
                  /* scalar */
                ]);
              }
              const [type, result, resultDims] = reduce_helper((a, b) => Math.min(a, b), this, dim, keepdim, Infinity);
              return new Tensor3(type, result, resultDims);
            }
            max(dim = null, keepdim = false) {
              if (dim === null) {
                const val = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.max)(this.data)[0];
                return new Tensor3(this.type, [val], [
                  /* scalar */
                ]);
              }
              const [type, result, resultDims] = reduce_helper((a, b) => Math.max(a, b), this, dim, keepdim, -Infinity);
              return new Tensor3(type, result, resultDims);
            }
            argmin(dim = null, keepdim = false) {
              if (dim !== null) {
                throw new Error("`dim !== null` not yet implemented.");
              }
              const index = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.min)(this.data)[1];
              return new Tensor3("int64", [BigInt(index)], []);
            }
            argmax(dim = null, keepdim = false) {
              if (dim !== null) {
                throw new Error("`dim !== null` not yet implemented.");
              }
              const index = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.max)(this.data)[1];
              return new Tensor3("int64", [BigInt(index)], []);
            }
            /**
             * Performs Tensor dtype conversion.
             * @param {DataType} type The desired data type.
             * @returns {Tensor} The converted tensor.
             */
            to(type) {
              if (this.type === type)
                return this;
              if (!DataTypeMap.hasOwnProperty(type)) {
                throw new Error(`Unsupported type: ${type}`);
              }
              let map_fn;
              const is_source_bigint = ["int64", "uint64"].includes(this.type);
              const is_dest_bigint = ["int64", "uint64"].includes(type);
              if (is_source_bigint && !is_dest_bigint) {
                map_fn = Number;
              } else if (!is_source_bigint && is_dest_bigint) {
                map_fn = BigInt;
              }
              return new Tensor3(type, DataTypeMap[type].from(this.data, map_fn), this.dims);
            }
          }
          function reshape(data, dimensions) {
            const totalElements = data.length;
            const dimensionSize = dimensions.reduce((a, b) => a * b);
            if (totalElements !== dimensionSize) {
              throw Error(`cannot reshape array of size ${totalElements} into shape (${dimensions})`);
            }
            let reshapedArray = data;
            for (let i = dimensions.length - 1; i >= 0; i--) {
              reshapedArray = reshapedArray.reduce((acc, val) => {
                let lastArray = acc[acc.length - 1];
                if (lastArray.length < dimensions[i]) {
                  lastArray.push(val);
                } else {
                  acc.push([val]);
                }
                return acc;
              }, [[]]);
            }
            return reshapedArray[0];
          }
          function permute(tensor, axes) {
            const [permutedData, shape] = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.permute_data)(tensor.data, tensor.dims, axes);
            return new Tensor3(tensor.type, permutedData, shape);
          }
          function interpolate(input, [out_height, out_width], mode = "bilinear", align_corners = false) {
            const in_channels = input.dims.at(-3) ?? 1;
            const in_height = input.dims.at(-2);
            const in_width = input.dims.at(-1);
            let output = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.interpolate_data)(
              /** @type {import('./maths.js').TypedArray}*/
              input.data,
              [in_channels, in_height, in_width],
              [out_height, out_width],
              mode,
              align_corners
            );
            return new Tensor3(input.type, output, [in_channels, out_height, out_width]);
          }
          async function interpolate_4d(input, {
            size = null,
            mode = "bilinear"
          } = {}) {
            if (input.dims.length !== 4) {
              throw new Error("`interpolate_4d` currently only supports 4D input.");
            }
            if (!size) {
              throw new Error("`interpolate_4d` requires a `size` argument.");
            }
            let targetDims;
            if (size.length === 2) {
              targetDims = [...input.dims.slice(0, 2), ...size];
            } else if (size.length === 3) {
              targetDims = [input.dims[0], ...size];
            } else if (size.length === 4) {
              targetDims = size;
            } else {
              throw new Error("`size` must be of length 2, 3, or 4.");
            }
            let op;
            if (mode === "nearest") {
              op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.nearest_interpolate_4d;
            } else if (mode === "bilinear") {
              op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.bilinear_interpolate_4d;
            } else if (mode === "bicubic") {
              op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.bicubic_interpolate_4d;
            } else {
              throw new Error(`Unsupported mode: ${mode}`);
            }
            const sizeTensor = new Tensor3("int64", new BigInt64Array(targetDims.map(BigInt)), [targetDims.length]);
            return await op({ x: input, s: sizeTensor });
          }
          async function matmul(a, b) {
            const op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.matmul;
            return await op({ a, b });
          }
          async function rfft(x2, a) {
            const op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.rfft;
            return await op({ x: x2, a });
          }
          async function topk(x2, k) {
            const op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.top_k;
            if (k == null) {
              k = x2.dims.at(-1);
            } else {
              k = Math.min(k, x2.dims.at(-1));
            }
            return await op({
              x: x2,
              k: new Tensor3(
                "int64",
                [BigInt(k)],
                [1]
              )
            });
          }
          const arrayToIndexTensor = (array) => new Tensor3("int64", array, [array.length]);
          async function slice(data, starts, ends, axes, steps) {
            const op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.slice;
            return await op({
              x: data,
              s: arrayToIndexTensor(starts),
              e: arrayToIndexTensor(ends),
              a: arrayToIndexTensor(axes),
              t: arrayToIndexTensor(steps ?? new Array(axes.length).fill(1))
            });
          }
          function mean_pooling(last_hidden_state, attention_mask) {
            const lastHiddenStateData = last_hidden_state.data;
            const attentionMaskData = attention_mask.data;
            const shape = [last_hidden_state.dims[0], last_hidden_state.dims[2]];
            const returnedData = new lastHiddenStateData.constructor(shape[0] * shape[1]);
            const [batchSize, seqLength, embedDim] = last_hidden_state.dims;
            let outIndex = 0;
            for (let i = 0; i < batchSize; ++i) {
              const offset = i * embedDim * seqLength;
              for (let k = 0; k < embedDim; ++k) {
                let sum = 0;
                let count = 0;
                const attnMaskOffset = i * seqLength;
                const offset2 = offset + k;
                for (let j = 0; j < seqLength; ++j) {
                  const attn = Number(attentionMaskData[attnMaskOffset + j]);
                  count += attn;
                  sum += lastHiddenStateData[offset2 + j * embedDim] * attn;
                }
                const avg = sum / count;
                returnedData[outIndex++] = avg;
              }
            }
            return new Tensor3(
              last_hidden_state.type,
              returnedData,
              shape
            );
          }
          function layer_norm(input, normalized_shape, {
            eps = 1e-5
          } = {}) {
            if (input.dims.length !== 2) {
              throw new Error("`layer_norm` currently only supports 2D input.");
            }
            const [batchSize, featureDim] = input.dims;
            if (normalized_shape.length !== 1 && normalized_shape[0] !== featureDim) {
              throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");
            }
            const [std, mean2] = std_mean(input, 1, 0, true);
            const stdData = (
              /** @type {Float32Array} */
              std.data
            );
            const meanData = (
              /** @type {Float32Array} */
              mean2.data
            );
            const inputData = (
              /** @type {Float32Array} */
              input.data
            );
            const returnedData = new inputData.constructor(inputData.length);
            for (let i = 0; i < batchSize; ++i) {
              const offset = i * featureDim;
              for (let j = 0; j < featureDim; ++j) {
                const offset2 = offset + j;
                returnedData[offset2] = (inputData[offset2] - meanData[i]) / (stdData[i] + eps);
              }
            }
            return new Tensor3(input.type, returnedData, input.dims);
          }
          function calc_squeeze_dims(dims, dim) {
            dims = dims.slice();
            if (dim === null) {
              dims = dims.filter((d) => d !== 1);
            } else if (typeof dim === "number") {
              if (dims[dim] === 1) {
                dims.splice(dim, 1);
              }
            } else if (Array.isArray(dim)) {
              dims = dims.filter((x2, i) => {
                return x2 !== 1 || !dim.includes(i);
              });
            }
            return dims;
          }
          function calc_unsqueeze_dims(dims, dim) {
            dim = safeIndex(dim, dims.length + 1);
            dims = dims.slice();
            dims.splice(dim, 0, 1);
            return dims;
          }
          function safeIndex(index, size, dimension = null, boundsCheck = true) {
            if (index < -size || index >= size) {
              if (boundsCheck) {
                throw new Error(`IndexError: index ${index} is out of bounds for dimension${dimension === null ? "" : " " + dimension} with size ${size}`);
              } else {
                return index < -size ? 0 : size;
              }
            }
            if (index < 0) {
              index = (index % size + size) % size;
            }
            return index;
          }
          function cat(tensors, dim = 0) {
            dim = safeIndex(dim, tensors[0].dims.length);
            const resultDims = tensors[0].dims.slice();
            resultDims[dim] = tensors.reduce((a, b) => a + b.dims[dim], 0);
            const resultSize = resultDims.reduce((a, b) => a * b, 1);
            const result = new tensors[0].data.constructor(resultSize);
            const resultType = tensors[0].type;
            if (dim === 0) {
              let offset = 0;
              for (const tensor of tensors) {
                const tensorData = tensor.data;
                result.set(tensorData, offset);
                offset += tensorData.length;
              }
            } else {
              let currentDim = 0;
              for (let t = 0; t < tensors.length; ++t) {
                const { data, dims } = tensors[t];
                for (let i = 0; i < data.length; ++i) {
                  let resultIndex = 0;
                  for (let j = dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
                    const size = dims[j];
                    let index = num % size;
                    if (j === dim) {
                      index += currentDim;
                    }
                    resultIndex += index * resultMultiplier;
                    resultMultiplier *= resultDims[j];
                    num = Math.floor(num / size);
                  }
                  result[resultIndex] = data[i];
                }
                currentDim += dims[dim];
              }
            }
            return new Tensor3(resultType, result, resultDims);
          }
          function stack(tensors, dim = 0) {
            return cat(tensors.map((t) => t.unsqueeze(dim)), dim);
          }
          function reduce_helper(callbackfn, input, dim = null, keepdim = false, initialValue = null) {
            const inputData = input.data;
            const inputDims = input.dims;
            dim = safeIndex(dim, inputDims.length);
            const resultDims = inputDims.slice();
            resultDims[dim] = 1;
            const result = new inputData.constructor(inputData.length / inputDims[dim]);
            if (initialValue !== null) {
              result.fill(initialValue);
            }
            for (let i = 0; i < inputData.length; ++i) {
              let resultIndex = 0;
              for (let j = inputDims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
                const size = inputDims[j];
                if (j !== dim) {
                  const index = num % size;
                  resultIndex += index * resultMultiplier;
                  resultMultiplier *= resultDims[j];
                }
                num = Math.floor(num / size);
              }
              result[resultIndex] = callbackfn(result[resultIndex], inputData[i], i, resultIndex);
            }
            if (!keepdim)
              resultDims.splice(dim, 1);
            return [input.type, result, resultDims];
          }
          function std_mean(input, dim = null, correction = 1, keepdim = false) {
            const inputData = (
              /** @type {Float32Array} */
              input.data
            );
            const inputDims = input.dims;
            if (dim === null) {
              const sum = inputData.reduce((a, b) => a + b, 0);
              const mean2 = sum / inputData.length;
              const std = Math.sqrt(inputData.reduce((a, b) => a + (b - mean2) ** 2, 0) / (inputData.length - correction));
              const meanTensor2 = new Tensor3(input.type, [mean2], [
                /* scalar */
              ]);
              const stdTensor2 = new Tensor3(input.type, [std], [
                /* scalar */
              ]);
              return [stdTensor2, meanTensor2];
            }
            dim = safeIndex(dim, inputDims.length);
            const meanTensor = mean(input, dim, keepdim);
            const meanTensorData = meanTensor.data;
            const [type, result, resultDims] = reduce_helper((a, b, i, j) => a + (b - meanTensorData[j]) ** 2, input, dim, keepdim);
            for (let i = 0; i < result.length; ++i) {
              result[i] = Math.sqrt(result[i] / (inputDims[dim] - correction));
            }
            const stdTensor = new Tensor3(type, result, resultDims);
            return [stdTensor, meanTensor];
          }
          function mean(input, dim = null, keepdim = false) {
            const inputDims = input.dims;
            const inputData = (
              /** @type {Float32Array} */
              input.data
            );
            if (dim === null) {
              const val = inputData.reduce((a, b) => a + b, 0);
              return new Tensor3(input.type, [val / inputData.length], [
                /* scalar */
              ]);
            }
            dim = safeIndex(dim, inputDims.length);
            const [type, result, resultDims] = reduce_helper((a, b) => a + b, input, dim, keepdim);
            if (inputDims[dim] !== 1) {
              for (let i = 0; i < result.length; ++i) {
                result[i] /= inputDims[dim];
              }
            }
            return new Tensor3(type, result, resultDims);
          }
          function dimsToStride(dims) {
            const stride = new Array(dims.length);
            for (let i = dims.length - 1, s2 = 1; i >= 0; --i) {
              stride[i] = s2;
              s2 *= dims[i];
            }
            return stride;
          }
          function fullHelper(size, fill_value, dtype, cls) {
            const numElements = size.reduce((a, b) => a * b, 1);
            return new Tensor3(
              dtype,
              new cls(numElements).fill(fill_value),
              size
            );
          }
          function full(size, fill_value) {
            let dtype;
            let typedArrayCls;
            if (typeof fill_value === "number") {
              dtype = "float32";
              typedArrayCls = Float32Array;
            } else if (typeof fill_value === "bigint") {
              dtype = "int64";
              typedArrayCls = BigInt64Array;
            } else if (typeof fill_value === "boolean") {
              dtype = "bool";
              typedArrayCls = Uint8Array;
            } else {
              throw new Error(`Unsupported data type: ${typeof fill_value}`);
            }
            return fullHelper(size, fill_value, dtype, typedArrayCls);
          }
          function full_like(tensor, fill_value) {
            return full(tensor.dims, fill_value);
          }
          function ones(size) {
            return fullHelper(size, 1n, "int64", BigInt64Array);
          }
          function ones_like(tensor) {
            return ones(tensor.dims);
          }
          function zeros(size) {
            return fullHelper(size, 0n, "int64", BigInt64Array);
          }
          function zeros_like(tensor) {
            return zeros(tensor.dims);
          }
          function rand(size) {
            const length = size.reduce((a, b) => a * b, 1);
            return new Tensor3(
              "float32",
              Float32Array.from({ length }, () => Math.random()),
              size
            );
          }
          function quantize_embeddings(tensor, precision) {
            if (tensor.dims.length !== 2) {
              throw new Error("The tensor must have 2 dimensions");
            }
            if (tensor.dims.at(-1) % 8 !== 0) {
              throw new Error("The last dimension of the tensor must be a multiple of 8");
            }
            if (!["binary", "ubinary"].includes(precision)) {
              throw new Error("The precision must be either 'binary' or 'ubinary'");
            }
            const signed = precision === "binary";
            const dtype = signed ? "int8" : "uint8";
            const cls = signed ? Int8Array : Uint8Array;
            const inputData = tensor.data;
            const outputData = new cls(inputData.length / 8);
            for (let i = 0; i < inputData.length; ++i) {
              const bit = inputData[i] > 0 ? 1 : 0;
              const arrayIndex = Math.floor(i / 8);
              const bitPosition = i % 8;
              outputData[arrayIndex] |= bit << 7 - bitPosition;
              if (signed && bitPosition === 0) {
                outputData[arrayIndex] -= 128;
              }
            }
            ;
            return new Tensor3(dtype, outputData, [tensor.dims[0], tensor.dims[1] / 8]);
          }
        }
      ),
      /***/
      "./src/utils/video.js": (
        /*!****************************!*\
          !*** ./src/utils/video.js ***!
          \****************************/
        /***/
        (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
          __webpack_require__2.r(__webpack_exports__2);
          __webpack_require__2.d(__webpack_exports__2, {
            /* harmony export */
            RawVideo: () => (
              /* binding */
              RawVideo
            ),
            /* harmony export */
            RawVideoFrame: () => (
              /* binding */
              RawVideoFrame
            ),
            /* harmony export */
            load_video: () => (
              /* binding */
              load_video
            )
            /* harmony export */
          });
          var _image_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
            /*! ./image.js */
            "./src/utils/image.js"
          );
          var _env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
            /*! ../env.js */
            "./src/env.js"
          );
          class RawVideoFrame {
            /**
             * @param {RawImage} image
             * @param {number} timestamp
             */
            constructor(image, timestamp) {
              this.image = image;
              this.timestamp = timestamp;
            }
          }
          class RawVideo {
            /**
             * @param {RawVideoFrame[]|RawImage[]} frames
             * @param {number} duration
             */
            constructor(frames, duration) {
              if (frames.length > 0 && frames[0] instanceof _image_js__WEBPACK_IMPORTED_MODULE_0__.RawImage) {
                frames = frames.map((image, i) => new RawVideoFrame(image, (i + 1) / (frames.length + 1) * duration));
              }
              this.frames = /** @type {RawVideoFrame[]} */
              frames;
              this.duration = duration;
            }
            get width() {
              return this.frames[0].image.width;
            }
            get height() {
              return this.frames[0].image.height;
            }
            get fps() {
              return this.frames.length / this.duration;
            }
          }
          async function load_video(src, { num_frames = null, fps = null } = {}) {
            if (!_env_js__WEBPACK_IMPORTED_MODULE_1__.apis.IS_BROWSER_ENV) {
              throw new Error("`load_video` is currently only supported in browser environments.");
            }
            if (num_frames == null && fps == null) {
              throw new Error("Either num_frames or fps must be provided.");
            }
            const frames = [];
            const video = document.createElement("video");
            video.crossOrigin = "anonymous";
            video.muted = true;
            if (typeof src === "string") {
              video.src = src;
            } else if (src instanceof Blob) {
              video.src = URL.createObjectURL(src);
            } else if (src instanceof HTMLVideoElement) {
              video.src = src.src;
            } else {
              throw new Error("Invalid URL or video element provided.");
            }
            await new Promise((resolve) => video.onloadedmetadata = resolve);
            if (video.seekable.start(0) === video.seekable.end(0)) {
              const response = await fetch(video.src);
              const blob = await response.blob();
              video.src = URL.createObjectURL(blob);
              await new Promise((resolve) => video.onloadedmetadata = resolve);
            }
            const duration = video.duration;
            let count, step;
            if (num_frames != null) {
              count = num_frames;
              step = num_frames === 1 ? 0 : duration / (num_frames - 1);
            } else {
              step = 1 / fps;
              count = Math.floor(duration / step);
            }
            let sampleTimes = [];
            for (let i = 0; i < count; ++i) {
              sampleTimes.push(num_frames === 1 ? duration / 2 : i * step);
            }
            const canvas = document.createElement("canvas");
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const ctx = canvas.getContext("2d", { willReadFrequently: true });
            for (const t of sampleTimes) {
              video.currentTime = t;
              await new Promise((resolve) => {
                video.onseeked = resolve;
              });
              ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
              const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
              const frameData = new _image_js__WEBPACK_IMPORTED_MODULE_0__.RawImage(imageData.data, canvas.width, canvas.height, 4);
              const frame = new RawVideoFrame(frameData, t);
              frames.push(frame);
            }
            video.remove();
            return new RawVideo(frames, duration);
          }
        }
      )
      /******/
    };
    __webpack_module_cache__ = {};
    (() => {
      var getProto = Object.getPrototypeOf ? (obj) => Object.getPrototypeOf(obj) : (obj) => obj.__proto__;
      var leafPrototypes;
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = this(value);
        if (mode & 8)
          return value;
        if (typeof value === "object" && value) {
          if (mode & 4 && value.__esModule)
            return value;
          if (mode & 16 && typeof value.then === "function")
            return value;
        }
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        var def = {};
        leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
        for (var current = mode & 2 && value; typeof current == "object" && !~leafPrototypes.indexOf(current); current = getProto(current)) {
          Object.getOwnPropertyNames(current).forEach((key) => def[key] = () => value[key]);
        }
        def["default"] = () => value;
        __webpack_require__.d(ns, def);
        return ns;
      };
    })();
    (() => {
      __webpack_require__.d = (exports, definition) => {
        for (var key in definition) {
          if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
          }
        }
      };
    })();
    (() => {
      __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
    })();
    (() => {
      __webpack_require__.r = (exports) => {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
    })();
    __webpack_exports__ = {};
    (() => {
      __webpack_require__.r(__webpack_exports__);
      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        ASTFeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.ASTFeatureExtractor
        ),
        /* harmony export */
        ASTForAudioClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ASTForAudioClassification
        ),
        /* harmony export */
        ASTModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ASTModel
        ),
        /* harmony export */
        ASTPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ASTPreTrainedModel
        ),
        /* harmony export */
        AlbertForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertForMaskedLM
        ),
        /* harmony export */
        AlbertForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertForQuestionAnswering
        ),
        /* harmony export */
        AlbertForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertForSequenceClassification
        ),
        /* harmony export */
        AlbertModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertModel
        ),
        /* harmony export */
        AlbertPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertPreTrainedModel
        ),
        /* harmony export */
        AlbertTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.AlbertTokenizer
        ),
        /* harmony export */
        AudioClassificationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.AudioClassificationPipeline
        ),
        /* harmony export */
        AutoConfig: () => (
          /* reexport safe */
          _configs_js__WEBPACK_IMPORTED_MODULE_4__.AutoConfig
        ),
        /* harmony export */
        AutoFeatureExtractor: () => (
          /* reexport safe */
          _models_auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_12__.AutoFeatureExtractor
        ),
        /* harmony export */
        AutoImageProcessor: () => (
          /* reexport safe */
          _models_auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_15__.AutoImageProcessor
        ),
        /* harmony export */
        AutoModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModel
        ),
        /* harmony export */
        AutoModelForAudioClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForAudioClassification
        ),
        /* harmony export */
        AutoModelForAudioFrameClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForAudioFrameClassification
        ),
        /* harmony export */
        AutoModelForAudioTextToText: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForAudioTextToText
        ),
        /* harmony export */
        AutoModelForCTC: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForCTC
        ),
        /* harmony export */
        AutoModelForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForCausalLM
        ),
        /* harmony export */
        AutoModelForDepthEstimation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForDepthEstimation
        ),
        /* harmony export */
        AutoModelForDocumentQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForDocumentQuestionAnswering
        ),
        /* harmony export */
        AutoModelForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageClassification
        ),
        /* harmony export */
        AutoModelForImageFeatureExtraction: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageFeatureExtraction
        ),
        /* harmony export */
        AutoModelForImageMatting: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageMatting
        ),
        /* harmony export */
        AutoModelForImageSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageSegmentation
        ),
        /* harmony export */
        AutoModelForImageTextToText: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageTextToText
        ),
        /* harmony export */
        AutoModelForImageToImage: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageToImage
        ),
        /* harmony export */
        AutoModelForMaskGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForMaskGeneration
        ),
        /* harmony export */
        AutoModelForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForMaskedLM
        ),
        /* harmony export */
        AutoModelForNormalEstimation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForNormalEstimation
        ),
        /* harmony export */
        AutoModelForObjectDetection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForObjectDetection
        ),
        /* harmony export */
        AutoModelForPoseEstimation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForPoseEstimation
        ),
        /* harmony export */
        AutoModelForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForQuestionAnswering
        ),
        /* harmony export */
        AutoModelForSemanticSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForSemanticSegmentation
        ),
        /* harmony export */
        AutoModelForSeq2SeqLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForSeq2SeqLM
        ),
        /* harmony export */
        AutoModelForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForSequenceClassification
        ),
        /* harmony export */
        AutoModelForSpeechSeq2Seq: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForSpeechSeq2Seq
        ),
        /* harmony export */
        AutoModelForTextToSpectrogram: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForTextToSpectrogram
        ),
        /* harmony export */
        AutoModelForTextToWaveform: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForTextToWaveform
        ),
        /* harmony export */
        AutoModelForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForTokenClassification
        ),
        /* harmony export */
        AutoModelForUniversalSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForUniversalSegmentation
        ),
        /* harmony export */
        AutoModelForVision2Seq: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForVision2Seq
        ),
        /* harmony export */
        AutoModelForXVector: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForXVector
        ),
        /* harmony export */
        AutoModelForZeroShotObjectDetection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForZeroShotObjectDetection
        ),
        /* harmony export */
        AutoProcessor: () => (
          /* reexport safe */
          _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_18__.AutoProcessor
        ),
        /* harmony export */
        AutoTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.AutoTokenizer
        ),
        /* harmony export */
        AutomaticSpeechRecognitionPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.AutomaticSpeechRecognitionPipeline
        ),
        /* harmony export */
        BackgroundRemovalPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.BackgroundRemovalPipeline
        ),
        /* harmony export */
        BartForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BartForConditionalGeneration
        ),
        /* harmony export */
        BartForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BartForSequenceClassification
        ),
        /* harmony export */
        BartModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BartModel
        ),
        /* harmony export */
        BartPretrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BartPretrainedModel
        ),
        /* harmony export */
        BartTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BartTokenizer
        ),
        /* harmony export */
        BaseModelOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BaseModelOutput
        ),
        /* harmony export */
        BaseStreamer: () => (
          /* reexport safe */
          _generation_streamers_js__WEBPACK_IMPORTED_MODULE_19__.BaseStreamer
        ),
        /* harmony export */
        BeitFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.BeitFeatureExtractor
        ),
        /* harmony export */
        BeitForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BeitForImageClassification
        ),
        /* harmony export */
        BeitModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BeitModel
        ),
        /* harmony export */
        BeitPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BeitPreTrainedModel
        ),
        /* harmony export */
        BertForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BertForMaskedLM
        ),
        /* harmony export */
        BertForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BertForQuestionAnswering
        ),
        /* harmony export */
        BertForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BertForSequenceClassification
        ),
        /* harmony export */
        BertForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BertForTokenClassification
        ),
        /* harmony export */
        BertModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BertModel
        ),
        /* harmony export */
        BertPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BertPreTrainedModel
        ),
        /* harmony export */
        BertTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BertTokenizer
        ),
        /* harmony export */
        BitImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.BitImageProcessor
        ),
        /* harmony export */
        BlenderbotForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotForConditionalGeneration
        ),
        /* harmony export */
        BlenderbotModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotModel
        ),
        /* harmony export */
        BlenderbotPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotPreTrainedModel
        ),
        /* harmony export */
        BlenderbotSmallForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotSmallForConditionalGeneration
        ),
        /* harmony export */
        BlenderbotSmallModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotSmallModel
        ),
        /* harmony export */
        BlenderbotSmallPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotSmallPreTrainedModel
        ),
        /* harmony export */
        BlenderbotSmallTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BlenderbotSmallTokenizer
        ),
        /* harmony export */
        BlenderbotTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BlenderbotTokenizer
        ),
        /* harmony export */
        BloomForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BloomForCausalLM
        ),
        /* harmony export */
        BloomModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BloomModel
        ),
        /* harmony export */
        BloomPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.BloomPreTrainedModel
        ),
        /* harmony export */
        BloomTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BloomTokenizer
        ),
        /* harmony export */
        CLIPFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.CLIPFeatureExtractor
        ),
        /* harmony export */
        CLIPImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.CLIPImageProcessor
        ),
        /* harmony export */
        CLIPModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPModel
        ),
        /* harmony export */
        CLIPPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPPreTrainedModel
        ),
        /* harmony export */
        CLIPSegForImageSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPSegForImageSegmentation
        ),
        /* harmony export */
        CLIPSegModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPSegModel
        ),
        /* harmony export */
        CLIPSegPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPSegPreTrainedModel
        ),
        /* harmony export */
        CLIPTextModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPTextModel
        ),
        /* harmony export */
        CLIPTextModelWithProjection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPTextModelWithProjection
        ),
        /* harmony export */
        CLIPTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CLIPTokenizer
        ),
        /* harmony export */
        CLIPVisionModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPVisionModel
        ),
        /* harmony export */
        CLIPVisionModelWithProjection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPVisionModelWithProjection
        ),
        /* harmony export */
        CamembertForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertForMaskedLM
        ),
        /* harmony export */
        CamembertForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertForQuestionAnswering
        ),
        /* harmony export */
        CamembertForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertForSequenceClassification
        ),
        /* harmony export */
        CamembertForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertForTokenClassification
        ),
        /* harmony export */
        CamembertModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertModel
        ),
        /* harmony export */
        CamembertPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertPreTrainedModel
        ),
        /* harmony export */
        CamembertTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CamembertTokenizer
        ),
        /* harmony export */
        CausalLMOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CausalLMOutput
        ),
        /* harmony export */
        CausalLMOutputWithPast: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CausalLMOutputWithPast
        ),
        /* harmony export */
        ChineseCLIPFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.ChineseCLIPFeatureExtractor
        ),
        /* harmony export */
        ChineseCLIPModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ChineseCLIPModel
        ),
        /* harmony export */
        ChineseCLIPPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ChineseCLIPPreTrainedModel
        ),
        /* harmony export */
        ClapAudioModelWithProjection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ClapAudioModelWithProjection
        ),
        /* harmony export */
        ClapFeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.ClapFeatureExtractor
        ),
        /* harmony export */
        ClapModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ClapModel
        ),
        /* harmony export */
        ClapPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ClapPreTrainedModel
        ),
        /* harmony export */
        ClapTextModelWithProjection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ClapTextModelWithProjection
        ),
        /* harmony export */
        ClassifierFreeGuidanceLogitsProcessor: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.ClassifierFreeGuidanceLogitsProcessor
        ),
        /* harmony export */
        CodeGenForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CodeGenForCausalLM
        ),
        /* harmony export */
        CodeGenModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CodeGenModel
        ),
        /* harmony export */
        CodeGenPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CodeGenPreTrainedModel
        ),
        /* harmony export */
        CodeGenTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CodeGenTokenizer
        ),
        /* harmony export */
        CodeLlamaTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CodeLlamaTokenizer
        ),
        /* harmony export */
        CohereForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CohereForCausalLM
        ),
        /* harmony export */
        CohereModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CohereModel
        ),
        /* harmony export */
        CoherePreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.CoherePreTrainedModel
        ),
        /* harmony export */
        CohereTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CohereTokenizer
        ),
        /* harmony export */
        ConvBertForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertForMaskedLM
        ),
        /* harmony export */
        ConvBertForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertForQuestionAnswering
        ),
        /* harmony export */
        ConvBertForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertForSequenceClassification
        ),
        /* harmony export */
        ConvBertForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertForTokenClassification
        ),
        /* harmony export */
        ConvBertModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertModel
        ),
        /* harmony export */
        ConvBertPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertPreTrainedModel
        ),
        /* harmony export */
        ConvBertTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.ConvBertTokenizer
        ),
        /* harmony export */
        ConvNextFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.ConvNextFeatureExtractor
        ),
        /* harmony export */
        ConvNextForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextForImageClassification
        ),
        /* harmony export */
        ConvNextImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.ConvNextImageProcessor
        ),
        /* harmony export */
        ConvNextModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextModel
        ),
        /* harmony export */
        ConvNextPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextPreTrainedModel
        ),
        /* harmony export */
        ConvNextV2ForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextV2ForImageClassification
        ),
        /* harmony export */
        ConvNextV2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextV2Model
        ),
        /* harmony export */
        ConvNextV2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextV2PreTrainedModel
        ),
        /* harmony export */
        DFineForObjectDetection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DFineForObjectDetection
        ),
        /* harmony export */
        DFineModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DFineModel
        ),
        /* harmony export */
        DFinePreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DFinePreTrainedModel
        ),
        /* harmony export */
        DPTFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DPTFeatureExtractor
        ),
        /* harmony export */
        DPTForDepthEstimation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DPTForDepthEstimation
        ),
        /* harmony export */
        DPTImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DPTImageProcessor
        ),
        /* harmony export */
        DPTModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DPTModel
        ),
        /* harmony export */
        DPTPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DPTPreTrainedModel
        ),
        /* harmony export */
        DacDecoderModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DacDecoderModel
        ),
        /* harmony export */
        DacDecoderOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DacDecoderOutput
        ),
        /* harmony export */
        DacEncoderModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DacEncoderModel
        ),
        /* harmony export */
        DacEncoderOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DacEncoderOutput
        ),
        /* harmony export */
        DacFeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.DacFeatureExtractor
        ),
        /* harmony export */
        DacModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DacModel
        ),
        /* harmony export */
        DacPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DacPreTrainedModel
        ),
        /* harmony export */
        DataTypeMap: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.DataTypeMap
        ),
        /* harmony export */
        DebertaForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaForMaskedLM
        ),
        /* harmony export */
        DebertaForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaForQuestionAnswering
        ),
        /* harmony export */
        DebertaForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaForSequenceClassification
        ),
        /* harmony export */
        DebertaForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaForTokenClassification
        ),
        /* harmony export */
        DebertaModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaModel
        ),
        /* harmony export */
        DebertaPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaPreTrainedModel
        ),
        /* harmony export */
        DebertaTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.DebertaTokenizer
        ),
        /* harmony export */
        DebertaV2ForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2ForMaskedLM
        ),
        /* harmony export */
        DebertaV2ForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2ForQuestionAnswering
        ),
        /* harmony export */
        DebertaV2ForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2ForSequenceClassification
        ),
        /* harmony export */
        DebertaV2ForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2ForTokenClassification
        ),
        /* harmony export */
        DebertaV2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2Model
        ),
        /* harmony export */
        DebertaV2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2PreTrainedModel
        ),
        /* harmony export */
        DebertaV2Tokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.DebertaV2Tokenizer
        ),
        /* harmony export */
        DecisionTransformerModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DecisionTransformerModel
        ),
        /* harmony export */
        DecisionTransformerPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DecisionTransformerPreTrainedModel
        ),
        /* harmony export */
        DeiTFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DeiTFeatureExtractor
        ),
        /* harmony export */
        DeiTForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DeiTForImageClassification
        ),
        /* harmony export */
        DeiTImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DeiTImageProcessor
        ),
        /* harmony export */
        DeiTModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DeiTModel
        ),
        /* harmony export */
        DeiTPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DeiTPreTrainedModel
        ),
        /* harmony export */
        DepthAnythingForDepthEstimation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DepthAnythingForDepthEstimation
        ),
        /* harmony export */
        DepthAnythingPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DepthAnythingPreTrainedModel
        ),
        /* harmony export */
        DepthEstimationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.DepthEstimationPipeline
        ),
        /* harmony export */
        DepthProForDepthEstimation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DepthProForDepthEstimation
        ),
        /* harmony export */
        DepthProPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DepthProPreTrainedModel
        ),
        /* harmony export */
        DetrFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DetrFeatureExtractor
        ),
        /* harmony export */
        DetrForObjectDetection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrForObjectDetection
        ),
        /* harmony export */
        DetrForSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrForSegmentation
        ),
        /* harmony export */
        DetrImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DetrImageProcessor
        ),
        /* harmony export */
        DetrModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrModel
        ),
        /* harmony export */
        DetrObjectDetectionOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrObjectDetectionOutput
        ),
        /* harmony export */
        DetrPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrPreTrainedModel
        ),
        /* harmony export */
        DetrSegmentationOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrSegmentationOutput
        ),
        /* harmony export */
        Dinov2ForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2ForImageClassification
        ),
        /* harmony export */
        Dinov2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2Model
        ),
        /* harmony export */
        Dinov2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2PreTrainedModel
        ),
        /* harmony export */
        Dinov2WithRegistersForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2WithRegistersForImageClassification
        ),
        /* harmony export */
        Dinov2WithRegistersModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2WithRegistersModel
        ),
        /* harmony export */
        Dinov2WithRegistersPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2WithRegistersPreTrainedModel
        ),
        /* harmony export */
        DistilBertForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertForMaskedLM
        ),
        /* harmony export */
        DistilBertForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertForQuestionAnswering
        ),
        /* harmony export */
        DistilBertForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertForSequenceClassification
        ),
        /* harmony export */
        DistilBertForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertForTokenClassification
        ),
        /* harmony export */
        DistilBertModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertModel
        ),
        /* harmony export */
        DistilBertPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertPreTrainedModel
        ),
        /* harmony export */
        DistilBertTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.DistilBertTokenizer
        ),
        /* harmony export */
        DocumentQuestionAnsweringPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.DocumentQuestionAnsweringPipeline
        ),
        /* harmony export */
        DonutFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DonutFeatureExtractor
        ),
        /* harmony export */
        DonutImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.DonutImageProcessor
        ),
        /* harmony export */
        DonutSwinModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DonutSwinModel
        ),
        /* harmony export */
        DonutSwinPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.DonutSwinPreTrainedModel
        ),
        /* harmony export */
        EfficientNetForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.EfficientNetForImageClassification
        ),
        /* harmony export */
        EfficientNetImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.EfficientNetImageProcessor
        ),
        /* harmony export */
        EfficientNetModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.EfficientNetModel
        ),
        /* harmony export */
        EfficientNetPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.EfficientNetPreTrainedModel
        ),
        /* harmony export */
        ElectraForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraForMaskedLM
        ),
        /* harmony export */
        ElectraForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraForQuestionAnswering
        ),
        /* harmony export */
        ElectraForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraForSequenceClassification
        ),
        /* harmony export */
        ElectraForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraForTokenClassification
        ),
        /* harmony export */
        ElectraModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraModel
        ),
        /* harmony export */
        ElectraPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraPreTrainedModel
        ),
        /* harmony export */
        ElectraTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.ElectraTokenizer
        ),
        /* harmony export */
        EncodecFeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.EncodecFeatureExtractor
        ),
        /* harmony export */
        EosTokenCriteria: () => (
          /* reexport safe */
          _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_20__.EosTokenCriteria
        ),
        /* harmony export */
        EsmForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmForMaskedLM
        ),
        /* harmony export */
        EsmForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmForSequenceClassification
        ),
        /* harmony export */
        EsmForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmForTokenClassification
        ),
        /* harmony export */
        EsmModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmModel
        ),
        /* harmony export */
        EsmPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmPreTrainedModel
        ),
        /* harmony export */
        EsmTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.EsmTokenizer
        ),
        /* harmony export */
        ExaoneForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ExaoneForCausalLM
        ),
        /* harmony export */
        ExaoneModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ExaoneModel
        ),
        /* harmony export */
        ExaonePreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ExaonePreTrainedModel
        ),
        /* harmony export */
        FFT: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.FFT
        ),
        /* harmony export */
        FalconForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.FalconForCausalLM
        ),
        /* harmony export */
        FalconModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.FalconModel
        ),
        /* harmony export */
        FalconPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.FalconPreTrainedModel
        ),
        /* harmony export */
        FalconTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.FalconTokenizer
        ),
        /* harmony export */
        FastViTForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.FastViTForImageClassification
        ),
        /* harmony export */
        FastViTModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.FastViTModel
        ),
        /* harmony export */
        FastViTPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.FastViTPreTrainedModel
        ),
        /* harmony export */
        FeatureExtractionPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.FeatureExtractionPipeline
        ),
        /* harmony export */
        FeatureExtractor: () => (
          /* reexport safe */
          _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_10__.FeatureExtractor
        ),
        /* harmony export */
        FillMaskPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.FillMaskPipeline
        ),
        /* harmony export */
        Florence2ForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Florence2ForConditionalGeneration
        ),
        /* harmony export */
        Florence2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Florence2PreTrainedModel
        ),
        /* harmony export */
        Florence2Processor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.Florence2Processor
        ),
        /* harmony export */
        ForcedBOSTokenLogitsProcessor: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.ForcedBOSTokenLogitsProcessor
        ),
        /* harmony export */
        ForcedEOSTokenLogitsProcessor: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.ForcedEOSTokenLogitsProcessor
        ),
        /* harmony export */
        GLPNFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.GLPNFeatureExtractor
        ),
        /* harmony export */
        GLPNForDepthEstimation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GLPNForDepthEstimation
        ),
        /* harmony export */
        GLPNModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GLPNModel
        ),
        /* harmony export */
        GLPNPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GLPNPreTrainedModel
        ),
        /* harmony export */
        GPT2LMHeadModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPT2LMHeadModel
        ),
        /* harmony export */
        GPT2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPT2Model
        ),
        /* harmony export */
        GPT2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPT2PreTrainedModel
        ),
        /* harmony export */
        GPT2Tokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.GPT2Tokenizer
        ),
        /* harmony export */
        GPTBigCodeForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTBigCodeForCausalLM
        ),
        /* harmony export */
        GPTBigCodeModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTBigCodeModel
        ),
        /* harmony export */
        GPTBigCodePreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTBigCodePreTrainedModel
        ),
        /* harmony export */
        GPTJForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTJForCausalLM
        ),
        /* harmony export */
        GPTJModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTJModel
        ),
        /* harmony export */
        GPTJPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTJPreTrainedModel
        ),
        /* harmony export */
        GPTNeoForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoForCausalLM
        ),
        /* harmony export */
        GPTNeoModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoModel
        ),
        /* harmony export */
        GPTNeoPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoPreTrainedModel
        ),
        /* harmony export */
        GPTNeoXForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoXForCausalLM
        ),
        /* harmony export */
        GPTNeoXModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoXModel
        ),
        /* harmony export */
        GPTNeoXPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoXPreTrainedModel
        ),
        /* harmony export */
        GPTNeoXTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.GPTNeoXTokenizer
        ),
        /* harmony export */
        Gemma2ForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma2ForCausalLM
        ),
        /* harmony export */
        Gemma2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma2Model
        ),
        /* harmony export */
        Gemma2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma2PreTrainedModel
        ),
        /* harmony export */
        Gemma3ForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma3ForCausalLM
        ),
        /* harmony export */
        Gemma3Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma3Model
        ),
        /* harmony export */
        Gemma3PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma3PreTrainedModel
        ),
        /* harmony export */
        GemmaForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GemmaForCausalLM
        ),
        /* harmony export */
        GemmaModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GemmaModel
        ),
        /* harmony export */
        GemmaPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GemmaPreTrainedModel
        ),
        /* harmony export */
        GemmaTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.GemmaTokenizer
        ),
        /* harmony export */
        GlmForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GlmForCausalLM
        ),
        /* harmony export */
        GlmModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GlmModel
        ),
        /* harmony export */
        GlmPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GlmPreTrainedModel
        ),
        /* harmony export */
        GraniteForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GraniteForCausalLM
        ),
        /* harmony export */
        GraniteModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GraniteModel
        ),
        /* harmony export */
        GranitePreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GranitePreTrainedModel
        ),
        /* harmony export */
        Grok1Tokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.Grok1Tokenizer
        ),
        /* harmony export */
        GroundingDinoForObjectDetection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GroundingDinoForObjectDetection
        ),
        /* harmony export */
        GroundingDinoImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.GroundingDinoImageProcessor
        ),
        /* harmony export */
        GroundingDinoPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GroundingDinoPreTrainedModel
        ),
        /* harmony export */
        GroundingDinoProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.GroundingDinoProcessor
        ),
        /* harmony export */
        GroupViTModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GroupViTModel
        ),
        /* harmony export */
        GroupViTPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.GroupViTPreTrainedModel
        ),
        /* harmony export */
        HeliumForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.HeliumForCausalLM
        ),
        /* harmony export */
        HeliumModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.HeliumModel
        ),
        /* harmony export */
        HeliumPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.HeliumPreTrainedModel
        ),
        /* harmony export */
        HerbertTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.HerbertTokenizer
        ),
        /* harmony export */
        HieraForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.HieraForImageClassification
        ),
        /* harmony export */
        HieraModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.HieraModel
        ),
        /* harmony export */
        HieraPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.HieraPreTrainedModel
        ),
        /* harmony export */
        HubertForCTC: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.HubertForCTC
        ),
        /* harmony export */
        HubertForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.HubertForSequenceClassification
        ),
        /* harmony export */
        HubertModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.HubertModel
        ),
        /* harmony export */
        HubertPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.HubertPreTrainedModel
        ),
        /* harmony export */
        IJepaForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.IJepaForImageClassification
        ),
        /* harmony export */
        IJepaModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.IJepaModel
        ),
        /* harmony export */
        IJepaPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.IJepaPreTrainedModel
        ),
        /* harmony export */
        Idefics3ForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Idefics3ForConditionalGeneration
        ),
        /* harmony export */
        Idefics3ImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.Idefics3ImageProcessor
        ),
        /* harmony export */
        Idefics3PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Idefics3PreTrainedModel
        ),
        /* harmony export */
        Idefics3Processor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.Idefics3Processor
        ),
        /* harmony export */
        ImageClassificationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageClassificationPipeline
        ),
        /* harmony export */
        ImageFeatureExtractionPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageFeatureExtractionPipeline
        ),
        /* harmony export */
        ImageFeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.ImageFeatureExtractor
        ),
        /* harmony export */
        ImageMattingOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ImageMattingOutput
        ),
        /* harmony export */
        ImageProcessor: () => (
          /* reexport safe */
          _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_13__.ImageProcessor
        ),
        /* harmony export */
        ImageSegmentationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageSegmentationPipeline
        ),
        /* harmony export */
        ImageToImagePipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageToImagePipeline
        ),
        /* harmony export */
        ImageToTextPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageToTextPipeline
        ),
        /* harmony export */
        InterruptableStoppingCriteria: () => (
          /* reexport safe */
          _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_20__.InterruptableStoppingCriteria
        ),
        /* harmony export */
        JAISLMHeadModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.JAISLMHeadModel
        ),
        /* harmony export */
        JAISModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.JAISModel
        ),
        /* harmony export */
        JAISPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.JAISPreTrainedModel
        ),
        /* harmony export */
        JinaCLIPImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.JinaCLIPImageProcessor
        ),
        /* harmony export */
        JinaCLIPModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.JinaCLIPModel
        ),
        /* harmony export */
        JinaCLIPPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.JinaCLIPPreTrainedModel
        ),
        /* harmony export */
        JinaCLIPProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.JinaCLIPProcessor
        ),
        /* harmony export */
        JinaCLIPTextModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.JinaCLIPTextModel
        ),
        /* harmony export */
        JinaCLIPVisionModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.JinaCLIPVisionModel
        ),
        /* harmony export */
        LiteWhisperForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.LiteWhisperForConditionalGeneration
        ),
        /* harmony export */
        LlamaForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.LlamaForCausalLM
        ),
        /* harmony export */
        LlamaModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.LlamaModel
        ),
        /* harmony export */
        LlamaPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.LlamaPreTrainedModel
        ),
        /* harmony export */
        LlamaTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.LlamaTokenizer
        ),
        /* harmony export */
        LlavaForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.LlavaForConditionalGeneration
        ),
        /* harmony export */
        LlavaOnevisionForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.LlavaOnevisionForConditionalGeneration
        ),
        /* harmony export */
        LlavaOnevisionImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.LlavaOnevisionImageProcessor
        ),
        /* harmony export */
        LlavaPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.LlavaPreTrainedModel
        ),
        /* harmony export */
        LogitsProcessor: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.LogitsProcessor
        ),
        /* harmony export */
        LogitsProcessorList: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.LogitsProcessorList
        ),
        /* harmony export */
        LogitsWarper: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.LogitsWarper
        ),
        /* harmony export */
        LongT5ForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.LongT5ForConditionalGeneration
        ),
        /* harmony export */
        LongT5Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.LongT5Model
        ),
        /* harmony export */
        LongT5PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.LongT5PreTrainedModel
        ),
        /* harmony export */
        M2M100ForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.M2M100ForConditionalGeneration
        ),
        /* harmony export */
        M2M100Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.M2M100Model
        ),
        /* harmony export */
        M2M100PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.M2M100PreTrainedModel
        ),
        /* harmony export */
        M2M100Tokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.M2M100Tokenizer
        ),
        /* harmony export */
        MBart50Tokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MBart50Tokenizer
        ),
        /* harmony export */
        MBartForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartForCausalLM
        ),
        /* harmony export */
        MBartForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartForConditionalGeneration
        ),
        /* harmony export */
        MBartForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartForSequenceClassification
        ),
        /* harmony export */
        MBartModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartModel
        ),
        /* harmony export */
        MBartPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartPreTrainedModel
        ),
        /* harmony export */
        MBartTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MBartTokenizer
        ),
        /* harmony export */
        MPNetForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetForMaskedLM
        ),
        /* harmony export */
        MPNetForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetForQuestionAnswering
        ),
        /* harmony export */
        MPNetForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetForSequenceClassification
        ),
        /* harmony export */
        MPNetForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetForTokenClassification
        ),
        /* harmony export */
        MPNetModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetModel
        ),
        /* harmony export */
        MPNetPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetPreTrainedModel
        ),
        /* harmony export */
        MPNetTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MPNetTokenizer
        ),
        /* harmony export */
        MT5ForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MT5ForConditionalGeneration
        ),
        /* harmony export */
        MT5Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MT5Model
        ),
        /* harmony export */
        MT5PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MT5PreTrainedModel
        ),
        /* harmony export */
        MarianMTModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MarianMTModel
        ),
        /* harmony export */
        MarianModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MarianModel
        ),
        /* harmony export */
        MarianPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MarianPreTrainedModel
        ),
        /* harmony export */
        MarianTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MarianTokenizer
        ),
        /* harmony export */
        Mask2FormerImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.Mask2FormerImageProcessor
        ),
        /* harmony export */
        MaskFormerFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MaskFormerFeatureExtractor
        ),
        /* harmony export */
        MaskFormerForInstanceSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MaskFormerForInstanceSegmentation
        ),
        /* harmony export */
        MaskFormerImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MaskFormerImageProcessor
        ),
        /* harmony export */
        MaskFormerModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MaskFormerModel
        ),
        /* harmony export */
        MaskFormerPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MaskFormerPreTrainedModel
        ),
        /* harmony export */
        MaskedLMOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MaskedLMOutput
        ),
        /* harmony export */
        MaxLengthCriteria: () => (
          /* reexport safe */
          _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_20__.MaxLengthCriteria
        ),
        /* harmony export */
        Metric3DForDepthEstimation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Metric3DForDepthEstimation
        ),
        /* harmony export */
        Metric3DPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Metric3DPreTrainedModel
        ),
        /* harmony export */
        Metric3Dv2ForDepthEstimation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Metric3Dv2ForDepthEstimation
        ),
        /* harmony export */
        Metric3Dv2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Metric3Dv2PreTrainedModel
        ),
        /* harmony export */
        MgpstrForSceneTextRecognition: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MgpstrForSceneTextRecognition
        ),
        /* harmony export */
        MgpstrModelOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MgpstrModelOutput
        ),
        /* harmony export */
        MgpstrPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MgpstrPreTrainedModel
        ),
        /* harmony export */
        MgpstrProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.MgpstrProcessor
        ),
        /* harmony export */
        MgpstrTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MgpstrTokenizer
        ),
        /* harmony export */
        MimiDecoderModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MimiDecoderModel
        ),
        /* harmony export */
        MimiDecoderOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MimiDecoderOutput
        ),
        /* harmony export */
        MimiEncoderModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MimiEncoderModel
        ),
        /* harmony export */
        MimiEncoderOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MimiEncoderOutput
        ),
        /* harmony export */
        MimiModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MimiModel
        ),
        /* harmony export */
        MimiPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MimiPreTrainedModel
        ),
        /* harmony export */
        MinLengthLogitsProcessor: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.MinLengthLogitsProcessor
        ),
        /* harmony export */
        MinNewTokensLengthLogitsProcessor: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.MinNewTokensLengthLogitsProcessor
        ),
        /* harmony export */
        MistralForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MistralForCausalLM
        ),
        /* harmony export */
        MistralModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MistralModel
        ),
        /* harmony export */
        MistralPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MistralPreTrainedModel
        ),
        /* harmony export */
        MobileBertForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertForMaskedLM
        ),
        /* harmony export */
        MobileBertForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertForQuestionAnswering
        ),
        /* harmony export */
        MobileBertForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertForSequenceClassification
        ),
        /* harmony export */
        MobileBertModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertModel
        ),
        /* harmony export */
        MobileBertPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertPreTrainedModel
        ),
        /* harmony export */
        MobileBertTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MobileBertTokenizer
        ),
        /* harmony export */
        MobileLLMForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileLLMForCausalLM
        ),
        /* harmony export */
        MobileLLMModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileLLMModel
        ),
        /* harmony export */
        MobileLLMPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileLLMPreTrainedModel
        ),
        /* harmony export */
        MobileNetV1FeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV1FeatureExtractor
        ),
        /* harmony export */
        MobileNetV1ForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV1ForImageClassification
        ),
        /* harmony export */
        MobileNetV1ForSemanticSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV1ForSemanticSegmentation
        ),
        /* harmony export */
        MobileNetV1ImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV1ImageProcessor
        ),
        /* harmony export */
        MobileNetV1Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV1Model
        ),
        /* harmony export */
        MobileNetV1PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV1PreTrainedModel
        ),
        /* harmony export */
        MobileNetV2FeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV2FeatureExtractor
        ),
        /* harmony export */
        MobileNetV2ForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV2ForImageClassification
        ),
        /* harmony export */
        MobileNetV2ForSemanticSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV2ForSemanticSegmentation
        ),
        /* harmony export */
        MobileNetV2ImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV2ImageProcessor
        ),
        /* harmony export */
        MobileNetV2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV2Model
        ),
        /* harmony export */
        MobileNetV2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV2PreTrainedModel
        ),
        /* harmony export */
        MobileNetV3FeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV3FeatureExtractor
        ),
        /* harmony export */
        MobileNetV3ForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV3ForImageClassification
        ),
        /* harmony export */
        MobileNetV3ForSemanticSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV3ForSemanticSegmentation
        ),
        /* harmony export */
        MobileNetV3ImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV3ImageProcessor
        ),
        /* harmony export */
        MobileNetV3Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV3Model
        ),
        /* harmony export */
        MobileNetV3PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV3PreTrainedModel
        ),
        /* harmony export */
        MobileNetV4FeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV4FeatureExtractor
        ),
        /* harmony export */
        MobileNetV4ForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV4ForImageClassification
        ),
        /* harmony export */
        MobileNetV4ForSemanticSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV4ForSemanticSegmentation
        ),
        /* harmony export */
        MobileNetV4ImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileNetV4ImageProcessor
        ),
        /* harmony export */
        MobileNetV4Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV4Model
        ),
        /* harmony export */
        MobileNetV4PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV4PreTrainedModel
        ),
        /* harmony export */
        MobileViTFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileViTFeatureExtractor
        ),
        /* harmony export */
        MobileViTForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTForImageClassification
        ),
        /* harmony export */
        MobileViTImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.MobileViTImageProcessor
        ),
        /* harmony export */
        MobileViTModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTModel
        ),
        /* harmony export */
        MobileViTPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTPreTrainedModel
        ),
        /* harmony export */
        MobileViTV2ForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTV2ForImageClassification
        ),
        /* harmony export */
        MobileViTV2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTV2Model
        ),
        /* harmony export */
        MobileViTV2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTV2PreTrainedModel
        ),
        /* harmony export */
        ModelOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ModelOutput
        ),
        /* harmony export */
        ModernBertForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ModernBertForMaskedLM
        ),
        /* harmony export */
        ModernBertForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ModernBertForSequenceClassification
        ),
        /* harmony export */
        ModernBertForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ModernBertForTokenClassification
        ),
        /* harmony export */
        ModernBertModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ModernBertModel
        ),
        /* harmony export */
        ModernBertPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ModernBertPreTrainedModel
        ),
        /* harmony export */
        Moondream1ForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Moondream1ForConditionalGeneration
        ),
        /* harmony export */
        MoonshineFeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.MoonshineFeatureExtractor
        ),
        /* harmony export */
        MoonshineForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MoonshineForConditionalGeneration
        ),
        /* harmony export */
        MoonshineModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MoonshineModel
        ),
        /* harmony export */
        MoonshinePreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MoonshinePreTrainedModel
        ),
        /* harmony export */
        MoonshineProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.MoonshineProcessor
        ),
        /* harmony export */
        MptForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MptForCausalLM
        ),
        /* harmony export */
        MptModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MptModel
        ),
        /* harmony export */
        MptPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MptPreTrainedModel
        ),
        /* harmony export */
        MultiModalityCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MultiModalityCausalLM
        ),
        /* harmony export */
        MultiModalityPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MultiModalityPreTrainedModel
        ),
        /* harmony export */
        MusicgenForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MusicgenForCausalLM
        ),
        /* harmony export */
        MusicgenForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MusicgenForConditionalGeneration
        ),
        /* harmony export */
        MusicgenModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MusicgenModel
        ),
        /* harmony export */
        MusicgenPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.MusicgenPreTrainedModel
        ),
        /* harmony export */
        NllbTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.NllbTokenizer
        ),
        /* harmony export */
        NoBadWordsLogitsProcessor: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.NoBadWordsLogitsProcessor
        ),
        /* harmony export */
        NoRepeatNGramLogitsProcessor: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.NoRepeatNGramLogitsProcessor
        ),
        /* harmony export */
        NomicBertModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.NomicBertModel
        ),
        /* harmony export */
        NomicBertPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.NomicBertPreTrainedModel
        ),
        /* harmony export */
        NougatImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.NougatImageProcessor
        ),
        /* harmony export */
        NougatTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.NougatTokenizer
        ),
        /* harmony export */
        OPTForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.OPTForCausalLM
        ),
        /* harmony export */
        OPTModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.OPTModel
        ),
        /* harmony export */
        OPTPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.OPTPreTrainedModel
        ),
        /* harmony export */
        ObjectDetectionPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ObjectDetectionPipeline
        ),
        /* harmony export */
        Olmo2ForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Olmo2ForCausalLM
        ),
        /* harmony export */
        Olmo2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Olmo2Model
        ),
        /* harmony export */
        Olmo2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Olmo2PreTrainedModel
        ),
        /* harmony export */
        OlmoForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.OlmoForCausalLM
        ),
        /* harmony export */
        OlmoModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.OlmoModel
        ),
        /* harmony export */
        OlmoPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.OlmoPreTrainedModel
        ),
        /* harmony export */
        OpenELMForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.OpenELMForCausalLM
        ),
        /* harmony export */
        OpenELMModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.OpenELMModel
        ),
        /* harmony export */
        OpenELMPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.OpenELMPreTrainedModel
        ),
        /* harmony export */
        OwlViTFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.OwlViTFeatureExtractor
        ),
        /* harmony export */
        OwlViTForObjectDetection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.OwlViTForObjectDetection
        ),
        /* harmony export */
        OwlViTImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.OwlViTImageProcessor
        ),
        /* harmony export */
        OwlViTModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.OwlViTModel
        ),
        /* harmony export */
        OwlViTPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.OwlViTPreTrainedModel
        ),
        /* harmony export */
        OwlViTProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.OwlViTProcessor
        ),
        /* harmony export */
        Owlv2ForObjectDetection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Owlv2ForObjectDetection
        ),
        /* harmony export */
        Owlv2ImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.Owlv2ImageProcessor
        ),
        /* harmony export */
        Owlv2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Owlv2Model
        ),
        /* harmony export */
        Owlv2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Owlv2PreTrainedModel
        ),
        /* harmony export */
        PaliGemmaForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PaliGemmaForConditionalGeneration
        ),
        /* harmony export */
        PaliGemmaPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PaliGemmaPreTrainedModel
        ),
        /* harmony export */
        PaliGemmaProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.PaliGemmaProcessor
        ),
        /* harmony export */
        PatchTSMixerForPrediction: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PatchTSMixerForPrediction
        ),
        /* harmony export */
        PatchTSMixerModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PatchTSMixerModel
        ),
        /* harmony export */
        PatchTSMixerPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PatchTSMixerPreTrainedModel
        ),
        /* harmony export */
        PatchTSTForPrediction: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PatchTSTForPrediction
        ),
        /* harmony export */
        PatchTSTModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PatchTSTModel
        ),
        /* harmony export */
        PatchTSTPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PatchTSTPreTrainedModel
        ),
        /* harmony export */
        Phi3ForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3ForCausalLM
        ),
        /* harmony export */
        Phi3Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3Model
        ),
        /* harmony export */
        Phi3PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3PreTrainedModel
        ),
        /* harmony export */
        Phi3VForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3VForCausalLM
        ),
        /* harmony export */
        Phi3VImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.Phi3VImageProcessor
        ),
        /* harmony export */
        Phi3VPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3VPreTrainedModel
        ),
        /* harmony export */
        Phi3VProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.Phi3VProcessor
        ),
        /* harmony export */
        PhiForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PhiForCausalLM
        ),
        /* harmony export */
        PhiModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PhiModel
        ),
        /* harmony export */
        PhiPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PhiPreTrainedModel
        ),
        /* harmony export */
        Pipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.Pipeline
        ),
        /* harmony export */
        PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PreTrainedModel
        ),
        /* harmony export */
        PreTrainedTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.PreTrainedTokenizer
        ),
        /* harmony export */
        PretrainedConfig: () => (
          /* reexport safe */
          _configs_js__WEBPACK_IMPORTED_MODULE_4__.PretrainedConfig
        ),
        /* harmony export */
        PretrainedMixin: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PretrainedMixin
        ),
        /* harmony export */
        Processor: () => (
          /* reexport safe */
          _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_16__.Processor
        ),
        /* harmony export */
        PvtForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PvtForImageClassification
        ),
        /* harmony export */
        PvtImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.PvtImageProcessor
        ),
        /* harmony export */
        PvtModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PvtModel
        ),
        /* harmony export */
        PvtPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PvtPreTrainedModel
        ),
        /* harmony export */
        PyAnnoteFeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.PyAnnoteFeatureExtractor
        ),
        /* harmony export */
        PyAnnoteForAudioFrameClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PyAnnoteForAudioFrameClassification
        ),
        /* harmony export */
        PyAnnoteModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PyAnnoteModel
        ),
        /* harmony export */
        PyAnnotePreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.PyAnnotePreTrainedModel
        ),
        /* harmony export */
        PyAnnoteProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.PyAnnoteProcessor
        ),
        /* harmony export */
        QuestionAnsweringModelOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.QuestionAnsweringModelOutput
        ),
        /* harmony export */
        QuestionAnsweringPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.QuestionAnsweringPipeline
        ),
        /* harmony export */
        Qwen2ForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2ForCausalLM
        ),
        /* harmony export */
        Qwen2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2Model
        ),
        /* harmony export */
        Qwen2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2PreTrainedModel
        ),
        /* harmony export */
        Qwen2Tokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.Qwen2Tokenizer
        ),
        /* harmony export */
        Qwen2VLForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2VLForConditionalGeneration
        ),
        /* harmony export */
        Qwen2VLImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.Qwen2VLImageProcessor
        ),
        /* harmony export */
        Qwen2VLPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2VLPreTrainedModel
        ),
        /* harmony export */
        Qwen2VLProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.Qwen2VLProcessor
        ),
        /* harmony export */
        Qwen3ForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen3ForCausalLM
        ),
        /* harmony export */
        Qwen3Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen3Model
        ),
        /* harmony export */
        Qwen3PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen3PreTrainedModel
        ),
        /* harmony export */
        RFDetrForObjectDetection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RFDetrForObjectDetection
        ),
        /* harmony export */
        RFDetrModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RFDetrModel
        ),
        /* harmony export */
        RFDetrObjectDetectionOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RFDetrObjectDetectionOutput
        ),
        /* harmony export */
        RFDetrPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RFDetrPreTrainedModel
        ),
        /* harmony export */
        RTDetrForObjectDetection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrForObjectDetection
        ),
        /* harmony export */
        RTDetrImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.RTDetrImageProcessor
        ),
        /* harmony export */
        RTDetrModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrModel
        ),
        /* harmony export */
        RTDetrObjectDetectionOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrObjectDetectionOutput
        ),
        /* harmony export */
        RTDetrPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrPreTrainedModel
        ),
        /* harmony export */
        RTDetrV2ForObjectDetection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrV2ForObjectDetection
        ),
        /* harmony export */
        RTDetrV2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrV2Model
        ),
        /* harmony export */
        RTDetrV2ObjectDetectionOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrV2ObjectDetectionOutput
        ),
        /* harmony export */
        RTDetrV2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrV2PreTrainedModel
        ),
        /* harmony export */
        RawAudio: () => (
          /* reexport safe */
          _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.RawAudio
        ),
        /* harmony export */
        RawImage: () => (
          /* reexport safe */
          _utils_image_js__WEBPACK_IMPORTED_MODULE_6__.RawImage
        ),
        /* harmony export */
        RawVideo: () => (
          /* reexport safe */
          _utils_video_js__WEBPACK_IMPORTED_MODULE_7__.RawVideo
        ),
        /* harmony export */
        RawVideoFrame: () => (
          /* reexport safe */
          _utils_video_js__WEBPACK_IMPORTED_MODULE_7__.RawVideoFrame
        ),
        /* harmony export */
        RepetitionPenaltyLogitsProcessor: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.RepetitionPenaltyLogitsProcessor
        ),
        /* harmony export */
        ResNetForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ResNetForImageClassification
        ),
        /* harmony export */
        ResNetModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ResNetModel
        ),
        /* harmony export */
        ResNetPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ResNetPreTrainedModel
        ),
        /* harmony export */
        RoFormerForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerForMaskedLM
        ),
        /* harmony export */
        RoFormerForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerForQuestionAnswering
        ),
        /* harmony export */
        RoFormerForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerForSequenceClassification
        ),
        /* harmony export */
        RoFormerForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerForTokenClassification
        ),
        /* harmony export */
        RoFormerModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerModel
        ),
        /* harmony export */
        RoFormerPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerPreTrainedModel
        ),
        /* harmony export */
        RoFormerTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.RoFormerTokenizer
        ),
        /* harmony export */
        RobertaForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaForMaskedLM
        ),
        /* harmony export */
        RobertaForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaForQuestionAnswering
        ),
        /* harmony export */
        RobertaForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaForSequenceClassification
        ),
        /* harmony export */
        RobertaForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaForTokenClassification
        ),
        /* harmony export */
        RobertaModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaModel
        ),
        /* harmony export */
        RobertaPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaPreTrainedModel
        ),
        /* harmony export */
        RobertaTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.RobertaTokenizer
        ),
        /* harmony export */
        SamImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.SamImageProcessor
        ),
        /* harmony export */
        SamImageSegmentationOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SamImageSegmentationOutput
        ),
        /* harmony export */
        SamModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SamModel
        ),
        /* harmony export */
        SamPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SamPreTrainedModel
        ),
        /* harmony export */
        SamProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.SamProcessor
        ),
        /* harmony export */
        SapiensForDepthEstimation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SapiensForDepthEstimation
        ),
        /* harmony export */
        SapiensForNormalEstimation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SapiensForNormalEstimation
        ),
        /* harmony export */
        SapiensForSemanticSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SapiensForSemanticSegmentation
        ),
        /* harmony export */
        SapiensPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SapiensPreTrainedModel
        ),
        /* harmony export */
        SeamlessM4TFeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.SeamlessM4TFeatureExtractor
        ),
        /* harmony export */
        SegformerFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.SegformerFeatureExtractor
        ),
        /* harmony export */
        SegformerForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SegformerForImageClassification
        ),
        /* harmony export */
        SegformerForSemanticSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SegformerForSemanticSegmentation
        ),
        /* harmony export */
        SegformerImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.SegformerImageProcessor
        ),
        /* harmony export */
        SegformerModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SegformerModel
        ),
        /* harmony export */
        SegformerPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SegformerPreTrainedModel
        ),
        /* harmony export */
        Seq2SeqLMOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Seq2SeqLMOutput
        ),
        /* harmony export */
        SequenceClassifierOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SequenceClassifierOutput
        ),
        /* harmony export */
        SiglipImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.SiglipImageProcessor
        ),
        /* harmony export */
        SiglipModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SiglipModel
        ),
        /* harmony export */
        SiglipPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SiglipPreTrainedModel
        ),
        /* harmony export */
        SiglipTextModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SiglipTextModel
        ),
        /* harmony export */
        SiglipTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.SiglipTokenizer
        ),
        /* harmony export */
        SiglipVisionModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SiglipVisionModel
        ),
        /* harmony export */
        SmolVLMForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SmolVLMForConditionalGeneration
        ),
        /* harmony export */
        SmolVLMImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.SmolVLMImageProcessor
        ),
        /* harmony export */
        SmolVLMProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.SmolVLMProcessor
        ),
        /* harmony export */
        SnacDecoderModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SnacDecoderModel
        ),
        /* harmony export */
        SnacEncoderModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SnacEncoderModel
        ),
        /* harmony export */
        SnacFeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.SnacFeatureExtractor
        ),
        /* harmony export */
        SnacModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SnacModel
        ),
        /* harmony export */
        SnacPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SnacPreTrainedModel
        ),
        /* harmony export */
        SpeechT5FeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.SpeechT5FeatureExtractor
        ),
        /* harmony export */
        SpeechT5ForSpeechToText: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5ForSpeechToText
        ),
        /* harmony export */
        SpeechT5ForTextToSpeech: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5ForTextToSpeech
        ),
        /* harmony export */
        SpeechT5HifiGan: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5HifiGan
        ),
        /* harmony export */
        SpeechT5Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5Model
        ),
        /* harmony export */
        SpeechT5PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5PreTrainedModel
        ),
        /* harmony export */
        SpeechT5Processor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.SpeechT5Processor
        ),
        /* harmony export */
        SpeechT5Tokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.SpeechT5Tokenizer
        ),
        /* harmony export */
        SqueezeBertForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertForMaskedLM
        ),
        /* harmony export */
        SqueezeBertForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertForQuestionAnswering
        ),
        /* harmony export */
        SqueezeBertForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertForSequenceClassification
        ),
        /* harmony export */
        SqueezeBertModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertModel
        ),
        /* harmony export */
        SqueezeBertPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertPreTrainedModel
        ),
        /* harmony export */
        SqueezeBertTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.SqueezeBertTokenizer
        ),
        /* harmony export */
        StableLmForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.StableLmForCausalLM
        ),
        /* harmony export */
        StableLmModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.StableLmModel
        ),
        /* harmony export */
        StableLmPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.StableLmPreTrainedModel
        ),
        /* harmony export */
        Starcoder2ForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Starcoder2ForCausalLM
        ),
        /* harmony export */
        Starcoder2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Starcoder2Model
        ),
        /* harmony export */
        Starcoder2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Starcoder2PreTrainedModel
        ),
        /* harmony export */
        StoppingCriteria: () => (
          /* reexport safe */
          _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_20__.StoppingCriteria
        ),
        /* harmony export */
        StoppingCriteriaList: () => (
          /* reexport safe */
          _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_20__.StoppingCriteriaList
        ),
        /* harmony export */
        StyleTextToSpeech2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.StyleTextToSpeech2Model
        ),
        /* harmony export */
        StyleTextToSpeech2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.StyleTextToSpeech2PreTrainedModel
        ),
        /* harmony export */
        SummarizationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.SummarizationPipeline
        ),
        /* harmony export */
        SuppressTokensAtBeginLogitsProcessor: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.SuppressTokensAtBeginLogitsProcessor
        ),
        /* harmony export */
        Swin2SRForImageSuperResolution: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Swin2SRForImageSuperResolution
        ),
        /* harmony export */
        Swin2SRImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.Swin2SRImageProcessor
        ),
        /* harmony export */
        Swin2SRModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Swin2SRModel
        ),
        /* harmony export */
        Swin2SRPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Swin2SRPreTrainedModel
        ),
        /* harmony export */
        SwinForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SwinForImageClassification
        ),
        /* harmony export */
        SwinForSemanticSegmentation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SwinForSemanticSegmentation
        ),
        /* harmony export */
        SwinModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SwinModel
        ),
        /* harmony export */
        SwinPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.SwinPreTrainedModel
        ),
        /* harmony export */
        T5ForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.T5ForConditionalGeneration
        ),
        /* harmony export */
        T5Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.T5Model
        ),
        /* harmony export */
        T5PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.T5PreTrainedModel
        ),
        /* harmony export */
        T5Tokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.T5Tokenizer
        ),
        /* harmony export */
        TableTransformerForObjectDetection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.TableTransformerForObjectDetection
        ),
        /* harmony export */
        TableTransformerModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.TableTransformerModel
        ),
        /* harmony export */
        TableTransformerObjectDetectionOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.TableTransformerObjectDetectionOutput
        ),
        /* harmony export */
        TableTransformerPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.TableTransformerPreTrainedModel
        ),
        /* harmony export */
        TemperatureLogitsWarper: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.TemperatureLogitsWarper
        ),
        /* harmony export */
        Tensor: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor
        ),
        /* harmony export */
        Text2TextGenerationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.Text2TextGenerationPipeline
        ),
        /* harmony export */
        TextClassificationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TextClassificationPipeline
        ),
        /* harmony export */
        TextGenerationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TextGenerationPipeline
        ),
        /* harmony export */
        TextStreamer: () => (
          /* reexport safe */
          _generation_streamers_js__WEBPACK_IMPORTED_MODULE_19__.TextStreamer
        ),
        /* harmony export */
        TextToAudioPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TextToAudioPipeline
        ),
        /* harmony export */
        TokenClassificationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TokenClassificationPipeline
        ),
        /* harmony export */
        TokenClassifierOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.TokenClassifierOutput
        ),
        /* harmony export */
        TokenizerModel: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.TokenizerModel
        ),
        /* harmony export */
        TopKLogitsWarper: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.TopKLogitsWarper
        ),
        /* harmony export */
        TopPLogitsWarper: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.TopPLogitsWarper
        ),
        /* harmony export */
        TrOCRForCausalLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.TrOCRForCausalLM
        ),
        /* harmony export */
        TrOCRPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.TrOCRPreTrainedModel
        ),
        /* harmony export */
        TranslationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TranslationPipeline
        ),
        /* harmony export */
        UltravoxModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.UltravoxModel
        ),
        /* harmony export */
        UltravoxPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.UltravoxPreTrainedModel
        ),
        /* harmony export */
        UltravoxProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.UltravoxProcessor
        ),
        /* harmony export */
        UniSpeechForCTC: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechForCTC
        ),
        /* harmony export */
        UniSpeechForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechForSequenceClassification
        ),
        /* harmony export */
        UniSpeechModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechModel
        ),
        /* harmony export */
        UniSpeechPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechPreTrainedModel
        ),
        /* harmony export */
        UniSpeechSatForAudioFrameClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatForAudioFrameClassification
        ),
        /* harmony export */
        UniSpeechSatForCTC: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatForCTC
        ),
        /* harmony export */
        UniSpeechSatForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatForSequenceClassification
        ),
        /* harmony export */
        UniSpeechSatModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatModel
        ),
        /* harmony export */
        UniSpeechSatPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatPreTrainedModel
        ),
        /* harmony export */
        VLChatProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.VLChatProcessor
        ),
        /* harmony export */
        VLMImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.VLMImageProcessor
        ),
        /* harmony export */
        ViTFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.ViTFeatureExtractor
        ),
        /* harmony export */
        ViTForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTForImageClassification
        ),
        /* harmony export */
        ViTImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.ViTImageProcessor
        ),
        /* harmony export */
        ViTMAEModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMAEModel
        ),
        /* harmony export */
        ViTMAEPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMAEPreTrainedModel
        ),
        /* harmony export */
        ViTMSNForImageClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMSNForImageClassification
        ),
        /* harmony export */
        ViTMSNModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMSNModel
        ),
        /* harmony export */
        ViTMSNPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMSNPreTrainedModel
        ),
        /* harmony export */
        ViTModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTModel
        ),
        /* harmony export */
        ViTPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTPreTrainedModel
        ),
        /* harmony export */
        VisionEncoderDecoderModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.VisionEncoderDecoderModel
        ),
        /* harmony export */
        VitMatteForImageMatting: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.VitMatteForImageMatting
        ),
        /* harmony export */
        VitMatteImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.VitMatteImageProcessor
        ),
        /* harmony export */
        VitMattePreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.VitMattePreTrainedModel
        ),
        /* harmony export */
        VitPoseForPoseEstimation: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.VitPoseForPoseEstimation
        ),
        /* harmony export */
        VitPoseImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.VitPoseImageProcessor
        ),
        /* harmony export */
        VitPosePreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.VitPosePreTrainedModel
        ),
        /* harmony export */
        VitsModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.VitsModel
        ),
        /* harmony export */
        VitsModelOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.VitsModelOutput
        ),
        /* harmony export */
        VitsPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.VitsPreTrainedModel
        ),
        /* harmony export */
        VitsTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.VitsTokenizer
        ),
        /* harmony export */
        Wav2Vec2BertForCTC: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2BertForCTC
        ),
        /* harmony export */
        Wav2Vec2BertForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2BertForSequenceClassification
        ),
        /* harmony export */
        Wav2Vec2BertModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2BertModel
        ),
        /* harmony export */
        Wav2Vec2BertPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2BertPreTrainedModel
        ),
        /* harmony export */
        Wav2Vec2CTCTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.Wav2Vec2CTCTokenizer
        ),
        /* harmony export */
        Wav2Vec2FeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.Wav2Vec2FeatureExtractor
        ),
        /* harmony export */
        Wav2Vec2ForAudioFrameClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2ForAudioFrameClassification
        ),
        /* harmony export */
        Wav2Vec2ForCTC: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2ForCTC
        ),
        /* harmony export */
        Wav2Vec2ForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2ForSequenceClassification
        ),
        /* harmony export */
        Wav2Vec2Model: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2Model
        ),
        /* harmony export */
        Wav2Vec2PreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2PreTrainedModel
        ),
        /* harmony export */
        Wav2Vec2Processor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.Wav2Vec2Processor
        ),
        /* harmony export */
        Wav2Vec2ProcessorWithLM: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.Wav2Vec2ProcessorWithLM
        ),
        /* harmony export */
        WavLMForAudioFrameClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMForAudioFrameClassification
        ),
        /* harmony export */
        WavLMForCTC: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMForCTC
        ),
        /* harmony export */
        WavLMForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMForSequenceClassification
        ),
        /* harmony export */
        WavLMForXVector: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMForXVector
        ),
        /* harmony export */
        WavLMModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMModel
        ),
        /* harmony export */
        WavLMPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMPreTrainedModel
        ),
        /* harmony export */
        WeSpeakerFeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.WeSpeakerFeatureExtractor
        ),
        /* harmony export */
        WeSpeakerResNetModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.WeSpeakerResNetModel
        ),
        /* harmony export */
        WeSpeakerResNetPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.WeSpeakerResNetPreTrainedModel
        ),
        /* harmony export */
        WhisperFeatureExtractor: () => (
          /* reexport safe */
          _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__.WhisperFeatureExtractor
        ),
        /* harmony export */
        WhisperForConditionalGeneration: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.WhisperForConditionalGeneration
        ),
        /* harmony export */
        WhisperModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.WhisperModel
        ),
        /* harmony export */
        WhisperPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.WhisperPreTrainedModel
        ),
        /* harmony export */
        WhisperProcessor: () => (
          /* reexport safe */
          _models_processors_js__WEBPACK_IMPORTED_MODULE_17__.WhisperProcessor
        ),
        /* harmony export */
        WhisperTextStreamer: () => (
          /* reexport safe */
          _generation_streamers_js__WEBPACK_IMPORTED_MODULE_19__.WhisperTextStreamer
        ),
        /* harmony export */
        WhisperTimeStampLogitsProcessor: () => (
          /* reexport safe */
          _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__.WhisperTimeStampLogitsProcessor
        ),
        /* harmony export */
        WhisperTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.WhisperTokenizer
        ),
        /* harmony export */
        XLMForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMForQuestionAnswering
        ),
        /* harmony export */
        XLMForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMForSequenceClassification
        ),
        /* harmony export */
        XLMForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMForTokenClassification
        ),
        /* harmony export */
        XLMModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMModel
        ),
        /* harmony export */
        XLMPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMPreTrainedModel
        ),
        /* harmony export */
        XLMRobertaForMaskedLM: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaForMaskedLM
        ),
        /* harmony export */
        XLMRobertaForQuestionAnswering: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaForQuestionAnswering
        ),
        /* harmony export */
        XLMRobertaForSequenceClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaForSequenceClassification
        ),
        /* harmony export */
        XLMRobertaForTokenClassification: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaForTokenClassification
        ),
        /* harmony export */
        XLMRobertaModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaModel
        ),
        /* harmony export */
        XLMRobertaPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaPreTrainedModel
        ),
        /* harmony export */
        XLMRobertaTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.XLMRobertaTokenizer
        ),
        /* harmony export */
        XLMTokenizer: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.XLMTokenizer
        ),
        /* harmony export */
        XLMWithLMHeadModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMWithLMHeadModel
        ),
        /* harmony export */
        XVectorOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.XVectorOutput
        ),
        /* harmony export */
        YolosFeatureExtractor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.YolosFeatureExtractor
        ),
        /* harmony export */
        YolosForObjectDetection: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.YolosForObjectDetection
        ),
        /* harmony export */
        YolosImageProcessor: () => (
          /* reexport safe */
          _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__.YolosImageProcessor
        ),
        /* harmony export */
        YolosModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.YolosModel
        ),
        /* harmony export */
        YolosObjectDetectionOutput: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.YolosObjectDetectionOutput
        ),
        /* harmony export */
        YolosPreTrainedModel: () => (
          /* reexport safe */
          _models_js__WEBPACK_IMPORTED_MODULE_2__.YolosPreTrainedModel
        ),
        /* harmony export */
        ZeroShotAudioClassificationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ZeroShotAudioClassificationPipeline
        ),
        /* harmony export */
        ZeroShotClassificationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ZeroShotClassificationPipeline
        ),
        /* harmony export */
        ZeroShotImageClassificationPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ZeroShotImageClassificationPipeline
        ),
        /* harmony export */
        ZeroShotObjectDetectionPipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ZeroShotObjectDetectionPipeline
        ),
        /* harmony export */
        bankers_round: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.bankers_round
        ),
        /* harmony export */
        cat: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.cat
        ),
        /* harmony export */
        cos_sim: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.cos_sim
        ),
        /* harmony export */
        dot: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.dot
        ),
        /* harmony export */
        dynamic_time_warping: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.dynamic_time_warping
        ),
        /* harmony export */
        env: () => (
          /* reexport safe */
          _env_js__WEBPACK_IMPORTED_MODULE_0__.env
        ),
        /* harmony export */
        full: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.full
        ),
        /* harmony export */
        full_like: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.full_like
        ),
        /* harmony export */
        getKeyValueShapes: () => (
          /* reexport safe */
          _configs_js__WEBPACK_IMPORTED_MODULE_4__.getKeyValueShapes
        ),
        /* harmony export */
        hamming: () => (
          /* reexport safe */
          _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.hamming
        ),
        /* harmony export */
        hanning: () => (
          /* reexport safe */
          _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.hanning
        ),
        /* harmony export */
        interpolate: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.interpolate
        ),
        /* harmony export */
        interpolate_4d: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.interpolate_4d
        ),
        /* harmony export */
        interpolate_data: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.interpolate_data
        ),
        /* harmony export */
        is_chinese_char: () => (
          /* reexport safe */
          _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.is_chinese_char
        ),
        /* harmony export */
        layer_norm: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.layer_norm
        ),
        /* harmony export */
        load_image: () => (
          /* reexport safe */
          _utils_image_js__WEBPACK_IMPORTED_MODULE_6__.load_image
        ),
        /* harmony export */
        load_video: () => (
          /* reexport safe */
          _utils_video_js__WEBPACK_IMPORTED_MODULE_7__.load_video
        ),
        /* harmony export */
        log_softmax: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.log_softmax
        ),
        /* harmony export */
        magnitude: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.magnitude
        ),
        /* harmony export */
        matmul: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.matmul
        ),
        /* harmony export */
        max: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.max
        ),
        /* harmony export */
        mean: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.mean
        ),
        /* harmony export */
        mean_pooling: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.mean_pooling
        ),
        /* harmony export */
        medianFilter: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.medianFilter
        ),
        /* harmony export */
        mel_filter_bank: () => (
          /* reexport safe */
          _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.mel_filter_bank
        ),
        /* harmony export */
        min: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.min
        ),
        /* harmony export */
        ones: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.ones
        ),
        /* harmony export */
        ones_like: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.ones_like
        ),
        /* harmony export */
        permute: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.permute
        ),
        /* harmony export */
        permute_data: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.permute_data
        ),
        /* harmony export */
        pipeline: () => (
          /* reexport safe */
          _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.pipeline
        ),
        /* harmony export */
        quantize_embeddings: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.quantize_embeddings
        ),
        /* harmony export */
        rand: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.rand
        ),
        /* harmony export */
        read_audio: () => (
          /* reexport safe */
          _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.read_audio
        ),
        /* harmony export */
        rfft: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.rfft
        ),
        /* harmony export */
        round: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.round
        ),
        /* harmony export */
        slice: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.slice
        ),
        /* harmony export */
        softmax: () => (
          /* reexport safe */
          _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.softmax
        ),
        /* harmony export */
        spectrogram: () => (
          /* reexport safe */
          _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.spectrogram
        ),
        /* harmony export */
        stack: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.stack
        ),
        /* harmony export */
        std_mean: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.std_mean
        ),
        /* harmony export */
        topk: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.topk
        ),
        /* harmony export */
        window_function: () => (
          /* reexport safe */
          _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__.window_function
        ),
        /* harmony export */
        zeros: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.zeros
        ),
        /* harmony export */
        zeros_like: () => (
          /* reexport safe */
          _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.zeros_like
        )
        /* harmony export */
      });
      var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        /*! ./env.js */
        "./src/env.js"
      );
      var _pipelines_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        /*! ./pipelines.js */
        "./src/pipelines.js"
      );
      var _models_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        /*! ./models.js */
        "./src/models.js"
      );
      var _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        /*! ./tokenizers.js */
        "./src/tokenizers.js"
      );
      var _configs_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        /*! ./configs.js */
        "./src/configs.js"
      );
      var _utils_audio_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
        /*! ./utils/audio.js */
        "./src/utils/audio.js"
      );
      var _utils_image_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
        /*! ./utils/image.js */
        "./src/utils/image.js"
      );
      var _utils_video_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
        /*! ./utils/video.js */
        "./src/utils/video.js"
      );
      var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
        /*! ./utils/tensor.js */
        "./src/utils/tensor.js"
      );
      var _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
        /*! ./utils/maths.js */
        "./src/utils/maths.js"
      );
      var _base_feature_extraction_utils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
        /*! ./base/feature_extraction_utils.js */
        "./src/base/feature_extraction_utils.js"
      );
      var _models_feature_extractors_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
        /*! ./models/feature_extractors.js */
        "./src/models/feature_extractors.js"
      );
      var _models_auto_feature_extraction_auto_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
        /*! ./models/auto/feature_extraction_auto.js */
        "./src/models/auto/feature_extraction_auto.js"
      );
      var _base_image_processors_utils_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
        /*! ./base/image_processors_utils.js */
        "./src/base/image_processors_utils.js"
      );
      var _models_image_processors_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
        /*! ./models/image_processors.js */
        "./src/models/image_processors.js"
      );
      var _models_auto_image_processing_auto_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
        /*! ./models/auto/image_processing_auto.js */
        "./src/models/auto/image_processing_auto.js"
      );
      var _base_processing_utils_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
        /*! ./base/processing_utils.js */
        "./src/base/processing_utils.js"
      );
      var _models_processors_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
        /*! ./models/processors.js */
        "./src/models/processors.js"
      );
      var _models_auto_processing_auto_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
        /*! ./models/auto/processing_auto.js */
        "./src/models/auto/processing_auto.js"
      );
      var _generation_streamers_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
        /*! ./generation/streamers.js */
        "./src/generation/streamers.js"
      );
      var _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
        /*! ./generation/stopping_criteria.js */
        "./src/generation/stopping_criteria.js"
      );
      var _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
        /*! ./generation/logits_process.js */
        "./src/generation/logits_process.js"
      );
    })();
    __webpack_exports__ASTFeatureExtractor = __webpack_exports__.ASTFeatureExtractor;
    __webpack_exports__ASTForAudioClassification = __webpack_exports__.ASTForAudioClassification;
    __webpack_exports__ASTModel = __webpack_exports__.ASTModel;
    __webpack_exports__ASTPreTrainedModel = __webpack_exports__.ASTPreTrainedModel;
    __webpack_exports__AlbertForMaskedLM = __webpack_exports__.AlbertForMaskedLM;
    __webpack_exports__AlbertForQuestionAnswering = __webpack_exports__.AlbertForQuestionAnswering;
    __webpack_exports__AlbertForSequenceClassification = __webpack_exports__.AlbertForSequenceClassification;
    __webpack_exports__AlbertModel = __webpack_exports__.AlbertModel;
    __webpack_exports__AlbertPreTrainedModel = __webpack_exports__.AlbertPreTrainedModel;
    __webpack_exports__AlbertTokenizer = __webpack_exports__.AlbertTokenizer;
    __webpack_exports__AudioClassificationPipeline = __webpack_exports__.AudioClassificationPipeline;
    __webpack_exports__AutoConfig = __webpack_exports__.AutoConfig;
    __webpack_exports__AutoFeatureExtractor = __webpack_exports__.AutoFeatureExtractor;
    __webpack_exports__AutoImageProcessor = __webpack_exports__.AutoImageProcessor;
    __webpack_exports__AutoModel = __webpack_exports__.AutoModel;
    __webpack_exports__AutoModelForAudioClassification = __webpack_exports__.AutoModelForAudioClassification;
    __webpack_exports__AutoModelForAudioFrameClassification = __webpack_exports__.AutoModelForAudioFrameClassification;
    __webpack_exports__AutoModelForAudioTextToText = __webpack_exports__.AutoModelForAudioTextToText;
    __webpack_exports__AutoModelForCTC = __webpack_exports__.AutoModelForCTC;
    __webpack_exports__AutoModelForCausalLM = __webpack_exports__.AutoModelForCausalLM;
    __webpack_exports__AutoModelForDepthEstimation = __webpack_exports__.AutoModelForDepthEstimation;
    __webpack_exports__AutoModelForDocumentQuestionAnswering = __webpack_exports__.AutoModelForDocumentQuestionAnswering;
    __webpack_exports__AutoModelForImageClassification = __webpack_exports__.AutoModelForImageClassification;
    __webpack_exports__AutoModelForImageFeatureExtraction = __webpack_exports__.AutoModelForImageFeatureExtraction;
    __webpack_exports__AutoModelForImageMatting = __webpack_exports__.AutoModelForImageMatting;
    __webpack_exports__AutoModelForImageSegmentation = __webpack_exports__.AutoModelForImageSegmentation;
    __webpack_exports__AutoModelForImageTextToText = __webpack_exports__.AutoModelForImageTextToText;
    __webpack_exports__AutoModelForImageToImage = __webpack_exports__.AutoModelForImageToImage;
    __webpack_exports__AutoModelForMaskGeneration = __webpack_exports__.AutoModelForMaskGeneration;
    __webpack_exports__AutoModelForMaskedLM = __webpack_exports__.AutoModelForMaskedLM;
    __webpack_exports__AutoModelForNormalEstimation = __webpack_exports__.AutoModelForNormalEstimation;
    __webpack_exports__AutoModelForObjectDetection = __webpack_exports__.AutoModelForObjectDetection;
    __webpack_exports__AutoModelForPoseEstimation = __webpack_exports__.AutoModelForPoseEstimation;
    __webpack_exports__AutoModelForQuestionAnswering = __webpack_exports__.AutoModelForQuestionAnswering;
    __webpack_exports__AutoModelForSemanticSegmentation = __webpack_exports__.AutoModelForSemanticSegmentation;
    __webpack_exports__AutoModelForSeq2SeqLM = __webpack_exports__.AutoModelForSeq2SeqLM;
    __webpack_exports__AutoModelForSequenceClassification = __webpack_exports__.AutoModelForSequenceClassification;
    __webpack_exports__AutoModelForSpeechSeq2Seq = __webpack_exports__.AutoModelForSpeechSeq2Seq;
    __webpack_exports__AutoModelForTextToSpectrogram = __webpack_exports__.AutoModelForTextToSpectrogram;
    __webpack_exports__AutoModelForTextToWaveform = __webpack_exports__.AutoModelForTextToWaveform;
    __webpack_exports__AutoModelForTokenClassification = __webpack_exports__.AutoModelForTokenClassification;
    __webpack_exports__AutoModelForUniversalSegmentation = __webpack_exports__.AutoModelForUniversalSegmentation;
    __webpack_exports__AutoModelForVision2Seq = __webpack_exports__.AutoModelForVision2Seq;
    __webpack_exports__AutoModelForXVector = __webpack_exports__.AutoModelForXVector;
    __webpack_exports__AutoModelForZeroShotObjectDetection = __webpack_exports__.AutoModelForZeroShotObjectDetection;
    __webpack_exports__AutoProcessor = __webpack_exports__.AutoProcessor;
    __webpack_exports__AutoTokenizer = __webpack_exports__.AutoTokenizer;
    __webpack_exports__AutomaticSpeechRecognitionPipeline = __webpack_exports__.AutomaticSpeechRecognitionPipeline;
    __webpack_exports__BackgroundRemovalPipeline = __webpack_exports__.BackgroundRemovalPipeline;
    __webpack_exports__BartForConditionalGeneration = __webpack_exports__.BartForConditionalGeneration;
    __webpack_exports__BartForSequenceClassification = __webpack_exports__.BartForSequenceClassification;
    __webpack_exports__BartModel = __webpack_exports__.BartModel;
    __webpack_exports__BartPretrainedModel = __webpack_exports__.BartPretrainedModel;
    __webpack_exports__BartTokenizer = __webpack_exports__.BartTokenizer;
    __webpack_exports__BaseModelOutput = __webpack_exports__.BaseModelOutput;
    __webpack_exports__BaseStreamer = __webpack_exports__.BaseStreamer;
    __webpack_exports__BeitFeatureExtractor = __webpack_exports__.BeitFeatureExtractor;
    __webpack_exports__BeitForImageClassification = __webpack_exports__.BeitForImageClassification;
    __webpack_exports__BeitModel = __webpack_exports__.BeitModel;
    __webpack_exports__BeitPreTrainedModel = __webpack_exports__.BeitPreTrainedModel;
    __webpack_exports__BertForMaskedLM = __webpack_exports__.BertForMaskedLM;
    __webpack_exports__BertForQuestionAnswering = __webpack_exports__.BertForQuestionAnswering;
    __webpack_exports__BertForSequenceClassification = __webpack_exports__.BertForSequenceClassification;
    __webpack_exports__BertForTokenClassification = __webpack_exports__.BertForTokenClassification;
    __webpack_exports__BertModel = __webpack_exports__.BertModel;
    __webpack_exports__BertPreTrainedModel = __webpack_exports__.BertPreTrainedModel;
    __webpack_exports__BertTokenizer = __webpack_exports__.BertTokenizer;
    __webpack_exports__BitImageProcessor = __webpack_exports__.BitImageProcessor;
    __webpack_exports__BlenderbotForConditionalGeneration = __webpack_exports__.BlenderbotForConditionalGeneration;
    __webpack_exports__BlenderbotModel = __webpack_exports__.BlenderbotModel;
    __webpack_exports__BlenderbotPreTrainedModel = __webpack_exports__.BlenderbotPreTrainedModel;
    __webpack_exports__BlenderbotSmallForConditionalGeneration = __webpack_exports__.BlenderbotSmallForConditionalGeneration;
    __webpack_exports__BlenderbotSmallModel = __webpack_exports__.BlenderbotSmallModel;
    __webpack_exports__BlenderbotSmallPreTrainedModel = __webpack_exports__.BlenderbotSmallPreTrainedModel;
    __webpack_exports__BlenderbotSmallTokenizer = __webpack_exports__.BlenderbotSmallTokenizer;
    __webpack_exports__BlenderbotTokenizer = __webpack_exports__.BlenderbotTokenizer;
    __webpack_exports__BloomForCausalLM = __webpack_exports__.BloomForCausalLM;
    __webpack_exports__BloomModel = __webpack_exports__.BloomModel;
    __webpack_exports__BloomPreTrainedModel = __webpack_exports__.BloomPreTrainedModel;
    __webpack_exports__BloomTokenizer = __webpack_exports__.BloomTokenizer;
    __webpack_exports__CLIPFeatureExtractor = __webpack_exports__.CLIPFeatureExtractor;
    __webpack_exports__CLIPImageProcessor = __webpack_exports__.CLIPImageProcessor;
    __webpack_exports__CLIPModel = __webpack_exports__.CLIPModel;
    __webpack_exports__CLIPPreTrainedModel = __webpack_exports__.CLIPPreTrainedModel;
    __webpack_exports__CLIPSegForImageSegmentation = __webpack_exports__.CLIPSegForImageSegmentation;
    __webpack_exports__CLIPSegModel = __webpack_exports__.CLIPSegModel;
    __webpack_exports__CLIPSegPreTrainedModel = __webpack_exports__.CLIPSegPreTrainedModel;
    __webpack_exports__CLIPTextModel = __webpack_exports__.CLIPTextModel;
    __webpack_exports__CLIPTextModelWithProjection = __webpack_exports__.CLIPTextModelWithProjection;
    __webpack_exports__CLIPTokenizer = __webpack_exports__.CLIPTokenizer;
    __webpack_exports__CLIPVisionModel = __webpack_exports__.CLIPVisionModel;
    __webpack_exports__CLIPVisionModelWithProjection = __webpack_exports__.CLIPVisionModelWithProjection;
    __webpack_exports__CamembertForMaskedLM = __webpack_exports__.CamembertForMaskedLM;
    __webpack_exports__CamembertForQuestionAnswering = __webpack_exports__.CamembertForQuestionAnswering;
    __webpack_exports__CamembertForSequenceClassification = __webpack_exports__.CamembertForSequenceClassification;
    __webpack_exports__CamembertForTokenClassification = __webpack_exports__.CamembertForTokenClassification;
    __webpack_exports__CamembertModel = __webpack_exports__.CamembertModel;
    __webpack_exports__CamembertPreTrainedModel = __webpack_exports__.CamembertPreTrainedModel;
    __webpack_exports__CamembertTokenizer = __webpack_exports__.CamembertTokenizer;
    __webpack_exports__CausalLMOutput = __webpack_exports__.CausalLMOutput;
    __webpack_exports__CausalLMOutputWithPast = __webpack_exports__.CausalLMOutputWithPast;
    __webpack_exports__ChineseCLIPFeatureExtractor = __webpack_exports__.ChineseCLIPFeatureExtractor;
    __webpack_exports__ChineseCLIPModel = __webpack_exports__.ChineseCLIPModel;
    __webpack_exports__ChineseCLIPPreTrainedModel = __webpack_exports__.ChineseCLIPPreTrainedModel;
    __webpack_exports__ClapAudioModelWithProjection = __webpack_exports__.ClapAudioModelWithProjection;
    __webpack_exports__ClapFeatureExtractor = __webpack_exports__.ClapFeatureExtractor;
    __webpack_exports__ClapModel = __webpack_exports__.ClapModel;
    __webpack_exports__ClapPreTrainedModel = __webpack_exports__.ClapPreTrainedModel;
    __webpack_exports__ClapTextModelWithProjection = __webpack_exports__.ClapTextModelWithProjection;
    __webpack_exports__ClassifierFreeGuidanceLogitsProcessor = __webpack_exports__.ClassifierFreeGuidanceLogitsProcessor;
    __webpack_exports__CodeGenForCausalLM = __webpack_exports__.CodeGenForCausalLM;
    __webpack_exports__CodeGenModel = __webpack_exports__.CodeGenModel;
    __webpack_exports__CodeGenPreTrainedModel = __webpack_exports__.CodeGenPreTrainedModel;
    __webpack_exports__CodeGenTokenizer = __webpack_exports__.CodeGenTokenizer;
    __webpack_exports__CodeLlamaTokenizer = __webpack_exports__.CodeLlamaTokenizer;
    __webpack_exports__CohereForCausalLM = __webpack_exports__.CohereForCausalLM;
    __webpack_exports__CohereModel = __webpack_exports__.CohereModel;
    __webpack_exports__CoherePreTrainedModel = __webpack_exports__.CoherePreTrainedModel;
    __webpack_exports__CohereTokenizer = __webpack_exports__.CohereTokenizer;
    __webpack_exports__ConvBertForMaskedLM = __webpack_exports__.ConvBertForMaskedLM;
    __webpack_exports__ConvBertForQuestionAnswering = __webpack_exports__.ConvBertForQuestionAnswering;
    __webpack_exports__ConvBertForSequenceClassification = __webpack_exports__.ConvBertForSequenceClassification;
    __webpack_exports__ConvBertForTokenClassification = __webpack_exports__.ConvBertForTokenClassification;
    __webpack_exports__ConvBertModel = __webpack_exports__.ConvBertModel;
    __webpack_exports__ConvBertPreTrainedModel = __webpack_exports__.ConvBertPreTrainedModel;
    __webpack_exports__ConvBertTokenizer = __webpack_exports__.ConvBertTokenizer;
    __webpack_exports__ConvNextFeatureExtractor = __webpack_exports__.ConvNextFeatureExtractor;
    __webpack_exports__ConvNextForImageClassification = __webpack_exports__.ConvNextForImageClassification;
    __webpack_exports__ConvNextImageProcessor = __webpack_exports__.ConvNextImageProcessor;
    __webpack_exports__ConvNextModel = __webpack_exports__.ConvNextModel;
    __webpack_exports__ConvNextPreTrainedModel = __webpack_exports__.ConvNextPreTrainedModel;
    __webpack_exports__ConvNextV2ForImageClassification = __webpack_exports__.ConvNextV2ForImageClassification;
    __webpack_exports__ConvNextV2Model = __webpack_exports__.ConvNextV2Model;
    __webpack_exports__ConvNextV2PreTrainedModel = __webpack_exports__.ConvNextV2PreTrainedModel;
    __webpack_exports__DFineForObjectDetection = __webpack_exports__.DFineForObjectDetection;
    __webpack_exports__DFineModel = __webpack_exports__.DFineModel;
    __webpack_exports__DFinePreTrainedModel = __webpack_exports__.DFinePreTrainedModel;
    __webpack_exports__DPTFeatureExtractor = __webpack_exports__.DPTFeatureExtractor;
    __webpack_exports__DPTForDepthEstimation = __webpack_exports__.DPTForDepthEstimation;
    __webpack_exports__DPTImageProcessor = __webpack_exports__.DPTImageProcessor;
    __webpack_exports__DPTModel = __webpack_exports__.DPTModel;
    __webpack_exports__DPTPreTrainedModel = __webpack_exports__.DPTPreTrainedModel;
    __webpack_exports__DacDecoderModel = __webpack_exports__.DacDecoderModel;
    __webpack_exports__DacDecoderOutput = __webpack_exports__.DacDecoderOutput;
    __webpack_exports__DacEncoderModel = __webpack_exports__.DacEncoderModel;
    __webpack_exports__DacEncoderOutput = __webpack_exports__.DacEncoderOutput;
    __webpack_exports__DacFeatureExtractor = __webpack_exports__.DacFeatureExtractor;
    __webpack_exports__DacModel = __webpack_exports__.DacModel;
    __webpack_exports__DacPreTrainedModel = __webpack_exports__.DacPreTrainedModel;
    __webpack_exports__DataTypeMap = __webpack_exports__.DataTypeMap;
    __webpack_exports__DebertaForMaskedLM = __webpack_exports__.DebertaForMaskedLM;
    __webpack_exports__DebertaForQuestionAnswering = __webpack_exports__.DebertaForQuestionAnswering;
    __webpack_exports__DebertaForSequenceClassification = __webpack_exports__.DebertaForSequenceClassification;
    __webpack_exports__DebertaForTokenClassification = __webpack_exports__.DebertaForTokenClassification;
    __webpack_exports__DebertaModel = __webpack_exports__.DebertaModel;
    __webpack_exports__DebertaPreTrainedModel = __webpack_exports__.DebertaPreTrainedModel;
    __webpack_exports__DebertaTokenizer = __webpack_exports__.DebertaTokenizer;
    __webpack_exports__DebertaV2ForMaskedLM = __webpack_exports__.DebertaV2ForMaskedLM;
    __webpack_exports__DebertaV2ForQuestionAnswering = __webpack_exports__.DebertaV2ForQuestionAnswering;
    __webpack_exports__DebertaV2ForSequenceClassification = __webpack_exports__.DebertaV2ForSequenceClassification;
    __webpack_exports__DebertaV2ForTokenClassification = __webpack_exports__.DebertaV2ForTokenClassification;
    __webpack_exports__DebertaV2Model = __webpack_exports__.DebertaV2Model;
    __webpack_exports__DebertaV2PreTrainedModel = __webpack_exports__.DebertaV2PreTrainedModel;
    __webpack_exports__DebertaV2Tokenizer = __webpack_exports__.DebertaV2Tokenizer;
    __webpack_exports__DecisionTransformerModel = __webpack_exports__.DecisionTransformerModel;
    __webpack_exports__DecisionTransformerPreTrainedModel = __webpack_exports__.DecisionTransformerPreTrainedModel;
    __webpack_exports__DeiTFeatureExtractor = __webpack_exports__.DeiTFeatureExtractor;
    __webpack_exports__DeiTForImageClassification = __webpack_exports__.DeiTForImageClassification;
    __webpack_exports__DeiTImageProcessor = __webpack_exports__.DeiTImageProcessor;
    __webpack_exports__DeiTModel = __webpack_exports__.DeiTModel;
    __webpack_exports__DeiTPreTrainedModel = __webpack_exports__.DeiTPreTrainedModel;
    __webpack_exports__DepthAnythingForDepthEstimation = __webpack_exports__.DepthAnythingForDepthEstimation;
    __webpack_exports__DepthAnythingPreTrainedModel = __webpack_exports__.DepthAnythingPreTrainedModel;
    __webpack_exports__DepthEstimationPipeline = __webpack_exports__.DepthEstimationPipeline;
    __webpack_exports__DepthProForDepthEstimation = __webpack_exports__.DepthProForDepthEstimation;
    __webpack_exports__DepthProPreTrainedModel = __webpack_exports__.DepthProPreTrainedModel;
    __webpack_exports__DetrFeatureExtractor = __webpack_exports__.DetrFeatureExtractor;
    __webpack_exports__DetrForObjectDetection = __webpack_exports__.DetrForObjectDetection;
    __webpack_exports__DetrForSegmentation = __webpack_exports__.DetrForSegmentation;
    __webpack_exports__DetrImageProcessor = __webpack_exports__.DetrImageProcessor;
    __webpack_exports__DetrModel = __webpack_exports__.DetrModel;
    __webpack_exports__DetrObjectDetectionOutput = __webpack_exports__.DetrObjectDetectionOutput;
    __webpack_exports__DetrPreTrainedModel = __webpack_exports__.DetrPreTrainedModel;
    __webpack_exports__DetrSegmentationOutput = __webpack_exports__.DetrSegmentationOutput;
    __webpack_exports__Dinov2ForImageClassification = __webpack_exports__.Dinov2ForImageClassification;
    __webpack_exports__Dinov2Model = __webpack_exports__.Dinov2Model;
    __webpack_exports__Dinov2PreTrainedModel = __webpack_exports__.Dinov2PreTrainedModel;
    __webpack_exports__Dinov2WithRegistersForImageClassification = __webpack_exports__.Dinov2WithRegistersForImageClassification;
    __webpack_exports__Dinov2WithRegistersModel = __webpack_exports__.Dinov2WithRegistersModel;
    __webpack_exports__Dinov2WithRegistersPreTrainedModel = __webpack_exports__.Dinov2WithRegistersPreTrainedModel;
    __webpack_exports__DistilBertForMaskedLM = __webpack_exports__.DistilBertForMaskedLM;
    __webpack_exports__DistilBertForQuestionAnswering = __webpack_exports__.DistilBertForQuestionAnswering;
    __webpack_exports__DistilBertForSequenceClassification = __webpack_exports__.DistilBertForSequenceClassification;
    __webpack_exports__DistilBertForTokenClassification = __webpack_exports__.DistilBertForTokenClassification;
    __webpack_exports__DistilBertModel = __webpack_exports__.DistilBertModel;
    __webpack_exports__DistilBertPreTrainedModel = __webpack_exports__.DistilBertPreTrainedModel;
    __webpack_exports__DistilBertTokenizer = __webpack_exports__.DistilBertTokenizer;
    __webpack_exports__DocumentQuestionAnsweringPipeline = __webpack_exports__.DocumentQuestionAnsweringPipeline;
    __webpack_exports__DonutFeatureExtractor = __webpack_exports__.DonutFeatureExtractor;
    __webpack_exports__DonutImageProcessor = __webpack_exports__.DonutImageProcessor;
    __webpack_exports__DonutSwinModel = __webpack_exports__.DonutSwinModel;
    __webpack_exports__DonutSwinPreTrainedModel = __webpack_exports__.DonutSwinPreTrainedModel;
    __webpack_exports__EfficientNetForImageClassification = __webpack_exports__.EfficientNetForImageClassification;
    __webpack_exports__EfficientNetImageProcessor = __webpack_exports__.EfficientNetImageProcessor;
    __webpack_exports__EfficientNetModel = __webpack_exports__.EfficientNetModel;
    __webpack_exports__EfficientNetPreTrainedModel = __webpack_exports__.EfficientNetPreTrainedModel;
    __webpack_exports__ElectraForMaskedLM = __webpack_exports__.ElectraForMaskedLM;
    __webpack_exports__ElectraForQuestionAnswering = __webpack_exports__.ElectraForQuestionAnswering;
    __webpack_exports__ElectraForSequenceClassification = __webpack_exports__.ElectraForSequenceClassification;
    __webpack_exports__ElectraForTokenClassification = __webpack_exports__.ElectraForTokenClassification;
    __webpack_exports__ElectraModel = __webpack_exports__.ElectraModel;
    __webpack_exports__ElectraPreTrainedModel = __webpack_exports__.ElectraPreTrainedModel;
    __webpack_exports__ElectraTokenizer = __webpack_exports__.ElectraTokenizer;
    __webpack_exports__EncodecFeatureExtractor = __webpack_exports__.EncodecFeatureExtractor;
    __webpack_exports__EosTokenCriteria = __webpack_exports__.EosTokenCriteria;
    __webpack_exports__EsmForMaskedLM = __webpack_exports__.EsmForMaskedLM;
    __webpack_exports__EsmForSequenceClassification = __webpack_exports__.EsmForSequenceClassification;
    __webpack_exports__EsmForTokenClassification = __webpack_exports__.EsmForTokenClassification;
    __webpack_exports__EsmModel = __webpack_exports__.EsmModel;
    __webpack_exports__EsmPreTrainedModel = __webpack_exports__.EsmPreTrainedModel;
    __webpack_exports__EsmTokenizer = __webpack_exports__.EsmTokenizer;
    __webpack_exports__ExaoneForCausalLM = __webpack_exports__.ExaoneForCausalLM;
    __webpack_exports__ExaoneModel = __webpack_exports__.ExaoneModel;
    __webpack_exports__ExaonePreTrainedModel = __webpack_exports__.ExaonePreTrainedModel;
    __webpack_exports__FFT = __webpack_exports__.FFT;
    __webpack_exports__FalconForCausalLM = __webpack_exports__.FalconForCausalLM;
    __webpack_exports__FalconModel = __webpack_exports__.FalconModel;
    __webpack_exports__FalconPreTrainedModel = __webpack_exports__.FalconPreTrainedModel;
    __webpack_exports__FalconTokenizer = __webpack_exports__.FalconTokenizer;
    __webpack_exports__FastViTForImageClassification = __webpack_exports__.FastViTForImageClassification;
    __webpack_exports__FastViTModel = __webpack_exports__.FastViTModel;
    __webpack_exports__FastViTPreTrainedModel = __webpack_exports__.FastViTPreTrainedModel;
    __webpack_exports__FeatureExtractionPipeline = __webpack_exports__.FeatureExtractionPipeline;
    __webpack_exports__FeatureExtractor = __webpack_exports__.FeatureExtractor;
    __webpack_exports__FillMaskPipeline = __webpack_exports__.FillMaskPipeline;
    __webpack_exports__Florence2ForConditionalGeneration = __webpack_exports__.Florence2ForConditionalGeneration;
    __webpack_exports__Florence2PreTrainedModel = __webpack_exports__.Florence2PreTrainedModel;
    __webpack_exports__Florence2Processor = __webpack_exports__.Florence2Processor;
    __webpack_exports__ForcedBOSTokenLogitsProcessor = __webpack_exports__.ForcedBOSTokenLogitsProcessor;
    __webpack_exports__ForcedEOSTokenLogitsProcessor = __webpack_exports__.ForcedEOSTokenLogitsProcessor;
    __webpack_exports__GLPNFeatureExtractor = __webpack_exports__.GLPNFeatureExtractor;
    __webpack_exports__GLPNForDepthEstimation = __webpack_exports__.GLPNForDepthEstimation;
    __webpack_exports__GLPNModel = __webpack_exports__.GLPNModel;
    __webpack_exports__GLPNPreTrainedModel = __webpack_exports__.GLPNPreTrainedModel;
    __webpack_exports__GPT2LMHeadModel = __webpack_exports__.GPT2LMHeadModel;
    __webpack_exports__GPT2Model = __webpack_exports__.GPT2Model;
    __webpack_exports__GPT2PreTrainedModel = __webpack_exports__.GPT2PreTrainedModel;
    __webpack_exports__GPT2Tokenizer = __webpack_exports__.GPT2Tokenizer;
    __webpack_exports__GPTBigCodeForCausalLM = __webpack_exports__.GPTBigCodeForCausalLM;
    __webpack_exports__GPTBigCodeModel = __webpack_exports__.GPTBigCodeModel;
    __webpack_exports__GPTBigCodePreTrainedModel = __webpack_exports__.GPTBigCodePreTrainedModel;
    __webpack_exports__GPTJForCausalLM = __webpack_exports__.GPTJForCausalLM;
    __webpack_exports__GPTJModel = __webpack_exports__.GPTJModel;
    __webpack_exports__GPTJPreTrainedModel = __webpack_exports__.GPTJPreTrainedModel;
    __webpack_exports__GPTNeoForCausalLM = __webpack_exports__.GPTNeoForCausalLM;
    __webpack_exports__GPTNeoModel = __webpack_exports__.GPTNeoModel;
    __webpack_exports__GPTNeoPreTrainedModel = __webpack_exports__.GPTNeoPreTrainedModel;
    __webpack_exports__GPTNeoXForCausalLM = __webpack_exports__.GPTNeoXForCausalLM;
    __webpack_exports__GPTNeoXModel = __webpack_exports__.GPTNeoXModel;
    __webpack_exports__GPTNeoXPreTrainedModel = __webpack_exports__.GPTNeoXPreTrainedModel;
    __webpack_exports__GPTNeoXTokenizer = __webpack_exports__.GPTNeoXTokenizer;
    __webpack_exports__Gemma2ForCausalLM = __webpack_exports__.Gemma2ForCausalLM;
    __webpack_exports__Gemma2Model = __webpack_exports__.Gemma2Model;
    __webpack_exports__Gemma2PreTrainedModel = __webpack_exports__.Gemma2PreTrainedModel;
    __webpack_exports__Gemma3ForCausalLM = __webpack_exports__.Gemma3ForCausalLM;
    __webpack_exports__Gemma3Model = __webpack_exports__.Gemma3Model;
    __webpack_exports__Gemma3PreTrainedModel = __webpack_exports__.Gemma3PreTrainedModel;
    __webpack_exports__GemmaForCausalLM = __webpack_exports__.GemmaForCausalLM;
    __webpack_exports__GemmaModel = __webpack_exports__.GemmaModel;
    __webpack_exports__GemmaPreTrainedModel = __webpack_exports__.GemmaPreTrainedModel;
    __webpack_exports__GemmaTokenizer = __webpack_exports__.GemmaTokenizer;
    __webpack_exports__GlmForCausalLM = __webpack_exports__.GlmForCausalLM;
    __webpack_exports__GlmModel = __webpack_exports__.GlmModel;
    __webpack_exports__GlmPreTrainedModel = __webpack_exports__.GlmPreTrainedModel;
    __webpack_exports__GraniteForCausalLM = __webpack_exports__.GraniteForCausalLM;
    __webpack_exports__GraniteModel = __webpack_exports__.GraniteModel;
    __webpack_exports__GranitePreTrainedModel = __webpack_exports__.GranitePreTrainedModel;
    __webpack_exports__Grok1Tokenizer = __webpack_exports__.Grok1Tokenizer;
    __webpack_exports__GroundingDinoForObjectDetection = __webpack_exports__.GroundingDinoForObjectDetection;
    __webpack_exports__GroundingDinoImageProcessor = __webpack_exports__.GroundingDinoImageProcessor;
    __webpack_exports__GroundingDinoPreTrainedModel = __webpack_exports__.GroundingDinoPreTrainedModel;
    __webpack_exports__GroundingDinoProcessor = __webpack_exports__.GroundingDinoProcessor;
    __webpack_exports__GroupViTModel = __webpack_exports__.GroupViTModel;
    __webpack_exports__GroupViTPreTrainedModel = __webpack_exports__.GroupViTPreTrainedModel;
    __webpack_exports__HeliumForCausalLM = __webpack_exports__.HeliumForCausalLM;
    __webpack_exports__HeliumModel = __webpack_exports__.HeliumModel;
    __webpack_exports__HeliumPreTrainedModel = __webpack_exports__.HeliumPreTrainedModel;
    __webpack_exports__HerbertTokenizer = __webpack_exports__.HerbertTokenizer;
    __webpack_exports__HieraForImageClassification = __webpack_exports__.HieraForImageClassification;
    __webpack_exports__HieraModel = __webpack_exports__.HieraModel;
    __webpack_exports__HieraPreTrainedModel = __webpack_exports__.HieraPreTrainedModel;
    __webpack_exports__HubertForCTC = __webpack_exports__.HubertForCTC;
    __webpack_exports__HubertForSequenceClassification = __webpack_exports__.HubertForSequenceClassification;
    __webpack_exports__HubertModel = __webpack_exports__.HubertModel;
    __webpack_exports__HubertPreTrainedModel = __webpack_exports__.HubertPreTrainedModel;
    __webpack_exports__IJepaForImageClassification = __webpack_exports__.IJepaForImageClassification;
    __webpack_exports__IJepaModel = __webpack_exports__.IJepaModel;
    __webpack_exports__IJepaPreTrainedModel = __webpack_exports__.IJepaPreTrainedModel;
    __webpack_exports__Idefics3ForConditionalGeneration = __webpack_exports__.Idefics3ForConditionalGeneration;
    __webpack_exports__Idefics3ImageProcessor = __webpack_exports__.Idefics3ImageProcessor;
    __webpack_exports__Idefics3PreTrainedModel = __webpack_exports__.Idefics3PreTrainedModel;
    __webpack_exports__Idefics3Processor = __webpack_exports__.Idefics3Processor;
    __webpack_exports__ImageClassificationPipeline = __webpack_exports__.ImageClassificationPipeline;
    __webpack_exports__ImageFeatureExtractionPipeline = __webpack_exports__.ImageFeatureExtractionPipeline;
    __webpack_exports__ImageFeatureExtractor = __webpack_exports__.ImageFeatureExtractor;
    __webpack_exports__ImageMattingOutput = __webpack_exports__.ImageMattingOutput;
    __webpack_exports__ImageProcessor = __webpack_exports__.ImageProcessor;
    __webpack_exports__ImageSegmentationPipeline = __webpack_exports__.ImageSegmentationPipeline;
    __webpack_exports__ImageToImagePipeline = __webpack_exports__.ImageToImagePipeline;
    __webpack_exports__ImageToTextPipeline = __webpack_exports__.ImageToTextPipeline;
    __webpack_exports__InterruptableStoppingCriteria = __webpack_exports__.InterruptableStoppingCriteria;
    __webpack_exports__JAISLMHeadModel = __webpack_exports__.JAISLMHeadModel;
    __webpack_exports__JAISModel = __webpack_exports__.JAISModel;
    __webpack_exports__JAISPreTrainedModel = __webpack_exports__.JAISPreTrainedModel;
    __webpack_exports__JinaCLIPImageProcessor = __webpack_exports__.JinaCLIPImageProcessor;
    __webpack_exports__JinaCLIPModel = __webpack_exports__.JinaCLIPModel;
    __webpack_exports__JinaCLIPPreTrainedModel = __webpack_exports__.JinaCLIPPreTrainedModel;
    __webpack_exports__JinaCLIPProcessor = __webpack_exports__.JinaCLIPProcessor;
    __webpack_exports__JinaCLIPTextModel = __webpack_exports__.JinaCLIPTextModel;
    __webpack_exports__JinaCLIPVisionModel = __webpack_exports__.JinaCLIPVisionModel;
    __webpack_exports__LiteWhisperForConditionalGeneration = __webpack_exports__.LiteWhisperForConditionalGeneration;
    __webpack_exports__LlamaForCausalLM = __webpack_exports__.LlamaForCausalLM;
    __webpack_exports__LlamaModel = __webpack_exports__.LlamaModel;
    __webpack_exports__LlamaPreTrainedModel = __webpack_exports__.LlamaPreTrainedModel;
    __webpack_exports__LlamaTokenizer = __webpack_exports__.LlamaTokenizer;
    __webpack_exports__LlavaForConditionalGeneration = __webpack_exports__.LlavaForConditionalGeneration;
    __webpack_exports__LlavaOnevisionForConditionalGeneration = __webpack_exports__.LlavaOnevisionForConditionalGeneration;
    __webpack_exports__LlavaOnevisionImageProcessor = __webpack_exports__.LlavaOnevisionImageProcessor;
    __webpack_exports__LlavaPreTrainedModel = __webpack_exports__.LlavaPreTrainedModel;
    __webpack_exports__LogitsProcessor = __webpack_exports__.LogitsProcessor;
    __webpack_exports__LogitsProcessorList = __webpack_exports__.LogitsProcessorList;
    __webpack_exports__LogitsWarper = __webpack_exports__.LogitsWarper;
    __webpack_exports__LongT5ForConditionalGeneration = __webpack_exports__.LongT5ForConditionalGeneration;
    __webpack_exports__LongT5Model = __webpack_exports__.LongT5Model;
    __webpack_exports__LongT5PreTrainedModel = __webpack_exports__.LongT5PreTrainedModel;
    __webpack_exports__M2M100ForConditionalGeneration = __webpack_exports__.M2M100ForConditionalGeneration;
    __webpack_exports__M2M100Model = __webpack_exports__.M2M100Model;
    __webpack_exports__M2M100PreTrainedModel = __webpack_exports__.M2M100PreTrainedModel;
    __webpack_exports__M2M100Tokenizer = __webpack_exports__.M2M100Tokenizer;
    __webpack_exports__MBart50Tokenizer = __webpack_exports__.MBart50Tokenizer;
    __webpack_exports__MBartForCausalLM = __webpack_exports__.MBartForCausalLM;
    __webpack_exports__MBartForConditionalGeneration = __webpack_exports__.MBartForConditionalGeneration;
    __webpack_exports__MBartForSequenceClassification = __webpack_exports__.MBartForSequenceClassification;
    __webpack_exports__MBartModel = __webpack_exports__.MBartModel;
    __webpack_exports__MBartPreTrainedModel = __webpack_exports__.MBartPreTrainedModel;
    __webpack_exports__MBartTokenizer = __webpack_exports__.MBartTokenizer;
    __webpack_exports__MPNetForMaskedLM = __webpack_exports__.MPNetForMaskedLM;
    __webpack_exports__MPNetForQuestionAnswering = __webpack_exports__.MPNetForQuestionAnswering;
    __webpack_exports__MPNetForSequenceClassification = __webpack_exports__.MPNetForSequenceClassification;
    __webpack_exports__MPNetForTokenClassification = __webpack_exports__.MPNetForTokenClassification;
    __webpack_exports__MPNetModel = __webpack_exports__.MPNetModel;
    __webpack_exports__MPNetPreTrainedModel = __webpack_exports__.MPNetPreTrainedModel;
    __webpack_exports__MPNetTokenizer = __webpack_exports__.MPNetTokenizer;
    __webpack_exports__MT5ForConditionalGeneration = __webpack_exports__.MT5ForConditionalGeneration;
    __webpack_exports__MT5Model = __webpack_exports__.MT5Model;
    __webpack_exports__MT5PreTrainedModel = __webpack_exports__.MT5PreTrainedModel;
    __webpack_exports__MarianMTModel = __webpack_exports__.MarianMTModel;
    __webpack_exports__MarianModel = __webpack_exports__.MarianModel;
    __webpack_exports__MarianPreTrainedModel = __webpack_exports__.MarianPreTrainedModel;
    __webpack_exports__MarianTokenizer = __webpack_exports__.MarianTokenizer;
    __webpack_exports__Mask2FormerImageProcessor = __webpack_exports__.Mask2FormerImageProcessor;
    __webpack_exports__MaskFormerFeatureExtractor = __webpack_exports__.MaskFormerFeatureExtractor;
    __webpack_exports__MaskFormerForInstanceSegmentation = __webpack_exports__.MaskFormerForInstanceSegmentation;
    __webpack_exports__MaskFormerImageProcessor = __webpack_exports__.MaskFormerImageProcessor;
    __webpack_exports__MaskFormerModel = __webpack_exports__.MaskFormerModel;
    __webpack_exports__MaskFormerPreTrainedModel = __webpack_exports__.MaskFormerPreTrainedModel;
    __webpack_exports__MaskedLMOutput = __webpack_exports__.MaskedLMOutput;
    __webpack_exports__MaxLengthCriteria = __webpack_exports__.MaxLengthCriteria;
    __webpack_exports__Metric3DForDepthEstimation = __webpack_exports__.Metric3DForDepthEstimation;
    __webpack_exports__Metric3DPreTrainedModel = __webpack_exports__.Metric3DPreTrainedModel;
    __webpack_exports__Metric3Dv2ForDepthEstimation = __webpack_exports__.Metric3Dv2ForDepthEstimation;
    __webpack_exports__Metric3Dv2PreTrainedModel = __webpack_exports__.Metric3Dv2PreTrainedModel;
    __webpack_exports__MgpstrForSceneTextRecognition = __webpack_exports__.MgpstrForSceneTextRecognition;
    __webpack_exports__MgpstrModelOutput = __webpack_exports__.MgpstrModelOutput;
    __webpack_exports__MgpstrPreTrainedModel = __webpack_exports__.MgpstrPreTrainedModel;
    __webpack_exports__MgpstrProcessor = __webpack_exports__.MgpstrProcessor;
    __webpack_exports__MgpstrTokenizer = __webpack_exports__.MgpstrTokenizer;
    __webpack_exports__MimiDecoderModel = __webpack_exports__.MimiDecoderModel;
    __webpack_exports__MimiDecoderOutput = __webpack_exports__.MimiDecoderOutput;
    __webpack_exports__MimiEncoderModel = __webpack_exports__.MimiEncoderModel;
    __webpack_exports__MimiEncoderOutput = __webpack_exports__.MimiEncoderOutput;
    __webpack_exports__MimiModel = __webpack_exports__.MimiModel;
    __webpack_exports__MimiPreTrainedModel = __webpack_exports__.MimiPreTrainedModel;
    __webpack_exports__MinLengthLogitsProcessor = __webpack_exports__.MinLengthLogitsProcessor;
    __webpack_exports__MinNewTokensLengthLogitsProcessor = __webpack_exports__.MinNewTokensLengthLogitsProcessor;
    __webpack_exports__MistralForCausalLM = __webpack_exports__.MistralForCausalLM;
    __webpack_exports__MistralModel = __webpack_exports__.MistralModel;
    __webpack_exports__MistralPreTrainedModel = __webpack_exports__.MistralPreTrainedModel;
    __webpack_exports__MobileBertForMaskedLM = __webpack_exports__.MobileBertForMaskedLM;
    __webpack_exports__MobileBertForQuestionAnswering = __webpack_exports__.MobileBertForQuestionAnswering;
    __webpack_exports__MobileBertForSequenceClassification = __webpack_exports__.MobileBertForSequenceClassification;
    __webpack_exports__MobileBertModel = __webpack_exports__.MobileBertModel;
    __webpack_exports__MobileBertPreTrainedModel = __webpack_exports__.MobileBertPreTrainedModel;
    __webpack_exports__MobileBertTokenizer = __webpack_exports__.MobileBertTokenizer;
    __webpack_exports__MobileLLMForCausalLM = __webpack_exports__.MobileLLMForCausalLM;
    __webpack_exports__MobileLLMModel = __webpack_exports__.MobileLLMModel;
    __webpack_exports__MobileLLMPreTrainedModel = __webpack_exports__.MobileLLMPreTrainedModel;
    __webpack_exports__MobileNetV1FeatureExtractor = __webpack_exports__.MobileNetV1FeatureExtractor;
    __webpack_exports__MobileNetV1ForImageClassification = __webpack_exports__.MobileNetV1ForImageClassification;
    __webpack_exports__MobileNetV1ForSemanticSegmentation = __webpack_exports__.MobileNetV1ForSemanticSegmentation;
    __webpack_exports__MobileNetV1ImageProcessor = __webpack_exports__.MobileNetV1ImageProcessor;
    __webpack_exports__MobileNetV1Model = __webpack_exports__.MobileNetV1Model;
    __webpack_exports__MobileNetV1PreTrainedModel = __webpack_exports__.MobileNetV1PreTrainedModel;
    __webpack_exports__MobileNetV2FeatureExtractor = __webpack_exports__.MobileNetV2FeatureExtractor;
    __webpack_exports__MobileNetV2ForImageClassification = __webpack_exports__.MobileNetV2ForImageClassification;
    __webpack_exports__MobileNetV2ForSemanticSegmentation = __webpack_exports__.MobileNetV2ForSemanticSegmentation;
    __webpack_exports__MobileNetV2ImageProcessor = __webpack_exports__.MobileNetV2ImageProcessor;
    __webpack_exports__MobileNetV2Model = __webpack_exports__.MobileNetV2Model;
    __webpack_exports__MobileNetV2PreTrainedModel = __webpack_exports__.MobileNetV2PreTrainedModel;
    __webpack_exports__MobileNetV3FeatureExtractor = __webpack_exports__.MobileNetV3FeatureExtractor;
    __webpack_exports__MobileNetV3ForImageClassification = __webpack_exports__.MobileNetV3ForImageClassification;
    __webpack_exports__MobileNetV3ForSemanticSegmentation = __webpack_exports__.MobileNetV3ForSemanticSegmentation;
    __webpack_exports__MobileNetV3ImageProcessor = __webpack_exports__.MobileNetV3ImageProcessor;
    __webpack_exports__MobileNetV3Model = __webpack_exports__.MobileNetV3Model;
    __webpack_exports__MobileNetV3PreTrainedModel = __webpack_exports__.MobileNetV3PreTrainedModel;
    __webpack_exports__MobileNetV4FeatureExtractor = __webpack_exports__.MobileNetV4FeatureExtractor;
    __webpack_exports__MobileNetV4ForImageClassification = __webpack_exports__.MobileNetV4ForImageClassification;
    __webpack_exports__MobileNetV4ForSemanticSegmentation = __webpack_exports__.MobileNetV4ForSemanticSegmentation;
    __webpack_exports__MobileNetV4ImageProcessor = __webpack_exports__.MobileNetV4ImageProcessor;
    __webpack_exports__MobileNetV4Model = __webpack_exports__.MobileNetV4Model;
    __webpack_exports__MobileNetV4PreTrainedModel = __webpack_exports__.MobileNetV4PreTrainedModel;
    __webpack_exports__MobileViTFeatureExtractor = __webpack_exports__.MobileViTFeatureExtractor;
    __webpack_exports__MobileViTForImageClassification = __webpack_exports__.MobileViTForImageClassification;
    __webpack_exports__MobileViTImageProcessor = __webpack_exports__.MobileViTImageProcessor;
    __webpack_exports__MobileViTModel = __webpack_exports__.MobileViTModel;
    __webpack_exports__MobileViTPreTrainedModel = __webpack_exports__.MobileViTPreTrainedModel;
    __webpack_exports__MobileViTV2ForImageClassification = __webpack_exports__.MobileViTV2ForImageClassification;
    __webpack_exports__MobileViTV2Model = __webpack_exports__.MobileViTV2Model;
    __webpack_exports__MobileViTV2PreTrainedModel = __webpack_exports__.MobileViTV2PreTrainedModel;
    __webpack_exports__ModelOutput = __webpack_exports__.ModelOutput;
    __webpack_exports__ModernBertForMaskedLM = __webpack_exports__.ModernBertForMaskedLM;
    __webpack_exports__ModernBertForSequenceClassification = __webpack_exports__.ModernBertForSequenceClassification;
    __webpack_exports__ModernBertForTokenClassification = __webpack_exports__.ModernBertForTokenClassification;
    __webpack_exports__ModernBertModel = __webpack_exports__.ModernBertModel;
    __webpack_exports__ModernBertPreTrainedModel = __webpack_exports__.ModernBertPreTrainedModel;
    __webpack_exports__Moondream1ForConditionalGeneration = __webpack_exports__.Moondream1ForConditionalGeneration;
    __webpack_exports__MoonshineFeatureExtractor = __webpack_exports__.MoonshineFeatureExtractor;
    __webpack_exports__MoonshineForConditionalGeneration = __webpack_exports__.MoonshineForConditionalGeneration;
    __webpack_exports__MoonshineModel = __webpack_exports__.MoonshineModel;
    __webpack_exports__MoonshinePreTrainedModel = __webpack_exports__.MoonshinePreTrainedModel;
    __webpack_exports__MoonshineProcessor = __webpack_exports__.MoonshineProcessor;
    __webpack_exports__MptForCausalLM = __webpack_exports__.MptForCausalLM;
    __webpack_exports__MptModel = __webpack_exports__.MptModel;
    __webpack_exports__MptPreTrainedModel = __webpack_exports__.MptPreTrainedModel;
    __webpack_exports__MultiModalityCausalLM = __webpack_exports__.MultiModalityCausalLM;
    __webpack_exports__MultiModalityPreTrainedModel = __webpack_exports__.MultiModalityPreTrainedModel;
    __webpack_exports__MusicgenForCausalLM = __webpack_exports__.MusicgenForCausalLM;
    __webpack_exports__MusicgenForConditionalGeneration = __webpack_exports__.MusicgenForConditionalGeneration;
    __webpack_exports__MusicgenModel = __webpack_exports__.MusicgenModel;
    __webpack_exports__MusicgenPreTrainedModel = __webpack_exports__.MusicgenPreTrainedModel;
    __webpack_exports__NllbTokenizer = __webpack_exports__.NllbTokenizer;
    __webpack_exports__NoBadWordsLogitsProcessor = __webpack_exports__.NoBadWordsLogitsProcessor;
    __webpack_exports__NoRepeatNGramLogitsProcessor = __webpack_exports__.NoRepeatNGramLogitsProcessor;
    __webpack_exports__NomicBertModel = __webpack_exports__.NomicBertModel;
    __webpack_exports__NomicBertPreTrainedModel = __webpack_exports__.NomicBertPreTrainedModel;
    __webpack_exports__NougatImageProcessor = __webpack_exports__.NougatImageProcessor;
    __webpack_exports__NougatTokenizer = __webpack_exports__.NougatTokenizer;
    __webpack_exports__OPTForCausalLM = __webpack_exports__.OPTForCausalLM;
    __webpack_exports__OPTModel = __webpack_exports__.OPTModel;
    __webpack_exports__OPTPreTrainedModel = __webpack_exports__.OPTPreTrainedModel;
    __webpack_exports__ObjectDetectionPipeline = __webpack_exports__.ObjectDetectionPipeline;
    __webpack_exports__Olmo2ForCausalLM = __webpack_exports__.Olmo2ForCausalLM;
    __webpack_exports__Olmo2Model = __webpack_exports__.Olmo2Model;
    __webpack_exports__Olmo2PreTrainedModel = __webpack_exports__.Olmo2PreTrainedModel;
    __webpack_exports__OlmoForCausalLM = __webpack_exports__.OlmoForCausalLM;
    __webpack_exports__OlmoModel = __webpack_exports__.OlmoModel;
    __webpack_exports__OlmoPreTrainedModel = __webpack_exports__.OlmoPreTrainedModel;
    __webpack_exports__OpenELMForCausalLM = __webpack_exports__.OpenELMForCausalLM;
    __webpack_exports__OpenELMModel = __webpack_exports__.OpenELMModel;
    __webpack_exports__OpenELMPreTrainedModel = __webpack_exports__.OpenELMPreTrainedModel;
    __webpack_exports__OwlViTFeatureExtractor = __webpack_exports__.OwlViTFeatureExtractor;
    __webpack_exports__OwlViTForObjectDetection = __webpack_exports__.OwlViTForObjectDetection;
    __webpack_exports__OwlViTImageProcessor = __webpack_exports__.OwlViTImageProcessor;
    __webpack_exports__OwlViTModel = __webpack_exports__.OwlViTModel;
    __webpack_exports__OwlViTPreTrainedModel = __webpack_exports__.OwlViTPreTrainedModel;
    __webpack_exports__OwlViTProcessor = __webpack_exports__.OwlViTProcessor;
    __webpack_exports__Owlv2ForObjectDetection = __webpack_exports__.Owlv2ForObjectDetection;
    __webpack_exports__Owlv2ImageProcessor = __webpack_exports__.Owlv2ImageProcessor;
    __webpack_exports__Owlv2Model = __webpack_exports__.Owlv2Model;
    __webpack_exports__Owlv2PreTrainedModel = __webpack_exports__.Owlv2PreTrainedModel;
    __webpack_exports__PaliGemmaForConditionalGeneration = __webpack_exports__.PaliGemmaForConditionalGeneration;
    __webpack_exports__PaliGemmaPreTrainedModel = __webpack_exports__.PaliGemmaPreTrainedModel;
    __webpack_exports__PaliGemmaProcessor = __webpack_exports__.PaliGemmaProcessor;
    __webpack_exports__PatchTSMixerForPrediction = __webpack_exports__.PatchTSMixerForPrediction;
    __webpack_exports__PatchTSMixerModel = __webpack_exports__.PatchTSMixerModel;
    __webpack_exports__PatchTSMixerPreTrainedModel = __webpack_exports__.PatchTSMixerPreTrainedModel;
    __webpack_exports__PatchTSTForPrediction = __webpack_exports__.PatchTSTForPrediction;
    __webpack_exports__PatchTSTModel = __webpack_exports__.PatchTSTModel;
    __webpack_exports__PatchTSTPreTrainedModel = __webpack_exports__.PatchTSTPreTrainedModel;
    __webpack_exports__Phi3ForCausalLM = __webpack_exports__.Phi3ForCausalLM;
    __webpack_exports__Phi3Model = __webpack_exports__.Phi3Model;
    __webpack_exports__Phi3PreTrainedModel = __webpack_exports__.Phi3PreTrainedModel;
    __webpack_exports__Phi3VForCausalLM = __webpack_exports__.Phi3VForCausalLM;
    __webpack_exports__Phi3VImageProcessor = __webpack_exports__.Phi3VImageProcessor;
    __webpack_exports__Phi3VPreTrainedModel = __webpack_exports__.Phi3VPreTrainedModel;
    __webpack_exports__Phi3VProcessor = __webpack_exports__.Phi3VProcessor;
    __webpack_exports__PhiForCausalLM = __webpack_exports__.PhiForCausalLM;
    __webpack_exports__PhiModel = __webpack_exports__.PhiModel;
    __webpack_exports__PhiPreTrainedModel = __webpack_exports__.PhiPreTrainedModel;
    __webpack_exports__Pipeline = __webpack_exports__.Pipeline;
    __webpack_exports__PreTrainedModel = __webpack_exports__.PreTrainedModel;
    __webpack_exports__PreTrainedTokenizer = __webpack_exports__.PreTrainedTokenizer;
    __webpack_exports__PretrainedConfig = __webpack_exports__.PretrainedConfig;
    __webpack_exports__PretrainedMixin = __webpack_exports__.PretrainedMixin;
    __webpack_exports__Processor = __webpack_exports__.Processor;
    __webpack_exports__PvtForImageClassification = __webpack_exports__.PvtForImageClassification;
    __webpack_exports__PvtImageProcessor = __webpack_exports__.PvtImageProcessor;
    __webpack_exports__PvtModel = __webpack_exports__.PvtModel;
    __webpack_exports__PvtPreTrainedModel = __webpack_exports__.PvtPreTrainedModel;
    __webpack_exports__PyAnnoteFeatureExtractor = __webpack_exports__.PyAnnoteFeatureExtractor;
    __webpack_exports__PyAnnoteForAudioFrameClassification = __webpack_exports__.PyAnnoteForAudioFrameClassification;
    __webpack_exports__PyAnnoteModel = __webpack_exports__.PyAnnoteModel;
    __webpack_exports__PyAnnotePreTrainedModel = __webpack_exports__.PyAnnotePreTrainedModel;
    __webpack_exports__PyAnnoteProcessor = __webpack_exports__.PyAnnoteProcessor;
    __webpack_exports__QuestionAnsweringModelOutput = __webpack_exports__.QuestionAnsweringModelOutput;
    __webpack_exports__QuestionAnsweringPipeline = __webpack_exports__.QuestionAnsweringPipeline;
    __webpack_exports__Qwen2ForCausalLM = __webpack_exports__.Qwen2ForCausalLM;
    __webpack_exports__Qwen2Model = __webpack_exports__.Qwen2Model;
    __webpack_exports__Qwen2PreTrainedModel = __webpack_exports__.Qwen2PreTrainedModel;
    __webpack_exports__Qwen2Tokenizer = __webpack_exports__.Qwen2Tokenizer;
    __webpack_exports__Qwen2VLForConditionalGeneration = __webpack_exports__.Qwen2VLForConditionalGeneration;
    __webpack_exports__Qwen2VLImageProcessor = __webpack_exports__.Qwen2VLImageProcessor;
    __webpack_exports__Qwen2VLPreTrainedModel = __webpack_exports__.Qwen2VLPreTrainedModel;
    __webpack_exports__Qwen2VLProcessor = __webpack_exports__.Qwen2VLProcessor;
    __webpack_exports__Qwen3ForCausalLM = __webpack_exports__.Qwen3ForCausalLM;
    __webpack_exports__Qwen3Model = __webpack_exports__.Qwen3Model;
    __webpack_exports__Qwen3PreTrainedModel = __webpack_exports__.Qwen3PreTrainedModel;
    __webpack_exports__RFDetrForObjectDetection = __webpack_exports__.RFDetrForObjectDetection;
    __webpack_exports__RFDetrModel = __webpack_exports__.RFDetrModel;
    __webpack_exports__RFDetrObjectDetectionOutput = __webpack_exports__.RFDetrObjectDetectionOutput;
    __webpack_exports__RFDetrPreTrainedModel = __webpack_exports__.RFDetrPreTrainedModel;
    __webpack_exports__RTDetrForObjectDetection = __webpack_exports__.RTDetrForObjectDetection;
    __webpack_exports__RTDetrImageProcessor = __webpack_exports__.RTDetrImageProcessor;
    __webpack_exports__RTDetrModel = __webpack_exports__.RTDetrModel;
    __webpack_exports__RTDetrObjectDetectionOutput = __webpack_exports__.RTDetrObjectDetectionOutput;
    __webpack_exports__RTDetrPreTrainedModel = __webpack_exports__.RTDetrPreTrainedModel;
    __webpack_exports__RTDetrV2ForObjectDetection = __webpack_exports__.RTDetrV2ForObjectDetection;
    __webpack_exports__RTDetrV2Model = __webpack_exports__.RTDetrV2Model;
    __webpack_exports__RTDetrV2ObjectDetectionOutput = __webpack_exports__.RTDetrV2ObjectDetectionOutput;
    __webpack_exports__RTDetrV2PreTrainedModel = __webpack_exports__.RTDetrV2PreTrainedModel;
    __webpack_exports__RawAudio = __webpack_exports__.RawAudio;
    __webpack_exports__RawImage = __webpack_exports__.RawImage;
    __webpack_exports__RawVideo = __webpack_exports__.RawVideo;
    __webpack_exports__RawVideoFrame = __webpack_exports__.RawVideoFrame;
    __webpack_exports__RepetitionPenaltyLogitsProcessor = __webpack_exports__.RepetitionPenaltyLogitsProcessor;
    __webpack_exports__ResNetForImageClassification = __webpack_exports__.ResNetForImageClassification;
    __webpack_exports__ResNetModel = __webpack_exports__.ResNetModel;
    __webpack_exports__ResNetPreTrainedModel = __webpack_exports__.ResNetPreTrainedModel;
    __webpack_exports__RoFormerForMaskedLM = __webpack_exports__.RoFormerForMaskedLM;
    __webpack_exports__RoFormerForQuestionAnswering = __webpack_exports__.RoFormerForQuestionAnswering;
    __webpack_exports__RoFormerForSequenceClassification = __webpack_exports__.RoFormerForSequenceClassification;
    __webpack_exports__RoFormerForTokenClassification = __webpack_exports__.RoFormerForTokenClassification;
    __webpack_exports__RoFormerModel = __webpack_exports__.RoFormerModel;
    __webpack_exports__RoFormerPreTrainedModel = __webpack_exports__.RoFormerPreTrainedModel;
    __webpack_exports__RoFormerTokenizer = __webpack_exports__.RoFormerTokenizer;
    __webpack_exports__RobertaForMaskedLM = __webpack_exports__.RobertaForMaskedLM;
    __webpack_exports__RobertaForQuestionAnswering = __webpack_exports__.RobertaForQuestionAnswering;
    __webpack_exports__RobertaForSequenceClassification = __webpack_exports__.RobertaForSequenceClassification;
    __webpack_exports__RobertaForTokenClassification = __webpack_exports__.RobertaForTokenClassification;
    __webpack_exports__RobertaModel = __webpack_exports__.RobertaModel;
    __webpack_exports__RobertaPreTrainedModel = __webpack_exports__.RobertaPreTrainedModel;
    __webpack_exports__RobertaTokenizer = __webpack_exports__.RobertaTokenizer;
    __webpack_exports__SamImageProcessor = __webpack_exports__.SamImageProcessor;
    __webpack_exports__SamImageSegmentationOutput = __webpack_exports__.SamImageSegmentationOutput;
    __webpack_exports__SamModel = __webpack_exports__.SamModel;
    __webpack_exports__SamPreTrainedModel = __webpack_exports__.SamPreTrainedModel;
    __webpack_exports__SamProcessor = __webpack_exports__.SamProcessor;
    __webpack_exports__SapiensForDepthEstimation = __webpack_exports__.SapiensForDepthEstimation;
    __webpack_exports__SapiensForNormalEstimation = __webpack_exports__.SapiensForNormalEstimation;
    __webpack_exports__SapiensForSemanticSegmentation = __webpack_exports__.SapiensForSemanticSegmentation;
    __webpack_exports__SapiensPreTrainedModel = __webpack_exports__.SapiensPreTrainedModel;
    __webpack_exports__SeamlessM4TFeatureExtractor = __webpack_exports__.SeamlessM4TFeatureExtractor;
    __webpack_exports__SegformerFeatureExtractor = __webpack_exports__.SegformerFeatureExtractor;
    __webpack_exports__SegformerForImageClassification = __webpack_exports__.SegformerForImageClassification;
    __webpack_exports__SegformerForSemanticSegmentation = __webpack_exports__.SegformerForSemanticSegmentation;
    __webpack_exports__SegformerImageProcessor = __webpack_exports__.SegformerImageProcessor;
    __webpack_exports__SegformerModel = __webpack_exports__.SegformerModel;
    __webpack_exports__SegformerPreTrainedModel = __webpack_exports__.SegformerPreTrainedModel;
    __webpack_exports__Seq2SeqLMOutput = __webpack_exports__.Seq2SeqLMOutput;
    __webpack_exports__SequenceClassifierOutput = __webpack_exports__.SequenceClassifierOutput;
    __webpack_exports__SiglipImageProcessor = __webpack_exports__.SiglipImageProcessor;
    __webpack_exports__SiglipModel = __webpack_exports__.SiglipModel;
    __webpack_exports__SiglipPreTrainedModel = __webpack_exports__.SiglipPreTrainedModel;
    __webpack_exports__SiglipTextModel = __webpack_exports__.SiglipTextModel;
    __webpack_exports__SiglipTokenizer = __webpack_exports__.SiglipTokenizer;
    __webpack_exports__SiglipVisionModel = __webpack_exports__.SiglipVisionModel;
    __webpack_exports__SmolVLMForConditionalGeneration = __webpack_exports__.SmolVLMForConditionalGeneration;
    __webpack_exports__SmolVLMImageProcessor = __webpack_exports__.SmolVLMImageProcessor;
    __webpack_exports__SmolVLMProcessor = __webpack_exports__.SmolVLMProcessor;
    __webpack_exports__SnacDecoderModel = __webpack_exports__.SnacDecoderModel;
    __webpack_exports__SnacEncoderModel = __webpack_exports__.SnacEncoderModel;
    __webpack_exports__SnacFeatureExtractor = __webpack_exports__.SnacFeatureExtractor;
    __webpack_exports__SnacModel = __webpack_exports__.SnacModel;
    __webpack_exports__SnacPreTrainedModel = __webpack_exports__.SnacPreTrainedModel;
    __webpack_exports__SpeechT5FeatureExtractor = __webpack_exports__.SpeechT5FeatureExtractor;
    __webpack_exports__SpeechT5ForSpeechToText = __webpack_exports__.SpeechT5ForSpeechToText;
    __webpack_exports__SpeechT5ForTextToSpeech = __webpack_exports__.SpeechT5ForTextToSpeech;
    __webpack_exports__SpeechT5HifiGan = __webpack_exports__.SpeechT5HifiGan;
    __webpack_exports__SpeechT5Model = __webpack_exports__.SpeechT5Model;
    __webpack_exports__SpeechT5PreTrainedModel = __webpack_exports__.SpeechT5PreTrainedModel;
    __webpack_exports__SpeechT5Processor = __webpack_exports__.SpeechT5Processor;
    __webpack_exports__SpeechT5Tokenizer = __webpack_exports__.SpeechT5Tokenizer;
    __webpack_exports__SqueezeBertForMaskedLM = __webpack_exports__.SqueezeBertForMaskedLM;
    __webpack_exports__SqueezeBertForQuestionAnswering = __webpack_exports__.SqueezeBertForQuestionAnswering;
    __webpack_exports__SqueezeBertForSequenceClassification = __webpack_exports__.SqueezeBertForSequenceClassification;
    __webpack_exports__SqueezeBertModel = __webpack_exports__.SqueezeBertModel;
    __webpack_exports__SqueezeBertPreTrainedModel = __webpack_exports__.SqueezeBertPreTrainedModel;
    __webpack_exports__SqueezeBertTokenizer = __webpack_exports__.SqueezeBertTokenizer;
    __webpack_exports__StableLmForCausalLM = __webpack_exports__.StableLmForCausalLM;
    __webpack_exports__StableLmModel = __webpack_exports__.StableLmModel;
    __webpack_exports__StableLmPreTrainedModel = __webpack_exports__.StableLmPreTrainedModel;
    __webpack_exports__Starcoder2ForCausalLM = __webpack_exports__.Starcoder2ForCausalLM;
    __webpack_exports__Starcoder2Model = __webpack_exports__.Starcoder2Model;
    __webpack_exports__Starcoder2PreTrainedModel = __webpack_exports__.Starcoder2PreTrainedModel;
    __webpack_exports__StoppingCriteria = __webpack_exports__.StoppingCriteria;
    __webpack_exports__StoppingCriteriaList = __webpack_exports__.StoppingCriteriaList;
    __webpack_exports__StyleTextToSpeech2Model = __webpack_exports__.StyleTextToSpeech2Model;
    __webpack_exports__StyleTextToSpeech2PreTrainedModel = __webpack_exports__.StyleTextToSpeech2PreTrainedModel;
    __webpack_exports__SummarizationPipeline = __webpack_exports__.SummarizationPipeline;
    __webpack_exports__SuppressTokensAtBeginLogitsProcessor = __webpack_exports__.SuppressTokensAtBeginLogitsProcessor;
    __webpack_exports__Swin2SRForImageSuperResolution = __webpack_exports__.Swin2SRForImageSuperResolution;
    __webpack_exports__Swin2SRImageProcessor = __webpack_exports__.Swin2SRImageProcessor;
    __webpack_exports__Swin2SRModel = __webpack_exports__.Swin2SRModel;
    __webpack_exports__Swin2SRPreTrainedModel = __webpack_exports__.Swin2SRPreTrainedModel;
    __webpack_exports__SwinForImageClassification = __webpack_exports__.SwinForImageClassification;
    __webpack_exports__SwinForSemanticSegmentation = __webpack_exports__.SwinForSemanticSegmentation;
    __webpack_exports__SwinModel = __webpack_exports__.SwinModel;
    __webpack_exports__SwinPreTrainedModel = __webpack_exports__.SwinPreTrainedModel;
    __webpack_exports__T5ForConditionalGeneration = __webpack_exports__.T5ForConditionalGeneration;
    __webpack_exports__T5Model = __webpack_exports__.T5Model;
    __webpack_exports__T5PreTrainedModel = __webpack_exports__.T5PreTrainedModel;
    __webpack_exports__T5Tokenizer = __webpack_exports__.T5Tokenizer;
    __webpack_exports__TableTransformerForObjectDetection = __webpack_exports__.TableTransformerForObjectDetection;
    __webpack_exports__TableTransformerModel = __webpack_exports__.TableTransformerModel;
    __webpack_exports__TableTransformerObjectDetectionOutput = __webpack_exports__.TableTransformerObjectDetectionOutput;
    __webpack_exports__TableTransformerPreTrainedModel = __webpack_exports__.TableTransformerPreTrainedModel;
    __webpack_exports__TemperatureLogitsWarper = __webpack_exports__.TemperatureLogitsWarper;
    __webpack_exports__Tensor = __webpack_exports__.Tensor;
    __webpack_exports__Text2TextGenerationPipeline = __webpack_exports__.Text2TextGenerationPipeline;
    __webpack_exports__TextClassificationPipeline = __webpack_exports__.TextClassificationPipeline;
    __webpack_exports__TextGenerationPipeline = __webpack_exports__.TextGenerationPipeline;
    __webpack_exports__TextStreamer = __webpack_exports__.TextStreamer;
    __webpack_exports__TextToAudioPipeline = __webpack_exports__.TextToAudioPipeline;
    __webpack_exports__TokenClassificationPipeline = __webpack_exports__.TokenClassificationPipeline;
    __webpack_exports__TokenClassifierOutput = __webpack_exports__.TokenClassifierOutput;
    __webpack_exports__TokenizerModel = __webpack_exports__.TokenizerModel;
    __webpack_exports__TopKLogitsWarper = __webpack_exports__.TopKLogitsWarper;
    __webpack_exports__TopPLogitsWarper = __webpack_exports__.TopPLogitsWarper;
    __webpack_exports__TrOCRForCausalLM = __webpack_exports__.TrOCRForCausalLM;
    __webpack_exports__TrOCRPreTrainedModel = __webpack_exports__.TrOCRPreTrainedModel;
    __webpack_exports__TranslationPipeline = __webpack_exports__.TranslationPipeline;
    __webpack_exports__UltravoxModel = __webpack_exports__.UltravoxModel;
    __webpack_exports__UltravoxPreTrainedModel = __webpack_exports__.UltravoxPreTrainedModel;
    __webpack_exports__UltravoxProcessor = __webpack_exports__.UltravoxProcessor;
    __webpack_exports__UniSpeechForCTC = __webpack_exports__.UniSpeechForCTC;
    __webpack_exports__UniSpeechForSequenceClassification = __webpack_exports__.UniSpeechForSequenceClassification;
    __webpack_exports__UniSpeechModel = __webpack_exports__.UniSpeechModel;
    __webpack_exports__UniSpeechPreTrainedModel = __webpack_exports__.UniSpeechPreTrainedModel;
    __webpack_exports__UniSpeechSatForAudioFrameClassification = __webpack_exports__.UniSpeechSatForAudioFrameClassification;
    __webpack_exports__UniSpeechSatForCTC = __webpack_exports__.UniSpeechSatForCTC;
    __webpack_exports__UniSpeechSatForSequenceClassification = __webpack_exports__.UniSpeechSatForSequenceClassification;
    __webpack_exports__UniSpeechSatModel = __webpack_exports__.UniSpeechSatModel;
    __webpack_exports__UniSpeechSatPreTrainedModel = __webpack_exports__.UniSpeechSatPreTrainedModel;
    __webpack_exports__VLChatProcessor = __webpack_exports__.VLChatProcessor;
    __webpack_exports__VLMImageProcessor = __webpack_exports__.VLMImageProcessor;
    __webpack_exports__ViTFeatureExtractor = __webpack_exports__.ViTFeatureExtractor;
    __webpack_exports__ViTForImageClassification = __webpack_exports__.ViTForImageClassification;
    __webpack_exports__ViTImageProcessor = __webpack_exports__.ViTImageProcessor;
    __webpack_exports__ViTMAEModel = __webpack_exports__.ViTMAEModel;
    __webpack_exports__ViTMAEPreTrainedModel = __webpack_exports__.ViTMAEPreTrainedModel;
    __webpack_exports__ViTMSNForImageClassification = __webpack_exports__.ViTMSNForImageClassification;
    __webpack_exports__ViTMSNModel = __webpack_exports__.ViTMSNModel;
    __webpack_exports__ViTMSNPreTrainedModel = __webpack_exports__.ViTMSNPreTrainedModel;
    __webpack_exports__ViTModel = __webpack_exports__.ViTModel;
    __webpack_exports__ViTPreTrainedModel = __webpack_exports__.ViTPreTrainedModel;
    __webpack_exports__VisionEncoderDecoderModel = __webpack_exports__.VisionEncoderDecoderModel;
    __webpack_exports__VitMatteForImageMatting = __webpack_exports__.VitMatteForImageMatting;
    __webpack_exports__VitMatteImageProcessor = __webpack_exports__.VitMatteImageProcessor;
    __webpack_exports__VitMattePreTrainedModel = __webpack_exports__.VitMattePreTrainedModel;
    __webpack_exports__VitPoseForPoseEstimation = __webpack_exports__.VitPoseForPoseEstimation;
    __webpack_exports__VitPoseImageProcessor = __webpack_exports__.VitPoseImageProcessor;
    __webpack_exports__VitPosePreTrainedModel = __webpack_exports__.VitPosePreTrainedModel;
    __webpack_exports__VitsModel = __webpack_exports__.VitsModel;
    __webpack_exports__VitsModelOutput = __webpack_exports__.VitsModelOutput;
    __webpack_exports__VitsPreTrainedModel = __webpack_exports__.VitsPreTrainedModel;
    __webpack_exports__VitsTokenizer = __webpack_exports__.VitsTokenizer;
    __webpack_exports__Wav2Vec2BertForCTC = __webpack_exports__.Wav2Vec2BertForCTC;
    __webpack_exports__Wav2Vec2BertForSequenceClassification = __webpack_exports__.Wav2Vec2BertForSequenceClassification;
    __webpack_exports__Wav2Vec2BertModel = __webpack_exports__.Wav2Vec2BertModel;
    __webpack_exports__Wav2Vec2BertPreTrainedModel = __webpack_exports__.Wav2Vec2BertPreTrainedModel;
    __webpack_exports__Wav2Vec2CTCTokenizer = __webpack_exports__.Wav2Vec2CTCTokenizer;
    __webpack_exports__Wav2Vec2FeatureExtractor = __webpack_exports__.Wav2Vec2FeatureExtractor;
    __webpack_exports__Wav2Vec2ForAudioFrameClassification = __webpack_exports__.Wav2Vec2ForAudioFrameClassification;
    __webpack_exports__Wav2Vec2ForCTC = __webpack_exports__.Wav2Vec2ForCTC;
    __webpack_exports__Wav2Vec2ForSequenceClassification = __webpack_exports__.Wav2Vec2ForSequenceClassification;
    __webpack_exports__Wav2Vec2Model = __webpack_exports__.Wav2Vec2Model;
    __webpack_exports__Wav2Vec2PreTrainedModel = __webpack_exports__.Wav2Vec2PreTrainedModel;
    __webpack_exports__Wav2Vec2Processor = __webpack_exports__.Wav2Vec2Processor;
    __webpack_exports__Wav2Vec2ProcessorWithLM = __webpack_exports__.Wav2Vec2ProcessorWithLM;
    __webpack_exports__WavLMForAudioFrameClassification = __webpack_exports__.WavLMForAudioFrameClassification;
    __webpack_exports__WavLMForCTC = __webpack_exports__.WavLMForCTC;
    __webpack_exports__WavLMForSequenceClassification = __webpack_exports__.WavLMForSequenceClassification;
    __webpack_exports__WavLMForXVector = __webpack_exports__.WavLMForXVector;
    __webpack_exports__WavLMModel = __webpack_exports__.WavLMModel;
    __webpack_exports__WavLMPreTrainedModel = __webpack_exports__.WavLMPreTrainedModel;
    __webpack_exports__WeSpeakerFeatureExtractor = __webpack_exports__.WeSpeakerFeatureExtractor;
    __webpack_exports__WeSpeakerResNetModel = __webpack_exports__.WeSpeakerResNetModel;
    __webpack_exports__WeSpeakerResNetPreTrainedModel = __webpack_exports__.WeSpeakerResNetPreTrainedModel;
    __webpack_exports__WhisperFeatureExtractor = __webpack_exports__.WhisperFeatureExtractor;
    __webpack_exports__WhisperForConditionalGeneration = __webpack_exports__.WhisperForConditionalGeneration;
    __webpack_exports__WhisperModel = __webpack_exports__.WhisperModel;
    __webpack_exports__WhisperPreTrainedModel = __webpack_exports__.WhisperPreTrainedModel;
    __webpack_exports__WhisperProcessor = __webpack_exports__.WhisperProcessor;
    __webpack_exports__WhisperTextStreamer = __webpack_exports__.WhisperTextStreamer;
    __webpack_exports__WhisperTimeStampLogitsProcessor = __webpack_exports__.WhisperTimeStampLogitsProcessor;
    __webpack_exports__WhisperTokenizer = __webpack_exports__.WhisperTokenizer;
    __webpack_exports__XLMForQuestionAnswering = __webpack_exports__.XLMForQuestionAnswering;
    __webpack_exports__XLMForSequenceClassification = __webpack_exports__.XLMForSequenceClassification;
    __webpack_exports__XLMForTokenClassification = __webpack_exports__.XLMForTokenClassification;
    __webpack_exports__XLMModel = __webpack_exports__.XLMModel;
    __webpack_exports__XLMPreTrainedModel = __webpack_exports__.XLMPreTrainedModel;
    __webpack_exports__XLMRobertaForMaskedLM = __webpack_exports__.XLMRobertaForMaskedLM;
    __webpack_exports__XLMRobertaForQuestionAnswering = __webpack_exports__.XLMRobertaForQuestionAnswering;
    __webpack_exports__XLMRobertaForSequenceClassification = __webpack_exports__.XLMRobertaForSequenceClassification;
    __webpack_exports__XLMRobertaForTokenClassification = __webpack_exports__.XLMRobertaForTokenClassification;
    __webpack_exports__XLMRobertaModel = __webpack_exports__.XLMRobertaModel;
    __webpack_exports__XLMRobertaPreTrainedModel = __webpack_exports__.XLMRobertaPreTrainedModel;
    __webpack_exports__XLMRobertaTokenizer = __webpack_exports__.XLMRobertaTokenizer;
    __webpack_exports__XLMTokenizer = __webpack_exports__.XLMTokenizer;
    __webpack_exports__XLMWithLMHeadModel = __webpack_exports__.XLMWithLMHeadModel;
    __webpack_exports__XVectorOutput = __webpack_exports__.XVectorOutput;
    __webpack_exports__YolosFeatureExtractor = __webpack_exports__.YolosFeatureExtractor;
    __webpack_exports__YolosForObjectDetection = __webpack_exports__.YolosForObjectDetection;
    __webpack_exports__YolosImageProcessor = __webpack_exports__.YolosImageProcessor;
    __webpack_exports__YolosModel = __webpack_exports__.YolosModel;
    __webpack_exports__YolosObjectDetectionOutput = __webpack_exports__.YolosObjectDetectionOutput;
    __webpack_exports__YolosPreTrainedModel = __webpack_exports__.YolosPreTrainedModel;
    __webpack_exports__ZeroShotAudioClassificationPipeline = __webpack_exports__.ZeroShotAudioClassificationPipeline;
    __webpack_exports__ZeroShotClassificationPipeline = __webpack_exports__.ZeroShotClassificationPipeline;
    __webpack_exports__ZeroShotImageClassificationPipeline = __webpack_exports__.ZeroShotImageClassificationPipeline;
    __webpack_exports__ZeroShotObjectDetectionPipeline = __webpack_exports__.ZeroShotObjectDetectionPipeline;
    __webpack_exports__bankers_round = __webpack_exports__.bankers_round;
    __webpack_exports__cat = __webpack_exports__.cat;
    __webpack_exports__cos_sim = __webpack_exports__.cos_sim;
    __webpack_exports__dot = __webpack_exports__.dot;
    __webpack_exports__dynamic_time_warping = __webpack_exports__.dynamic_time_warping;
    __webpack_exports__env = __webpack_exports__.env;
    __webpack_exports__full = __webpack_exports__.full;
    __webpack_exports__full_like = __webpack_exports__.full_like;
    __webpack_exports__getKeyValueShapes = __webpack_exports__.getKeyValueShapes;
    __webpack_exports__hamming = __webpack_exports__.hamming;
    __webpack_exports__hanning = __webpack_exports__.hanning;
    __webpack_exports__interpolate = __webpack_exports__.interpolate;
    __webpack_exports__interpolate_4d = __webpack_exports__.interpolate_4d;
    __webpack_exports__interpolate_data = __webpack_exports__.interpolate_data;
    __webpack_exports__is_chinese_char = __webpack_exports__.is_chinese_char;
    __webpack_exports__layer_norm = __webpack_exports__.layer_norm;
    __webpack_exports__load_image = __webpack_exports__.load_image;
    __webpack_exports__load_video = __webpack_exports__.load_video;
    __webpack_exports__log_softmax = __webpack_exports__.log_softmax;
    __webpack_exports__magnitude = __webpack_exports__.magnitude;
    __webpack_exports__matmul = __webpack_exports__.matmul;
    __webpack_exports__max = __webpack_exports__.max;
    __webpack_exports__mean = __webpack_exports__.mean;
    __webpack_exports__mean_pooling = __webpack_exports__.mean_pooling;
    __webpack_exports__medianFilter = __webpack_exports__.medianFilter;
    __webpack_exports__mel_filter_bank = __webpack_exports__.mel_filter_bank;
    __webpack_exports__min = __webpack_exports__.min;
    __webpack_exports__ones = __webpack_exports__.ones;
    __webpack_exports__ones_like = __webpack_exports__.ones_like;
    __webpack_exports__permute = __webpack_exports__.permute;
    __webpack_exports__permute_data = __webpack_exports__.permute_data;
    __webpack_exports__pipeline = __webpack_exports__.pipeline;
    __webpack_exports__quantize_embeddings = __webpack_exports__.quantize_embeddings;
    __webpack_exports__rand = __webpack_exports__.rand;
    __webpack_exports__read_audio = __webpack_exports__.read_audio;
    __webpack_exports__rfft = __webpack_exports__.rfft;
    __webpack_exports__round = __webpack_exports__.round;
    __webpack_exports__slice = __webpack_exports__.slice;
    __webpack_exports__softmax = __webpack_exports__.softmax;
    __webpack_exports__spectrogram = __webpack_exports__.spectrogram;
    __webpack_exports__stack = __webpack_exports__.stack;
    __webpack_exports__std_mean = __webpack_exports__.std_mean;
    __webpack_exports__topk = __webpack_exports__.topk;
    __webpack_exports__window_function = __webpack_exports__.window_function;
    __webpack_exports__zeros = __webpack_exports__.zeros;
    __webpack_exports__zeros_like = __webpack_exports__.zeros_like;
  }
});

// node_modules/@chroma-core/default-embed/dist/default-embed.mjs
var default_embed_exports = {};
__export(default_embed_exports, {
  DefaultEmbeddingFunction: () => DefaultEmbeddingFunction
});
var import_ai_embeddings_common, DefaultEmbeddingFunction;
var init_default_embed = __esm({
  "node_modules/@chroma-core/default-embed/dist/default-embed.mjs"() {
    import_ai_embeddings_common = __toESM(require_dist(), 1);
    init_transformers_node();
    init_transformers_node();
    DefaultEmbeddingFunction = class _DefaultEmbeddingFunction {
      constructor(args = {}) {
        this.name = "default";
        this.progressCallback = void 0;
        const {
          modelName = "Xenova/all-MiniLM-L6-v2",
          revision = "main",
          dtype = void 0,
          progressCallback = void 0,
          quantized = false,
          wasm = false
        } = args;
        this.modelName = modelName;
        this.revision = revision;
        this.dtype = dtype || (quantized ? "uint8" : "fp32");
        this.quantized = quantized;
        this.progressCallback = progressCallback;
        this.wasm = wasm;
        if (this.wasm) {
          __webpack_exports__env.backends.onnx.backend = "wasm";
        }
      }
      static buildFromConfig(config) {
        return new _DefaultEmbeddingFunction(config);
      }
      async generate(texts) {
        const pipe = await __webpack_exports__pipeline("feature-extraction", this.modelName, {
          revision: this.revision,
          progress_callback: this.progressCallback,
          dtype: this.dtype
        });
        const output = await pipe(texts, { pooling: "mean", normalize: true });
        return output.tolist();
      }
      defaultSpace() {
        return "cosine";
      }
      supportedSpaces() {
        return ["cosine", "l2", "ip"];
      }
      getConfig() {
        return {
          model_name: this.modelName,
          revision: this.revision,
          dtype: this.dtype,
          quantized: this.quantized
        };
      }
      validateConfigUpdate(newConfig) {
        if (this.getConfig().model_name !== newConfig.model_name) {
          throw new Error(
            "The DefaultEmbeddingFunction's 'model' cannot be changed after initialization."
          );
        }
      }
      static validateConfig(config) {
        (0, import_ai_embeddings_common.validateConfigSchema)(config, "transformers");
      }
    };
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FleetingNotesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/views/FleetingNotesView.ts
var import_obsidian2 = require("obsidian");

// src/search/TextSearch.ts
var TextSearch = class {
  constructor(app) {
    this.app = app;
  }
  async search(query) {
    const files = this.app.vault.getMarkdownFiles();
    const results = [];
    const queryLower = query.toLowerCase();
    for (const file of files) {
      try {
        const content = await this.app.vault.cachedRead(file);
        const score = this.calculateTextScore(content, file.basename, queryLower);
        if (score > 0) {
          const preview = this.generatePreview(content, queryLower);
          results.push({
            file,
            title: file.basename,
            preview,
            score,
            created: new Date(file.stat.ctime),
            modified: new Date(file.stat.mtime)
          });
        }
      } catch (error) {
        console.error(`Error reading file ${file.path}:`, error);
      }
    }
    return results.sort((a, b) => b.score - a.score);
  }
  calculateTextScore(content, title, query) {
    const contentLower = content.toLowerCase();
    const titleLower = title.toLowerCase();
    let score = 0;
    if (titleLower.includes(query)) {
      score += 10;
      if (titleLower === query) {
        score += 20;
      }
    }
    const contentMatches = this.countOccurrences(contentLower, query);
    score += contentMatches * 2;
    const wordBoundaryRegex = new RegExp(`\\b${this.escapeRegExp(query)}\\b`, "gi");
    const wordMatches = (content.match(wordBoundaryRegex) || []).length;
    score += wordMatches * 3;
    const words = query.split(/\s+/);
    for (const word of words) {
      if (word.length > 2) {
        const fuzzyMatches = this.countOccurrences(contentLower, word.toLowerCase());
        score += fuzzyMatches * 0.5;
      }
    }
    const headerRegex = /^#+\s+(.*)$/gm;
    let headerMatch;
    while ((headerMatch = headerRegex.exec(content)) !== null) {
      if (headerMatch[1].toLowerCase().includes(query)) {
        score += 5;
      }
    }
    const daysSinceModified = (Date.now() - new Date(content).getTime()) / (1e3 * 60 * 60 * 24);
    if (daysSinceModified < 7) {
      score += 1;
    }
    return score;
  }
  countOccurrences(text, substring) {
    if (!substring)
      return 0;
    let count = 0;
    let pos = 0;
    while ((pos = text.indexOf(substring, pos)) !== -1) {
      count++;
      pos += substring.length;
    }
    return count;
  }
  generatePreview(content, query) {
    const lines = content.split("\n");
    const queryWords = query.split(/\s+/).filter((word) => word.length > 0);
    let bestLine = "";
    let bestScore = 0;
    for (const line of lines) {
      const lineLower = line.toLowerCase();
      let lineScore = 0;
      for (const word of queryWords) {
        if (lineLower.includes(word.toLowerCase())) {
          lineScore += word.length;
        }
      }
      if (lineScore > bestScore && line.trim().length > 0) {
        bestScore = lineScore;
        bestLine = line.trim();
      }
    }
    if (!bestLine) {
      for (const line of lines) {
        if (line.trim().length > 0 && !line.startsWith("#")) {
          bestLine = line.trim();
          break;
        }
      }
    }
    if (bestLine.length > 150) {
      const queryIndex = bestLine.toLowerCase().indexOf(query.toLowerCase());
      if (queryIndex !== -1) {
        const start = Math.max(0, queryIndex - 50);
        const end = Math.min(bestLine.length, queryIndex + query.length + 50);
        bestLine = (start > 0 ? "..." : "") + bestLine.substring(start, end) + (end < bestLine.length ? "..." : "");
      } else {
        bestLine = bestLine.substring(0, 147) + "...";
      }
    }
    return bestLine || "No preview available";
  }
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
  async searchInPath(query, folderPath) {
    const allResults = await this.search(query);
    return allResults.filter((result) => result.file.path.startsWith(folderPath));
  }
  async searchByTags(tags) {
    const files = this.app.vault.getMarkdownFiles();
    const results = [];
    for (const file of files) {
      try {
        const cache = this.app.metadataCache.getFileCache(file);
        const fileTags = cache?.tags?.map((t) => t.tag.substring(1)) || [];
        const matchingTags = tags.filter(
          (tag) => fileTags.some(
            (fileTag) => fileTag.toLowerCase().includes(tag.toLowerCase())
          )
        );
        if (matchingTags.length > 0) {
          const content = await this.app.vault.cachedRead(file);
          const preview = this.generatePreview(content, matchingTags.join(" "));
          results.push({
            file,
            title: file.basename,
            preview,
            score: matchingTags.length * 10,
            created: new Date(file.stat.ctime),
            modified: new Date(file.stat.mtime)
          });
        }
      } catch (error) {
        console.error(`Error reading file ${file.path}:`, error);
      }
    }
    return results.sort((a, b) => b.score - a.score);
  }
};

// src/search/SemanticSearch.ts
var import_obsidian = require("obsidian");
var LocalBiEncoderProvider = class {
  constructor() {
    this.modelName = "local-bi-encoder";
    this.dimensions = 384;
  }
  async generateEmbedding(text) {
    return this.generateDummyEmbedding(text);
  }
  getDimensions() {
    return this.dimensions;
  }
  getModelName() {
    return this.modelName;
  }
  generateDummyEmbedding(text) {
    const words = text.toLowerCase().split(/\s+/);
    const embedding = new Array(this.dimensions).fill(0);
    const textLength = text.length;
    const wordCount = words.length;
    const avgWordLength = textLength / Math.max(wordCount, 1);
    let hash = 0;
    for (let i = 0; i < text.length; i++) {
      const char = text.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    for (let i = 0; i < this.dimensions; i++) {
      const wordIndex = i % words.length;
      const word = words[wordIndex] || "";
      let value = Math.sin((hash + i) * 0.01) * 0.5;
      value += Math.cos(word.length * (i + 1) * 0.1) * 0.3;
      value += textLength % (i + 1) / 1e3;
      value += avgWordLength * 0.1 * Math.sin(i * 0.1);
      embedding[i] = Math.tanh(value);
    }
    const magnitude = Math.sqrt(embedding.reduce((sum, val) => sum + val * val, 0));
    return embedding.map((val) => val / magnitude);
  }
};
var SemanticSearch = class {
  constructor(app) {
    this.dbManager = null;
    this.app = app;
    this.embeddingProvider = new LocalBiEncoderProvider();
  }
  async initialize(dbManager) {
    try {
      this.dbManager = dbManager;
      return await this.dbManager.testConnection();
    } catch (error) {
      console.error("Failed to initialize semantic search:", error);
      return false;
    }
  }
  async search(query) {
    if (!this.dbManager) {
      console.warn("Semantic search not available - no database connection");
      return [];
    }
    try {
      const queryEmbedding = await this.embeddingProvider.generateEmbedding(query);
      const similarNotes = await this.dbManager.searchSimilarNotes(queryEmbedding, 50, 0.5);
      const results = [];
      for (const noteData of similarNotes) {
        const file = this.app.vault.getAbstractFileByPath(noteData.path);
        if (file instanceof import_obsidian.TFile) {
          try {
            const content = await this.app.vault.cachedRead(file);
            const preview = this.generatePreview(content, query);
            results.push({
              file,
              title: noteData.title,
              preview,
              score: noteData.similarity * 100,
              created: noteData.created,
              modified: noteData.modified
            });
          } catch (error) {
            console.error(`Error reading file ${noteData.path}:`, error);
          }
        }
      }
      await this.dbManager.logSearch(query, "semantic", results.map((r) => r.file.path));
      return results;
    } catch (error) {
      console.error("Semantic search error:", error);
      return [];
    }
  }
  async indexNote(file) {
    if (!this.dbManager) {
      return false;
    }
    try {
      const content = await this.app.vault.cachedRead(file);
      const stat = file.stat;
      const noteData = {
        id: this.generateNoteId(file.path),
        path: file.path,
        title: file.basename,
        content,
        created: new Date(stat.ctime),
        modified: new Date(stat.mtime),
        size: stat.size,
        tags: this.extractTags(content)
      };
      const existingNote = await this.dbManager.getNoteByPath(file.path);
      if (existingNote) {
        await this.dbManager.updateNote(existingNote.id, noteData);
      } else {
        await this.dbManager.insertNote(noteData);
      }
      return true;
    } catch (error) {
      console.error(`Error indexing note ${file.path}:`, error);
      return false;
    }
  }
  async indexAllNotes() {
    const files = this.app.vault.getMarkdownFiles();
    let indexed = 0;
    let failed = 0;
    for (const file of files) {
      const success = await this.indexNote(file);
      if (success) {
        indexed++;
      } else {
        failed++;
      }
    }
    return { indexed, failed };
  }
  generatePreview(content, query) {
    const cleanContent = content.replace(/#+\s*/g, "").trim();
    return cleanContent.length > 150 ? cleanContent.substring(0, 147) + "..." : cleanContent;
  }
  extractTags(content) {
    const tagRegex = /#(\w+)/g;
    const tags = [];
    let match;
    while ((match = tagRegex.exec(content)) !== null) {
      tags.push(match[1]);
    }
    return [...new Set(tags)];
  }
  generateNoteId(path) {
    return btoa(path).replace(/[^a-zA-Z0-9]/g, "");
  }
  async close() {
    if (this.dbManager) {
      await this.dbManager.close();
    }
  }
};

// src/views/FleetingNotesView.ts
var VIEW_TYPE_FLEETING_NOTES = "fleeting-notes-view";
var FleetingNotesView = class extends import_obsidian2.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.currentSearchMode = "text";
    this.searchResults = [];
    this.plugin = plugin;
    this.textSearch = new TextSearch(this.app);
    this.semanticSearch = new SemanticSearch(this.app);
  }
  getViewType() {
    return VIEW_TYPE_FLEETING_NOTES;
  }
  getDisplayText() {
    return "Fleeting Notes";
  }
  getIcon() {
    return "search";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("fleeting-notes-panel");
    this.renderHeader(container);
    this.renderSearchInterface(container);
    this.renderResultsArea(container);
    this.renderVisualizationArea(container);
  }
  renderHeader(container) {
    const header = container.createDiv("fleeting-notes-header");
    const title = header.createEl("h3", { cls: "fleeting-notes-title" });
    title.textContent = "Fleeting Notes";
    const toggleBtn = header.createEl("button", { cls: "fleeting-notes-toggle" });
    toggleBtn.innerHTML = "\xD7";
    toggleBtn.addEventListener("click", () => {
      this.plugin.toggleFleetingNotesView();
    });
  }
  renderSearchInterface(container) {
    const searchContainer = container.createDiv("fleeting-notes-search-container");
    const searchInput = searchContainer.createEl("input", {
      cls: "fleeting-notes-search-input",
      attr: { placeholder: "Search fleeting notes...", type: "text" }
    });
    const toggleContainer = searchContainer.createDiv("fleeting-notes-search-toggle");
    const textBtn = toggleContainer.createEl("button");
    textBtn.textContent = "Text";
    textBtn.classList.add("active");
    const semanticBtn = toggleContainer.createEl("button");
    semanticBtn.textContent = "Semantic";
    searchInput.addEventListener("input", (e) => {
      const query = e.target.value;
      this.performSearch(query);
    });
    textBtn.addEventListener("click", () => {
      this.setSearchMode("text");
      textBtn.classList.add("active");
      semanticBtn.classList.remove("active");
    });
    semanticBtn.addEventListener("click", () => {
      this.setSearchMode("semantic");
      semanticBtn.classList.add("active");
      textBtn.classList.remove("active");
    });
  }
  renderResultsArea(container) {
    const resultsContainer = container.createDiv("fleeting-notes-results");
    resultsContainer.id = "fleeting-notes-results";
    this.updateResultsDisplay();
  }
  renderVisualizationArea(container) {
    const vizContainer = container.createDiv("fleeting-notes-visualization");
    const title = vizContainer.createDiv("fleeting-notes-viz-title");
    title.textContent = "Note Clusters";
    const vizArea = vizContainer.createDiv("fleeting-notes-viz-container");
    vizArea.id = "fleeting-notes-viz";
    vizArea.textContent = "Visualization will appear here";
  }
  async performSearch(query) {
    if (!query.trim()) {
      this.searchResults = [];
      this.updateResultsDisplay();
      return;
    }
    try {
      if (this.currentSearchMode === "text") {
        this.searchResults = await this.textSearch.search(query);
      } else {
        this.searchResults = await this.semanticSearch.search(query);
      }
      this.updateResultsDisplay();
    } catch (error) {
      console.error("Search error:", error);
      this.searchResults = [];
      this.updateResultsDisplay();
    }
  }
  setSearchMode(mode) {
    this.currentSearchMode = mode;
    const searchInput = this.containerEl.querySelector(".fleeting-notes-search-input");
    if (searchInput && searchInput.value.trim()) {
      this.performSearch(searchInput.value);
    }
  }
  updateResultsDisplay() {
    const resultsContainer = this.containerEl.querySelector("#fleeting-notes-results");
    if (!resultsContainer)
      return;
    resultsContainer.empty();
    if (this.searchResults.length === 0) {
      const emptyState = resultsContainer.createDiv("fleeting-notes-empty-state");
      emptyState.textContent = "No results found";
      return;
    }
    this.searchResults.forEach((result) => {
      const resultItem = resultsContainer.createDiv("fleeting-notes-result-item");
      const title = resultItem.createDiv("fleeting-notes-result-title");
      title.textContent = result.title;
      const preview = resultItem.createDiv("fleeting-notes-result-preview");
      preview.textContent = result.preview;
      const meta = resultItem.createDiv("fleeting-notes-result-meta");
      const score = meta.createSpan();
      score.textContent = `Score: ${result.score.toFixed(2)}`;
      const modified = meta.createSpan();
      modified.textContent = result.modified.toLocaleDateString();
      resultItem.addEventListener("click", () => {
        this.app.workspace.openLinkText(result.file.path, "", false);
      });
    });
  }
  async onClose() {
  }
};

// src/settings/SettingsTab.ts
var import_obsidian3 = require("obsidian");
var FleetingNotesSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Fleeting Notes Sorter Settings" });
    new import_obsidian3.Setting(containerEl).setName("Embedding Model").setDesc("Local embedding model to use for semantic search").addDropdown((dropdown) => dropdown.addOption("local", "Local bi-encoder").addOption("sentence-transformers", "Sentence Transformers").setValue(this.plugin.settings.embeddingModel).onChange(async (value) => {
      this.plugin.settings.embeddingModel = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Panel Visible by Default").setDesc("Show the fleeting notes panel when Obsidian starts").addToggle((toggle) => toggle.setValue(this.plugin.settings.panelVisible).onChange(async (value) => {
      this.plugin.settings.panelVisible = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Privacy & Local Processing" });
    const privacyNotice = containerEl.createDiv();
    privacyNotice.innerHTML = `
			<p>This plugin prioritizes your privacy by processing all embeddings locally:</p>
			<ul>
				<li>No data is sent to external APIs</li>
				<li>All semantic processing happens on your machine</li>
				<li>Your notes and embeddings stay under your control</li>
				<li>Database storage is local or self-hosted</li>
			</ul>
		`;
  }
};

// node_modules/chromadb/dist/chunk-NSSMTXJJ.mjs
var __defProp2 = Object.defineProperty;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField2 = (obj, key, value) => __defNormalProp2(obj, typeof key !== "symbol" ? key + "" : key, value);

// node_modules/chromadb/dist/chromadb.mjs
var process2 = __toESM(require("process"), 1);
if (typeof globalThis.Deno !== "undefined") {
  const OriginalRequest = globalThis.Request;
  const PatchedRequest = function(input, init) {
    if (init && typeof init === "object") {
      const cleanInit = { ...init };
      if ("client" in cleanInit) {
        delete cleanInit.client;
      }
      return new OriginalRequest(input, cleanInit);
    }
    return new OriginalRequest(input, init);
  };
  Object.setPrototypeOf(PatchedRequest, OriginalRequest);
  Object.defineProperty(PatchedRequest, "prototype", {
    value: OriginalRequest.prototype,
    writable: false
  });
  globalThis.Request = PatchedRequest;
}
var ChromaConnectionError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaConnectionError";
  }
};
var ChromaClientError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaClientError";
  }
};
var ChromaUnauthorizedError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaAuthError";
  }
};
var ChromaForbiddenError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaForbiddenError";
  }
};
var ChromaNotFoundError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaNotFoundError";
  }
};
var ChromaValueError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaValueError";
  }
};
var ChromaUniqueError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaUniqueError";
  }
};
var ChromaQuotaExceededError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaQuotaExceededError";
  }
};
var knownEmbeddingFunctions = /* @__PURE__ */ new Map();
var registerEmbeddingFunction = (name, fn) => {
  if (knownEmbeddingFunctions.has(name)) {
    throw new ChromaValueError(
      `Embedding function with name ${name} is already registered.`
    );
  }
  knownEmbeddingFunctions.set(name, fn);
};
var getEmbeddingFunction = async (collectionName, efConfig) => {
  if (!efConfig) {
    console.warn(
      `No embedding function configuration found for collection ${collectionName}. 'add' and 'query' will fail unless you provide them embeddings directly.`
    );
    return void 0;
  }
  if (efConfig.type === "legacy") {
    console.warn(
      `No embedding function configuration found for collection ${collectionName}. 'add' and 'query' will fail unless you provide them embeddings directly.`
    );
    return void 0;
  }
  const name = efConfig.name;
  const embeddingFunction = knownEmbeddingFunctions.get(name);
  if (!embeddingFunction) {
    console.warn(
      `Collection ${collectionName} was created with the ${embeddingFunction} embedding function. However, the @chroma-core/${embeddingFunction} package is not install. 'add' and 'query' will fail unless you provide them embeddings directly, or install the @chroma-core/${embeddingFunction} package.`
    );
    return void 0;
  }
  let constructorConfig = efConfig.type === "known" ? efConfig.config : {};
  try {
    if (embeddingFunction.buildFromConfig) {
      return embeddingFunction.buildFromConfig(constructorConfig);
    }
    console.warn(
      `Embedding function ${name} does not define a 'buildFromConfig' function. 'add' and 'query' will fail unless you provide them embeddings directly.`
    );
    return void 0;
  } catch (e) {
    console.warn(
      `Embedding function ${name} failed to build with config: ${constructorConfig}. 'add' and 'query' will fail unless you provide them embeddings directly. Error: ${e}`
    );
    return void 0;
  }
};
var serializeEmbeddingFunction = ({
  embeddingFunction,
  configEmbeddingFunction
}) => {
  if (embeddingFunction && configEmbeddingFunction) {
    throw new ChromaValueError(
      "Embedding function provided when already defined in the collection configuration"
    );
  }
  if (!embeddingFunction && !configEmbeddingFunction) {
    return void 0;
  }
  const ef = embeddingFunction || configEmbeddingFunction;
  if (!ef.getConfig || !ef.name || !ef.constructor.buildFromConfig) {
    return { type: "legacy" };
  }
  if (ef.validateConfig)
    ef.validateConfig(ef.getConfig());
  return {
    name: ef.name,
    type: "known",
    config: ef.getConfig()
  };
};
var getDefaultEFConfig = async () => {
  try {
    const { DefaultEmbeddingFunction: DefaultEmbeddingFunction2 } = await Promise.resolve().then(() => (init_default_embed(), default_embed_exports));
    if (!knownEmbeddingFunctions.has(new DefaultEmbeddingFunction2().name)) {
      registerEmbeddingFunction("default", DefaultEmbeddingFunction2);
    }
  } catch (e) {
    console.error(e);
    throw new Error(
      "Cannot instantiate a collection with the DefaultEmbeddingFunction. Please install @chroma-core/default-embed, or provide a different embedding function"
    );
  }
  return {
    name: "default",
    type: "known",
    config: {}
  };
};
var baseRecordSetFields = [
  "ids",
  "embeddings",
  "metadatas",
  "documents",
  "uris"
];
var recordSetFields = [...baseRecordSetFields, "ids"];
var IncludeEnum = /* @__PURE__ */ ((IncludeEnum2) => {
  IncludeEnum2["distances"] = "distances";
  IncludeEnum2["documents"] = "documents";
  IncludeEnum2["embeddings"] = "embeddings";
  IncludeEnum2["metadatas"] = "metadatas";
  IncludeEnum2["uris"] = "uris";
  return IncludeEnum2;
})(IncludeEnum || {});
var GetResult = class {
  /**
   * Creates a new GetResult instance.
   * @param data - The result data containing all fields
   */
  constructor({
    documents,
    embeddings,
    ids,
    include,
    metadatas,
    uris
  }) {
    this.documents = documents;
    this.embeddings = embeddings;
    this.ids = ids;
    this.include = include;
    this.metadatas = metadatas;
    this.uris = uris;
  }
  /**
   * Converts the result to a row-based format for easier iteration.
   * @returns Object containing include fields and array of record objects
   */
  rows() {
    return {
      include: this.include,
      records: this.ids.map((id, index) => {
        return {
          id,
          document: this.include.includes("documents") ? this.documents[index] : void 0,
          embedding: this.include.includes("embeddings") ? this.embeddings[index] : void 0,
          metadata: this.include.includes("metadatas") ? this.metadatas[index] : void 0,
          uri: this.include.includes("uris") ? this.uris[index] : void 0
        };
      })
    };
  }
};
var QueryResult = class {
  /**
   * Creates a new QueryResult instance.
   * @param data - The query result data containing all fields
   */
  constructor({
    distances,
    documents,
    embeddings,
    ids,
    include,
    metadatas,
    uris
  }) {
    this.distances = distances;
    this.documents = documents;
    this.embeddings = embeddings;
    this.ids = ids;
    this.include = include;
    this.metadatas = metadatas;
    this.uris = uris;
  }
  /**
   * Converts the query result to a row-based format for easier iteration.
   * @returns Object containing include fields and structured query results
   */
  rows() {
    const queries = [];
    for (let q2 = 0; q2 < this.ids.length; q2++) {
      const records = this.ids[q2].map((id, index) => {
        return {
          id,
          document: this.include.includes("documents") ? this.documents[q2][index] : void 0,
          embedding: this.include.includes("embeddings") ? this.embeddings[q2][index] : void 0,
          metadata: this.include.includes("metadatas") ? this.metadatas[q2][index] : void 0,
          uri: this.include.includes("uris") ? this.uris[q2][index] : void 0,
          distance: this.include.includes("distances") ? this.distances[q2][index] : void 0
        };
      });
      queries.push(records);
    }
    return {
      include: this.include,
      queries
    };
  }
};
var A = async (t, r) => {
  let e = typeof r == "function" ? await r(t) : r;
  if (e)
    return t.scheme === "bearer" ? `Bearer ${e}` : t.scheme === "basic" ? `Basic ${btoa(e)}` : e;
};
var R = { bodySerializer: (t) => JSON.stringify(t, (r, e) => typeof e == "bigint" ? e.toString() : e) };
var U = (t) => {
  switch (t) {
    case "label":
      return ".";
    case "matrix":
      return ";";
    case "simple":
      return ",";
    default:
      return "&";
  }
};
var _ = (t) => {
  switch (t) {
    case "form":
      return ",";
    case "pipeDelimited":
      return "|";
    case "spaceDelimited":
      return "%20";
    default:
      return ",";
  }
};
var D = (t) => {
  switch (t) {
    case "label":
      return ".";
    case "matrix":
      return ";";
    case "simple":
      return ",";
    default:
      return "&";
  }
};
var O = ({ allowReserved: t, explode: r, name: e, style: a, value: i }) => {
  if (!r) {
    let s = (t ? i : i.map((l) => encodeURIComponent(l))).join(_(a));
    switch (a) {
      case "label":
        return `.${s}`;
      case "matrix":
        return `;${e}=${s}`;
      case "simple":
        return s;
      default:
        return `${e}=${s}`;
    }
  }
  let o = U(a), n = i.map((s) => a === "label" || a === "simple" ? t ? s : encodeURIComponent(s) : y({ allowReserved: t, name: e, value: s })).join(o);
  return a === "label" || a === "matrix" ? o + n : n;
};
var y = ({ allowReserved: t, name: r, value: e }) => {
  if (e == null)
    return "";
  if (typeof e == "object")
    throw new Error("Deeply-nested arrays/objects aren\u2019t supported. Provide your own `querySerializer()` to handle these.");
  return `${r}=${t ? e : encodeURIComponent(e)}`;
};
var q = ({ allowReserved: t, explode: r, name: e, style: a, value: i }) => {
  if (i instanceof Date)
    return `${e}=${i.toISOString()}`;
  if (a !== "deepObject" && !r) {
    let s = [];
    Object.entries(i).forEach(([f, u]) => {
      s = [...s, f, t ? u : encodeURIComponent(u)];
    });
    let l = s.join(",");
    switch (a) {
      case "form":
        return `${e}=${l}`;
      case "label":
        return `.${l}`;
      case "matrix":
        return `;${e}=${l}`;
      default:
        return l;
    }
  }
  let o = D(a), n = Object.entries(i).map(([s, l]) => y({ allowReserved: t, name: a === "deepObject" ? `${e}[${s}]` : s, value: l })).join(o);
  return a === "label" || a === "matrix" ? o + n : n;
};
var H = /\{[^{}]+\}/g;
var B = ({ path: t, url: r }) => {
  let e = r, a = r.match(H);
  if (a)
    for (let i of a) {
      let o = false, n = i.substring(1, i.length - 1), s = "simple";
      n.endsWith("*") && (o = true, n = n.substring(0, n.length - 1)), n.startsWith(".") ? (n = n.substring(1), s = "label") : n.startsWith(";") && (n = n.substring(1), s = "matrix");
      let l = t[n];
      if (l == null)
        continue;
      if (Array.isArray(l)) {
        e = e.replace(i, O({ explode: o, name: n, style: s, value: l }));
        continue;
      }
      if (typeof l == "object") {
        e = e.replace(i, q({ explode: o, name: n, style: s, value: l }));
        continue;
      }
      if (s === "matrix") {
        e = e.replace(i, `;${y({ name: n, value: l })}`);
        continue;
      }
      let f = encodeURIComponent(s === "label" ? `.${l}` : l);
      e = e.replace(i, f);
    }
  return e;
};
var E = ({ allowReserved: t, array: r, object: e } = {}) => (i) => {
  let o = [];
  if (i && typeof i == "object")
    for (let n in i) {
      let s = i[n];
      if (s != null) {
        if (Array.isArray(s)) {
          o = [...o, O({ allowReserved: t, explode: true, name: n, style: "form", value: s, ...r })];
          continue;
        }
        if (typeof s == "object") {
          o = [...o, q({ allowReserved: t, explode: true, name: n, style: "deepObject", value: s, ...e })];
          continue;
        }
        o = [...o, y({ allowReserved: t, name: n, value: s })];
      }
    }
  return o.join("&");
};
var P = (t) => {
  if (!t)
    return "stream";
  let r = t.split(";")[0]?.trim();
  if (r) {
    if (r.startsWith("application/json") || r.endsWith("+json"))
      return "json";
    if (r === "multipart/form-data")
      return "formData";
    if (["application/", "audio/", "image/", "video/"].some((e) => r.startsWith(e)))
      return "blob";
    if (r.startsWith("text/"))
      return "text";
  }
};
var I = async ({ security: t, ...r }) => {
  for (let e of t) {
    let a = await A(e, r.auth);
    if (!a)
      continue;
    let i = e.name ?? "Authorization";
    switch (e.in) {
      case "query":
        r.query || (r.query = {}), r.query[i] = a;
        break;
      case "cookie":
        r.headers.append("Cookie", `${i}=${a}`);
        break;
      case "header":
      default:
        r.headers.set(i, a);
        break;
    }
    return;
  }
};
var S = (t) => W({ baseUrl: t.baseUrl, path: t.path, query: t.query, querySerializer: typeof t.querySerializer == "function" ? t.querySerializer : E(t.querySerializer), url: t.url });
var W = ({ baseUrl: t, path: r, query: e, querySerializer: a, url: i }) => {
  let o = i.startsWith("/") ? i : `/${i}`, n = (t ?? "") + o;
  r && (n = B({ path: r, url: n }));
  let s = e ? a(e) : "";
  return s.startsWith("?") && (s = s.substring(1)), s && (n += `?${s}`), n;
};
var C = (t, r) => {
  let e = { ...t, ...r };
  return e.baseUrl?.endsWith("/") && (e.baseUrl = e.baseUrl.substring(0, e.baseUrl.length - 1)), e.headers = x(t.headers, r.headers), e;
};
var x = (...t) => {
  let r = new Headers();
  for (let e of t) {
    if (!e || typeof e != "object")
      continue;
    let a = e instanceof Headers ? e.entries() : Object.entries(e);
    for (let [i, o] of a)
      if (o === null)
        r.delete(i);
      else if (Array.isArray(o))
        for (let n of o)
          r.append(i, n);
      else
        o !== void 0 && r.set(i, typeof o == "object" ? JSON.stringify(o) : o);
  }
  return r;
};
var h = class {
  constructor() {
    __publicField2(this, "_fns");
    this._fns = [];
  }
  clear() {
    this._fns = [];
  }
  exists(r) {
    return this._fns.indexOf(r) !== -1;
  }
  eject(r) {
    let e = this._fns.indexOf(r);
    e !== -1 && (this._fns = [...this._fns.slice(0, e), ...this._fns.slice(e + 1)]);
  }
  use(r) {
    this._fns = [...this._fns, r];
  }
};
var T = () => ({ error: new h(), request: new h(), response: new h() });
var N = E({ allowReserved: false, array: { explode: true, style: "form" }, object: { explode: true, style: "deepObject" } });
var Q = { "Content-Type": "application/json" };
var w = (t = {}) => ({ ...R, headers: Q, parseAs: "auto", querySerializer: N, ...t });
var J = (t = {}) => {
  let r = C(w(), t), e = () => ({ ...r }), a = (n) => (r = C(r, n), e()), i = T(), o = async (n) => {
    let s = { ...r, ...n, fetch: n.fetch ?? r.fetch ?? globalThis.fetch, headers: x(r.headers, n.headers) };
    s.security && await I({ ...s, security: s.security }), s.body && s.bodySerializer && (s.body = s.bodySerializer(s.body)), (s.body === void 0 || s.body === "") && s.headers.delete("Content-Type");
    let l = S(s), f = { redirect: "follow", ...s }, u = new Request(l, f);
    for (let p of i.request._fns)
      u = await p(u, s);
    let k = s.fetch, c = await k(u);
    for (let p of i.response._fns)
      c = await p(c, u, s);
    let m = { request: u, response: c };
    if (c.ok) {
      if (c.status === 204 || c.headers.get("Content-Length") === "0")
        return { data: {}, ...m };
      let p = (s.parseAs === "auto" ? P(c.headers.get("Content-Type")) : s.parseAs) ?? "json";
      if (p === "stream")
        return { data: c.body, ...m };
      let b = await c[p]();
      return p === "json" && (s.responseValidator && await s.responseValidator(b), s.responseTransformer && (b = await s.responseTransformer(b))), { data: b, ...m };
    }
    let g = await c.text();
    try {
      g = JSON.parse(g);
    } catch {
    }
    let d = g;
    for (let p of i.error._fns)
      d = await p(g, c, u, s);
    if (d = d || {}, s.throwOnError)
      throw d;
    return { error: d, ...m };
  };
  return { buildUrl: S, connect: (n) => o({ ...n, method: "CONNECT" }), delete: (n) => o({ ...n, method: "DELETE" }), get: (n) => o({ ...n, method: "GET" }), getConfig: e, head: (n) => o({ ...n, method: "HEAD" }), interceptors: i, options: (n) => o({ ...n, method: "OPTIONS" }), patch: (n) => o({ ...n, method: "PATCH" }), post: (n) => o({ ...n, method: "POST" }), put: (n) => o({ ...n, method: "PUT" }), request: o, setConfig: a, trace: (n) => o({ ...n, method: "TRACE" }) };
};
var client = J(w({
  baseUrl: "http://localhost:8000",
  throwOnError: true
}));
var DefaultService = class {
  /**
   * Retrieves the current user's identity, tenant, and databases.
   */
  static getUserIdentity(options) {
    return (options?.client ?? client).get({
      url: "/api/v2/auth/identity",
      ...options
    });
  }
  /**
   * Health check endpoint that returns 200 if the server and executor are ready
   */
  static healthcheck(options) {
    return (options?.client ?? client).get({
      url: "/api/v2/healthcheck",
      ...options
    });
  }
  /**
   * Heartbeat endpoint that returns a nanosecond timestamp of the current time.
   */
  static heartbeat(options) {
    return (options?.client ?? client).get({
      url: "/api/v2/heartbeat",
      ...options
    });
  }
  /**
   * Pre-flight checks endpoint reporting basic readiness info.
   */
  static preFlightChecks(options) {
    return (options?.client ?? client).get({
      url: "/api/v2/pre-flight-checks",
      ...options
    });
  }
  /**
   * Reset endpoint allowing authorized users to reset the database.
   */
  static reset(options) {
    return (options?.client ?? client).post({
      url: "/api/v2/reset",
      ...options
    });
  }
  /**
   * Creates a new tenant.
   */
  static createTenant(options) {
    return (options.client ?? client).post({
      url: "/api/v2/tenants",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers
      }
    });
  }
  /**
   * Returns an existing tenant by name.
   */
  static getTenant(options) {
    return (options.client ?? client).get({
      url: "/api/v2/tenants/{tenant_name}",
      ...options
    });
  }
  /**
   * Lists all databases for a given tenant.
   */
  static listDatabases(options) {
    return (options.client ?? client).get({
      url: "/api/v2/tenants/{tenant}/databases",
      ...options
    });
  }
  /**
   * Creates a new database for a given tenant.
   */
  static createDatabase(options) {
    return (options.client ?? client).post({
      url: "/api/v2/tenants/{tenant}/databases",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers
      }
    });
  }
  /**
   * Deletes a specific database.
   */
  static deleteDatabase(options) {
    return (options.client ?? client).delete({
      url: "/api/v2/tenants/{tenant}/databases/{database}",
      ...options
    });
  }
  /**
   * Retrieves a specific database by name.
   */
  static getDatabase(options) {
    return (options.client ?? client).get({
      url: "/api/v2/tenants/{tenant}/databases/{database}",
      ...options
    });
  }
  /**
   * Lists all collections in the specified database.
   */
  static listCollections(options) {
    return (options.client ?? client).get({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections",
      ...options
    });
  }
  /**
   * Creates a new collection under the specified database.
   */
  static createCollection(options) {
    return (options.client ?? client).post({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers
      }
    });
  }
  /**
   * Deletes a collection in a given database.
   */
  static deleteCollection(options) {
    return (options.client ?? client).delete({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}",
      ...options
    });
  }
  /**
   * Retrieves a collection by ID or name.
   */
  static getCollection(options) {
    return (options.client ?? client).get({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}",
      ...options
    });
  }
  /**
   * Updates an existing collection's name or metadata.
   */
  static updateCollection(options) {
    return (options.client ?? client).put({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers
      }
    });
  }
  /**
   * Adds records to a collection.
   */
  static collectionAdd(options) {
    return (options.client ?? client).post({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/add",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers
      }
    });
  }
  /**
   * Retrieves the number of records in a collection.
   */
  static collectionCount(options) {
    return (options.client ?? client).get({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/count",
      ...options
    });
  }
  /**
   * Deletes records in a collection. Can filter by IDs or metadata.
   */
  static collectionDelete(options) {
    return (options.client ?? client).post({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/delete",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers
      }
    });
  }
  /**
   * Forks an existing collection.
   */
  static forkCollection(options) {
    return (options.client ?? client).post({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/fork",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers
      }
    });
  }
  /**
   * Retrieves records from a collection by ID or metadata filter.
   */
  static collectionGet(options) {
    return (options.client ?? client).post({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/get",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers
      }
    });
  }
  /**
   * Query a collection in a variety of ways, including vector search, metadata filtering, and full-text search
   */
  static collectionQuery(options) {
    return (options.client ?? client).post({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/query",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers
      }
    });
  }
  /**
   * Updates records in a collection by ID.
   */
  static collectionUpdate(options) {
    return (options.client ?? client).post({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/update",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers
      }
    });
  }
  /**
   * Upserts records in a collection (create if not exists, otherwise update).
   */
  static collectionUpsert(options) {
    return (options.client ?? client).post({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/upsert",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers
      }
    });
  }
  /**
   * Retrieves the total number of collections in a given database.
   */
  static countCollections(options) {
    return (options.client ?? client).get({
      url: "/api/v2/tenants/{tenant}/databases/{database}/collections_count",
      ...options
    });
  }
  /**
   * Returns the version of the server.
   */
  static version(options) {
    return (options?.client ?? client).get({
      url: "/api/v2/version",
      ...options
    });
  }
};
var DEFAULT_TENANT = "default_tenant";
var DEFAULT_DATABASE = "default_database";
var defaultAdminClientArgs = {
  host: "localhost",
  port: 8e3,
  ssl: false
};
var defaultChromaClientArgs = {
  ...defaultAdminClientArgs,
  tenant: DEFAULT_TENANT,
  database: DEFAULT_DATABASE
};
var normalizeMethod = (method) => {
  if (method) {
    switch (method.toUpperCase()) {
      case "GET":
        return "GET";
      case "POST":
        return "POST";
      case "PUT":
        return "PUT";
      case "DELETE":
        return "DELETE";
      case "HEAD":
        return "HEAD";
      case "CONNECT":
        return "CONNECT";
      case "OPTIONS":
        return "OPTIONS";
      case "PATCH":
        return "PATCH";
      case "TRACE":
        return "TRACE";
      default:
        return void 0;
    }
  }
  return void 0;
};
var validateRecordSetLengthConsistency = (recordSet) => {
  const lengths = Object.entries(recordSet).filter(
    ([field, value]) => recordSetFields.includes(field) && value !== void 0
  ).map(([field, value]) => [field, value.length]);
  if (lengths.length === 0) {
    throw new ChromaValueError(
      `At least one of ${recordSetFields.join(", ")} must be provided`
    );
  }
  const zeroLength = lengths.filter(([_2, length]) => length === 0).map(([field, _2]) => field);
  if (zeroLength.length > 0) {
    throw new ChromaValueError(
      `Non-empty lists are required for ${zeroLength.join(", ")}`
    );
  }
  if (new Set(lengths.map(([_2, length]) => length)).size > 1) {
    throw new ChromaValueError(
      `Unequal lengths for fields ${lengths.map(([field, _2]) => field).join(", ")}`
    );
  }
};
var validateEmbeddings = ({
  embeddings,
  fieldName = "embeddings"
}) => {
  if (!Array.isArray(embeddings)) {
    throw new ChromaValueError(
      `Expected '${fieldName}' to be an array, but got ${typeof embeddings}`
    );
  }
  if (embeddings.length === 0) {
    throw new ChromaValueError(
      "Expected embeddings to be an array with at least one item"
    );
  }
  if (!embeddings.filter((e) => e.every((n) => typeof n === "number"))) {
    throw new ChromaValueError(
      "Expected each embedding to be an array of numbers"
    );
  }
  embeddings.forEach((embedding, i) => {
    if (embedding.length === 0) {
      throw new ChromaValueError(
        `Expected each embedding to be a non-empty array of numbers, but got an empty array at index ${i}`
      );
    }
  });
};
var validateDocuments = ({
  documents,
  nullable = false,
  fieldName = "documents"
}) => {
  if (!Array.isArray(documents)) {
    throw new ChromaValueError(
      `Expected '${fieldName}' to be an array, but got ${typeof documents}`
    );
  }
  if (documents.length === 0) {
    throw new ChromaValueError(
      `Expected '${fieldName}' to be a non-empty list`
    );
  }
  documents.forEach((document2) => {
    if (!nullable && typeof document2 !== "string" && !document2) {
      throw new ChromaValueError(
        `Expected each document to be a string, but got ${typeof document2}`
      );
    }
  });
};
var validateIDs = (ids) => {
  if (!Array.isArray(ids)) {
    throw new ChromaValueError(
      `Expected 'ids' to be an array, but got ${typeof ids}`
    );
  }
  if (ids.length === 0) {
    throw new ChromaValueError("Expected 'ids' to be a non-empty list");
  }
  const nonStrings = ids.map((id, i) => [id, i]).filter(([id, _2]) => typeof id !== "string").map(([_2, i]) => i);
  if (nonStrings.length > 0) {
    throw new ChromaValueError(
      `Found non-string IDs at ${nonStrings.join(", ")}`
    );
  }
  const seen = /* @__PURE__ */ new Set();
  const duplicates = ids.filter((id) => {
    if (seen.has(id)) {
      return id;
    }
    seen.add(id);
  });
  let message = "Expected IDs to be unique, but found duplicates of";
  if (duplicates.length > 0 && duplicates.length <= 5) {
    throw new ChromaValueError(`${message} ${duplicates.join(", ")}`);
  }
  if (duplicates.length > 0) {
    throw new ChromaValueError(
      `${message} ${duplicates.slice(0, 5).join(", ")}, ..., ${duplicates.slice(duplicates.length - 5).join(", ")}`
    );
  }
};
var validateMetadata = (metadata) => {
  if (!metadata) {
    return;
  }
  if (Object.keys(metadata).length === 0) {
    throw new ChromaValueError("Expected metadata to be non-empty");
  }
  if (!Object.values(metadata).every(
    (v) => v === null || v === void 0 || typeof v === "string" || typeof v === "number" || typeof v === "boolean"
  )) {
    throw new ChromaValueError(
      "Expected metadata to be a string, number, boolean, or nullable"
    );
  }
};
var validateMetadatas = (metadatas) => {
  if (!Array.isArray(metadatas)) {
    throw new ChromaValueError(
      `Expected metadatas to be an array, but got ${typeof metadatas}`
    );
  }
  metadatas.forEach((metadata) => validateMetadata(metadata));
};
var validateBaseRecordSet = ({
  recordSet,
  update = false,
  embeddingsField = "embeddings",
  documentsField = "documents"
}) => {
  if (!recordSet.embeddings && !recordSet.documents && !update) {
    throw new ChromaValueError(
      `At least one of '${embeddingsField}' and '${documentsField}' must be provided`
    );
  }
  if (recordSet.embeddings) {
    validateEmbeddings({
      embeddings: recordSet.embeddings,
      fieldName: embeddingsField
    });
  }
  if (recordSet.documents) {
    validateDocuments({
      documents: recordSet.documents,
      fieldName: documentsField
    });
  }
  if (recordSet.metadatas) {
    validateMetadatas(recordSet.metadatas);
  }
};
var validateWhere = (where) => {
  if (typeof where !== "object") {
    throw new ChromaValueError("Expected where to be a non-empty object");
  }
  if (Object.keys(where).length != 1) {
    throw new ChromaValueError(
      `Expected 'where' to have exactly one operator, but got ${Object.keys(where).length}`
    );
  }
  Object.entries(where).forEach(([key, value]) => {
    if (key !== "$and" && key !== "$or" && key !== "$in" && key !== "$nin" && !["string", "number", "boolean", "object"].includes(typeof value)) {
      throw new ChromaValueError(
        `Expected 'where' value to be a string, number, boolean, or an operator expression, but got ${value}`
      );
    }
    if (key === "$and" || key === "$or") {
      if (Object.keys(value).length <= 1) {
        throw new ChromaValueError(
          `Expected 'where' value for $and or $or to be a list of 'where' expressions, but got ${value}`
        );
      }
      value.forEach((w2) => validateWhere(w2));
      return;
    }
    if (typeof value === "object") {
      if (Object.keys(value).length != 1) {
        throw new ChromaValueError(
          `Expected operator expression to have one operator, but got ${value}`
        );
      }
      const [operator, operand] = Object.entries(value)[0];
      if (["$gt", "$gte", "$lt", "$lte"].includes(operator) && typeof operand !== "number") {
        throw new ChromaValueError(
          `Expected operand value to be a number for ${operator}, but got ${typeof operand}`
        );
      }
      if (["$in", "$nin"].includes(operator) && !Array.isArray(operand)) {
        throw new ChromaValueError(
          `Expected operand value to be an array for ${operator}, but got ${operand}`
        );
      }
      if (!["$gt", "$gte", "$lt", "$lte", "$ne", "$eq", "$in", "$nin"].includes(
        operator
      )) {
        throw new ChromaValueError(
          `Expected operator to be one of $gt, $gte, $lt, $lte, $ne, $eq, $in, $nin, but got ${operator}`
        );
      }
      if (!["string", "number", "boolean"].includes(typeof operand) && !Array.isArray(operand)) {
        throw new ChromaValueError(
          "Expected operand value to be a string, number, boolean, or a list of those types"
        );
      }
      if (Array.isArray(operand) && (operand.length === 0 || !operand.every((item) => typeof item === typeof operand[0]))) {
        throw new ChromaValueError(
          "Expected 'where' operand value to be a non-empty list and all values to be of the same type"
        );
      }
    }
  });
};
var validateWhereDocument = (whereDocument) => {
  if (typeof whereDocument !== "object") {
    throw new ChromaValueError(
      "Expected 'whereDocument' to be a non-empty object"
    );
  }
  if (Object.keys(whereDocument).length != 1) {
    throw new ChromaValueError(
      `Expected 'whereDocument' to have exactly one operator, but got ${whereDocument}`
    );
  }
  const [operator, operand] = Object.entries(whereDocument)[0];
  if (![
    "$contains",
    "$not_contains",
    "$matches",
    "$not_matches",
    "$regex",
    "$not_regex",
    "$and",
    "$or"
  ].includes(operator)) {
    throw new ChromaValueError(
      `Expected 'whereDocument' operator to be one of $contains, $not_contains, $matches, $not_matches, $regex, $not_regex, $and, or $or, but got ${operator}`
    );
  }
  if (operator === "$and" || operator === "$or") {
    if (!Array.isArray(operand)) {
      throw new ChromaValueError(
        `Expected operand for ${operator} to be a list of 'whereDocument' expressions, but got ${operand}`
      );
    }
    if (operand.length <= 1) {
      throw new ChromaValueError(
        `Expected 'whereDocument' operand for ${operator} to be a list with at least two 'whereDocument' expressions`
      );
    }
    operand.forEach((item) => validateWhereDocument(item));
  }
  if ((operand === "$contains" || operand === "$not_contains" || operand === "$regex" || operand === "$not_regex") && (typeof operator !== "string" || operator.length === 0)) {
    throw new ChromaValueError(
      `Expected operand for ${operator} to be a non empty string, but got ${operand}`
    );
  }
};
var validateInclude = ({
  include,
  exclude
}) => {
  if (!Array.isArray(include)) {
    throw new ChromaValueError("Expected 'include' to be a non-empty array");
  }
  const validValues = Object.keys(IncludeEnum);
  include.forEach((item) => {
    if (typeof item !== "string") {
      throw new ChromaValueError("Expected 'include' items to be strings");
    }
    if (!validValues.includes(item)) {
      throw new ChromaValueError(
        `Expected 'include' items to be one of ${validValues.join(
          ", "
        )}, but got ${item}`
      );
    }
    if (exclude?.includes(item)) {
      throw new ChromaValueError(`${item} is not allowed for this operation`);
    }
  });
};
var validateNResults = (nResults) => {
  if (typeof nResults !== "number") {
    throw new ChromaValueError(
      `Expected 'nResults' to be a number, but got ${typeof nResults}`
    );
  }
  if (nResults <= 0) {
    throw new ChromaValueError("Number of requested results has to positive");
  }
};
var processCreateCollectionConfig = async ({
  configuration,
  embeddingFunction
}) => {
  if (configuration?.hnsw && configuration?.spann) {
    throw new ChromaValueError(
      "Cannot specify both HNSW and SPANN configurations"
    );
  }
  const embeddingFunctionConfiguration = serializeEmbeddingFunction({
    embeddingFunction,
    configEmbeddingFunction: configuration?.embeddingFunction
  }) || await getDefaultEFConfig();
  return {
    ...configuration || {},
    embedding_function: embeddingFunctionConfiguration
  };
};
var processUpdateCollectionConfig = async ({
  collectionName,
  currentConfiguration,
  currentEmbeddingFunction,
  newConfiguration
}) => {
  if (newConfiguration.hnsw && typeof newConfiguration.hnsw !== "object") {
    throw new ChromaValueError(
      "Invalid HNSW config provided in UpdateCollectionConfiguration"
    );
  }
  if (newConfiguration.spann && typeof newConfiguration.spann !== "object") {
    throw new ChromaValueError(
      "Invalid SPANN config provided in UpdateCollectionConfiguration"
    );
  }
  const embeddingFunction = currentEmbeddingFunction || await getEmbeddingFunction(
    collectionName,
    currentConfiguration.embeddingFunction ?? void 0
  );
  const newEmbeddingFunction = newConfiguration.embeddingFunction;
  if (embeddingFunction && embeddingFunction.validateConfigUpdate && newEmbeddingFunction && newEmbeddingFunction.getConfig) {
    embeddingFunction.validateConfigUpdate(newEmbeddingFunction.getConfig());
  }
  return {
    updateConfiguration: {
      hnsw: newConfiguration.hnsw,
      spann: newConfiguration.spann,
      embedding_function: newEmbeddingFunction && serializeEmbeddingFunction({ embeddingFunction: newEmbeddingFunction })
    },
    updateEmbeddingFunction: newEmbeddingFunction
  };
};
var CollectionAPIImpl = class {
  /**
   * Creates a new CollectionAPIImpl instance.
   * @param options - Configuration for the collection API
   */
  constructor({
    chromaClient,
    apiClient,
    id,
    embeddingFunction
  }) {
    this.chromaClient = chromaClient;
    this.apiClient = apiClient;
    this.id = id;
    this._embeddingFunction = embeddingFunction;
  }
  get embeddingFunction() {
    return this._embeddingFunction;
  }
  set embeddingFunction(embeddingFunction) {
    this._embeddingFunction = embeddingFunction;
  }
  async path() {
    const clientPath = await this.chromaClient._path();
    return {
      ...clientPath,
      collection_id: this.id
    };
  }
  async embed(documents) {
    if (!this._embeddingFunction) {
      throw new ChromaValueError(
        "Embedding function must be defined for operations requiring embeddings."
      );
    }
    return await this._embeddingFunction.generate(documents);
  }
  async prepareRecords({
    recordSet,
    update = false
  }) {
    validateRecordSetLengthConsistency(recordSet);
    validateIDs(recordSet.ids);
    validateBaseRecordSet({ recordSet, update });
    if (!recordSet.embeddings && recordSet.documents) {
      recordSet.embeddings = await this.embed(recordSet.documents);
    }
  }
  validateGet(include, ids, where, whereDocument) {
    validateInclude({ include, exclude: ["distances"] });
    if (ids)
      validateIDs(ids);
    if (where)
      validateWhere(where);
    if (whereDocument)
      validateWhereDocument(whereDocument);
  }
  async prepareQuery(recordSet, include, ids, where, whereDocument, nResults) {
    validateBaseRecordSet({
      recordSet,
      embeddingsField: "queryEmbeddings",
      documentsField: "queryTexts"
    });
    validateInclude({ include });
    if (ids)
      validateIDs(ids);
    if (where)
      validateWhere(where);
    if (whereDocument)
      validateWhereDocument(whereDocument);
    if (nResults)
      validateNResults(nResults);
    let embeddings;
    if (!recordSet.embeddings) {
      embeddings = await this.embed(recordSet.documents);
    } else {
      embeddings = recordSet.embeddings;
    }
    return {
      ...recordSet,
      ids,
      embeddings
    };
  }
  validateDelete(ids, where, whereDocument) {
    if (ids)
      validateIDs(ids);
    if (where)
      validateWhere(where);
    if (whereDocument)
      validateWhereDocument(whereDocument);
  }
  async count() {
    const { data } = await DefaultService.collectionCount({
      client: this.apiClient,
      path: await this.path()
    });
    return data;
  }
  async add({
    ids,
    embeddings,
    metadatas,
    documents,
    uris
  }) {
    const recordSet = {
      ids,
      embeddings,
      documents,
      metadatas,
      uris
    };
    await this.prepareRecords({ recordSet });
    await DefaultService.collectionAdd({
      client: this.apiClient,
      path: await this.path(),
      body: {
        ids: recordSet.ids,
        embeddings: recordSet.embeddings,
        documents: recordSet.documents,
        metadatas: recordSet.metadatas,
        uris: recordSet.uris
      }
    });
  }
  async get(args = {}) {
    const {
      ids,
      where,
      limit,
      offset,
      whereDocument,
      include = ["documents", "metadatas"]
    } = args;
    this.validateGet(include, ids, where, whereDocument);
    const { data } = await DefaultService.collectionGet({
      client: this.apiClient,
      path: await this.path(),
      body: {
        ids,
        where,
        limit,
        offset,
        where_document: whereDocument,
        include
      }
    });
    return new GetResult({
      documents: data.documents ?? [],
      embeddings: data.embeddings ?? [],
      ids: data.ids,
      include: data.include,
      metadatas: data.metadatas ?? [],
      uris: data.uris ?? []
    });
  }
  async peek({ limit = 10 }) {
    return this.get({ limit });
  }
  async query({
    queryEmbeddings,
    queryTexts,
    queryURIs,
    ids,
    nResults = 10,
    where,
    whereDocument,
    include = ["metadatas", "documents", "distances"]
  }) {
    const recordSet = {
      embeddings: queryEmbeddings,
      documents: queryTexts,
      uris: queryURIs
    };
    const queryRecordSet = await this.prepareQuery(
      recordSet,
      include,
      ids,
      where,
      whereDocument,
      nResults
    );
    const { data } = await DefaultService.collectionQuery({
      client: this.apiClient,
      path: await this.path(),
      body: {
        ids: queryRecordSet.ids,
        include,
        n_results: nResults,
        query_embeddings: queryRecordSet.embeddings,
        where,
        where_document: whereDocument
      }
    });
    return new QueryResult({
      distances: data.distances ?? [],
      documents: data.documents ?? [],
      embeddings: data.embeddings ?? [],
      ids: data.ids ?? [],
      include: data.include,
      metadatas: data.metadatas ?? [],
      uris: data.uris ?? []
    });
  }
  async modify({
    name,
    metadata,
    configuration
  }) {
    const { data } = await DefaultService.getCollection({
      client: this.apiClient,
      path: await this.path()
    });
    if (metadata) {
      validateMetadata(metadata);
    }
    const { updateConfiguration, updateEmbeddingFunction } = configuration ? await processUpdateCollectionConfig({
      collectionName: data.name,
      currentConfiguration: data.configuration_json,
      newConfiguration: configuration,
      currentEmbeddingFunction: this.embeddingFunction
    }) : {};
    if (updateEmbeddingFunction) {
      this.embeddingFunction = updateEmbeddingFunction;
    }
    await DefaultService.updateCollection({
      client: this.apiClient,
      path: await this.path(),
      body: {
        new_name: name,
        new_metadata: metadata,
        new_configuration: updateConfiguration
      }
    });
  }
  async fork({ name }) {
    const { data } = await DefaultService.forkCollection({
      client: this.apiClient,
      path: await this.path(),
      body: { new_name: name }
    });
    return new CollectionImpl({
      chromaClient: this.chromaClient,
      apiClient: this.apiClient,
      name: data.name,
      id: data.name,
      embeddingFunction: this._embeddingFunction ? this._embeddingFunction : await getEmbeddingFunction(
        data.name,
        data.configuration_json.embedding_function ?? void 0
      ),
      metadata: data.metadata ?? void 0,
      configuration: data.configuration_json
    });
  }
  async update({
    ids,
    embeddings,
    metadatas,
    documents,
    uris
  }) {
    const recordSet = {
      ids,
      embeddings,
      documents,
      metadatas,
      uris
    };
    await this.prepareRecords({ recordSet, update: true });
    await DefaultService.collectionUpdate({
      client: this.apiClient,
      path: await this.path(),
      body: {
        ids: recordSet.ids,
        embeddings: recordSet.embeddings,
        metadatas: recordSet.metadatas,
        uris: recordSet.uris,
        documents: recordSet.documents
      }
    });
  }
  async upsert({
    ids,
    embeddings,
    metadatas,
    documents,
    uris
  }) {
    const recordSet = {
      ids,
      embeddings,
      documents,
      metadatas,
      uris
    };
    await this.prepareRecords({ recordSet, update: true });
    await DefaultService.collectionUpsert({
      client: this.apiClient,
      path: await this.path(),
      body: {
        ids: recordSet.ids,
        embeddings: recordSet.embeddings,
        metadatas: recordSet.metadatas,
        uris: recordSet.uris,
        documents: recordSet.documents
      }
    });
  }
  async delete({
    ids,
    where,
    whereDocument
  }) {
    this.validateDelete(ids, where, whereDocument);
    await DefaultService.collectionDelete({
      client: this.apiClient,
      path: await this.path(),
      body: {
        ids,
        where,
        where_document: whereDocument
      }
    });
  }
};
var CollectionImpl = class _CollectionImpl extends CollectionAPIImpl {
  /**
   * Creates a new CollectionImpl instance.
   * @param args - Collection configuration arguments
   */
  constructor({
    chromaClient,
    apiClient,
    name,
    id,
    embeddingFunction,
    metadata,
    configuration
  }) {
    super({ chromaClient, apiClient, id });
    this._name = name;
    this._embeddingFunction = embeddingFunction;
    this._metadata = metadata;
    this._configuration = configuration;
  }
  get name() {
    return this._name;
  }
  set name(name) {
    this._name = name;
  }
  get configuration() {
    return this._configuration;
  }
  set configuration(configuration) {
    this._configuration = configuration;
  }
  get metadata() {
    return this._metadata;
  }
  set metadata(metadata) {
    this._metadata = metadata;
  }
  async modify({
    name,
    metadata,
    configuration
  }) {
    if (name)
      this.name = name;
    if (metadata) {
      validateMetadata(metadata);
      this.metadata = metadata;
    }
    const { updateConfiguration, updateEmbeddingFunction } = configuration ? await processUpdateCollectionConfig({
      collectionName: this.name,
      currentConfiguration: this.configuration,
      newConfiguration: configuration,
      currentEmbeddingFunction: this.embeddingFunction
    }) : {};
    if (updateEmbeddingFunction) {
      this.embeddingFunction = updateEmbeddingFunction;
    }
    if (updateConfiguration) {
      this.configuration = {
        hnsw: { ...this.configuration.hnsw, ...updateConfiguration.hnsw },
        spann: { ...this.configuration.spann, ...updateConfiguration.spann },
        embeddingFunction: updateConfiguration.embedding_function
      };
    }
    await DefaultService.updateCollection({
      client: this.apiClient,
      path: await this.path(),
      body: {
        new_name: name,
        new_metadata: metadata,
        new_configuration: updateConfiguration
      }
    });
  }
  async fork({ name }) {
    const { data } = await DefaultService.forkCollection({
      client: this.apiClient,
      path: await this.path(),
      body: { new_name: name }
    });
    return new _CollectionImpl({
      chromaClient: this.chromaClient,
      apiClient: this.apiClient,
      name: data.name,
      id: data.name,
      embeddingFunction: this._embeddingFunction,
      metadata: data.metadata ?? void 0,
      configuration: data.configuration_json
    });
  }
};
var offlineError = (error) => {
  return Boolean(
    (error?.name === "TypeError" || error?.name === "FetchError") && (error.message?.includes("fetch failed") || error.message?.includes("Failed to fetch") || error.message?.includes("ENOTFOUND"))
  );
};
var chromaFetch = async (input, init) => {
  let response;
  try {
    response = await fetch(input, init);
  } catch (err) {
    if (offlineError(err)) {
      throw new ChromaConnectionError(
        "Failed to connect to chromadb. Make sure your server is running and try again. If you are running from a browser, make sure that your chromadb instance is configured to allow requests from the current origin using the CHROMA_SERVER_CORS_ALLOW_ORIGINS environment variable."
      );
    }
    throw new ChromaConnectionError("Failed to connect to Chroma");
  }
  if (response.ok) {
    return response;
  }
  switch (response.status) {
    case 400:
      let status = "Bad Request";
      try {
        const responseBody = await response.json();
        status = responseBody.message || status;
      } catch {
      }
      throw new ChromaClientError(
        `Bad request to ${input.url || "Chroma"} with status: ${status}`
      );
    case 401:
      throw new ChromaUnauthorizedError(`Unauthorized`);
    case 403:
      throw new ChromaForbiddenError(
        `You do not have permission to access the requested resource.`
      );
    case 404:
      throw new ChromaNotFoundError(
        `The requested resource could not be found`
      );
    case 409:
      throw new ChromaUniqueError("The resource already exists");
    case 422:
      const body = await response.json();
      if (body && body?.message.startsWith("Quota exceeded")) {
        throw new ChromaQuotaExceededError(body?.message);
      }
      break;
  }
  throw new ChromaConnectionError(
    `Unable to connect to the chromadb server. Please try again later.`
  );
};
var ChromaClient = class {
  /**
   * Creates a new ChromaClient instance.
   * @param args - Configuration options for the client
   */
  constructor(args = {}) {
    const {
      host = defaultChromaClientArgs.host,
      port = defaultChromaClientArgs.port,
      ssl = defaultChromaClientArgs.ssl,
      tenant = defaultChromaClientArgs.tenant,
      database = defaultChromaClientArgs.database,
      headers = defaultChromaClientArgs.headers,
      fetchOptions = defaultChromaClientArgs.fetchOptions
    } = args;
    const baseUrl = `${ssl ? "https" : "http"}://${host}:${port}`;
    this._tenant = tenant || process2.env.CHROMA_TENANT;
    this._database = database || process2.env.CHROMA_DATABASE;
    const configOptions = {
      ...fetchOptions,
      method: normalizeMethod(fetchOptions?.method),
      baseUrl,
      headers
    };
    this.apiClient = J(w(configOptions));
    this.apiClient.setConfig({ fetch: chromaFetch });
  }
  /**
   * Gets the current tenant name.
   * @returns The tenant name or undefined if not set
   */
  get tenant() {
    return this._tenant;
  }
  set tenant(tenant) {
    this._tenant = tenant;
  }
  /**
   * Gets the current database name.
   * @returns The database name or undefined if not set
   */
  get database() {
    return this._database;
  }
  set database(database) {
    this._database = database;
  }
  /** @ignore */
  async _path() {
    if (!this._tenant || !this._database) {
      const { tenant, databases } = await this.getUserIdentity();
      this._tenant = tenant;
      if (databases.length === 0) {
        throw new ChromaUnauthorizedError(
          `Your API key does not have access to any DBs for tenant ${this._tenant}`
        );
      }
      if (databases.length > 1 || databases[0] === "*") {
        throw new ChromaValueError(
          "Your API key is scoped to more than 1 DB. Please provide a DB name to the CloudClient constructor"
        );
      }
      this._database = databases[0];
    }
    return { tenant: this._tenant, database: this._database };
  }
  /**
   * Gets the user identity information including tenant and accessible databases.
   * @returns Promise resolving to user identity data
   */
  async getUserIdentity() {
    const { data } = await DefaultService.getUserIdentity({
      client: this.apiClient
    });
    return data;
  }
  /**
   * Sends a heartbeat request to check server connectivity.
   * @returns Promise resolving to the server's nanosecond heartbeat timestamp
   */
  async heartbeat() {
    const { data } = await DefaultService.heartbeat({
      client: this.apiClient
    });
    return data["nanosecond heartbeat"];
  }
  /**
   * Lists all collections in the current database.
   * @param args - Optional pagination parameters
   * @param args.limit - Maximum number of collections to return (default: 100)
   * @param args.offset - Number of collections to skip (default: 0)
   * @returns Promise resolving to an array of Collection instances
   */
  async listCollections(args) {
    const { limit = 100, offset = 0 } = args || {};
    const { data } = await DefaultService.listCollections({
      client: this.apiClient,
      path: await this._path(),
      query: { limit, offset }
    });
    return Promise.all(
      data.map(
        async (collection) => new CollectionImpl({
          chromaClient: this,
          apiClient: this.apiClient,
          name: collection.name,
          id: collection.id,
          embeddingFunction: await getEmbeddingFunction(
            collection.name,
            collection.configuration_json.embedding_function ?? void 0
          ),
          configuration: collection.configuration_json,
          metadata: collection.metadata ?? void 0
        })
      )
    );
  }
  /**
   * Gets the total number of collections in the current database.
   * @returns Promise resolving to the collection count
   */
  async countCollections() {
    const { data } = await DefaultService.countCollections({
      client: this.apiClient,
      path: await this._path()
    });
    return data;
  }
  /**
   * Creates a new collection with the specified configuration.
   * @param options - Collection creation options
   * @param options.name - The name of the collection
   * @param options.configuration - Optional collection configuration
   * @param options.metadata - Optional metadata for the collection
   * @param options.embeddingFunction - Optional embedding function to use. Defaults to `DefaultEmbeddingFunction` from @chroma-core/default-embed
   * @returns Promise resolving to the created Collection instance
   * @throws Error if a collection with the same name already exists
   */
  async createCollection({
    name,
    configuration,
    metadata,
    embeddingFunction
  }) {
    const collectionConfig = await processCreateCollectionConfig({
      configuration,
      embeddingFunction
    });
    const { data } = await DefaultService.createCollection({
      client: this.apiClient,
      path: await this._path(),
      body: {
        name,
        configuration: collectionConfig,
        metadata,
        get_or_create: false
      }
    });
    return new CollectionImpl({
      chromaClient: this,
      apiClient: this.apiClient,
      name,
      configuration: data.configuration_json,
      metadata,
      embeddingFunction: embeddingFunction ?? await getEmbeddingFunction(
        data.name,
        data.configuration_json.embedding_function ?? void 0
      ),
      id: data.id
    });
  }
  /**
   * Retrieves an existing collection by name.
   * @param options - Collection retrieval options
   * @param options.name - The name of the collection to retrieve
   * @param options.embeddingFunction - Optional embedding function. Should match the one used to create the collection.
   * @returns Promise resolving to the Collection instance
   * @throws Error if the collection does not exist
   */
  async getCollection({
    name,
    embeddingFunction
  }) {
    const { data } = await DefaultService.getCollection({
      client: this.apiClient,
      path: { ...await this._path(), collection_id: name }
    });
    return new CollectionImpl({
      chromaClient: this,
      apiClient: this.apiClient,
      name,
      configuration: data.configuration_json,
      metadata: data.metadata ?? void 0,
      embeddingFunction: embeddingFunction ? embeddingFunction : await getEmbeddingFunction(
        data.name,
        data.configuration_json.embedding_function ?? void 0
      ),
      id: data.id
    });
  }
  /**
   * Retrieves multiple collections by name.
   * @param items - Array of collection names or objects with name and optional embedding function (should match the ones used to create the collections)
   * @returns Promise resolving to an array of Collection instances
   */
  async getCollections(items) {
    if (items.length === 0)
      return [];
    let requestedCollections = items;
    if (typeof items[0] === "string") {
      requestedCollections = items.map((item) => {
        return { name: item, embeddingFunction: void 0 };
      });
    }
    let collections = requestedCollections;
    return Promise.all(
      collections.map(async (collection) => {
        await this.getCollection({ ...collection });
      })
    );
  }
  /**
   * Gets an existing collection or creates it if it doesn't exist.
   * @param options - Collection options
   * @param options.name - The name of the collection
   * @param options.configuration - Optional collection configuration (used only if creating)
   * @param options.metadata - Optional metadata for the collection (used only if creating)
   * @param options.embeddingFunction - Optional embedding function to use
   * @returns Promise resolving to the Collection instance
   */
  async getOrCreateCollection({
    name,
    configuration,
    metadata,
    embeddingFunction
  }) {
    const collectionConfig = await processCreateCollectionConfig({
      configuration,
      embeddingFunction
    });
    const { data } = await DefaultService.createCollection({
      client: this.apiClient,
      path: await this._path(),
      body: {
        name,
        configuration: collectionConfig,
        metadata,
        get_or_create: true
      }
    });
    return new CollectionImpl({
      chromaClient: this,
      apiClient: this.apiClient,
      name,
      configuration: data.configuration_json,
      metadata: data.metadata ?? void 0,
      embeddingFunction: embeddingFunction ?? await getEmbeddingFunction(
        name,
        data.configuration_json.embedding_function ?? void 0
      ),
      id: data.id
    });
  }
  /**
   * Deletes a collection and all its data.
   * @param options - Deletion options
   * @param options.name - The name of the collection to delete
   */
  async deleteCollection({ name }) {
    await DefaultService.deleteCollection({
      client: this.apiClient,
      path: { ...await this._path(), collection_id: name }
    });
  }
  /**
   * Resets the entire database, deleting all collections and data.
   * @returns Promise that resolves when the reset is complete
   * @warning This operation is irreversible and will delete all data
   */
  async reset() {
    await DefaultService.reset({
      client: this.apiClient
    });
  }
  /**
   * Gets the version of the Chroma server.
   * @returns Promise resolving to the server version string
   */
  async version() {
    const { data } = await DefaultService.version({
      client: this.apiClient
    });
    return data;
  }
  /**
   * Creates a thin CollectionAPI instance for direct collection operations by ID.
   * @param options - Collection API options
   * @param options.id - The collection ID
   * @param options.embeddingFunction - Optional embedding function to use
   * @returns A CollectionAPI instance for the specified collection
   */
  getCollectionById({
    id,
    embeddingFunction
  }) {
    return new CollectionAPIImpl({
      chromaClient: this,
      apiClient: this.apiClient,
      id,
      embeddingFunction
    });
  }
  /**
   * Creates multiple thin CollectionAPI instances for direct collection operations by ID.
   * @param items - Array of collection IDs or objects with ID and optional embedding function
   * @returns Array of CollectionAPI instances
   */
  getCollectionsById(items) {
    if (items.length === 0)
      return [];
    let requestedCollections = items;
    if (typeof items[0] === "string") {
      requestedCollections = items.map((item) => {
        return { id: item, embeddingFunction: void 0 };
      });
    }
    return requestedCollections.map(
      (requestedCollection) => new CollectionAPIImpl({
        chromaClient: this,
        apiClient: this.apiClient,
        id: requestedCollection.id,
        embeddingFunction: requestedCollection.embeddingFunction
      })
    );
  }
};

// src/database/queries.ts
var import_obsidian4 = require("obsidian");
var DatabaseManager = class {
  constructor(host = "localhost", port = 8e3) {
    this.notesCollection = null;
    if (host === "localhost" && port === 8e3) {
      this.client = new ChromaClient();
    } else {
      this.client = new ChromaClient({
        host,
        port
      });
    }
  }
  async close() {
  }
  async initialize() {
    try {
      this.notesCollection = await this.client.getOrCreateCollection({
        name: "notes",
        metadata: { description: "Obsidian notes with embeddings for semantic search" }
      });
      return true;
    } catch (error) {
      console.error("Failed to initialize ChromaDB collections:", error);
      return false;
    }
  }
  async testConnection() {
    try {
      const response = await (0, import_obsidian4.requestUrl)({
        url: "http://localhost:8000/api/v2/heartbeat",
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      });
      console.log("ChromaDB heartbeat:", response.json);
      return true;
    } catch (error) {
      console.error("ChromaDB connection test failed:", error);
      return false;
    }
  }
  async insertNote(noteData) {
    if (!this.notesCollection) {
      throw new Error("Collections not initialized. Call initialize() first.");
    }
    try {
      await this.notesCollection.add({
        ids: [noteData.id],
        documents: [noteData.content],
        metadatas: [{
          path: noteData.path,
          title: noteData.title,
          created: noteData.created.toISOString(),
          modified: noteData.modified.toISOString(),
          size: noteData.size,
          tags: JSON.stringify(noteData.tags)
        }]
      });
      return true;
    } catch (error) {
      console.error("Failed to add note to ChromaDB:", error);
      return false;
    }
  }
  async updateNote(id, noteData) {
    try {
      await this.deleteNote(id);
      if (noteData.id && noteData.content) {
        return await this.insertNote(noteData);
      }
      return false;
    } catch (error) {
      console.error("Failed to update note:", error);
      return false;
    }
  }
  async getNoteByPath(path) {
    if (!this.notesCollection) {
      return null;
    }
    try {
      const results = await this.notesCollection.get({
        where: { path }
      });
      if (results.ids && results.ids.length > 0) {
        const metadata = results.metadatas[0];
        return {
          id: results.ids[0],
          path: metadata.path,
          title: metadata.title,
          content: results.documents[0],
          created: new Date(metadata.created),
          modified: new Date(metadata.modified),
          size: metadata.size,
          tags: JSON.parse(metadata.tags || "[]")
        };
      }
      return null;
    } catch (error) {
      console.error("Failed to get note by path:", error);
      return null;
    }
  }
  async searchSimilarNotes(queryEmbedding, limit = 50, threshold = 0.5) {
    if (!this.notesCollection) {
      throw new Error("Collections not initialized. Call initialize() first.");
    }
    try {
      const results = await this.notesCollection.query({
        queryEmbeddings: [queryEmbedding],
        nResults: limit
      });
      const searchResults = [];
      if (results.documents && results.documents[0]) {
        for (let i = 0; i < results.documents[0].length; i++) {
          const distance = results.distances?.[0]?.[i] || 1;
          const similarity = 1 - distance;
          if (similarity >= threshold) {
            const metadata = results.metadatas?.[0]?.[i];
            searchResults.push({
              id: results.ids?.[0]?.[i] || "",
              path: metadata?.path || "",
              title: metadata?.title || "",
              content: results.documents[0][i],
              created: new Date(metadata?.created || Date.now()),
              modified: new Date(metadata?.modified || Date.now()),
              similarity
            });
          }
        }
      }
      return searchResults.sort((a, b) => b.similarity - a.similarity);
    } catch (error) {
      console.error("Failed to search similar notes:", error);
      return [];
    }
  }
  async insertEmbedding(embeddingData) {
    return true;
  }
  async deleteEmbeddingsByNoteId(noteId) {
    return true;
  }
  async deleteNote(id) {
    if (!this.notesCollection) {
      throw new Error("Collections not initialized. Call initialize() first.");
    }
    try {
      await this.notesCollection.delete({
        ids: [id]
      });
      return true;
    } catch (error) {
      console.error("Failed to delete note from ChromaDB:", error);
      return false;
    }
  }
  async logSearch(query, searchType, resultPaths) {
    console.log(`Search logged: ${searchType} query "${query}" returned ${resultPaths.length} results`);
    return true;
  }
  async getNotesCount() {
    if (!this.notesCollection) {
      return 0;
    }
    try {
      const count = await this.notesCollection.count();
      return count;
    } catch (error) {
      console.error("Failed to get notes count:", error);
      return 0;
    }
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  panelVisible: true,
  chromaHost: "localhost",
  chromaPort: 8e3,
  enableSemanticSearch: true,
  embeddingModel: "local"
};
var FleetingNotesPlugin = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.dbManager = null;
  }
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_FLEETING_NOTES,
      (leaf) => new FleetingNotesView(leaf, this)
    );
    this.addRibbonIcon("search", "Toggle Fleeting Notes", (evt) => {
      this.toggleFleetingNotesView();
    });
    this.addCommand({
      id: "toggle-fleeting-notes-view",
      name: "Toggle Fleeting Notes View",
      callback: () => {
        this.toggleFleetingNotesView();
      }
    });
    this.addSettingTab(new FleetingNotesSettingTab(this.app, this));
    await this.initializeDatabase();
    if (this.settings.panelVisible) {
      this.initFleetingNotesView();
    }
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_FLEETING_NOTES);
    if (this.dbManager) {
      this.dbManager.close();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async toggleFleetingNotesView() {
    const existing = this.app.workspace.getLeavesOfType(VIEW_TYPE_FLEETING_NOTES);
    if (existing.length > 0) {
      existing.forEach((leaf) => leaf.detach());
      this.settings.panelVisible = false;
    } else {
      await this.initFleetingNotesView();
      this.settings.panelVisible = true;
    }
    await this.saveSettings();
  }
  async initFleetingNotesView() {
    const { workspace } = this.app;
    let leaf = workspace.getRightLeaf(false);
    if (!leaf) {
      leaf = workspace.createLeafBySplit(workspace.getLeaf(), "vertical");
    }
    await leaf.setViewState({
      type: VIEW_TYPE_FLEETING_NOTES,
      active: true
    });
    workspace.revealLeaf(leaf);
  }
  async initializeDatabase() {
    try {
      this.dbManager = new DatabaseManager(this.settings.chromaHost, this.settings.chromaPort);
      const connectionTest = await this.dbManager.testConnection();
      if (connectionTest) {
        console.log("ChromaDB connection successful");
        const initResult = await this.dbManager.initialize();
        if (initResult) {
          console.log("ChromaDB collections initialized");
        } else {
          console.error("Failed to initialize ChromaDB collections");
        }
      } else {
        console.error("ChromaDB connection failed");
      }
    } catch (error) {
      console.error("Error initializing database:", error);
    }
  }
  async testDatabaseConnection() {
    if (!this.dbManager) {
      return false;
    }
    return await this.dbManager.testConnection();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
/*! Bundled license information:

@huggingface/transformers/dist/transformers.node.mjs:
  (*!*****************************!*\
    !*** ./src/transformers.js ***!
    \*****************************)
*/
